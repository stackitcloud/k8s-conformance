  I0428 15:27:50.791462      22 e2e.go:117] Starting e2e run "6426f1e2-5605-4610-a975-1487afbb13b8" on Ginkgo node 1
  Apr 28 15:27:50.841: INFO: Enabling in-tree volume drivers
Running Suite: Kubernetes e2e suite - /usr/local/bin
====================================================
Random Seed: 1714318070 - will randomize all specs

Will run 380 of 7389 specs
------------------------------
[ReportBeforeSuite] 
k8s.io/kubernetes/test/e2e/e2e_test.go:153
[ReportBeforeSuite] PASSED [0.000 seconds]
------------------------------
[SynchronizedBeforeSuite] 
k8s.io/kubernetes/test/e2e/e2e.go:77
  Apr 28 15:27:51.001: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 15:27:51.002: INFO: Waiting up to 30m0s for all (but 0) nodes to be schedulable
  Apr 28 15:27:51.026: INFO: Waiting up to 5m0s for all daemonsets in namespace 'kube-system' to start
  Apr 28 15:27:51.029: INFO: 2 / 2 pods ready in namespace 'kube-system' in daemonset 'kindnet' (0 seconds elapsed)
  Apr 28 15:27:51.029: INFO: 2 / 2 pods ready in namespace 'kube-system' in daemonset 'kube-proxy' (0 seconds elapsed)
  Apr 28 15:27:51.029: INFO: e2e test version: v1.28.9
  Apr 28 15:27:51.030: INFO: kube-apiserver version: v1.28.9
  Apr 28 15:27:51.030: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 15:27:51.040: INFO: Cluster IP family: ipv4
[SynchronizedBeforeSuite] PASSED [0.039 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:240
  STEP: Creating a kubernetes client @ 04/28/24 15:27:51.292
  Apr 28 15:27:51.292: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename configmap @ 04/28/24 15:27:51.292
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:27:51.301
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:27:51.303
  STEP: Creating configMap with name cm-test-opt-del-78dbbabc-d9fb-472a-8dda-93f7e882b880 @ 04/28/24 15:27:51.307
  STEP: Creating configMap with name cm-test-opt-upd-2c8f9d9a-5762-43d6-bd3a-2ac29b3871f8 @ 04/28/24 15:27:51.309
  STEP: Creating the pod @ 04/28/24 15:27:51.312
  STEP: Deleting configmap cm-test-opt-del-78dbbabc-d9fb-472a-8dda-93f7e882b880 @ 04/28/24 15:27:55.349
  STEP: Updating configmap cm-test-opt-upd-2c8f9d9a-5762-43d6-bd3a-2ac29b3871f8 @ 04/28/24 15:27:55.352
  STEP: Creating configMap with name cm-test-opt-create-608a0255-4c00-4831-9f91-de385849c7dc @ 04/28/24 15:27:55.356
  STEP: waiting to observe update in volume @ 04/28/24 15:27:55.359
  Apr 28 15:27:57.381: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-6952" for this suite. @ 04/28/24 15:27:57.383
â€¢ [6.095 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:150
  STEP: Creating a kubernetes client @ 04/28/24 15:27:57.388
  Apr 28 15:27:57.388: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename deployment @ 04/28/24 15:27:57.388
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:27:57.396
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:27:57.398
  Apr 28 15:27:57.400: INFO: Creating simple deployment test-new-deployment
  Apr 28 15:27:57.422: INFO: deployment "test-new-deployment" doesn't have the required revision set
  Apr 28 15:27:59.428: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 28, 15, 27, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 27, 57, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 15, 27, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 27, 57, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-new-deployment-557759b7c7\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 15:28:01.431: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 28, 15, 27, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 27, 57, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 15, 27, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 27, 57, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-new-deployment-557759b7c7\" is progressing."}}, CollisionCount:(*int32)(nil)}
  STEP: getting scale subresource @ 04/28/24 15:28:03.433
  STEP: updating a scale subresource @ 04/28/24 15:28:03.435
  STEP: verifying the deployment Spec.Replicas was modified @ 04/28/24 15:28:03.44
  STEP: Patch a scale subresource @ 04/28/24 15:28:03.441
  Apr 28 15:28:03.453: INFO: Deployment "test-new-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=19) "test-new-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5477",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d7ece104-5b34-4707-b28b-99af44a13160",
      ResourceVersion: (string) (len=3) "692",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849914877,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)(<nil>),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=28) {
              00000000  7b 22 66 3a 73 70 65 63  22 3a 7b 22 66 3a 72 65  |{"f:spec":{"f:re|
              00000010  70 6c 69 63 61 73 22 3a  7b 7d 7d 7d              |plicas":{}}}|
            }
          }),
          Subresource: (string) (len=5) "scale"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914877,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=619) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |onds":{},"f:revi|
              00000060  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000070  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              00000090  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000a0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000b0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000c0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000d0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000e0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              000000f0  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000100  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000110  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000120  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000130  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000140  6d 65 5c 22 3a 5c 22 68  74 74 70 64 5c 22 7d 22  |me\":\"httpd\"}"|
              00000150  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000160  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000170  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000180  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000190  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              000001a0  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              000001b0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001c0  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000001d0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000001e0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000001f0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              00000200  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              00000210  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              00000220  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000230  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000240  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000250  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000260  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914882,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(4),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914882,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914882,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914882,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914877,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=72) "ReplicaSet \"test-new-deployment-557759b7c7\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Apr 28 15:28:03.457: INFO: New ReplicaSet "test-new-deployment-557759b7c7" of Deployment "test-new-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-new-deployment-557759b7c7",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5477",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "11071cdb-cc14-4c8c-bfd6-c2d61d112d95",
      ResourceVersion: (string) (len=3) "697",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849914877,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=19) "test-new-deployment",
          UID: (types.UID) (len=36) "d7ece104-5b34-4707-b28b-99af44a13160",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914883,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 64 37 65 63 65 31  30 34 2d 35 62 33 34 2d  |\"d7ece104-5b34-|
              00000120  34 37 30 37 2d 62 32 38  62 2d 39 39 61 66 34 34  |4707-b28b-99af44|
              00000130  61 31 33 31 36 30 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |a13160\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914883,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(2),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 28 15:28:03.465: INFO: Pod "test-new-deployment-557759b7c7-fh474" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "test-new-deployment-557759b7c7-fh474",
      GenerateName: (string) (len=31) "test-new-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5477",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "20406857-59b0-4f2d-a7d2-4b3a108afb4e",
      ResourceVersion: (string) (len=3) "696",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849914883,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "test-new-deployment-557759b7c7",
          UID: (types.UID) (len=36) "11071cdb-cc14-4c8c-bfd6-c2d61d112d95",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914883,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 31  30 37 31 63 64 62 2d 63  |d\":\"11071cdb-c|
              00000090  63 31 34 2d 34 63 38 63  2d 62 66 64 36 2d 63 32  |c14-4c8c-bfd6-c2|
              000000a0  64 36 31 64 31 31 32 64  39 35 5c 22 7d 22 3a 7b  |d61d112d95\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-pxcqs",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-pxcqs",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914883,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:28:03.466: INFO: Pod "test-new-deployment-557759b7c7-rjkzn" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "test-new-deployment-557759b7c7-rjkzn",
      GenerateName: (string) (len=31) "test-new-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5477",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "82cfc190-e9d8-44b9-8766-4e3027787342",
      ResourceVersion: (string) (len=3) "666",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849914877,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "test-new-deployment-557759b7c7",
          UID: (types.UID) (len=36) "11071cdb-cc14-4c8c-bfd6-c2d61d112d95",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914877,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 31  30 37 31 63 64 62 2d 63  |d\":\"11071cdb-c|
              00000090  63 31 34 2d 34 63 38 63  2d 62 66 64 36 2d 63 32  |c14-4c8c-bfd6-c2|
              000000a0  64 36 31 64 31 31 32 64  39 35 5c 22 7d 22 3a 7b  |d61d112d95\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914882,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=517) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 32 34 34 2e 31  2e 35 5c 22 7d 22 3a 7b  |10.244.1.5\"}":{|
              000001e0  22 2e 22 3a 7b 7d 2c 22  66 3a 69 70 22 3a 7b 7d  |".":{},"f:ip":{}|
              000001f0  7d 7d 2c 22 66 3a 73 74  61 72 74 54 69 6d 65 22  |}},"f:startTime"|
              00000200  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-ct9p6",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-ct9p6",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914877,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914882,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914882,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849914877,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=10) "10.244.1.5",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=10) "10.244.1.5"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849914877,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849914881,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=127) "docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=73) "docker://fc0bcec7a77b531af9bdd957e8edd3c2cb4dff9034f69dc5feeebc7917511f37",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:28:03.468: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-5477" for this suite. @ 04/28/24 15:28:03.472
â€¢ [6.089 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/garbage_collector.go:479
  STEP: Creating a kubernetes client @ 04/28/24 15:28:03.478
  Apr 28 15:28:03.478: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename gc @ 04/28/24 15:28:03.479
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:28:03.486
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:28:03.488
  STEP: create the deployment @ 04/28/24 15:28:03.49
  W0428 15:28:03.493154      22 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: Wait for the Deployment to create new ReplicaSet @ 04/28/24 15:28:03.493
  STEP: delete the deployment @ 04/28/24 15:28:03.997
  STEP: wait for all rs to be garbage collected @ 04/28/24 15:28:04.001
  STEP: expected 0 pods, got 2 pods @ 04/28/24 15:28:04.004
  STEP: expected 0 rs, got 1 rs @ 04/28/24 15:28:04.007
  STEP: Gathering metrics @ 04/28/24 15:28:04.514
  Apr 28 15:28:04.607: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Apr 28 15:28:04.607: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-2739" for this suite. @ 04/28/24 15:28:04.61
â€¢ [1.165 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]
k8s.io/kubernetes/test/e2e/network/proxy.go:286
  STEP: Creating a kubernetes client @ 04/28/24 15:28:04.644
  Apr 28 15:28:04.644: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename proxy @ 04/28/24 15:28:04.645
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:28:04.659
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:28:04.662
  Apr 28 15:28:04.664: INFO: Creating pod...
  Apr 28 15:28:06.675: INFO: Creating service...
  Apr 28 15:28:06.687: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-6974/pods/agnhost/proxy/some/path/with/DELETE
  Apr 28 15:28:06.690: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Apr 28 15:28:06.690: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-6974/pods/agnhost/proxy/some/path/with/GET
  Apr 28 15:28:06.693: INFO: http.Client request:GET | StatusCode:200 | Response:foo | Method:GET
  Apr 28 15:28:06.693: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-6974/pods/agnhost/proxy/some/path/with/HEAD
  Apr 28 15:28:06.695: INFO: http.Client request:HEAD | StatusCode:200
  Apr 28 15:28:06.695: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-6974/pods/agnhost/proxy/some/path/with/OPTIONS
  Apr 28 15:28:06.697: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Apr 28 15:28:06.697: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-6974/pods/agnhost/proxy/some/path/with/PATCH
  Apr 28 15:28:06.700: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Apr 28 15:28:06.700: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-6974/pods/agnhost/proxy/some/path/with/POST
  Apr 28 15:28:06.701: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Apr 28 15:28:06.701: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-6974/pods/agnhost/proxy/some/path/with/PUT
  Apr 28 15:28:06.703: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Apr 28 15:28:06.703: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-6974/services/test-service/proxy/some/path/with/DELETE
  Apr 28 15:28:06.705: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Apr 28 15:28:06.705: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-6974/services/test-service/proxy/some/path/with/GET
  Apr 28 15:28:06.708: INFO: http.Client request:GET | StatusCode:200 | Response:foo | Method:GET
  Apr 28 15:28:06.708: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-6974/services/test-service/proxy/some/path/with/HEAD
  Apr 28 15:28:06.710: INFO: http.Client request:HEAD | StatusCode:200
  Apr 28 15:28:06.710: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-6974/services/test-service/proxy/some/path/with/OPTIONS
  Apr 28 15:28:06.712: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Apr 28 15:28:06.712: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-6974/services/test-service/proxy/some/path/with/PATCH
  Apr 28 15:28:06.714: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Apr 28 15:28:06.714: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-6974/services/test-service/proxy/some/path/with/POST
  Apr 28 15:28:06.716: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Apr 28 15:28:06.716: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-6974/services/test-service/proxy/some/path/with/PUT
  Apr 28 15:28:06.718: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Apr 28 15:28:06.718: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-6974" for this suite. @ 04/28/24 15:28:06.72
â€¢ [2.079 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc  [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1641
  STEP: Creating a kubernetes client @ 04/28/24 15:28:06.724
  Apr 28 15:28:06.724: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 15:28:06.725
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:28:06.732
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:28:06.733
  STEP: creating Agnhost RC @ 04/28/24 15:28:06.735
  Apr 28 15:28:06.735: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-5578 create -f -'
  Apr 28 15:28:06.926: INFO: stderr: ""
  Apr 28 15:28:06.926: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 04/28/24 15:28:06.926
  Apr 28 15:28:07.929: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 28 15:28:07.929: INFO: Found 0 / 1
  Apr 28 15:28:08.929: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 28 15:28:08.929: INFO: Found 1 / 1
  Apr 28 15:28:08.929: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  STEP: patching all pods @ 04/28/24 15:28:08.929
  Apr 28 15:28:08.931: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 28 15:28:08.931: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Apr 28 15:28:08.931: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-5578 patch pod agnhost-primary-pd7m9 -p {"metadata":{"annotations":{"x":"y"}}}'
  Apr 28 15:28:08.991: INFO: stderr: ""
  Apr 28 15:28:08.991: INFO: stdout: "pod/agnhost-primary-pd7m9 patched\n"
  STEP: checking annotations @ 04/28/24 15:28:08.991
  Apr 28 15:28:08.993: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 28 15:28:08.993: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Apr 28 15:28:08.993: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-5578" for this suite. @ 04/28/24 15:28:08.995
â€¢ [2.275 seconds]
------------------------------
SSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]
k8s.io/kubernetes/test/e2e/common/node/init_container.go:335
  STEP: Creating a kubernetes client @ 04/28/24 15:28:08.999
  Apr 28 15:28:08.999: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename init-container @ 04/28/24 15:28:09
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:28:09.008
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:28:09.01
  STEP: creating the pod @ 04/28/24 15:28:09.012
  Apr 28 15:28:09.012: INFO: PodSpec: initContainers in spec.initContainers
  Apr 28 15:28:51.573: INFO: init container has failed twice: &v1.Pod{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"pod-init-f4a1b1d3-b438-47bb-b20d-d76610a932a9", GenerateName:"", Namespace:"init-container-8956", SelfLink:"", UID:"7bb43a07-62ef-4b7d-bfa2-20a043b1d15e", ResourceVersion:"920", Generation:0, CreationTimestamp:time.Date(2024, time.April, 28, 15, 28, 9, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"name":"foo", "time":"12600602"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 28, 15, 28, 9, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0011bbc68), Subresource:""}, v1.ManagedFieldsEntry{Manager:"kubelet", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.April, 28, 15, 28, 51, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0011bbc98), Subresource:"status"}}}, Spec:v1.PodSpec{Volumes:[]v1.Volume{v1.Volume{Name:"kube-api-access-x6gr4", VolumeSource:v1.VolumeSource{HostPath:(*v1.HostPathVolumeSource)(nil), EmptyDir:(*v1.EmptyDirVolumeSource)(nil), GCEPersistentDisk:(*v1.GCEPersistentDiskVolumeSource)(nil), AWSElasticBlockStore:(*v1.AWSElasticBlockStoreVolumeSource)(nil), GitRepo:(*v1.GitRepoVolumeSource)(nil), Secret:(*v1.SecretVolumeSource)(nil), NFS:(*v1.NFSVolumeSource)(nil), ISCSI:(*v1.ISCSIVolumeSource)(nil), Glusterfs:(*v1.GlusterfsVolumeSource)(nil), PersistentVolumeClaim:(*v1.PersistentVolumeClaimVolumeSource)(nil), RBD:(*v1.RBDVolumeSource)(nil), FlexVolume:(*v1.FlexVolumeSource)(nil), Cinder:(*v1.CinderVolumeSource)(nil), CephFS:(*v1.CephFSVolumeSource)(nil), Flocker:(*v1.FlockerVolumeSource)(nil), DownwardAPI:(*v1.DownwardAPIVolumeSource)(nil), FC:(*v1.FCVolumeSource)(nil), AzureFile:(*v1.AzureFileVolumeSource)(nil), ConfigMap:(*v1.ConfigMapVolumeSource)(nil), VsphereVolume:(*v1.VsphereVirtualDiskVolumeSource)(nil), Quobyte:(*v1.QuobyteVolumeSource)(nil), AzureDisk:(*v1.AzureDiskVolumeSource)(nil), PhotonPersistentDisk:(*v1.PhotonPersistentDiskVolumeSource)(nil), Projected:(*v1.ProjectedVolumeSource)(0xc003e913c0), PortworxVolume:(*v1.PortworxVolumeSource)(nil), ScaleIO:(*v1.ScaleIOVolumeSource)(nil), StorageOS:(*v1.StorageOSVolumeSource)(nil), CSI:(*v1.CSIVolumeSource)(nil), Ephemeral:(*v1.EphemeralVolumeSource)(nil)}}}, InitContainers:[]v1.Container{v1.Container{Name:"init1", Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", Command:[]string{"/bin/false"}, Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), Requests:v1.ResourceList(nil), Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-x6gr4", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}, v1.Container{Name:"init2", Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", Command:[]string{"/bin/true"}, Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), Requests:v1.ResourceList(nil), Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-x6gr4", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}}, Containers:[]v1.Container{v1.Container{Name:"run1", Image:"registry.k8s.io/pause:3.9", Command:[]string(nil), Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:100, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"100m", Format:"DecimalSI"}}, Requests:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:100, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"100m", Format:"DecimalSI"}}, Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-x6gr4", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}}, EphemeralContainers:[]v1.EphemeralContainer(nil), RestartPolicy:"Always", TerminationGracePeriodSeconds:(*int64)(0xc003ea5128), ActiveDeadlineSeconds:(*int64)(nil), DNSPolicy:"ClusterFirst", NodeSelector:map[string]string(nil), ServiceAccountName:"default", DeprecatedServiceAccount:"default", AutomountServiceAccountToken:(*bool)(nil), NodeName:"k8sconformance-m02", HostNetwork:false, HostPID:false, HostIPC:false, ShareProcessNamespace:(*bool)(nil), SecurityContext:(*v1.PodSecurityContext)(0xc003de3e30), ImagePullSecrets:[]v1.LocalObjectReference(nil), Hostname:"", Subdomain:"", Affinity:(*v1.Affinity)(nil), SchedulerName:"default-scheduler", Tolerations:[]v1.Toleration{v1.Toleration{Key:"node.kubernetes.io/not-ready", Operator:"Exists", Value:"", Effect:"NoExecute", TolerationSeconds:(*int64)(0xc003ea51a0)}, v1.Toleration{Key:"node.kubernetes.io/unreachable", Operator:"Exists", Value:"", Effect:"NoExecute", TolerationSeconds:(*int64)(0xc003ea51c0)}}, HostAliases:[]v1.HostAlias(nil), PriorityClassName:"", Priority:(*int32)(0xc003ea51c8), DNSConfig:(*v1.PodDNSConfig)(nil), ReadinessGates:[]v1.PodReadinessGate(nil), RuntimeClassName:(*string)(nil), EnableServiceLinks:(*bool)(0xc003ea51cc), PreemptionPolicy:(*v1.PreemptionPolicy)(0xc003e9bc50), Overhead:v1.ResourceList(nil), TopologySpreadConstraints:[]v1.TopologySpreadConstraint(nil), SetHostnameAsFQDN:(*bool)(nil), OS:(*v1.PodOS)(nil), HostUsers:(*bool)(nil), SchedulingGates:[]v1.PodSchedulingGate(nil), ResourceClaims:[]v1.PodResourceClaim(nil)}, Status:v1.PodStatus{Phase:"Pending", Conditions:[]v1.PodCondition{v1.PodCondition{Type:"Initialized", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.April, 28, 15, 28, 9, 0, time.Local), Reason:"ContainersNotInitialized", Message:"containers with incomplete status: [init1 init2]"}, v1.PodCondition{Type:"Ready", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.April, 28, 15, 28, 9, 0, time.Local), Reason:"ContainersNotReady", Message:"containers with unready status: [run1]"}, v1.PodCondition{Type:"ContainersReady", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.April, 28, 15, 28, 9, 0, time.Local), Reason:"ContainersNotReady", Message:"containers with unready status: [run1]"}, v1.PodCondition{Type:"PodScheduled", Status:"True", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.April, 28, 15, 28, 9, 0, time.Local), Reason:"", Message:""}}, Message:"", Reason:"", NominatedNodeName:"", HostIP:"192.168.49.3", HostIPs:[]v1.HostIP(nil), PodIP:"10.244.1.9", PodIPs:[]v1.PodIP{v1.PodIP{IP:"10.244.1.9"}}, StartTime:time.Date(2024, time.April, 28, 15, 28, 9, 0, time.Local), InitContainerStatuses:[]v1.ContainerStatus{v1.ContainerStatus{Name:"init1", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(0xc003de3f10)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(0xc003de3f80)}, Ready:false, RestartCount:3, Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", ImageID:"docker-pullable://registry.k8s.io/e2e-test-images/busybox@sha256:2e0f836850e09b8b7cc937681d6194537a09fbd5f6b9e08f4d646a85128e8937", ContainerID:"docker://b960cdd1f85c3c156ff9ee26a3a8d37bb211960b1b28cf46f192f6cfc9f70dd4", Started:(*bool)(0xc003ea526a), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}, v1.ContainerStatus{Name:"init2", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(0xc003e91440), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, Ready:false, RestartCount:0, Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", ImageID:"", ContainerID:"", Started:(*bool)(0xc003ea527f), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}}, ContainerStatuses:[]v1.ContainerStatus{v1.ContainerStatus{Name:"run1", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(0xc003e91420), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, Ready:false, RestartCount:0, Image:"registry.k8s.io/pause:3.9", ImageID:"", ContainerID:"", Started:(*bool)(0xc003ea524f), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}}, QOSClass:"Burstable", EphemeralContainerStatuses:[]v1.ContainerStatus(nil), Resize:"", ResourceClaimStatuses:[]v1.PodResourceClaimStatus(nil)}}
  Apr 28 15:28:51.573: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-8956" for this suite. @ 04/28/24 15:28:51.576
â€¢ [42.583 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance]
k8s.io/kubernetes/test/e2e/apps/disruption.go:87
  STEP: Creating a kubernetes client @ 04/28/24 15:28:51.584
  Apr 28 15:28:51.584: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename disruption @ 04/28/24 15:28:51.584
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:28:51.592
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:28:51.595
  STEP: Creating a kubernetes client @ 04/28/24 15:28:51.597
  Apr 28 15:28:51.597: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename disruption-2 @ 04/28/24 15:28:51.598
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:28:51.605
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:28:51.607
  STEP: Waiting for the pdb to be processed @ 04/28/24 15:28:51.613
  STEP: Waiting for the pdb to be processed @ 04/28/24 15:28:53.62
  STEP: Waiting for the pdb to be processed @ 04/28/24 15:28:55.628
  STEP: listing a collection of PDBs across all namespaces @ 04/28/24 15:28:57.634
  STEP: listing a collection of PDBs in namespace disruption-7374 @ 04/28/24 15:28:57.637
  STEP: deleting a collection of PDBs @ 04/28/24 15:28:57.639
  STEP: Waiting for the PDB collection to be deleted @ 04/28/24 15:28:57.644
  Apr 28 15:28:57.646: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Apr 28 15:28:57.648: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-2-5364" for this suite. @ 04/28/24 15:28:57.65
  STEP: Destroying namespace "disruption-7374" for this suite. @ 04/28/24 15:28:57.653
â€¢ [6.073 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:1030
  STEP: Creating a kubernetes client @ 04/28/24 15:28:57.657
  Apr 28 15:28:57.657: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename statefulset @ 04/28/24 15:28:57.658
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:28:57.667
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:28:57.669
  STEP: Creating service test in namespace statefulset-4929 @ 04/28/24 15:28:57.671
  STEP: Creating statefulset ss in namespace statefulset-4929 @ 04/28/24 15:28:57.676
  Apr 28 15:28:57.681: INFO: Found 0 stateful pods, waiting for 1
  Apr 28 15:29:07.686: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Patch Statefulset to include a label @ 04/28/24 15:29:07.69
  STEP: Getting /status @ 04/28/24 15:29:07.7
  Apr 28 15:29:07.709: INFO: StatefulSet ss has Conditions: []v1.StatefulSetCondition(nil)
  STEP: updating the StatefulSet Status @ 04/28/24 15:29:07.709
  Apr 28 15:29:07.715: INFO: updatedStatus.Conditions: []v1.StatefulSetCondition{v1.StatefulSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the statefulset status to be updated @ 04/28/24 15:29:07.715
  Apr 28 15:29:07.717: INFO: Observed &StatefulSet event: ADDED
  Apr 28 15:29:07.717: INFO: Found Statefulset ss in namespace statefulset-4929 with labels: map[e2e:testing] annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Apr 28 15:29:07.717: INFO: Statefulset ss has an updated status
  STEP: patching the Statefulset Status @ 04/28/24 15:29:07.717
  Apr 28 15:29:07.717: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Apr 28 15:29:07.723: INFO: Patched status conditions: []v1.StatefulSetCondition{v1.StatefulSetCondition{Type:"StatusPatched", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Statefulset status to be patched @ 04/28/24 15:29:07.723
  Apr 28 15:29:07.725: INFO: Observed &StatefulSet event: ADDED
  Apr 28 15:29:07.725: INFO: Observed Statefulset ss in namespace statefulset-4929 with annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Apr 28 15:29:07.725: INFO: Observed &StatefulSet event: MODIFIED
  Apr 28 15:29:07.725: INFO: Deleting all statefulset in ns statefulset-4929
  Apr 28 15:29:07.729: INFO: Scaling statefulset ss to 0
  Apr 28 15:29:17.741: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 28 15:29:17.743: INFO: Deleting statefulset ss
  Apr 28 15:29:17.750: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-4929" for this suite. @ 04/28/24 15:29:17.751
â€¢ [20.097 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance]
k8s.io/kubernetes/test/e2e/apps/replica_set.go:165
  STEP: Creating a kubernetes client @ 04/28/24 15:29:17.755
  Apr 28 15:29:17.755: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename replicaset @ 04/28/24 15:29:17.756
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:29:17.763
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:29:17.765
  STEP: Create a ReplicaSet @ 04/28/24 15:29:17.767
  STEP: Verify that the required pods have come up @ 04/28/24 15:29:17.772
  Apr 28 15:29:17.773: INFO: Pod name sample-pod: Found 0 pods out of 3
  Apr 28 15:29:22.777: INFO: Pod name sample-pod: Found 3 pods out of 3
  STEP: ensuring each pod is running @ 04/28/24 15:29:22.777
  Apr 28 15:29:22.778: INFO: Replica Status: {Replicas:3 FullyLabeledReplicas:3 ReadyReplicas:3 AvailableReplicas:3 ObservedGeneration:1 Conditions:[]}
  STEP: Listing all ReplicaSets @ 04/28/24 15:29:22.778
  STEP: DeleteCollection of the ReplicaSets @ 04/28/24 15:29:22.78
  STEP: After DeleteCollection verify that ReplicaSets have been deleted @ 04/28/24 15:29:22.785
  Apr 28 15:29:22.786: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-6963" for this suite. @ 04/28/24 15:29:22.788
â€¢ [5.043 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:157
  STEP: Creating a kubernetes client @ 04/28/24 15:29:22.798
  Apr 28 15:29:22.798: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir @ 04/28/24 15:29:22.799
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:29:22.807
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:29:22.809
  STEP: Creating a pod to test emptydir volume type on node default medium @ 04/28/24 15:29:22.811
  STEP: Saw pod success @ 04/28/24 15:29:26.825
  Apr 28 15:29:26.827: INFO: Trying to get logs from node k8sconformance-m02 pod pod-7a04b334-1ba0-42d9-8402-fa430f64cf3a container test-container: <nil>
  STEP: delete the pod @ 04/28/24 15:29:26.832
  Apr 28 15:29:26.841: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-2272" for this suite. @ 04/28/24 15:29:26.843
â€¢ [4.049 seconds]
------------------------------
SS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:76
  STEP: Creating a kubernetes client @ 04/28/24 15:29:26.847
  Apr 28 15:29:26.847: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename var-expansion @ 04/28/24 15:29:26.848
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:29:26.854
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:29:26.856
  STEP: Creating a pod to test substitution in container's command @ 04/28/24 15:29:26.858
  STEP: Saw pod success @ 04/28/24 15:29:30.872
  Apr 28 15:29:30.874: INFO: Trying to get logs from node k8sconformance-m02 pod var-expansion-ff420f19-9c9f-4f5a-b1dc-9865d3bc78fc container dapi-container: <nil>
  STEP: delete the pod @ 04/28/24 15:29:30.879
  Apr 28 15:29:30.889: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-377" for this suite. @ 04/28/24 15:29:30.891
â€¢ [4.047 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance]
k8s.io/kubernetes/test/e2e/apps/cronjob.go:97
  STEP: Creating a kubernetes client @ 04/28/24 15:29:30.895
  Apr 28 15:29:30.895: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename cronjob @ 04/28/24 15:29:30.895
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:29:30.903
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:29:30.905
  STEP: Creating a suspended cronjob @ 04/28/24 15:29:30.906
  STEP: Ensuring no jobs are scheduled @ 04/28/24 15:29:30.91
  STEP: Ensuring no job exists by listing jobs explicitly @ 04/28/24 15:34:30.914
  STEP: Removing cronjob @ 04/28/24 15:34:30.916
  Apr 28 15:34:30.919: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-4505" for this suite. @ 04/28/24 15:34:30.921
â€¢ [300.030 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:194
  STEP: Creating a kubernetes client @ 04/28/24 15:34:30.926
  Apr 28 15:34:30.926: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 15:34:30.927
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:34:30.933
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:34:30.935
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 15:34:30.937
  STEP: Saw pod success @ 04/28/24 15:34:34.951
  Apr 28 15:34:34.953: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-6625e531-920e-4ef9-97fa-5f0be4d05645 container client-container: <nil>
  STEP: delete the pod @ 04/28/24 15:34:34.965
  Apr 28 15:34:34.975: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-4109" for this suite. @ 04/28/24 15:34:34.977
â€¢ [4.056 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance]
k8s.io/kubernetes/test/e2e/apps/cronjob.go:125
  STEP: Creating a kubernetes client @ 04/28/24 15:34:34.982
  Apr 28 15:34:34.982: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename cronjob @ 04/28/24 15:34:34.983
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:34:34.99
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:34:34.992
  STEP: Creating a ForbidConcurrent cronjob @ 04/28/24 15:34:34.994
  STEP: Ensuring a job is scheduled @ 04/28/24 15:34:34.999
  STEP: Ensuring exactly one is scheduled @ 04/28/24 15:35:01.001
  STEP: Ensuring exactly one running job exists by listing jobs explicitly @ 04/28/24 15:35:01.003
  STEP: Ensuring no more jobs are scheduled @ 04/28/24 15:35:01.005
  STEP: Removing cronjob @ 04/28/24 15:40:01.009
  Apr 28 15:40:01.014: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-6735" for this suite. @ 04/28/24 15:40:01.016
â€¢ [326.037 seconds]
------------------------------
SSSS
------------------------------
[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:1455
  STEP: Creating a kubernetes client @ 04/28/24 15:40:01.02
  Apr 28 15:40:01.020: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 15:40:01.021
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:40:01.029
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:40:01.031
  STEP: creating a service externalname-service with the type=ExternalName in namespace services-1759 @ 04/28/24 15:40:01.034
  STEP: changing the ExternalName service to type=NodePort @ 04/28/24 15:40:01.037
  STEP: creating replication controller externalname-service in namespace services-1759 @ 04/28/24 15:40:01.047
  I0428 15:40:01.053381      22 runners.go:197] Created replication controller with name: externalname-service, namespace: services-1759, replica count: 2
  I0428 15:40:04.105465      22 runners.go:197] externalname-service Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 28 15:40:04.105: INFO: Creating new exec pod
  Apr 28 15:40:07.116: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-1759 exec execpodkz9tv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Apr 28 15:40:07.215: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Apr 28 15:40:07.215: INFO: stdout: "externalname-service-nd2z2"
  Apr 28 15:40:07.215: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-1759 exec execpodkz9tv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.107.84.33 80'
  Apr 28 15:40:07.313: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.107.84.33 80\nConnection to 10.107.84.33 80 port [tcp/http] succeeded!\n"
  Apr 28 15:40:07.313: INFO: stdout: ""
  Apr 28 15:40:08.313: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-1759 exec execpodkz9tv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.107.84.33 80'
  Apr 28 15:40:08.408: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.107.84.33 80\nConnection to 10.107.84.33 80 port [tcp/http] succeeded!\n"
  Apr 28 15:40:08.408: INFO: stdout: "externalname-service-nd2z2"
  Apr 28 15:40:08.408: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-1759 exec execpodkz9tv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 192.168.49.2 31384'
  Apr 28 15:40:08.500: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 192.168.49.2 31384\nConnection to 192.168.49.2 31384 port [tcp/*] succeeded!\n"
  Apr 28 15:40:08.500: INFO: stdout: "externalname-service-2xlhr"
  Apr 28 15:40:08.500: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-1759 exec execpodkz9tv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 192.168.49.3 31384'
  Apr 28 15:40:08.593: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 192.168.49.3 31384\nConnection to 192.168.49.3 31384 port [tcp/*] succeeded!\n"
  Apr 28 15:40:08.593: INFO: stdout: "externalname-service-nd2z2"
  Apr 28 15:40:08.593: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Apr 28 15:40:08.596: INFO: Cleaning up the ExternalName to NodePort test service
  STEP: Destroying namespace "services-1759" for this suite. @ 04/28/24 15:40:08.61
â€¢ [7.594 seconds]
------------------------------
SS
------------------------------
[sig-apps] Job should apply changes to a job status [Conformance]
k8s.io/kubernetes/test/e2e/apps/job.go:642
  STEP: Creating a kubernetes client @ 04/28/24 15:40:08.614
  Apr 28 15:40:08.614: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename job @ 04/28/24 15:40:08.615
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:40:08.622
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:40:08.624
  STEP: Creating a job @ 04/28/24 15:40:08.626
  STEP: Ensure pods equal to parallelism count is attached to the job @ 04/28/24 15:40:08.629
  STEP: patching /status @ 04/28/24 15:40:10.632
  STEP: updating /status @ 04/28/24 15:40:10.637
  STEP: get /status @ 04/28/24 15:40:10.642
  Apr 28 15:40:10.644: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-263" for this suite. @ 04/28/24 15:40:10.647
â€¢ [2.036 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:395
  STEP: Creating a kubernetes client @ 04/28/24 15:40:10.651
  Apr 28 15:40:10.651: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename resourcequota @ 04/28/24 15:40:10.652
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:40:10.658
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:40:10.66
  STEP: Counting existing ResourceQuota @ 04/28/24 15:40:10.662
  STEP: Creating a ResourceQuota @ 04/28/24 15:40:15.665
  STEP: Ensuring resource quota status is calculated @ 04/28/24 15:40:15.672
  STEP: Creating a ReplicationController @ 04/28/24 15:40:17.675
  STEP: Ensuring resource quota status captures replication controller creation @ 04/28/24 15:40:17.684
  STEP: Deleting a ReplicationController @ 04/28/24 15:40:19.687
  STEP: Ensuring resource quota status released usage @ 04/28/24 15:40:19.69
  Apr 28 15:40:21.693: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-1326" for this suite. @ 04/28/24 15:40:21.695
â€¢ [11.047 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]
k8s.io/kubernetes/test/e2e/auth/service_accounts.go:161
  STEP: Creating a kubernetes client @ 04/28/24 15:40:21.699
  Apr 28 15:40:21.699: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename svcaccounts @ 04/28/24 15:40:21.7
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:40:21.708
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:40:21.71
  Apr 28 15:40:21.726: INFO: created pod pod-service-account-defaultsa
  Apr 28 15:40:21.726: INFO: pod pod-service-account-defaultsa service account token volume mount: true
  Apr 28 15:40:21.729: INFO: created pod pod-service-account-mountsa
  Apr 28 15:40:21.729: INFO: pod pod-service-account-mountsa service account token volume mount: true
  Apr 28 15:40:21.734: INFO: created pod pod-service-account-nomountsa
  Apr 28 15:40:21.734: INFO: pod pod-service-account-nomountsa service account token volume mount: false
  Apr 28 15:40:21.739: INFO: created pod pod-service-account-defaultsa-mountspec
  Apr 28 15:40:21.739: INFO: pod pod-service-account-defaultsa-mountspec service account token volume mount: true
  Apr 28 15:40:21.743: INFO: created pod pod-service-account-mountsa-mountspec
  Apr 28 15:40:21.743: INFO: pod pod-service-account-mountsa-mountspec service account token volume mount: true
  Apr 28 15:40:21.747: INFO: created pod pod-service-account-nomountsa-mountspec
  Apr 28 15:40:21.747: INFO: pod pod-service-account-nomountsa-mountspec service account token volume mount: true
  Apr 28 15:40:21.753: INFO: created pod pod-service-account-defaultsa-nomountspec
  Apr 28 15:40:21.753: INFO: pod pod-service-account-defaultsa-nomountspec service account token volume mount: false
  Apr 28 15:40:21.757: INFO: created pod pod-service-account-mountsa-nomountspec
  Apr 28 15:40:21.757: INFO: pod pod-service-account-mountsa-nomountspec service account token volume mount: false
  Apr 28 15:40:21.764: INFO: created pod pod-service-account-nomountsa-nomountspec
  Apr 28 15:40:21.764: INFO: pod pod-service-account-nomountsa-nomountspec service account token volume mount: false
  Apr 28 15:40:21.764: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-9717" for this suite. @ 04/28/24 15:40:21.766
â€¢ [0.072 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Proxy server should support --unix-socket=/path  [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1806
  STEP: Creating a kubernetes client @ 04/28/24 15:40:21.772
  Apr 28 15:40:21.772: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 15:40:21.773
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:40:21.783
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:40:21.785
  STEP: Starting the proxy @ 04/28/24 15:40:21.788
  Apr 28 15:40:21.788: INFO: Asynchronously running '/usr/local/bin/kubectl kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-6233 proxy --unix-socket=/tmp/kubectl-proxy-unix2617564480/test'
  STEP: retrieving proxy /api/ output @ 04/28/24 15:40:21.84
  Apr 28 15:40:21.841: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-6233" for this suite. @ 04/28/24 15:40:21.844
â€¢ [0.076 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Slow] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:155
  STEP: Creating a kubernetes client @ 04/28/24 15:40:21.849
  Apr 28 15:40:21.849: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename var-expansion @ 04/28/24 15:40:21.85
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:40:21.858
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:40:21.86
  Apr 28 15:40:23.872: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Apr 28 15:40:23.874: INFO: Deleting pod "var-expansion-00e0ac0a-6b90-4bf4-91e7-1082619a8edd" in namespace "var-expansion-501"
  Apr 28 15:40:23.879: INFO: Wait up to 5m0s for pod "var-expansion-00e0ac0a-6b90-4bf4-91e7-1082619a8edd" to be fully deleted
  STEP: Destroying namespace "var-expansion-501" for this suite. @ 04/28/24 15:40:27.887
â€¢ [6.042 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/kubelet.go:135
  STEP: Creating a kubernetes client @ 04/28/24 15:40:27.892
  Apr 28 15:40:27.892: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubelet-test @ 04/28/24 15:40:27.893
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:40:27.902
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:40:27.904
  Apr 28 15:40:27.918: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-8915" for this suite. @ 04/28/24 15:40:27.921
â€¢ [0.032 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:250
  STEP: Creating a kubernetes client @ 04/28/24 15:40:27.924
  Apr 28 15:40:27.924: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 15:40:27.925
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:40:27.931
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:40:27.933
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 15:40:27.935
  STEP: Saw pod success @ 04/28/24 15:40:29.944
  Apr 28 15:40:29.946: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-43c8b37f-871e-47a1-bcb2-e0bc79619ca3 container client-container: <nil>
  STEP: delete the pod @ 04/28/24 15:40:29.958
  Apr 28 15:40:29.968: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5633" for this suite. @ 04/28/24 15:40:29.97
â€¢ [2.049 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] PreStop should call prestop when killing a pod  [Conformance]
k8s.io/kubernetes/test/e2e/node/pre_stop.go:169
  STEP: Creating a kubernetes client @ 04/28/24 15:40:29.974
  Apr 28 15:40:29.974: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename prestop @ 04/28/24 15:40:29.974
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:40:29.982
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:40:29.984
  STEP: Creating server pod server in namespace prestop-8087 @ 04/28/24 15:40:29.985
  STEP: Waiting for pods to come up. @ 04/28/24 15:40:29.99
  STEP: Creating tester pod tester in namespace prestop-8087 @ 04/28/24 15:40:31.997
  STEP: Deleting pre-stop pod @ 04/28/24 15:40:34.007
  Apr 28 15:40:39.018: INFO: Saw: {
  	"Hostname": "server",
  	"Sent": null,
  	"Received": {
  		"prestop": 1
  	},
  	"Errors": null,
  	"Log": [
  		"default/nettest has 0 endpoints ([]), which is less than 8 as expected. Waiting for all endpoints to come up.",
  		"default/nettest has 0 endpoints ([]), which is less than 8 as expected. Waiting for all endpoints to come up."
  	],
  	"StillContactingPeers": true
  }
  Apr 28 15:40:39.018: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Deleting the server pod @ 04/28/24 15:40:39.02
  STEP: Destroying namespace "prestop-8087" for this suite. @ 04/28/24 15:40:39.028
â€¢ [9.061 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:250
  STEP: Creating a kubernetes client @ 04/28/24 15:40:39.035
  Apr 28 15:40:39.035: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 15:40:39.036
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:40:39.044
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:40:39.046
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 15:40:39.048
  STEP: Saw pod success @ 04/28/24 15:40:43.061
  Apr 28 15:40:43.063: INFO: Trying to get logs from node k8sconformance pod downwardapi-volume-66cb78a8-c421-40c7-978a-d4179a1150f4 container client-container: <nil>
  STEP: delete the pod @ 04/28/24 15:40:43.075
  Apr 28 15:40:43.086: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-5013" for this suite. @ 04/28/24 15:40:43.088
â€¢ [4.057 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]
k8s.io/kubernetes/test/e2e/scheduling/predicates.go:332
  STEP: Creating a kubernetes client @ 04/28/24 15:40:43.092
  Apr 28 15:40:43.092: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename sched-pred @ 04/28/24 15:40:43.093
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:40:43.103
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:40:43.105
  Apr 28 15:40:43.107: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Apr 28 15:40:43.110: INFO: Waiting for terminating namespaces to be deleted...
  Apr 28 15:40:43.112: INFO: 
  Logging pods the apiserver thinks is on node k8sconformance before test
  Apr 28 15:40:43.115: INFO: coredns-5dd5756b68-4wfsw from kube-system started at 2024-04-28 15:26:56 +0000 UTC (1 container statuses recorded)
  Apr 28 15:40:43.115: INFO: 	Container coredns ready: true, restart count 1
  Apr 28 15:40:43.115: INFO: etcd-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 15:40:43.115: INFO: 	Container etcd ready: true, restart count 0
  Apr 28 15:40:43.115: INFO: kindnet-6nsws from kube-system started at 2024-04-28 15:26:55 +0000 UTC (1 container statuses recorded)
  Apr 28 15:40:43.115: INFO: 	Container kindnet-cni ready: true, restart count 0
  Apr 28 15:40:43.115: INFO: kube-apiserver-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 15:40:43.115: INFO: 	Container kube-apiserver ready: true, restart count 0
  Apr 28 15:40:43.115: INFO: kube-controller-manager-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 15:40:43.115: INFO: 	Container kube-controller-manager ready: true, restart count 0
  Apr 28 15:40:43.115: INFO: kube-proxy-kjs4b from kube-system started at 2024-04-28 15:26:55 +0000 UTC (1 container statuses recorded)
  Apr 28 15:40:43.115: INFO: 	Container kube-proxy ready: true, restart count 0
  Apr 28 15:40:43.115: INFO: kube-scheduler-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 15:40:43.115: INFO: 	Container kube-scheduler ready: true, restart count 0
  Apr 28 15:40:43.115: INFO: storage-provisioner from kube-system started at 2024-04-28 15:26:56 +0000 UTC (1 container statuses recorded)
  Apr 28 15:40:43.115: INFO: 	Container storage-provisioner ready: true, restart count 0
  Apr 28 15:40:43.115: INFO: sonobuoy-systemd-logs-daemon-set-5db54bb871f24159-clq66 from sonobuoy started at 2024-04-28 15:27:37 +0000 UTC (2 container statuses recorded)
  Apr 28 15:40:43.115: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 28 15:40:43.115: INFO: 	Container systemd-logs ready: true, restart count 0
  Apr 28 15:40:43.115: INFO: 
  Logging pods the apiserver thinks is on node k8sconformance-m02 before test
  Apr 28 15:40:43.118: INFO: suspend-false-to-true-rrl5f from job-263 started at 2024-04-28 15:40:08 +0000 UTC (1 container statuses recorded)
  Apr 28 15:40:43.118: INFO: 	Container c ready: true, restart count 0
  Apr 28 15:40:43.118: INFO: suspend-false-to-true-stf7f from job-263 started at 2024-04-28 15:40:08 +0000 UTC (1 container statuses recorded)
  Apr 28 15:40:43.118: INFO: 	Container c ready: true, restart count 0
  Apr 28 15:40:43.118: INFO: kindnet-zclk7 from kube-system started at 2024-04-28 15:27:27 +0000 UTC (1 container statuses recorded)
  Apr 28 15:40:43.118: INFO: 	Container kindnet-cni ready: true, restart count 0
  Apr 28 15:40:43.118: INFO: kube-proxy-7t84r from kube-system started at 2024-04-28 15:27:27 +0000 UTC (1 container statuses recorded)
  Apr 28 15:40:43.118: INFO: 	Container kube-proxy ready: true, restart count 0
  Apr 28 15:40:43.118: INFO: tester from prestop-8087 started at 2024-04-28 15:40:32 +0000 UTC (1 container statuses recorded)
  Apr 28 15:40:43.118: INFO: 	Container tester ready: true, restart count 0
  Apr 28 15:40:43.118: INFO: sonobuoy from sonobuoy started at 2024-04-28 15:27:33 +0000 UTC (1 container statuses recorded)
  Apr 28 15:40:43.118: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Apr 28 15:40:43.118: INFO: sonobuoy-e2e-job-b135035bf3ea46b2 from sonobuoy started at 2024-04-28 15:27:37 +0000 UTC (2 container statuses recorded)
  Apr 28 15:40:43.118: INFO: 	Container e2e ready: true, restart count 0
  Apr 28 15:40:43.118: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 28 15:40:43.118: INFO: sonobuoy-systemd-logs-daemon-set-5db54bb871f24159-pn7kn from sonobuoy started at 2024-04-28 15:27:37 +0000 UTC (2 container statuses recorded)
  Apr 28 15:40:43.118: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 28 15:40:43.118: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: verifying the node has the label node k8sconformance @ 04/28/24 15:40:43.13
  STEP: verifying the node has the label node k8sconformance-m02 @ 04/28/24 15:40:43.139
  Apr 28 15:40:43.146: INFO: Pod suspend-false-to-true-rrl5f requesting resource cpu=0m on Node k8sconformance-m02
  Apr 28 15:40:43.146: INFO: Pod suspend-false-to-true-stf7f requesting resource cpu=0m on Node k8sconformance-m02
  Apr 28 15:40:43.146: INFO: Pod coredns-5dd5756b68-4wfsw requesting resource cpu=100m on Node k8sconformance
  Apr 28 15:40:43.146: INFO: Pod etcd-k8sconformance requesting resource cpu=100m on Node k8sconformance
  Apr 28 15:40:43.146: INFO: Pod kindnet-6nsws requesting resource cpu=100m on Node k8sconformance
  Apr 28 15:40:43.146: INFO: Pod kindnet-zclk7 requesting resource cpu=100m on Node k8sconformance-m02
  Apr 28 15:40:43.146: INFO: Pod kube-apiserver-k8sconformance requesting resource cpu=250m on Node k8sconformance
  Apr 28 15:40:43.146: INFO: Pod kube-controller-manager-k8sconformance requesting resource cpu=200m on Node k8sconformance
  Apr 28 15:40:43.146: INFO: Pod kube-proxy-7t84r requesting resource cpu=0m on Node k8sconformance-m02
  Apr 28 15:40:43.146: INFO: Pod kube-proxy-kjs4b requesting resource cpu=0m on Node k8sconformance
  Apr 28 15:40:43.146: INFO: Pod kube-scheduler-k8sconformance requesting resource cpu=100m on Node k8sconformance
  Apr 28 15:40:43.146: INFO: Pod storage-provisioner requesting resource cpu=0m on Node k8sconformance
  Apr 28 15:40:43.146: INFO: Pod tester requesting resource cpu=0m on Node k8sconformance-m02
  Apr 28 15:40:43.146: INFO: Pod sonobuoy requesting resource cpu=0m on Node k8sconformance-m02
  Apr 28 15:40:43.146: INFO: Pod sonobuoy-e2e-job-b135035bf3ea46b2 requesting resource cpu=0m on Node k8sconformance-m02
  Apr 28 15:40:43.146: INFO: Pod sonobuoy-systemd-logs-daemon-set-5db54bb871f24159-clq66 requesting resource cpu=0m on Node k8sconformance
  Apr 28 15:40:43.146: INFO: Pod sonobuoy-systemd-logs-daemon-set-5db54bb871f24159-pn7kn requesting resource cpu=0m on Node k8sconformance-m02
  STEP: Starting Pods to consume most of the cluster CPU. @ 04/28/24 15:40:43.146
  Apr 28 15:40:43.146: INFO: Creating a pod which consumes cpu=5005m on Node k8sconformance
  Apr 28 15:40:43.154: INFO: Creating a pod which consumes cpu=5530m on Node k8sconformance-m02
  STEP: Creating another pod that requires unavailable amount of CPU. @ 04/28/24 15:40:45.17
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-216124e7-78f9-413a-95a0-544573a24294.17ca7be7aed5cf63], Reason = [Scheduled], Message = [Successfully assigned sched-pred-8209/filler-pod-216124e7-78f9-413a-95a0-544573a24294 to k8sconformance-m02] @ 04/28/24 15:40:45.172
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-216124e7-78f9-413a-95a0-544573a24294.17ca7be7cbd16ea7], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 04/28/24 15:40:45.172
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-216124e7-78f9-413a-95a0-544573a24294.17ca7be7cd80e1cf], Reason = [Created], Message = [Created container filler-pod-216124e7-78f9-413a-95a0-544573a24294] @ 04/28/24 15:40:45.172
  STEP: Considering event: 
  Type = [Warning], Name = [filler-pod-216124e7-78f9-413a-95a0-544573a24294.17ca7be7d1cc7640], Reason = [Failed], Message = [Error: failed to start container "filler-pod-216124e7-78f9-413a-95a0-544573a24294": Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error setting cgroup config for procHooks process: failed to write "553000": write /sys/fs/cgroup/cpu,cpuacct/kubepods/burstable/pod3a76d5c9-2ef3-484c-bf32-3222882ecdb7/filler-pod-216124e7-78f9-413a-95a0-544573a24294/cpu.cfs_quota_us: invalid argument: unknown] @ 04/28/24 15:40:45.172
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-c3c3e300-9171-44fd-b6cc-1c4b98a72b34.17ca7be7ae2da14c], Reason = [Scheduled], Message = [Successfully assigned sched-pred-8209/filler-pod-c3c3e300-9171-44fd-b6cc-1c4b98a72b34 to k8sconformance] @ 04/28/24 15:40:45.172
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-c3c3e300-9171-44fd-b6cc-1c4b98a72b34.17ca7be7cbaddaaa], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 04/28/24 15:40:45.172
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-c3c3e300-9171-44fd-b6cc-1c4b98a72b34.17ca7be7cd83b198], Reason = [Created], Message = [Created container filler-pod-c3c3e300-9171-44fd-b6cc-1c4b98a72b34] @ 04/28/24 15:40:45.172
  STEP: Considering event: 
  Type = [Warning], Name = [filler-pod-c3c3e300-9171-44fd-b6cc-1c4b98a72b34.17ca7be7d1cd145b], Reason = [Failed], Message = [Error: failed to start container "filler-pod-c3c3e300-9171-44fd-b6cc-1c4b98a72b34": Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error setting cgroup config for procHooks process: failed to write "500500": write /sys/fs/cgroup/cpu,cpuacct/kubepods/burstable/pod6878d166-dedc-45dd-b197-8e317e06e88c/filler-pod-c3c3e300-9171-44fd-b6cc-1c4b98a72b34/cpu.cfs_quota_us: invalid argument: unknown] @ 04/28/24 15:40:45.172
  STEP: Considering event: 
  Type = [Warning], Name = [additional-pod.17ca7be826aa5ae3], Reason = [FailedScheduling], Message = [0/2 nodes are available: 2 Insufficient cpu. preemption: 0/2 nodes are available: 2 No preemption victims found for incoming pod..] @ 04/28/24 15:40:45.181
  STEP: removing the label node off the node k8sconformance @ 04/28/24 15:40:46.181
  STEP: verifying the node doesn't have the label node @ 04/28/24 15:40:46.189
  STEP: removing the label node off the node k8sconformance-m02 @ 04/28/24 15:40:46.191
  STEP: verifying the node doesn't have the label node @ 04/28/24 15:40:46.201
  Apr 28 15:40:46.203: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-8209" for this suite. @ 04/28/24 15:40:46.206
â€¢ [3.117 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]
k8s.io/kubernetes/test/e2e/scheduling/preemption.go:812
  STEP: Creating a kubernetes client @ 04/28/24 15:40:46.211
  Apr 28 15:40:46.211: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename sched-preemption @ 04/28/24 15:40:46.212
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:40:46.222
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:40:46.224
  Apr 28 15:40:46.240: INFO: Waiting up to 1m0s for all nodes to be ready
  Apr 28 15:41:46.254: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Creating a kubernetes client @ 04/28/24 15:41:46.255
  Apr 28 15:41:46.255: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename sched-preemption-path @ 04/28/24 15:41:46.256
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:41:46.263
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:41:46.265
  Apr 28 15:41:46.274: INFO: PriorityClass.scheduling.k8s.io "p1" is invalid: value: Forbidden: may not be changed in an update.
  Apr 28 15:41:46.275: INFO: PriorityClass.scheduling.k8s.io "p2" is invalid: value: Forbidden: may not be changed in an update.
  Apr 28 15:41:46.285: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Apr 28 15:41:46.291: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-path-2004" for this suite. @ 04/28/24 15:41:46.311
  STEP: Destroying namespace "sched-preemption-7191" for this suite. @ 04/28/24 15:41:46.315
â€¢ [60.107 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_conversion_webhook.go:176
  STEP: Creating a kubernetes client @ 04/28/24 15:41:46.318
  Apr 28 15:41:46.318: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename crd-webhook @ 04/28/24 15:41:46.319
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:41:46.325
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:41:46.327
  STEP: Setting up server cert @ 04/28/24 15:41:46.329
  STEP: Create role binding to let cr conversion webhook read extension-apiserver-authentication @ 04/28/24 15:41:46.617
  STEP: Deploying the custom resource conversion webhook pod @ 04/28/24 15:41:46.621
  STEP: Wait for the deployment to be ready @ 04/28/24 15:41:46.629
  Apr 28 15:41:46.634: INFO: deployment "sample-crd-conversion-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/28/24 15:41:48.641
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 15:41:48.649
  Apr 28 15:41:49.649: INFO: Waiting for amount of service:e2e-test-crd-conversion-webhook endpoints to be 1
  Apr 28 15:41:49.653: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Creating a v1 custom resource @ 04/28/24 15:41:52.201
  STEP: Create a v2 custom resource @ 04/28/24 15:41:52.213
  STEP: List CRs in v1 @ 04/28/24 15:41:52.236
  STEP: List CRs in v2 @ 04/28/24 15:41:52.24
  Apr 28 15:41:52.242: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-webhook-5531" for this suite. @ 04/28/24 15:41:52.773
â€¢ [6.458 seconds]
------------------------------
[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_secret.go:119
  STEP: Creating a kubernetes client @ 04/28/24 15:41:52.777
  Apr 28 15:41:52.777: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 15:41:52.777
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:41:52.784
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:41:52.786
  STEP: Creating secret with name projected-secret-test-48064592-95d9-4e6d-a0bc-5128a78ed1dc @ 04/28/24 15:41:52.788
  STEP: Creating a pod to test consume secrets @ 04/28/24 15:41:52.791
  STEP: Saw pod success @ 04/28/24 15:41:56.804
  Apr 28 15:41:56.806: INFO: Trying to get logs from node k8sconformance-m02 pod pod-projected-secrets-f03210de-08d8-4bc1-990b-d938b1c8c5a3 container secret-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 15:41:56.811
  Apr 28 15:41:56.819: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5279" for this suite. @ 04/28/24 15:41:56.821
â€¢ [4.048 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:1493
  STEP: Creating a kubernetes client @ 04/28/24 15:41:56.825
  Apr 28 15:41:56.825: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 15:41:56.826
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:41:56.833
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:41:56.835
  STEP: creating a service clusterip-service with the type=ClusterIP in namespace services-6290 @ 04/28/24 15:41:56.837
  STEP: Creating active service to test reachability when its FQDN is referred as externalName for another service @ 04/28/24 15:41:56.847
  STEP: creating service externalsvc in namespace services-6290 @ 04/28/24 15:41:56.847
  STEP: creating replication controller externalsvc in namespace services-6290 @ 04/28/24 15:41:56.857
  I0428 15:41:56.862339      22 runners.go:197] Created replication controller with name: externalsvc, namespace: services-6290, replica count: 2
  I0428 15:41:59.913847      22 runners.go:197] externalsvc Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  STEP: changing the ClusterIP service to type=ExternalName @ 04/28/24 15:41:59.915
  Apr 28 15:41:59.925: INFO: Creating new exec pod
  Apr 28 15:42:01.935: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-6290 exec execpodzj25q -- /bin/sh -x -c nslookup clusterip-service.services-6290.svc.cluster.local'
  Apr 28 15:42:02.073: INFO: stderr: "+ nslookup clusterip-service.services-6290.svc.cluster.local\n"
  Apr 28 15:42:02.073: INFO: stdout: "Server:\t\t10.96.0.10\nAddress:\t10.96.0.10#53\n\nclusterip-service.services-6290.svc.cluster.local\tcanonical name = externalsvc.services-6290.svc.cluster.local.\nName:\texternalsvc.services-6290.svc.cluster.local\nAddress: 10.104.244.165\n\n"
  Apr 28 15:42:02.073: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController externalsvc in namespace services-6290, will wait for the garbage collector to delete the pods @ 04/28/24 15:42:02.075
  Apr 28 15:42:02.132: INFO: Deleting ReplicationController externalsvc took: 3.820492ms
  Apr 28 15:42:02.232: INFO: Terminating ReplicationController externalsvc pods took: 100.90963ms
  Apr 28 15:42:04.944: INFO: Cleaning up the ClusterIP to ExternalName test service
  STEP: Destroying namespace "services-6290" for this suite. @ 04/28/24 15:42:04.948
â€¢ [8.128 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/network/networking.go:107
  STEP: Creating a kubernetes client @ 04/28/24 15:42:04.954
  Apr 28 15:42:04.954: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename pod-network-test @ 04/28/24 15:42:04.954
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:42:04.961
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:42:04.963
  STEP: Performing setup for networking test in namespace pod-network-test-1937 @ 04/28/24 15:42:04.965
  STEP: creating a selector @ 04/28/24 15:42:04.965
  STEP: Creating the service pods in kubernetes @ 04/28/24 15:42:04.965
  Apr 28 15:42:04.965: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 04/28/24 15:42:17.001
  Apr 28 15:42:19.017: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Apr 28 15:42:19.017: INFO: Going to poll 10.244.0.10 on port 8083 at least 0 times, with a maximum of 34 tries before failing
  Apr 28 15:42:19.019: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://10.244.0.10:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-1937 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 15:42:19.019: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 15:42:19.019: INFO: ExecWithOptions: Clientset creation
  Apr 28 15:42:19.019: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-1937/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F10.244.0.10%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Apr 28 15:42:19.064: INFO: Found all 1 expected endpoints: [netserver-0]
  Apr 28 15:42:19.064: INFO: Going to poll 10.244.1.33 on port 8083 at least 0 times, with a maximum of 34 tries before failing
  Apr 28 15:42:19.066: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://10.244.1.33:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-1937 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 15:42:19.066: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 15:42:19.067: INFO: ExecWithOptions: Clientset creation
  Apr 28 15:42:19.067: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-1937/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F10.244.1.33%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Apr 28 15:42:19.108: INFO: Found all 1 expected endpoints: [netserver-1]
  Apr 28 15:42:19.108: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-1937" for this suite. @ 04/28/24 15:42:19.11
â€¢ [14.161 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:1533
  STEP: Creating a kubernetes client @ 04/28/24 15:42:19.116
  Apr 28 15:42:19.116: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 15:42:19.116
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:42:19.125
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:42:19.127
  STEP: creating a service nodeport-service with the type=NodePort in namespace services-7013 @ 04/28/24 15:42:19.129
  STEP: Creating active service to test reachability when its FQDN is referred as externalName for another service @ 04/28/24 15:42:19.138
  STEP: creating service externalsvc in namespace services-7013 @ 04/28/24 15:42:19.138
  STEP: creating replication controller externalsvc in namespace services-7013 @ 04/28/24 15:42:19.15
  I0428 15:42:19.154399      22 runners.go:197] Created replication controller with name: externalsvc, namespace: services-7013, replica count: 2
  I0428 15:42:22.205806      22 runners.go:197] externalsvc Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  STEP: changing the NodePort service to type=ExternalName @ 04/28/24 15:42:22.208
  Apr 28 15:42:22.219: INFO: Creating new exec pod
  Apr 28 15:42:24.242: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-7013 exec execpodrs7m5 -- /bin/sh -x -c nslookup nodeport-service.services-7013.svc.cluster.local'
  Apr 28 15:42:24.437: INFO: stderr: "+ nslookup nodeport-service.services-7013.svc.cluster.local\n"
  Apr 28 15:42:24.437: INFO: stdout: "Server:\t\t10.96.0.10\nAddress:\t10.96.0.10#53\n\nnodeport-service.services-7013.svc.cluster.local\tcanonical name = externalsvc.services-7013.svc.cluster.local.\nName:\texternalsvc.services-7013.svc.cluster.local\nAddress: 10.100.240.200\n\n"
  Apr 28 15:42:24.438: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController externalsvc in namespace services-7013, will wait for the garbage collector to delete the pods @ 04/28/24 15:42:24.44
  Apr 28 15:42:24.496: INFO: Deleting ReplicationController externalsvc took: 3.83805ms
  Apr 28 15:42:24.596: INFO: Terminating ReplicationController externalsvc pods took: 100.162741ms
  Apr 28 15:42:27.108: INFO: Cleaning up the NodePort to ExternalName test service
  STEP: Destroying namespace "services-7013" for this suite. @ 04/28/24 15:42:27.113
â€¢ [8.001 seconds]
------------------------------
SSSS
------------------------------
[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1342
  STEP: Creating a kubernetes client @ 04/28/24 15:42:27.117
  Apr 28 15:42:27.117: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 15:42:27.117
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:42:27.124
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:42:27.126
  Apr 28 15:42:27.128: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-6045 create -f -'
  Apr 28 15:42:27.287: INFO: stderr: ""
  Apr 28 15:42:27.287: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  Apr 28 15:42:27.288: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-6045 create -f -'
  Apr 28 15:42:27.453: INFO: stderr: ""
  Apr 28 15:42:27.453: INFO: stdout: "service/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 04/28/24 15:42:27.453
  Apr 28 15:42:28.457: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 28 15:42:28.457: INFO: Found 0 / 1
  Apr 28 15:42:29.456: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 28 15:42:29.456: INFO: Found 1 / 1
  Apr 28 15:42:29.456: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  Apr 28 15:42:29.458: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 28 15:42:29.458: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Apr 28 15:42:29.458: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-6045 describe pod agnhost-primary-fl2qg'
  Apr 28 15:42:29.516: INFO: stderr: ""
  Apr 28 15:42:29.516: INFO: stdout: "Name:             agnhost-primary-fl2qg\nNamespace:        kubectl-6045\nPriority:         0\nService Account:  default\nNode:             k8sconformance-m02/192.168.49.3\nStart Time:       Sun, 28 Apr 2024 15:42:27 +0000\nLabels:           app=agnhost\n                  role=primary\nAnnotations:      <none>\nStatus:           Running\nIP:               10.244.1.37\nIPs:\n  IP:           10.244.1.37\nControlled By:  ReplicationController/agnhost-primary\nContainers:\n  agnhost-primary:\n    Container ID:   docker://36838b1eff4d7bcf75da51ecbe7e6a384e0b7be9dc5820bb4ce36c26ffc76f5a\n    Image:          registry.k8s.io/e2e-test-images/agnhost:2.47\n    Image ID:       docker-pullable://registry.k8s.io/e2e-test-images/agnhost@sha256:cc249acbd34692826b2b335335615e060fdb3c0bca4954507aa3a1d1194de253\n    Port:           6379/TCP\n    Host Port:      0/TCP\n    State:          Running\n      Started:      Sun, 28 Apr 2024 15:42:27 +0000\n    Ready:          True\n    Restart Count:  0\n    Environment:    <none>\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-bghgx (ro)\nConditions:\n  Type              Status\n  Initialized       True \n  Ready             True \n  ContainersReady   True \n  PodScheduled      True \nVolumes:\n  kube-api-access-bghgx:\n    Type:                    Projected (a volume that contains injected data from multiple sources)\n    TokenExpirationSeconds:  3607\n    ConfigMapName:           kube-root-ca.crt\n    ConfigMapOptional:       <nil>\n    DownwardAPI:             true\nQoS Class:                   BestEffort\nNode-Selectors:              <none>\nTolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type    Reason     Age   From               Message\n  ----    ------     ----  ----               -------\n  Normal  Scheduled  2s    default-scheduler  Successfully assigned kubectl-6045/agnhost-primary-fl2qg to k8sconformance-m02\n  Normal  Pulled     2s    kubelet            Container image \"registry.k8s.io/e2e-test-images/agnhost:2.47\" already present on machine\n  Normal  Created    2s    kubelet            Created container agnhost-primary\n  Normal  Started    2s    kubelet            Started container agnhost-primary\n"
  Apr 28 15:42:29.516: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-6045 describe rc agnhost-primary'
  Apr 28 15:42:29.577: INFO: stderr: ""
  Apr 28 15:42:29.577: INFO: stdout: "Name:         agnhost-primary\nNamespace:    kubectl-6045\nSelector:     app=agnhost,role=primary\nLabels:       app=agnhost\n              role=primary\nAnnotations:  <none>\nReplicas:     1 current / 1 desired\nPods Status:  1 Running / 0 Waiting / 0 Succeeded / 0 Failed\nPod Template:\n  Labels:  app=agnhost\n           role=primary\n  Containers:\n   agnhost-primary:\n    Image:        registry.k8s.io/e2e-test-images/agnhost:2.47\n    Port:         6379/TCP\n    Host Port:    0/TCP\n    Environment:  <none>\n    Mounts:       <none>\n  Volumes:        <none>\nEvents:\n  Type    Reason            Age   From                    Message\n  ----    ------            ----  ----                    -------\n  Normal  SuccessfulCreate  2s    replication-controller  Created pod: agnhost-primary-fl2qg\n"
  Apr 28 15:42:29.577: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-6045 describe service agnhost-primary'
  Apr 28 15:42:29.637: INFO: stderr: ""
  Apr 28 15:42:29.637: INFO: stdout: "Name:              agnhost-primary\nNamespace:         kubectl-6045\nLabels:            app=agnhost\n                   role=primary\nAnnotations:       <none>\nSelector:          app=agnhost,role=primary\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.105.13.15\nIPs:               10.105.13.15\nPort:              <unset>  6379/TCP\nTargetPort:        agnhost-server/TCP\nEndpoints:         10.244.1.37:6379\nSession Affinity:  None\nEvents:            <none>\n"
  Apr 28 15:42:29.639: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-6045 describe node k8sconformance'
  Apr 28 15:42:29.712: INFO: stderr: ""
  Apr 28 15:42:29.712: INFO: stdout: "Name:               k8sconformance\nRoles:              control-plane\nLabels:             beta.kubernetes.io/arch=amd64\n                    beta.kubernetes.io/os=linux\n                    kubernetes.io/arch=amd64\n                    kubernetes.io/hostname=k8sconformance\n                    kubernetes.io/os=linux\n                    minikube.k8s.io/commit=96fc83d4ca53cca19fb85b9a720d51c4a50ddbcd\n                    minikube.k8s.io/name=k8sconformance\n                    minikube.k8s.io/primary=true\n                    minikube.k8s.io/updated_at=2024_04_28T15_26_43_0700\n                    minikube.k8s.io/version=v1.33.0\n                    node-role.kubernetes.io/control-plane=\n                    node.kubernetes.io/exclude-from-external-load-balancers=\nAnnotations:        kubeadm.alpha.kubernetes.io/cri-socket: unix:///var/run/cri-dockerd.sock\n                    node.alpha.kubernetes.io/ttl: 0\n                    volumes.kubernetes.io/controller-managed-attach-detach: true\nCreationTimestamp:  Sun, 28 Apr 2024 15:26:40 +0000\nTaints:             <none>\nUnschedulable:      false\nLease:\n  HolderIdentity:  k8sconformance\n  AcquireTime:     <unset>\n  RenewTime:       Sun, 28 Apr 2024 15:42:21 +0000\nConditions:\n  Type             Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message\n  ----             ------  -----------------                 ------------------                ------                       -------\n  MemoryPressure   False   Sun, 28 Apr 2024 15:40:19 +0000   Sun, 28 Apr 2024 15:26:38 +0000   KubeletHasSufficientMemory   kubelet has sufficient memory available\n  DiskPressure     False   Sun, 28 Apr 2024 15:40:19 +0000   Sun, 28 Apr 2024 15:26:38 +0000   KubeletHasNoDiskPressure     kubelet has no disk pressure\n  PIDPressure      False   Sun, 28 Apr 2024 15:40:19 +0000   Sun, 28 Apr 2024 15:26:38 +0000   KubeletHasSufficientPID      kubelet has sufficient PID available\n  Ready            True    Sun, 28 Apr 2024 15:40:19 +0000   Sun, 28 Apr 2024 15:26:53 +0000   KubeletReady                 kubelet is posting ready status\nAddresses:\n  InternalIP:  192.168.49.2\n  Hostname:    k8sconformance\nCapacity:\n  cpu:                8\n  ephemeral-storage:  304681132Ki\n  hugepages-1Gi:      0\n  hugepages-2Mi:      0\n  memory:             32859348Ki\n  pods:               110\nAllocatable:\n  cpu:                8\n  ephemeral-storage:  304681132Ki\n  hugepages-1Gi:      0\n  hugepages-2Mi:      0\n  memory:             32859348Ki\n  pods:               110\nSystem Info:\n  Machine ID:                 e6f35a92f002419aba9fdc05b0557c8d\n  System UUID:                a4feb50d-8a9e-497c-9f82-80cf9aa0b23c\n  Boot ID:                    83e2055c-0d74-4297-a283-0b61926c9d44\n  Kernel Version:             5.15.0-1058-gcp\n  OS Image:                   Ubuntu 22.04.4 LTS\n  Operating System:           linux\n  Architecture:               amd64\n  Container Runtime Version:  docker://26.0.2\n  Kubelet Version:            v1.28.9\n  Kube-Proxy Version:         v1.28.9\nPodCIDR:                      10.244.0.0/24\nPodCIDRs:                     10.244.0.0/24\nNon-terminated Pods:          (9 in total)\n  Namespace                   Name                                                       CPU Requests  CPU Limits  Memory Requests  Memory Limits  Age\n  ---------                   ----                                                       ------------  ----------  ---------------  -------------  ---\n  kube-system                 coredns-5dd5756b68-4wfsw                                   100m (1%)     0 (0%)      70Mi (0%)        170Mi (0%)     15m\n  kube-system                 etcd-k8sconformance                                        100m (1%)     0 (0%)      100Mi (0%)       0 (0%)         15m\n  kube-system                 kindnet-6nsws                                              100m (1%)     100m (1%)   50Mi (0%)        50Mi (0%)      15m\n  kube-system                 kube-apiserver-k8sconformance                              250m (3%)     0 (0%)      0 (0%)           0 (0%)         15m\n  kube-system                 kube-controller-manager-k8sconformance                     200m (2%)     0 (0%)      0 (0%)           0 (0%)         15m\n  kube-system                 kube-proxy-kjs4b                                           0 (0%)        0 (0%)      0 (0%)           0 (0%)         15m\n  kube-system                 kube-scheduler-k8sconformance                              100m (1%)     0 (0%)      0 (0%)           0 (0%)         15m\n  kube-system                 storage-provisioner                                        0 (0%)        0 (0%)      0 (0%)           0 (0%)         15m\n  sonobuoy                    sonobuoy-systemd-logs-daemon-set-5db54bb871f24159-clq66    0 (0%)        0 (0%)      0 (0%)           0 (0%)         14m\nAllocated resources:\n  (Total limits may be over 100 percent, i.e., overcommitted.)\n  Resource           Requests    Limits\n  --------           --------    ------\n  cpu                850m (10%)  100m (1%)\n  memory             220Mi (0%)  220Mi (0%)\n  ephemeral-storage  0 (0%)      0 (0%)\n  hugepages-1Gi      0 (0%)      0 (0%)\n  hugepages-2Mi      0 (0%)      0 (0%)\nEvents:\n  Type    Reason                   Age                From             Message\n  ----    ------                   ----               ----             -------\n  Normal  Starting                 15m                kube-proxy       \n  Normal  Starting                 15m                kubelet          Starting kubelet.\n  Normal  NodeAllocatableEnforced  15m                kubelet          Updated Node Allocatable limit across pods\n  Normal  NodeHasSufficientMemory  15m (x8 over 15m)  kubelet          Node k8sconformance status is now: NodeHasSufficientMemory\n  Normal  NodeHasNoDiskPressure    15m (x8 over 15m)  kubelet          Node k8sconformance status is now: NodeHasNoDiskPressure\n  Normal  NodeHasSufficientPID     15m (x7 over 15m)  kubelet          Node k8sconformance status is now: NodeHasSufficientPID\n  Normal  Starting                 15m                kubelet          Starting kubelet.\n  Normal  NodeHasSufficientMemory  15m                kubelet          Node k8sconformance status is now: NodeHasSufficientMemory\n  Normal  NodeHasNoDiskPressure    15m                kubelet          Node k8sconformance status is now: NodeHasNoDiskPressure\n  Normal  NodeHasSufficientPID     15m                kubelet          Node k8sconformance status is now: NodeHasSufficientPID\n  Normal  NodeNotReady             15m                kubelet          Node k8sconformance status is now: NodeNotReady\n  Normal  NodeAllocatableEnforced  15m                kubelet          Updated Node Allocatable limit across pods\n  Normal  NodeReady                15m                kubelet          Node k8sconformance status is now: NodeReady\n  Normal  RegisteredNode           15m                node-controller  Node k8sconformance event: Registered Node k8sconformance in Controller\n"
  Apr 28 15:42:29.712: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-6045 describe namespace kubectl-6045'
  Apr 28 15:42:29.772: INFO: stderr: ""
  Apr 28 15:42:29.772: INFO: stdout: "Name:         kubectl-6045\nLabels:       e2e-framework=kubectl\n              e2e-run=6426f1e2-5605-4610-a975-1487afbb13b8\n              kubernetes.io/metadata.name=kubectl-6045\n              pod-security.kubernetes.io/audit=baseline\n              pod-security.kubernetes.io/enforce=baseline\n              pod-security.kubernetes.io/warn=baseline\nAnnotations:  <none>\nStatus:       Active\n\nNo resource quota.\n\nNo LimitRange resource.\n"
  Apr 28 15:42:29.772: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-6045" for this suite. @ 04/28/24 15:42:29.775
â€¢ [2.663 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:222
  STEP: Creating a kubernetes client @ 04/28/24 15:42:29.78
  Apr 28 15:42:29.780: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 15:42:29.78
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:42:29.787
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:42:29.789
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 15:42:29.791
  STEP: Saw pod success @ 04/28/24 15:42:33.804
  Apr 28 15:42:33.806: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-47421855-8b25-4518-ac8e-1c4100142950 container client-container: <nil>
  STEP: delete the pod @ 04/28/24 15:42:33.811
  Apr 28 15:42:33.822: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-2295" for this suite. @ 04/28/24 15:42:33.824
â€¢ [4.048 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-network] Services should serve a basic endpoint from pods  [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:785
  STEP: Creating a kubernetes client @ 04/28/24 15:42:33.828
  Apr 28 15:42:33.828: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 15:42:33.829
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:42:33.836
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:42:33.838
  STEP: creating service endpoint-test2 in namespace services-5738 @ 04/28/24 15:42:33.84
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-5738 to expose endpoints map[] @ 04/28/24 15:42:33.847
  Apr 28 15:42:33.849: INFO: Failed go get Endpoints object: endpoints "endpoint-test2" not found
  Apr 28 15:42:34.853: INFO: successfully validated that service endpoint-test2 in namespace services-5738 exposes endpoints map[]
  STEP: Creating pod pod1 in namespace services-5738 @ 04/28/24 15:42:34.854
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-5738 to expose endpoints map[pod1:[80]] @ 04/28/24 15:42:36.867
  Apr 28 15:42:36.876: INFO: successfully validated that service endpoint-test2 in namespace services-5738 exposes endpoints map[pod1:[80]]
  STEP: Checking if the Service forwards traffic to pod1 @ 04/28/24 15:42:36.876
  Apr 28 15:42:36.876: INFO: Creating new exec pod
  Apr 28 15:42:39.885: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-5738 exec execpodnvj95 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Apr 28 15:42:39.984: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Apr 28 15:42:39.984: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 15:42:39.984: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-5738 exec execpodnvj95 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.104.127.96 80'
  Apr 28 15:42:40.095: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.104.127.96 80\nConnection to 10.104.127.96 80 port [tcp/http] succeeded!\n"
  Apr 28 15:42:40.095: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Creating pod pod2 in namespace services-5738 @ 04/28/24 15:42:40.095
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-5738 to expose endpoints map[pod1:[80] pod2:[80]] @ 04/28/24 15:42:42.106
  Apr 28 15:42:42.113: INFO: successfully validated that service endpoint-test2 in namespace services-5738 exposes endpoints map[pod1:[80] pod2:[80]]
  STEP: Checking if the Service forwards traffic to pod1 and pod2 @ 04/28/24 15:42:42.113
  Apr 28 15:42:43.114: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-5738 exec execpodnvj95 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Apr 28 15:42:43.216: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Apr 28 15:42:43.216: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 15:42:43.216: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-5738 exec execpodnvj95 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.104.127.96 80'
  Apr 28 15:42:43.309: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.104.127.96 80\nConnection to 10.104.127.96 80 port [tcp/http] succeeded!\n"
  Apr 28 15:42:43.309: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod1 in namespace services-5738 @ 04/28/24 15:42:43.309
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-5738 to expose endpoints map[pod2:[80]] @ 04/28/24 15:42:43.316
  Apr 28 15:42:44.332: INFO: successfully validated that service endpoint-test2 in namespace services-5738 exposes endpoints map[pod2:[80]]
  STEP: Checking if the Service forwards traffic to pod2 @ 04/28/24 15:42:44.332
  Apr 28 15:42:45.333: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-5738 exec execpodnvj95 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Apr 28 15:42:45.429: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Apr 28 15:42:45.429: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 15:42:45.429: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-5738 exec execpodnvj95 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.104.127.96 80'
  Apr 28 15:42:45.527: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.104.127.96 80\nConnection to 10.104.127.96 80 port [tcp/http] succeeded!\n"
  Apr 28 15:42:45.527: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod2 in namespace services-5738 @ 04/28/24 15:42:45.527
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-5738 to expose endpoints map[] @ 04/28/24 15:42:45.537
  Apr 28 15:42:45.544: INFO: successfully validated that service endpoint-test2 in namespace services-5738 exposes endpoints map[]
  Apr 28 15:42:45.544: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-5738" for this suite. @ 04/28/24 15:42:45.558
â€¢ [11.735 seconds]
------------------------------
[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance]
k8s.io/kubernetes/test/e2e/network/endpointslice.go:68
  STEP: Creating a kubernetes client @ 04/28/24 15:42:45.563
  Apr 28 15:42:45.563: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename endpointslice @ 04/28/24 15:42:45.564
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:42:45.573
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:42:45.575
  Apr 28 15:42:45.582: INFO: Endpoints addresses: [192.168.49.2] , ports: [8443]
  Apr 28 15:42:45.582: INFO: EndpointSlices addresses: [192.168.49.2] , ports: [8443]
  Apr 28 15:42:45.582: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-8414" for this suite. @ 04/28/24 15:42:45.584
â€¢ [0.025 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]
k8s.io/kubernetes/test/e2e/node/security_context.go:164
  STEP: Creating a kubernetes client @ 04/28/24 15:42:45.588
  Apr 28 15:42:45.588: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename security-context @ 04/28/24 15:42:45.589
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:42:45.597
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:42:45.599
  STEP: Creating a pod to test pod.Spec.SecurityContext.RunAsUser @ 04/28/24 15:42:45.601
  STEP: Saw pod success @ 04/28/24 15:42:49.613
  Apr 28 15:42:49.615: INFO: Trying to get logs from node k8sconformance-m02 pod security-context-04f10164-90c8-4d15-95ca-69b9ae14ae2d container test-container: <nil>
  STEP: delete the pod @ 04/28/24 15:42:49.62
  Apr 28 15:42:49.628: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-5969" for this suite. @ 04/28/24 15:42:49.63
â€¢ [4.046 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:236
  STEP: Creating a kubernetes client @ 04/28/24 15:42:49.635
  Apr 28 15:42:49.635: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 15:42:49.636
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:42:49.643
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:42:49.644
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 15:42:49.646
  STEP: Saw pod success @ 04/28/24 15:42:53.657
  Apr 28 15:42:53.659: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-ab02d5a0-a03e-4c7c-9a69-2afe06ab8175 container client-container: <nil>
  STEP: delete the pod @ 04/28/24 15:42:53.664
  Apr 28 15:42:53.671: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7523" for this suite. @ 04/28/24 15:42:53.673
â€¢ [4.040 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:619
  STEP: Creating a kubernetes client @ 04/28/24 15:42:53.677
  Apr 28 15:42:53.677: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename pods @ 04/28/24 15:42:53.677
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:42:53.683
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:42:53.685
  Apr 28 15:42:53.687: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: creating the pod @ 04/28/24 15:42:53.687
  STEP: submitting the pod to kubernetes @ 04/28/24 15:42:53.688
  Apr 28 15:42:55.711: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-2708" for this suite. @ 04/28/24 15:42:55.713
â€¢ [2.042 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:87
  STEP: Creating a kubernetes client @ 04/28/24 15:42:55.722
  Apr 28 15:42:55.722: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir @ 04/28/24 15:42:55.723
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:42:55.73
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:42:55.732
  STEP: Creating a pod to test emptydir volume type on tmpfs @ 04/28/24 15:42:55.735
  STEP: Saw pod success @ 04/28/24 15:42:59.746
  Apr 28 15:42:59.748: INFO: Trying to get logs from node k8sconformance-m02 pod pod-e0d918e4-a398-4e93-af7e-6239f7504b41 container test-container: <nil>
  STEP: delete the pod @ 04/28/24 15:42:59.753
  Apr 28 15:42:59.760: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-4278" for this suite. @ 04/28/24 15:42:59.762
â€¢ [4.043 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_conversion_webhook.go:141
  STEP: Creating a kubernetes client @ 04/28/24 15:42:59.765
  Apr 28 15:42:59.765: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename crd-webhook @ 04/28/24 15:42:59.766
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:42:59.773
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:42:59.775
  STEP: Setting up server cert @ 04/28/24 15:42:59.777
  STEP: Create role binding to let cr conversion webhook read extension-apiserver-authentication @ 04/28/24 15:43:00.143
  STEP: Deploying the custom resource conversion webhook pod @ 04/28/24 15:43:00.149
  STEP: Wait for the deployment to be ready @ 04/28/24 15:43:00.157
  Apr 28 15:43:00.162: INFO: deployment "sample-crd-conversion-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/28/24 15:43:02.168
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 15:43:02.176
  Apr 28 15:43:03.177: INFO: Waiting for amount of service:e2e-test-crd-conversion-webhook endpoints to be 1
  Apr 28 15:43:03.181: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Creating a v1 custom resource @ 04/28/24 15:43:05.726
  STEP: v2 custom resource should be converted @ 04/28/24 15:43:05.73
  Apr 28 15:43:05.733: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-webhook-2817" for this suite. @ 04/28/24 15:43:06.265
â€¢ [6.503 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:57
  STEP: Creating a kubernetes client @ 04/28/24 15:43:06.269
  Apr 28 15:43:06.269: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename secrets @ 04/28/24 15:43:06.27
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:43:06.28
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:43:06.282
  STEP: Creating secret with name secret-test-7a040b08-8a57-40e8-90eb-189e01ab1117 @ 04/28/24 15:43:06.284
  STEP: Creating a pod to test consume secrets @ 04/28/24 15:43:06.287
  STEP: Saw pod success @ 04/28/24 15:43:08.297
  Apr 28 15:43:08.299: INFO: Trying to get logs from node k8sconformance-m02 pod pod-secrets-5651daf7-1aa7-480c-b8e9-e20a93c22ae4 container secret-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 15:43:08.304
  Apr 28 15:43:08.310: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-470" for this suite. @ 04/28/24 15:43:08.312
â€¢ [2.048 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]
k8s.io/kubernetes/test/e2e/storage/subpath.go:91
  STEP: Creating a kubernetes client @ 04/28/24 15:43:08.317
  Apr 28 15:43:08.317: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename subpath @ 04/28/24 15:43:08.318
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:43:08.326
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:43:08.327
  STEP: Setting up data @ 04/28/24 15:43:08.329
  STEP: Creating pod pod-subpath-test-downwardapi-jztp @ 04/28/24 15:43:08.335
  STEP: Creating a pod to test atomic-volume-subpath @ 04/28/24 15:43:08.335
  STEP: Saw pod success @ 04/28/24 15:43:32.379
  Apr 28 15:43:32.380: INFO: Trying to get logs from node k8sconformance-m02 pod pod-subpath-test-downwardapi-jztp container test-container-subpath-downwardapi-jztp: <nil>
  STEP: delete the pod @ 04/28/24 15:43:32.386
  STEP: Deleting pod pod-subpath-test-downwardapi-jztp @ 04/28/24 15:43:32.394
  Apr 28 15:43:32.394: INFO: Deleting pod "pod-subpath-test-downwardapi-jztp" in namespace "subpath-9912"
  Apr 28 15:43:32.396: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-9912" for this suite. @ 04/28/24 15:43:32.398
â€¢ [24.083 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:2202
  STEP: Creating a kubernetes client @ 04/28/24 15:43:32.401
  Apr 28 15:43:32.401: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 15:43:32.402
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:43:32.409
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:43:32.411
  STEP: creating service in namespace services-6406 @ 04/28/24 15:43:32.413
  STEP: creating service affinity-nodeport in namespace services-6406 @ 04/28/24 15:43:32.413
  STEP: creating replication controller affinity-nodeport in namespace services-6406 @ 04/28/24 15:43:32.422
  I0428 15:43:32.426754      22 runners.go:197] Created replication controller with name: affinity-nodeport, namespace: services-6406, replica count: 3
  I0428 15:43:35.479145      22 runners.go:197] affinity-nodeport Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 28 15:43:35.485: INFO: Creating new exec pod
  Apr 28 15:43:38.496: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-6406 exec execpod-affinitysdfxb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-nodeport 80'
  Apr 28 15:43:38.595: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-nodeport 80\nConnection to affinity-nodeport 80 port [tcp/http] succeeded!\n"
  Apr 28 15:43:38.595: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 15:43:38.595: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-6406 exec execpod-affinitysdfxb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.97.87.220 80'
  Apr 28 15:43:38.688: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.97.87.220 80\nConnection to 10.97.87.220 80 port [tcp/http] succeeded!\n"
  Apr 28 15:43:38.688: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 15:43:38.688: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-6406 exec execpod-affinitysdfxb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 192.168.49.2 31081'
  Apr 28 15:43:38.785: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 192.168.49.2 31081\nConnection to 192.168.49.2 31081 port [tcp/*] succeeded!\n"
  Apr 28 15:43:38.785: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 15:43:38.785: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-6406 exec execpod-affinitysdfxb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 192.168.49.3 31081'
  Apr 28 15:43:38.881: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 192.168.49.3 31081\nConnection to 192.168.49.3 31081 port [tcp/*] succeeded!\n"
  Apr 28 15:43:38.881: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 15:43:38.881: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-6406 exec execpod-affinitysdfxb -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://192.168.49.2:31081/ ; done'
  Apr 28 15:43:39.031: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:31081/\n"
  Apr 28 15:43:39.031: INFO: stdout: "\naffinity-nodeport-q6jwj\naffinity-nodeport-q6jwj\naffinity-nodeport-q6jwj\naffinity-nodeport-q6jwj\naffinity-nodeport-q6jwj\naffinity-nodeport-q6jwj\naffinity-nodeport-q6jwj\naffinity-nodeport-q6jwj\naffinity-nodeport-q6jwj\naffinity-nodeport-q6jwj\naffinity-nodeport-q6jwj\naffinity-nodeport-q6jwj\naffinity-nodeport-q6jwj\naffinity-nodeport-q6jwj\naffinity-nodeport-q6jwj\naffinity-nodeport-q6jwj"
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Received response from host: affinity-nodeport-q6jwj
  Apr 28 15:43:39.031: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Apr 28 15:43:39.034: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-nodeport in namespace services-6406, will wait for the garbage collector to delete the pods @ 04/28/24 15:43:39.043
  Apr 28 15:43:39.099: INFO: Deleting ReplicationController affinity-nodeport took: 3.794308ms
  Apr 28 15:43:39.200: INFO: Terminating ReplicationController affinity-nodeport pods took: 101.142008ms
  STEP: Destroying namespace "services-6406" for this suite. @ 04/28/24 15:43:41.613
â€¢ [9.215 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:236
  STEP: Creating a kubernetes client @ 04/28/24 15:43:41.617
  Apr 28 15:43:41.617: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 15:43:41.618
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:43:41.624
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:43:41.626
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 15:43:41.628
  STEP: Saw pod success @ 04/28/24 15:43:43.637
  Apr 28 15:43:43.639: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-d86a362b-4937-4642-9cb1-59f04ce3b23f container client-container: <nil>
  STEP: delete the pod @ 04/28/24 15:43:43.644
  Apr 28 15:43:43.652: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-2630" for this suite. @ 04/28/24 15:43:43.654
â€¢ [2.042 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]
k8s.io/kubernetes/test/e2e/storage/subpath.go:59
  STEP: Creating a kubernetes client @ 04/28/24 15:43:43.66
  Apr 28 15:43:43.660: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename subpath @ 04/28/24 15:43:43.66
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:43:43.667
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:43:43.669
  STEP: Setting up data @ 04/28/24 15:43:43.671
  STEP: Creating pod pod-subpath-test-secret-hsfb @ 04/28/24 15:43:43.676
  STEP: Creating a pod to test atomic-volume-subpath @ 04/28/24 15:43:43.676
  STEP: Saw pod success @ 04/28/24 15:44:07.727
  Apr 28 15:44:07.729: INFO: Trying to get logs from node k8sconformance-m02 pod pod-subpath-test-secret-hsfb container test-container-subpath-secret-hsfb: <nil>
  STEP: delete the pod @ 04/28/24 15:44:07.735
  STEP: Deleting pod pod-subpath-test-secret-hsfb @ 04/28/24 15:44:07.745
  Apr 28 15:44:07.745: INFO: Deleting pod "pod-subpath-test-secret-hsfb" in namespace "subpath-9033"
  Apr 28 15:44:07.746: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-9033" for this suite. @ 04/28/24 15:44:07.748
â€¢ [24.092 seconds]
------------------------------
SSS
------------------------------
[sig-node] Probing container should be restarted with a exec "cat /tmp/health" liveness probe [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:134
  STEP: Creating a kubernetes client @ 04/28/24 15:44:07.752
  Apr 28 15:44:07.752: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-probe @ 04/28/24 15:44:07.752
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:44:07.76
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:44:07.762
  STEP: Creating pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799 @ 04/28/24 15:44:07.763
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/28/24 15:44:09.772
  Apr 28 15:44:09.774: INFO: Initial restart count of pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f is 0
  Apr 28 15:44:09.776: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:11.779: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:13.781: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:15.785: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:17.788: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:19.792: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:21.795: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:23.798: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:25.801: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:27.803: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:29.807: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:31.813: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:33.818: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:35.820: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:37.823: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:39.827: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:41.830: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:43.833: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:45.837: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:47.840: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:49.843: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:51.846: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:53.849: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:55.852: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:57.855: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:59.858: INFO: Get pod busybox-0177196a-b9bb-4a63-8303-ad3304eac62f in namespace container-probe-4799
  Apr 28 15:44:59.858: INFO: Restart count of pod container-probe-4799/busybox-0177196a-b9bb-4a63-8303-ad3304eac62f is now 1 (50.084161098s elapsed)
  Apr 28 15:44:59.858: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 04/28/24 15:44:59.861
  STEP: Destroying namespace "container-probe-4799" for this suite. @ 04/28/24 15:44:59.868
â€¢ [52.119 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtimeclass.go:129
  STEP: Creating a kubernetes client @ 04/28/24 15:44:59.871
  Apr 28 15:44:59.871: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename runtimeclass @ 04/28/24 15:44:59.872
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:44:59.878
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:44:59.88
  Apr 28 15:45:01.893: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-4706" for this suite. @ 04/28/24 15:45:01.9
â€¢ [2.032 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:403
  STEP: Creating a kubernetes client @ 04/28/24 15:45:01.903
  Apr 28 15:45:01.903: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 15:45:01.904
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:45:01.911
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:45:01.912
  STEP: Setting up server cert @ 04/28/24 15:45:01.925
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 15:45:02.189
  STEP: Deploying the webhook pod @ 04/28/24 15:45:02.194
  STEP: Wait for the deployment to be ready @ 04/28/24 15:45:02.203
  Apr 28 15:45:02.208: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/28/24 15:45:04.215
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 15:45:04.224
  Apr 28 15:45:05.224: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Creating a validating webhook configuration @ 04/28/24 15:45:05.228
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 04/28/24 15:45:05.239
  STEP: Updating a validating webhook configuration's rules to not include the create operation @ 04/28/24 15:45:05.246
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 04/28/24 15:45:05.252
  STEP: Patching a validating webhook configuration's rules to include the create operation @ 04/28/24 15:45:05.258
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 04/28/24 15:45:05.262
  Apr 28 15:45:05.268: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-1749" for this suite. @ 04/28/24 15:45:05.291
  STEP: Destroying namespace "webhook-markers-7851" for this suite. @ 04/28/24 15:45:05.293
â€¢ [3.393 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/aggregator.go:96
  STEP: Creating a kubernetes client @ 04/28/24 15:45:05.297
  Apr 28 15:45:05.297: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename aggregator @ 04/28/24 15:45:05.298
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:45:05.307
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:45:05.309
  Apr 28 15:45:05.311: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Registering the sample API server. @ 04/28/24 15:45:05.312
  Apr 28 15:45:05.500: INFO: Found ClusterRoles; assuming RBAC is enabled.
  Apr 28 15:45:05.516: INFO: deployment "sample-apiserver-deployment" doesn't have the required revision set
  Apr 28 15:45:07.547: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 15:45:09.549: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 15:45:11.549: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 15:45:13.550: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 15:45:15.550: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 15:45:17.550: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 15:45:19.550: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 15:45:21.550: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 15:45:23.550: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 15:45:25.550: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 15:45:27.550: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 5, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-5769b9d9dd\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 15:45:29.663: INFO: Waited 108.245452ms for the sample-apiserver to be ready to handle requests.
  STEP: Read Status for v1alpha1.wardle.example.com @ 04/28/24 15:45:29.691
  STEP: kubectl patch apiservice v1alpha1.wardle.example.com -p '{"spec":{"versionPriority": 400}}' @ 04/28/24 15:45:29.693
  STEP: List APIServices @ 04/28/24 15:45:29.697
  Apr 28 15:45:29.701: INFO: Found v1alpha1.wardle.example.com in APIServiceList
  STEP: Adding a label to the APIService @ 04/28/24 15:45:29.701
  Apr 28 15:45:29.726: INFO: APIService labels: map[e2e-apiservice:patched]
  STEP: Updating APIService Status @ 04/28/24 15:45:29.726
  Apr 28 15:45:29.741: INFO: updatedStatus.Conditions: []v1.APIServiceCondition{v1.APIServiceCondition{Type:"Available", Status:"True", LastTransitionTime:time.Date(2024, time.April, 28, 15, 45, 29, 0, time.Local), Reason:"Passed", Message:"all checks passed"}, v1.APIServiceCondition{Type:"StatusUpdated", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: Confirm that v1alpha1.wardle.example.com /status was updated @ 04/28/24 15:45:29.741
  Apr 28 15:45:29.743: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[e2e-apiservice:patched] & Condition: {Available True 2024-04-28 15:45:29 +0000 UTC Passed all checks passed}
  Apr 28 15:45:29.743: INFO: Found APIService v1alpha1.wardle.example.com with Labels: map[e2e-apiservice:patched] & Condition: {StatusUpdated True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Apr 28 15:45:29.743: INFO: Found updated status condition for v1alpha1.wardle.example.com
  STEP: Replace APIService v1alpha1.wardle.example.com @ 04/28/24 15:45:29.743
  Apr 28 15:45:29.750: INFO: Found updated apiService label for "v1alpha1.wardle.example.com"
  STEP: Delete APIService "dynamic-flunder-44684841" @ 04/28/24 15:45:29.75
  STEP: Recreating test-flunder before removing endpoint via deleteCollection @ 04/28/24 15:45:29.757
  STEP: Read v1alpha1.wardle.example.com /status before patching it @ 04/28/24 15:45:29.761
  STEP: Patch APIService Status @ 04/28/24 15:45:29.763
  STEP: Confirm that v1alpha1.wardle.example.com /status was patched @ 04/28/24 15:45:29.768
  Apr 28 15:45:29.770: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {Available True 2024-04-28 15:45:29 +0000 UTC Passed all checks passed}
  Apr 28 15:45:29.770: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {StatusUpdated True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Apr 28 15:45:29.770: INFO: Found APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC E2E Set by e2e test}
  Apr 28 15:45:29.770: INFO: Found patched status condition for v1alpha1.wardle.example.com
  STEP: APIService deleteCollection with labelSelector: "e2e-apiservice=patched" @ 04/28/24 15:45:29.77
  STEP: Confirm that the generated APIService has been deleted @ 04/28/24 15:45:29.773
  Apr 28 15:45:29.773: INFO: Requesting list of APIServices to confirm quantity
  Apr 28 15:45:29.776: INFO: Found 0 APIService with label "e2e-apiservice=patched"
  Apr 28 15:45:29.776: INFO: APIService v1alpha1.wardle.example.com has been deleted.
  Apr 28 15:45:29.817: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "aggregator-5780" for this suite. @ 04/28/24 15:45:29.837
â€¢ [24.543 seconds]
------------------------------
S
------------------------------
[sig-node] Probing container should be restarted with a GRPC liveness probe [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:550
  STEP: Creating a kubernetes client @ 04/28/24 15:45:29.84
  Apr 28 15:45:29.841: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-probe @ 04/28/24 15:45:29.841
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:45:29.849
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:45:29.853
  STEP: Creating pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342 @ 04/28/24 15:45:29.856
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/28/24 15:45:31.867
  Apr 28 15:45:31.869: INFO: Initial restart count of pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 is 0
  Apr 28 15:45:31.870: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:45:33.873: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:45:35.876: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:45:37.878: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:45:39.881: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:45:41.885: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:45:43.888: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:45:45.892: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:45:47.895: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:45:49.898: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:45:51.902: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:45:53.904: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:45:55.907: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:45:57.911: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:45:59.914: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:01.917: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:03.921: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:05.923: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:07.927: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:09.929: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:11.933: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:13.936: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:15.939: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:17.942: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:19.945: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:21.949: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:23.952: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:25.955: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:27.958: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:29.961: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:31.964: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:33.968: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:35.971: INFO: Get pod test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 in namespace container-probe-7342
  Apr 28 15:46:35.971: INFO: Restart count of pod container-probe-7342/test-grpc-ec96ce73-6032-4427-a126-e081c2c3ee21 is now 1 (1m4.102495757s elapsed)
  Apr 28 15:46:35.971: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 04/28/24 15:46:35.973
  STEP: Destroying namespace "container-probe-7342" for this suite. @ 04/28/24 15:46:35.98
â€¢ [66.142 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] Sysctls [LinuxOnly] [NodeConformance] should reject invalid sysctls [MinimumKubeletVersion:1.21] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/sysctl.go:123
  STEP: Creating a kubernetes client @ 04/28/24 15:46:35.983
  Apr 28 15:46:35.983: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename sysctl @ 04/28/24 15:46:35.984
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:46:35.992
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:46:35.993
  STEP: Creating a pod with one valid and two invalid sysctls @ 04/28/24 15:46:35.995
  Apr 28 15:46:35.998: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sysctl-5996" for this suite. @ 04/28/24 15:46:36
â€¢ [0.020 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:996
  STEP: Creating a kubernetes client @ 04/28/24 15:46:36.003
  Apr 28 15:46:36.004: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 15:46:36.004
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:46:36.012
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:46:36.013
  STEP: create deployment with httpd image @ 04/28/24 15:46:36.015
  Apr 28 15:46:36.015: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-4596 create -f -'
  Apr 28 15:46:36.183: INFO: stderr: ""
  Apr 28 15:46:36.183: INFO: stdout: "deployment.apps/httpd-deployment created\n"
  STEP: verify diff finds difference between live and declared image @ 04/28/24 15:46:36.183
  Apr 28 15:46:36.183: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-4596 diff -f -'
  Apr 28 15:46:36.327: INFO: rc: 1
  Apr 28 15:46:36.327: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-4596 delete -f -'
  Apr 28 15:46:36.380: INFO: stderr: ""
  Apr 28 15:46:36.380: INFO: stdout: "deployment.apps \"httpd-deployment\" deleted\n"
  Apr 28 15:46:36.381: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-4596" for this suite. @ 04/28/24 15:46:36.383
â€¢ [0.383 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:887
  STEP: Creating a kubernetes client @ 04/28/24 15:46:36.386
  Apr 28 15:46:36.387: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename resourcequota @ 04/28/24 15:46:36.387
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:46:36.397
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:46:36.399
  STEP: Creating a ResourceQuota @ 04/28/24 15:46:36.401
  STEP: Getting a ResourceQuota @ 04/28/24 15:46:36.403
  STEP: Updating a ResourceQuota @ 04/28/24 15:46:36.405
  STEP: Verifying a ResourceQuota was modified @ 04/28/24 15:46:36.412
  STEP: Deleting a ResourceQuota @ 04/28/24 15:46:36.413
  STEP: Verifying the deleted ResourceQuota @ 04/28/24 15:46:36.416
  Apr 28 15:46:36.418: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-9623" for this suite. @ 04/28/24 15:46:36.42
â€¢ [0.036 seconds]
------------------------------
SSSS
------------------------------
[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/configmap.go:93
  STEP: Creating a kubernetes client @ 04/28/24 15:46:36.423
  Apr 28 15:46:36.423: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename configmap @ 04/28/24 15:46:36.423
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:46:36.432
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:46:36.434
  STEP: Creating configMap configmap-9636/configmap-test-bb5b8b55-4272-40c4-819d-20c4472f5666 @ 04/28/24 15:46:36.436
  STEP: Creating a pod to test consume configMaps @ 04/28/24 15:46:36.438
  STEP: Saw pod success @ 04/28/24 15:46:40.451
  Apr 28 15:46:40.453: INFO: Trying to get logs from node k8sconformance-m02 pod pod-configmaps-6a1f8a24-2647-470b-8245-8d106f0f3797 container env-test: <nil>
  STEP: delete the pod @ 04/28/24 15:46:40.465
  Apr 28 15:46:40.474: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-9636" for this suite. @ 04/28/24 15:46:40.476
â€¢ [4.057 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/lifecycle_hook.go:152
  STEP: Creating a kubernetes client @ 04/28/24 15:46:40.481
  Apr 28 15:46:40.481: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 04/28/24 15:46:40.482
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:46:40.488
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:46:40.49
  STEP: create the container to handle the HTTPGet hook request. @ 04/28/24 15:46:40.494
  STEP: create the pod with lifecycle hook @ 04/28/24 15:46:42.507
  STEP: delete the pod with lifecycle hook @ 04/28/24 15:46:44.518
  STEP: check prestop hook @ 04/28/24 15:46:46.527
  Apr 28 15:46:46.539: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-3740" for this suite. @ 04/28/24 15:46:46.541
â€¢ [6.064 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/downwardapi.go:268
  STEP: Creating a kubernetes client @ 04/28/24 15:46:46.545
  Apr 28 15:46:46.545: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 15:46:46.545
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:46:46.553
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:46:46.555
  STEP: Creating a pod to test downward api env vars @ 04/28/24 15:46:46.557
  STEP: Saw pod success @ 04/28/24 15:46:50.569
  Apr 28 15:46:50.570: INFO: Trying to get logs from node k8sconformance-m02 pod downward-api-9cd940dc-2118-413e-af78-70b5ff2b8874 container dapi-container: <nil>
  STEP: delete the pod @ 04/28/24 15:46:50.576
  Apr 28 15:46:50.585: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-3955" for this suite. @ 04/28/24 15:46:50.587
â€¢ [4.045 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:85
  STEP: Creating a kubernetes client @ 04/28/24 15:46:50.59
  Apr 28 15:46:50.590: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 15:46:50.591
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:46:50.599
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:46:50.6
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 15:46:50.602
  STEP: Saw pod success @ 04/28/24 15:46:54.614
  Apr 28 15:46:54.616: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-0d187001-e898-4309-a479-e6c81fff05a9 container client-container: <nil>
  STEP: delete the pod @ 04/28/24 15:46:54.622
  Apr 28 15:46:54.629: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2679" for this suite. @ 04/28/24 15:46:54.631
â€¢ [4.045 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]
k8s.io/kubernetes/test/e2e/common/node/init_container.go:459
  STEP: Creating a kubernetes client @ 04/28/24 15:46:54.637
  Apr 28 15:46:54.637: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename init-container @ 04/28/24 15:46:54.638
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:46:54.645
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:46:54.647
  STEP: creating the pod @ 04/28/24 15:46:54.649
  Apr 28 15:46:54.649: INFO: PodSpec: initContainers in spec.initContainers
  Apr 28 15:46:57.999: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-1941" for this suite. @ 04/28/24 15:46:58.001
â€¢ [3.367 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:332
  STEP: Creating a kubernetes client @ 04/28/24 15:46:58.005
  Apr 28 15:46:58.005: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 15:46:58.005
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:46:58.013
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:46:58.014
  STEP: Setting up server cert @ 04/28/24 15:46:58.028
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 15:46:58.321
  STEP: Deploying the webhook pod @ 04/28/24 15:46:58.326
  STEP: Wait for the deployment to be ready @ 04/28/24 15:46:58.334
  Apr 28 15:46:58.339: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/28/24 15:47:00.345
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 15:47:00.353
  Apr 28 15:47:01.353: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Apr 28 15:47:01.357: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-6139-crds.webhook.example.com via the AdmissionRegistration API @ 04/28/24 15:47:01.865
  STEP: Creating a custom resource that should be mutated by the webhook @ 04/28/24 15:47:01.875
  Apr 28 15:47:03.902: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-592" for this suite. @ 04/28/24 15:47:04.47
  STEP: Destroying namespace "webhook-markers-6820" for this suite. @ 04/28/24 15:47:04.473
â€¢ [6.472 seconds]
------------------------------
SSSS
------------------------------
[sig-apps] Deployment deployment should support proportional scaling [Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:160
  STEP: Creating a kubernetes client @ 04/28/24 15:47:04.477
  Apr 28 15:47:04.477: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename deployment @ 04/28/24 15:47:04.477
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:47:04.486
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:47:04.488
  Apr 28 15:47:04.490: INFO: Creating deployment "webserver-deployment"
  Apr 28 15:47:04.494: INFO: Waiting for observed generation 1
  Apr 28 15:47:06.500: INFO: Waiting for all required pods to come up
  Apr 28 15:47:06.505: INFO: Pod name httpd: Found 10 pods out of 10
  STEP: ensuring each pod is running @ 04/28/24 15:47:06.505
  Apr 28 15:47:08.511: INFO: Waiting for deployment "webserver-deployment" to complete
  Apr 28 15:47:08.515: INFO: Updating deployment "webserver-deployment" with a non-existent image
  Apr 28 15:47:08.521: INFO: Updating deployment webserver-deployment
  Apr 28 15:47:08.521: INFO: Waiting for observed generation 2
  Apr 28 15:47:10.526: INFO: Waiting for the first rollout's replicaset to have .status.availableReplicas = 8
  Apr 28 15:47:10.528: INFO: Waiting for the first rollout's replicaset to have .spec.replicas = 8
  Apr 28 15:47:10.529: INFO: Waiting for the first rollout's replicaset of deployment "webserver-deployment" to have desired number of replicas
  Apr 28 15:47:10.533: INFO: Verifying that the second rollout's replicaset has .status.availableReplicas = 0
  Apr 28 15:47:10.533: INFO: Waiting for the second rollout's replicaset to have .spec.replicas = 5
  Apr 28 15:47:10.535: INFO: Waiting for the second rollout's replicaset of deployment "webserver-deployment" to have desired number of replicas
  Apr 28 15:47:10.537: INFO: Verifying that deployment "webserver-deployment" has minimum required number of available replicas
  Apr 28 15:47:10.537: INFO: Scaling up the deployment "webserver-deployment" from 10 to 30
  Apr 28 15:47:10.542: INFO: Updating deployment webserver-deployment
  Apr 28 15:47:10.542: INFO: Waiting for the replicasets of deployment "webserver-deployment" to have desired number of replicas
  Apr 28 15:47:10.544: INFO: Verifying that first rollout's replicaset has .spec.replicas = 20
  Apr 28 15:47:10.547: INFO: Verifying that second rollout's replicaset has .spec.replicas = 13
  Apr 28 15:47:12.564: INFO: Deployment "webserver-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=20) "webserver-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "4a8ddcb4-4183-4dd2-b92d-ad2346f93723",
      ResourceVersion: (string) (len=4) "4455",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=635) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 68  74 74 70 64 5c 22 7d 22  |me\":\"httpd\"}"|
              00000160  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000170  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000180  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000190  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              000001a0  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              000001b0  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              000001c0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001d0  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000001e0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000001f0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              00000200  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              00000210  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              00000220  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              00000230  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000270  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=541) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 6e 61  |licas":{},"f:una|
              000001f0  76 61 69 6c 61 62 6c 65  52 65 70 6c 69 63 61 73  |vailableReplicas|
              00000200  22 3a 7b 7d 2c 22 66 3a  75 70 64 61 74 65 64 52  |":{},"f:updatedR|
              00000210  65 70 6c 69 63 61 73 22  3a 7b 7d 7d 7d           |eplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(30),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=13) "webserver:404",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 2,
            StrVal: (string) ""
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 3,
            StrVal: (string) ""
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 3,
      Replicas: (int32) 33,
      UpdatedReplicas: (int32) 13,
      ReadyReplicas: (int32) 9,
      AvailableReplicas: (int32) 9,
      UnavailableReplicas: (int32) 24,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=26) "MinimumReplicasUnavailable",
          Message: (string) (len=46) "Deployment does not have minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=17) "ReplicaSetUpdated",
          Message: (string) (len=59) "ReplicaSet \"webserver-deployment-9b4f5bf69\" is progressing."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Apr 28 15:47:12.642: INFO: New ReplicaSet "webserver-deployment-9b4f5bf69" of Deployment "webserver-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ea2855bb-168f-4377-b203-ffe027c467f5",
      ResourceVersion: (string) (len=4) "4377",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916028,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=2) "30",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=2) "33",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=20) "webserver-deployment",
          UID: (types.UID) (len=36) "4a8ddcb4-4183-4dd2-b92d-ad2346f93723",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 34 61 38 64 64 63  62 34 2d 34 31 38 33 2d  |\"4a8ddcb4-4183-|
              00000120  34 64 64 32 2d 62 39 32  64 2d 61 64 32 33 34 36  |4dd2-b92d-ad2346|
              00000130  66 39 33 37 32 33 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |f93723\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=84) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  66 75 6c 6c 79 4c 61 62  65 6c 65 64 52 65 70 6c  |fullyLabeledRepl|
              00000020  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |icas":{},"f:obse|
              00000030  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              00000040  7b 7d 2c 22 66 3a 72 65  70 6c 69 63 61 73 22 3a  |{},"f:replicas":|
              00000050  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(13),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69",
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=13) "webserver:404",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 13,
      FullyLabeledReplicas: (int32) 13,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 28 15:47:12.643: INFO: All old ReplicaSets of Deployment "webserver-deployment":
  Apr 28 15:47:12.643: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "webserver-deployment-557759b7c7",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
      ResourceVersion: (string) (len=4) "4454",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=2) "30",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=2) "33",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=20) "webserver-deployment",
          UID: (types.UID) (len=36) "4a8ddcb4-4183-4dd2-b92d-ad2346f93723",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 34 61 38 64 64 63  62 34 2d 34 31 38 33 2d  |\"4a8ddcb4-4183-|
              00000120  34 64 64 32 2d 62 39 32  64 2d 61 64 32 33 34 36  |4dd2-b92d-ad2346|
              00000130  66 39 33 37 32 33 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |f93723\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(20),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 20,
      FullyLabeledReplicas: (int32) 20,
      ReadyReplicas: (int32) 9,
      AvailableReplicas: (int32) 9,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 28 15:47:12.742: INFO: Pod "webserver-deployment-557759b7c7-6btjr" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-6btjr",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a0a2ef53-f861-4e20-aa57-7c9fd0bedb16",
      ResourceVersion: (string) (len=4) "4208",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 32 34 34 2e 31  2e 36 34 5c 22 7d 22 3a  |10.244.1.64\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-tlqq2",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-tlqq2",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.244.1.64",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.244.1.64"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849916025,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=127) "docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=73) "docker://7f34b0bff3d8011a5208b209ca6a37ed5b3e551e952263c00a54287879d56c25",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.744: INFO: Pod "webserver-deployment-557759b7c7-6mvh7" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-6mvh7",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "8e94e4ec-52cb-4abe-a967-c336a51ac7b1",
      ResourceVersion: (string) (len=4) "4457",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 32 34 34 2e 31  2e 37 37 5c 22 7d 22 3a  |10.244.1.77\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-g4ntf",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-g4ntf",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.244.1.77",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.244.1.77"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849916032,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=127) "docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=73) "docker://3993b1c7e114f0ad2b2f2a8128b354c92832724b7feb1b9eb053524e3ec5d5b8",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.746: INFO: Pod "webserver-deployment-557759b7c7-9485l" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-9485l",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a45e3808-e0bf-4c50-aea5-02d0e1df212a",
      ResourceVersion: (string) (len=4) "4210",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 32 34 34 2e 31  2e 36 35 5c 22 7d 22 3a  |10.244.1.65\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-bblcr",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-bblcr",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.244.1.65",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.244.1.65"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849916025,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=127) "docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=73) "docker://3c7a2fd1af06c77f8cafb390efd925b85f765caa12eaf3163d50fa191d521bf7",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.756: INFO: Pod "webserver-deployment-557759b7c7-9gw9k" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-9gw9k",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6cf0b693-780e-4270-a0a7-9e20888d9e62",
      ResourceVersion: (string) (len=4) "4217",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916027,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 32 34 34 2e 30  2e 31 39 5c 22 7d 22 3a  |10.244.0.19\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-mp56d",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-mp56d",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.244.0.19",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.244.0.19"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849916025,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=127) "docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=73) "docker://b388dbd8fb3243cf8ff4da559fc4c8d4feb926964c0694799bc4307aef08b4ef",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.758: INFO: Pod "webserver-deployment-557759b7c7-9h2qs" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-9h2qs",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "1bafc76d-af41-43ab-9a6c-db39dc6e346f",
      ResourceVersion: (string) (len=4) "4199",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916025,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 32 34 34 2e 30  2e 31 36 5c 22 7d 22 3a  |10.244.0.16\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-d6t4v",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-d6t4v",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916025,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916025,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.244.0.16",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.244.0.16"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849916025,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=127) "docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=73) "docker://d83d3bc90c6160f26cf672c52dafd6081059fae00687ad64e8dfd329baaf6d2e",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.760: INFO: Pod "webserver-deployment-557759b7c7-b969w" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-b969w",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "dc5ae431-63c0-4d77-a884-d959979d93c4",
      ResourceVersion: (string) (len=4) "4364",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-wnzvx",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-wnzvx",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.763: INFO: Pod "webserver-deployment-557759b7c7-cgqjb" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-cgqjb",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e10175fb-32b2-4484-9063-21849564074d",
      ResourceVersion: (string) (len=4) "4391",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-wkgmp",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-wkgmp",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.765: INFO: Pod "webserver-deployment-557759b7c7-cqvvn" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-cqvvn",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "fb47156e-757b-4205-87ed-ca7f787b7cbf",
      ResourceVersion: (string) (len=4) "4399",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-cwvkk",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-cwvkk",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.767: INFO: Pod "webserver-deployment-557759b7c7-fdq5s" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-fdq5s",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "05411f54-426c-49a1-a9ab-55b8847342aa",
      ResourceVersion: (string) (len=4) "4373",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-r6pc5",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-r6pc5",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.769: INFO: Pod "webserver-deployment-557759b7c7-hdgbp" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-hdgbp",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d5f20be2-36e9-4854-82c6-6c639433c557",
      ResourceVersion: (string) (len=4) "4214",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 32 34 34 2e 31  2e 36 36 5c 22 7d 22 3a  |10.244.1.66\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-mxxhv",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-mxxhv",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.244.1.66",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.244.1.66"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849916025,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=127) "docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=73) "docker://fcbf1670b94e533b0e7c74c7270b0c7226703906fe8900098ffbf62b06fcef6a",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.771: INFO: Pod "webserver-deployment-557759b7c7-jdpnh" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-jdpnh",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "35692e8e-0de1-457a-944d-26998cbf46df",
      ResourceVersion: (string) (len=4) "4403",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-2r9h9",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-2r9h9",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.773: INFO: Pod "webserver-deployment-557759b7c7-kxbxg" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-kxbxg",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "b9b0738a-60d0-45b1-90ef-0e7ec868bc33",
      ResourceVersion: (string) (len=4) "4202",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 32 34 34 2e 31  2e 36 37 5c 22 7d 22 3a  |10.244.1.67\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-svc6w",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-svc6w",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.244.1.67",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.244.1.67"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849916025,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=127) "docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=73) "docker://7d825a2c4bff3edfda535705305f723c6677dccedb45d514b2bead1fef2ffb2c",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.775: INFO: Pod "webserver-deployment-557759b7c7-mfp8k" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-mfp8k",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7354181a-100f-4bac-ba3e-0d4c2e834395",
      ResourceVersion: (string) (len=4) "4387",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-6956d",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-6956d",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.777: INFO: Pod "webserver-deployment-557759b7c7-nvz2x" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-nvz2x",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7413cf39-11d1-42e0-ad21-35d55c94d358",
      ResourceVersion: (string) (len=4) "4195",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916025,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 32 34 34 2e 30  2e 31 37 5c 22 7d 22 3a  |10.244.0.17\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-pq4hk",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-pq4hk",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916025,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916025,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.244.0.17",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.244.0.17"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849916025,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=127) "docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=73) "docker://da3f666ca503e5631adc6c3c2fa6dabcdc62e4e06f8480d1a484a96be64d663a",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.778: INFO: Pod "webserver-deployment-557759b7c7-qvwnl" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-qvwnl",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "32c62b28-6f94-409e-bd69-007f810e6dab",
      ResourceVersion: (string) (len=4) "4452",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 32 34 34 2e 31  2e 37 32 5c 22 7d 22 3a  |10.244.1.72\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-xqkn5",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-xqkn5",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916032,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.244.1.72",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.244.1.72"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849916032,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=127) "docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=73) "docker://4ba6a0aadd6ff44c3d0841bc3d698f16bd333987f0e037e903af4018fccabde8",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.780: INFO: Pod "webserver-deployment-557759b7c7-snsd7" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-snsd7",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "f707cef7-3c59-4d66-abad-342f37153434",
      ResourceVersion: (string) (len=4) "4388",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-xkxd5",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-xkxd5",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.781: INFO: Pod "webserver-deployment-557759b7c7-vzc2b" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-vzc2b",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3a2d0c94-f776-45ad-bc4c-d984476ccb16",
      ResourceVersion: (string) (len=4) "4205",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 32 34 34 2e 31  2e 36 38 5c 22 7d 22 3a  |10.244.1.68\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-b77tc",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-b77tc",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916026,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916024,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.244.1.68",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.244.1.68"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916024,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849916025,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=127) "docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=73) "docker://17f13fec43bd2bc25937042b4a50834e7d32fc84f071937f87055d213911b376",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.782: INFO: Pod "webserver-deployment-557759b7c7-w642g" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-w642g",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "cabbf709-8302-4805-9c9e-047c9956d462",
      ResourceVersion: (string) (len=4) "4368",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-4d5vd",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-4d5vd",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.784: INFO: Pod "webserver-deployment-557759b7c7-xzckl" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-xzckl",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "c7b81e82-2bd8-44a8-88f7-dc08b8bbcc8e",
      ResourceVersion: (string) (len=4) "4358",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-bcvzm",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-bcvzm",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.785: INFO: Pod "webserver-deployment-557759b7c7-zdg66" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-zdg66",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "53ebf570-04fe-4beb-a174-adc53ded1a8c",
      ResourceVersion: (string) (len=4) "4375",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "8f05c9d7-4592-4a74-915e-acf82085c261",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 66  30 35 63 39 64 37 2d 34  |d\":\"8f05c9d7-4|
              00000090  35 39 32 2d 34 61 37 34  2d 39 31 35 65 2d 61 63  |592-4a74-915e-ac|
              000000a0  66 38 32 30 38 35 63 32  36 31 5c 22 7d 22 3a 7b  |f82085c261\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-4rtn2",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-4rtn2",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.786: INFO: Pod "webserver-deployment-9b4f5bf69-2r6mf" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-2r6mf",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "8ef5e1dc-44ec-40e0-a787-aa01e6cbed32",
      ResourceVersion: (string) (len=4) "4381",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916028,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ea2855bb-168f-4377-b203-ffe027c467f5",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 61  32 38 35 35 62 62 2d 31  |d\":\"ea2855bb-1|
              00000090  36 38 66 2d 34 33 37 37  2d 62 32 30 33 2d 66 66  |68f-4377-b203-ff|
              000000a0  65 30 32 37 63 34 36 37  66 35 5c 22 7d 22 3a 7b  |e027c467f5\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=563) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 70 6f 64 49 50  22 3a 7b 7d 2c 22 66 3a  |"f:podIP":{},"f:|
              000001e0  70 6f 64 49 50 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |podIPs":{".":{},|
              000001f0  22 6b 3a 7b 5c 22 69 70  5c 22 3a 5c 22 31 30 2e  |"k:{\"ip\":\"10.|
              00000200  32 34 34 2e 31 2e 36 39  5c 22 7d 22 3a 7b 22 2e  |244.1.69\"}":{".|
              00000210  22 3a 7b 7d 2c 22 66 3a  69 70 22 3a 7b 7d 7d 7d  |":{},"f:ip":{}}}|
              00000220  2c 22 66 3a 73 74 61 72  74 54 69 6d 65 22 3a 7b  |,"f:startTime":{|
              00000230  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-wht9t",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-wht9t",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.244.1.69",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.244.1.69"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916028,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=169) "Error response from daemon: pull access denied for webserver, repository does not exist or may require 'docker login': denied: requested access to the resource is denied"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.787: INFO: Pod "webserver-deployment-9b4f5bf69-4vdzl" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-4vdzl",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "49dcf10d-6da5-43fc-b23f-e5a8828a8127",
      ResourceVersion: (string) (len=4) "4402",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ea2855bb-168f-4377-b203-ffe027c467f5",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 61  32 38 35 35 62 62 2d 31  |d\":\"ea2855bb-1|
              00000090  36 38 66 2d 34 33 37 37  2d 62 32 30 33 2d 66 66  |68f-4377-b203-ff|
              000000a0  65 30 32 37 63 34 36 37  66 35 5c 22 7d 22 3a 7b  |e027c467f5\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-6qfsr",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-6qfsr",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.789: INFO: Pod "webserver-deployment-9b4f5bf69-6gd7c" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-6gd7c",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "107880e1-a2b0-45f0-abcc-ab119ee87aaa",
      ResourceVersion: (string) (len=4) "4405",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ea2855bb-168f-4377-b203-ffe027c467f5",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 61  32 38 35 35 62 62 2d 31  |d\":\"ea2855bb-1|
              00000090  36 38 66 2d 34 33 37 37  2d 62 32 30 33 2d 66 66  |68f-4377-b203-ff|
              000000a0  65 30 32 37 63 34 36 37  66 35 5c 22 7d 22 3a 7b  |e027c467f5\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-jrv9z",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-jrv9z",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.790: INFO: Pod "webserver-deployment-9b4f5bf69-77rfz" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-77rfz",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "087c6439-4764-42ce-8133-d28d9d1ecb91",
      ResourceVersion: (string) (len=4) "4379",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ea2855bb-168f-4377-b203-ffe027c467f5",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 61  32 38 35 35 62 62 2d 31  |d\":\"ea2855bb-1|
              00000090  36 38 66 2d 34 33 37 37  2d 62 32 30 33 2d 66 66  |68f-4377-b203-ff|
              000000a0  65 30 32 37 63 34 36 37  66 35 5c 22 7d 22 3a 7b  |e027c467f5\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-8df9l",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-8df9l",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.791: INFO: Pod "webserver-deployment-9b4f5bf69-cdb7c" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-cdb7c",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e080bb1e-5b8e-4cae-92b0-f94ba486371d",
      ResourceVersion: (string) (len=4) "4262",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916028,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ea2855bb-168f-4377-b203-ffe027c467f5",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 61  32 38 35 35 62 62 2d 31  |d\":\"ea2855bb-1|
              00000090  36 38 66 2d 34 33 37 37  2d 62 32 30 33 2d 66 66  |68f-4377-b203-ff|
              000000a0  65 30 32 37 63 34 36 37  66 35 5c 22 7d 22 3a 7b  |e027c467f5\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-hjlm8",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-hjlm8",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916028,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.792: INFO: Pod "webserver-deployment-9b4f5bf69-lfsdh" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-lfsdh",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "f24fd269-706b-4a59-b54a-afab8cbb6a65",
      ResourceVersion: (string) (len=4) "4404",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ea2855bb-168f-4377-b203-ffe027c467f5",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 61  32 38 35 35 62 62 2d 31  |d\":\"ea2855bb-1|
              00000090  36 38 66 2d 34 33 37 37  2d 62 32 30 33 2d 66 66  |68f-4377-b203-ff|
              000000a0  65 30 32 37 63 34 36 37  66 35 5c 22 7d 22 3a 7b  |e027c467f5\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-5fv5s",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-5fv5s",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.794: INFO: Pod "webserver-deployment-9b4f5bf69-nh7qp" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-nh7qp",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e6d77246-ca30-4998-83c8-91c7e58abdd9",
      ResourceVersion: (string) (len=4) "4273",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916028,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ea2855bb-168f-4377-b203-ffe027c467f5",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 61  32 38 35 35 62 62 2d 31  |d\":\"ea2855bb-1|
              00000090  36 38 66 2d 34 33 37 37  2d 62 32 30 33 2d 66 66  |68f-4377-b203-ff|
              000000a0  65 30 32 37 63 34 36 37  66 35 5c 22 7d 22 3a 7b  |e027c467f5\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-dmx2r",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-dmx2r",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916028,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.795: INFO: Pod "webserver-deployment-9b4f5bf69-pjfc6" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-pjfc6",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d1199943-023e-48e4-954c-a1f3a3799367",
      ResourceVersion: (string) (len=4) "4395",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ea2855bb-168f-4377-b203-ffe027c467f5",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 61  32 38 35 35 62 62 2d 31  |d\":\"ea2855bb-1|
              00000090  36 38 66 2d 34 33 37 37  2d 62 32 30 33 2d 66 66  |68f-4377-b203-ff|
              000000a0  65 30 32 37 63 34 36 37  66 35 5c 22 7d 22 3a 7b  |e027c467f5\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-lkbvl",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-lkbvl",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.796: INFO: Pod "webserver-deployment-9b4f5bf69-rggk9" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-rggk9",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "206bcaa2-0054-45c3-97ba-5c2dfaed12c7",
      ResourceVersion: (string) (len=4) "4397",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ea2855bb-168f-4377-b203-ffe027c467f5",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 61  32 38 35 35 62 62 2d 31  |d\":\"ea2855bb-1|
              00000090  36 38 66 2d 34 33 37 37  2d 62 32 30 33 2d 66 66  |68f-4377-b203-ff|
              000000a0  65 30 32 37 63 34 36 37  66 35 5c 22 7d 22 3a 7b  |e027c467f5\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-nhdrw",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-nhdrw",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.797: INFO: Pod "webserver-deployment-9b4f5bf69-rklnl" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-rklnl",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "70fdc48b-2cda-4cf8-9b1c-dfa7ac5b9d82",
      ResourceVersion: (string) (len=4) "4400",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ea2855bb-168f-4377-b203-ffe027c467f5",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 61  32 38 35 35 62 62 2d 31  |d\":\"ea2855bb-1|
              00000090  36 38 66 2d 34 33 37 37  2d 62 32 30 33 2d 66 66  |68f-4377-b203-ff|
              000000a0  65 30 32 37 63 34 36 37  66 35 5c 22 7d 22 3a 7b  |e027c467f5\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-qt2f6",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-qt2f6",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.800: INFO: Pod "webserver-deployment-9b4f5bf69-w4wrc" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-w4wrc",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6b759b14-b84f-4d8d-a39f-6f6b7e4765b5",
      ResourceVersion: (string) (len=4) "4392",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ea2855bb-168f-4377-b203-ffe027c467f5",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 61  32 38 35 35 62 62 2d 31  |d\":\"ea2855bb-1|
              00000090  36 38 66 2d 34 33 37 37  2d 62 32 30 33 2d 66 66  |68f-4377-b203-ff|
              000000a0  65 30 32 37 63 34 36 37  66 35 5c 22 7d 22 3a 7b  |e027c467f5\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-ck465",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-ck465",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916030,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916030,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.802: INFO: Pod "webserver-deployment-9b4f5bf69-wg2zj" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-wg2zj",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "292a3586-3fe2-4382-b2a5-e4892698c986",
      ResourceVersion: (string) (len=4) "4253",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916028,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ea2855bb-168f-4377-b203-ffe027c467f5",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 61  32 38 35 35 62 62 2d 31  |d\":\"ea2855bb-1|
              00000090  36 38 66 2d 34 33 37 37  2d 62 32 30 33 2d 66 66  |68f-4377-b203-ff|
              000000a0  65 30 32 37 63 34 36 37  66 35 5c 22 7d 22 3a 7b  |e027c467f5\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-t6gkb",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-t6gkb",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916028,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.803: INFO: Pod "webserver-deployment-9b4f5bf69-zb8dm" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-zb8dm",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-5682",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d9c1630c-79e9-4998-817a-7cfb9b2597f2",
      ResourceVersion: (string) (len=4) "4274",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916028,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "ea2855bb-168f-4377-b203-ffe027c467f5",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 61  32 38 35 35 62 62 2d 31  |d\":\"ea2855bb-1|
              00000090  36 38 66 2d 34 33 37 37  2d 62 32 30 33 2d 66 66  |68f-4377-b203-ff|
              000000a0  65 30 32 37 63 34 36 37  66 35 5c 22 7d 22 3a 7b  |e027c467f5\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-6qr6r",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-6qr6r",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=14) "k8sconformance",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849916028,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.2",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849916028,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 15:47:12.841: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-5682" for this suite. @ 04/28/24 15:47:12.846
â€¢ [8.380 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:301
  STEP: Creating a kubernetes client @ 04/28/24 15:47:12.859
  Apr 28 15:47:12.859: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 15:47:12.86
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:47:12.94
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:47:12.943
  STEP: Setting up server cert @ 04/28/24 15:47:12.963
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 15:47:13.328
  STEP: Deploying the webhook pod @ 04/28/24 15:47:13.343
  STEP: Wait for the deployment to be ready @ 04/28/24 15:47:13.353
  Apr 28 15:47:13.358: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/28/24 15:47:15.365
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 15:47:15.373
  Apr 28 15:47:16.374: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the crd webhook via the AdmissionRegistration API @ 04/28/24 15:47:16.378
  STEP: Creating a custom resource definition that should be denied by the webhook @ 04/28/24 15:47:16.39
  Apr 28 15:47:16.390: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 15:47:16.398: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-2487" for this suite. @ 04/28/24 15:47:16.428
  STEP: Destroying namespace "webhook-markers-8855" for this suite. @ 04/28/24 15:47:16.431
â€¢ [3.575 seconds]
------------------------------
SSS
------------------------------
[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:191
  STEP: Creating a kubernetes client @ 04/28/24 15:47:16.434
  Apr 28 15:47:16.434: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename dns @ 04/28/24 15:47:16.435
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:47:16.441
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:47:16.443
  STEP: Creating a test headless service @ 04/28/24 15:47:16.445
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service;check="$$(dig +tcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-3472 A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-3472;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-3472 A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-3472;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-3472.svc A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-3472.svc;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-3472.svc A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-3472.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-3472.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.dns-test-service.dns-3472.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-3472.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.dns-test-service.dns-3472.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-3472.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.test-service-2.dns-3472.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-3472.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.test-service-2.dns-3472.svc;check="$$(dig +notcp +noall +answer +search 11.159.97.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.97.159.11_udp@PTR;check="$$(dig +tcp +noall +answer +search 11.159.97.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.97.159.11_tcp@PTR;sleep 1; done
   @ 04/28/24 15:47:16.457
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service;check="$$(dig +tcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-3472 A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-3472;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-3472 A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-3472;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-3472.svc A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-3472.svc;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-3472.svc A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-3472.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-3472.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.dns-test-service.dns-3472.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-3472.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.dns-test-service.dns-3472.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-3472.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.test-service-2.dns-3472.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-3472.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.test-service-2.dns-3472.svc;check="$$(dig +notcp +noall +answer +search 11.159.97.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.97.159.11_udp@PTR;check="$$(dig +tcp +noall +answer +search 11.159.97.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.97.159.11_tcp@PTR;sleep 1; done
   @ 04/28/24 15:47:16.457
  STEP: creating a pod to probe DNS @ 04/28/24 15:47:16.457
  STEP: submitting the pod to kubernetes @ 04/28/24 15:47:16.457
  STEP: retrieving the pod @ 04/28/24 15:47:26.484
  STEP: looking for the results for each expected name from probers @ 04/28/24 15:47:26.486
  Apr 28 15:47:26.489: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.490: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.492: INFO: Unable to read wheezy_udp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.494: INFO: Unable to read wheezy_tcp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.496: INFO: Unable to read wheezy_udp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.497: INFO: Unable to read wheezy_tcp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.499: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.501: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.509: INFO: Unable to read jessie_udp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.511: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.512: INFO: Unable to read jessie_udp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.514: INFO: Unable to read jessie_tcp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.515: INFO: Unable to read jessie_udp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.517: INFO: Unable to read jessie_tcp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.519: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.520: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:26.527: INFO: Lookups using dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068 failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-3472 wheezy_tcp@dns-test-service.dns-3472 wheezy_udp@dns-test-service.dns-3472.svc wheezy_tcp@dns-test-service.dns-3472.svc wheezy_udp@_http._tcp.dns-test-service.dns-3472.svc wheezy_tcp@_http._tcp.dns-test-service.dns-3472.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-3472 jessie_tcp@dns-test-service.dns-3472 jessie_udp@dns-test-service.dns-3472.svc jessie_tcp@dns-test-service.dns-3472.svc jessie_udp@_http._tcp.dns-test-service.dns-3472.svc jessie_tcp@_http._tcp.dns-test-service.dns-3472.svc]

  Apr 28 15:47:26.532: INFO: Pod client logs for webserver: 
  Apr 28 15:47:26.537: INFO: Pod client logs for querier: 
  Apr 28 15:47:26.542: INFO: Pod client logs for jessie-querier: 
  Apr 28 15:47:31.545: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.547: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.549: INFO: Unable to read wheezy_udp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.551: INFO: Unable to read wheezy_tcp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.553: INFO: Unable to read wheezy_udp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.555: INFO: Unable to read wheezy_tcp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.557: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.558: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.567: INFO: Unable to read jessie_udp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.568: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.570: INFO: Unable to read jessie_udp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.571: INFO: Unable to read jessie_tcp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.573: INFO: Unable to read jessie_udp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.574: INFO: Unable to read jessie_tcp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.576: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.578: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:31.584: INFO: Lookups using dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068 failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-3472 wheezy_tcp@dns-test-service.dns-3472 wheezy_udp@dns-test-service.dns-3472.svc wheezy_tcp@dns-test-service.dns-3472.svc wheezy_udp@_http._tcp.dns-test-service.dns-3472.svc wheezy_tcp@_http._tcp.dns-test-service.dns-3472.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-3472 jessie_tcp@dns-test-service.dns-3472 jessie_udp@dns-test-service.dns-3472.svc jessie_tcp@dns-test-service.dns-3472.svc jessie_udp@_http._tcp.dns-test-service.dns-3472.svc jessie_tcp@_http._tcp.dns-test-service.dns-3472.svc]

  Apr 28 15:47:31.589: INFO: Pod client logs for webserver: 
  Apr 28 15:47:31.595: INFO: Pod client logs for querier: 
  Apr 28 15:47:31.599: INFO: Pod client logs for jessie-querier: 
  Apr 28 15:47:36.546: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.548: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.550: INFO: Unable to read wheezy_udp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.551: INFO: Unable to read wheezy_tcp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.553: INFO: Unable to read wheezy_udp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.555: INFO: Unable to read wheezy_tcp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.556: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.558: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.566: INFO: Unable to read jessie_udp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.567: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.569: INFO: Unable to read jessie_udp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.570: INFO: Unable to read jessie_tcp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.572: INFO: Unable to read jessie_udp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.573: INFO: Unable to read jessie_tcp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.575: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.576: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:36.583: INFO: Lookups using dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068 failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-3472 wheezy_tcp@dns-test-service.dns-3472 wheezy_udp@dns-test-service.dns-3472.svc wheezy_tcp@dns-test-service.dns-3472.svc wheezy_udp@_http._tcp.dns-test-service.dns-3472.svc wheezy_tcp@_http._tcp.dns-test-service.dns-3472.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-3472 jessie_tcp@dns-test-service.dns-3472 jessie_udp@dns-test-service.dns-3472.svc jessie_tcp@dns-test-service.dns-3472.svc jessie_udp@_http._tcp.dns-test-service.dns-3472.svc jessie_tcp@_http._tcp.dns-test-service.dns-3472.svc]

  Apr 28 15:47:36.588: INFO: Pod client logs for webserver: 
  Apr 28 15:47:36.592: INFO: Pod client logs for querier: 
  Apr 28 15:47:36.597: INFO: Pod client logs for jessie-querier: 
  Apr 28 15:47:41.545: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.547: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.549: INFO: Unable to read wheezy_udp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.551: INFO: Unable to read wheezy_tcp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.553: INFO: Unable to read wheezy_udp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.554: INFO: Unable to read wheezy_tcp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.556: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.558: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.567: INFO: Unable to read jessie_udp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.568: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.570: INFO: Unable to read jessie_udp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.572: INFO: Unable to read jessie_tcp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.574: INFO: Unable to read jessie_udp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.575: INFO: Unable to read jessie_tcp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.577: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.579: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:41.585: INFO: Lookups using dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068 failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-3472 wheezy_tcp@dns-test-service.dns-3472 wheezy_udp@dns-test-service.dns-3472.svc wheezy_tcp@dns-test-service.dns-3472.svc wheezy_udp@_http._tcp.dns-test-service.dns-3472.svc wheezy_tcp@_http._tcp.dns-test-service.dns-3472.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-3472 jessie_tcp@dns-test-service.dns-3472 jessie_udp@dns-test-service.dns-3472.svc jessie_tcp@dns-test-service.dns-3472.svc jessie_udp@_http._tcp.dns-test-service.dns-3472.svc jessie_tcp@_http._tcp.dns-test-service.dns-3472.svc]

  Apr 28 15:47:41.591: INFO: Pod client logs for webserver: 
  Apr 28 15:47:41.596: INFO: Pod client logs for querier: 
  Apr 28 15:47:41.601: INFO: Pod client logs for jessie-querier: 
  Apr 28 15:47:46.546: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.548: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.549: INFO: Unable to read wheezy_udp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.551: INFO: Unable to read wheezy_tcp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.553: INFO: Unable to read wheezy_udp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.555: INFO: Unable to read wheezy_tcp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.556: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.558: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.566: INFO: Unable to read jessie_udp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.568: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.569: INFO: Unable to read jessie_udp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.571: INFO: Unable to read jessie_tcp@dns-test-service.dns-3472 from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.572: INFO: Unable to read jessie_udp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.574: INFO: Unable to read jessie_tcp@dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.575: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.576: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-3472.svc from pod dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068: the server could not find the requested resource (get pods dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068)
  Apr 28 15:47:46.582: INFO: Lookups using dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068 failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-3472 wheezy_tcp@dns-test-service.dns-3472 wheezy_udp@dns-test-service.dns-3472.svc wheezy_tcp@dns-test-service.dns-3472.svc wheezy_udp@_http._tcp.dns-test-service.dns-3472.svc wheezy_tcp@_http._tcp.dns-test-service.dns-3472.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-3472 jessie_tcp@dns-test-service.dns-3472 jessie_udp@dns-test-service.dns-3472.svc jessie_tcp@dns-test-service.dns-3472.svc jessie_udp@_http._tcp.dns-test-service.dns-3472.svc jessie_tcp@_http._tcp.dns-test-service.dns-3472.svc]

  Apr 28 15:47:46.587: INFO: Pod client logs for webserver: 
  Apr 28 15:47:46.593: INFO: Pod client logs for querier: 
  Apr 28 15:47:46.597: INFO: Pod client logs for jessie-querier: 
  Apr 28 15:47:51.582: INFO: DNS probes using dns-3472/dns-test-b4cf5ef4-f129-4dd4-809e-81063f776068 succeeded

  Apr 28 15:47:51.582: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 04/28/24 15:47:51.584
  STEP: deleting the test service @ 04/28/24 15:47:51.593
  STEP: deleting the test headless service @ 04/28/24 15:47:51.615
  STEP: Destroying namespace "dns-3472" for this suite. @ 04/28/24 15:47:51.621
â€¢ [35.191 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/custom_resource_definition.go:198
  STEP: Creating a kubernetes client @ 04/28/24 15:47:51.627
  Apr 28 15:47:51.627: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename custom-resource-definition @ 04/28/24 15:47:51.628
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:47:51.635
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:47:51.637
  STEP: fetching the /apis discovery document @ 04/28/24 15:47:51.643
  STEP: finding the apiextensions.k8s.io API group in the /apis discovery document @ 04/28/24 15:47:51.644
  STEP: finding the apiextensions.k8s.io/v1 API group/version in the /apis discovery document @ 04/28/24 15:47:51.644
  STEP: fetching the /apis/apiextensions.k8s.io discovery document @ 04/28/24 15:47:51.644
  STEP: finding the apiextensions.k8s.io/v1 API group/version in the /apis/apiextensions.k8s.io discovery document @ 04/28/24 15:47:51.645
  STEP: fetching the /apis/apiextensions.k8s.io/v1 discovery document @ 04/28/24 15:47:51.645
  STEP: finding customresourcedefinitions resources in the /apis/apiextensions.k8s.io/v1 discovery document @ 04/28/24 15:47:51.645
  Apr 28 15:47:51.646: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-8303" for this suite. @ 04/28/24 15:47:51.648
â€¢ [0.025 seconds]
------------------------------
SSSSSS
------------------------------
[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance]
k8s.io/kubernetes/test/e2e/scheduling/limit_range.go:239
  STEP: Creating a kubernetes client @ 04/28/24 15:47:51.652
  Apr 28 15:47:51.652: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename limitrange @ 04/28/24 15:47:51.653
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:47:51.659
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:47:51.661
  STEP: Creating LimitRange "e2e-limitrange-w5dr4" in namespace "limitrange-2838" @ 04/28/24 15:47:51.663
  STEP: Creating another limitRange in another namespace @ 04/28/24 15:47:51.667
  Apr 28 15:47:51.673: INFO: Namespace "e2e-limitrange-w5dr4-5186" created
  Apr 28 15:47:51.673: INFO: Creating LimitRange "e2e-limitrange-w5dr4" in namespace "e2e-limitrange-w5dr4-5186"
  STEP: Listing all LimitRanges with label "e2e-test=e2e-limitrange-w5dr4" @ 04/28/24 15:47:51.677
  Apr 28 15:47:51.678: INFO: Found 2 limitRanges
  STEP: Patching LimitRange "e2e-limitrange-w5dr4" in "limitrange-2838" namespace @ 04/28/24 15:47:51.678
  Apr 28 15:47:51.683: INFO: LimitRange "e2e-limitrange-w5dr4" has been patched
  STEP: Delete LimitRange "e2e-limitrange-w5dr4" by Collection with labelSelector: "e2e-limitrange-w5dr4=patched" @ 04/28/24 15:47:51.683
  STEP: Confirm that the limitRange "e2e-limitrange-w5dr4" has been deleted @ 04/28/24 15:47:51.686
  Apr 28 15:47:51.686: INFO: Requesting list of LimitRange to confirm quantity
  Apr 28 15:47:51.687: INFO: Found 0 LimitRange with label "e2e-limitrange-w5dr4=patched"
  Apr 28 15:47:51.687: INFO: LimitRange "e2e-limitrange-w5dr4" has been deleted.
  STEP: Confirm that a single LimitRange still exists with label "e2e-test=e2e-limitrange-w5dr4" @ 04/28/24 15:47:51.688
  Apr 28 15:47:51.689: INFO: Found 1 limitRange
  Apr 28 15:47:51.689: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "limitrange-2838" for this suite. @ 04/28/24 15:47:51.691
  STEP: Destroying namespace "e2e-limitrange-w5dr4-5186" for this suite. @ 04/28/24 15:47:51.694
â€¢ [0.045 seconds]
------------------------------
S
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/lifecycle_hook.go:135
  STEP: Creating a kubernetes client @ 04/28/24 15:47:51.698
  Apr 28 15:47:51.698: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 04/28/24 15:47:51.698
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:47:51.704
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:47:51.706
  STEP: create the container to handle the HTTPGet hook request. @ 04/28/24 15:47:51.71
  STEP: create the pod with lifecycle hook @ 04/28/24 15:47:53.723
  STEP: check poststart hook @ 04/28/24 15:47:55.733
  STEP: delete the pod with lifecycle hook @ 04/28/24 15:47:55.738
  Apr 28 15:47:57.749: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-5137" for this suite. @ 04/28/24 15:47:57.751
â€¢ [6.057 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/kubelet.go:184
  STEP: Creating a kubernetes client @ 04/28/24 15:47:57.755
  Apr 28 15:47:57.755: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubelet-test @ 04/28/24 15:47:57.756
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:47:57.762
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:47:57.765
  Apr 28 15:47:59.782: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-2125" for this suite. @ 04/28/24 15:47:59.784
â€¢ [2.033 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Proxy server should support proxy with --port 0  [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1781
  STEP: Creating a kubernetes client @ 04/28/24 15:47:59.79
  Apr 28 15:47:59.790: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 15:47:59.791
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:47:59.801
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:47:59.803
  STEP: starting the proxy server @ 04/28/24 15:47:59.805
  Apr 28 15:47:59.805: INFO: Asynchronously running '/usr/local/bin/kubectl kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-6991 proxy -p 0 --disable-filter'
  STEP: curling proxy /api/ output @ 04/28/24 15:47:59.845
  Apr 28 15:47:59.852: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-6991" for this suite. @ 04/28/24 15:47:59.855
â€¢ [0.068 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl expose should create services for rc  [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1481
  STEP: Creating a kubernetes client @ 04/28/24 15:47:59.86
  Apr 28 15:47:59.860: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 15:47:59.86
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:47:59.868
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:47:59.87
  STEP: creating Agnhost RC @ 04/28/24 15:47:59.872
  Apr 28 15:47:59.872: INFO: namespace kubectl-5178
  Apr 28 15:47:59.872: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-5178 create -f -'
  Apr 28 15:48:00.055: INFO: stderr: ""
  Apr 28 15:48:00.055: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 04/28/24 15:48:00.055
  Apr 28 15:48:01.058: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 28 15:48:01.058: INFO: Found 1 / 1
  Apr 28 15:48:01.058: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  Apr 28 15:48:01.060: INFO: Selector matched 1 pods for map[app:agnhost]
  Apr 28 15:48:01.060: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Apr 28 15:48:01.060: INFO: wait on agnhost-primary startup in kubectl-5178 
  Apr 28 15:48:01.060: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-5178 logs agnhost-primary-t8zsf agnhost-primary'
  Apr 28 15:48:01.117: INFO: stderr: ""
  Apr 28 15:48:01.117: INFO: stdout: "Paused\n"
  STEP: exposing RC @ 04/28/24 15:48:01.117
  Apr 28 15:48:01.117: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-5178 expose rc agnhost-primary --name=rm2 --port=1234 --target-port=6379'
  Apr 28 15:48:01.182: INFO: stderr: ""
  Apr 28 15:48:01.182: INFO: stdout: "service/rm2 exposed\n"
  Apr 28 15:48:01.184: INFO: Service rm2 in namespace kubectl-5178 found.
  STEP: exposing service @ 04/28/24 15:48:03.189
  Apr 28 15:48:03.189: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-5178 expose service rm2 --name=rm3 --port=2345 --target-port=6379'
  Apr 28 15:48:03.252: INFO: stderr: ""
  Apr 28 15:48:03.252: INFO: stdout: "service/rm3 exposed\n"
  Apr 28 15:48:03.253: INFO: Service rm3 in namespace kubectl-5178 found.
  Apr 28 15:48:05.258: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-5178" for this suite. @ 04/28/24 15:48:05.26
â€¢ [5.404 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:198
  STEP: Creating a kubernetes client @ 04/28/24 15:48:05.266
  Apr 28 15:48:05.266: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-probe @ 04/28/24 15:48:05.267
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:48:05.275
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:48:05.277
  STEP: Creating pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469 @ 04/28/24 15:48:05.279
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/28/24 15:48:07.288
  Apr 28 15:48:07.290: INFO: Initial restart count of pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 is 0
  Apr 28 15:48:07.292: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:09.294: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:11.297: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:13.300: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:15.304: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:17.307: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:19.310: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:21.313: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:23.316: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:25.319: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:27.322: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:27.322: INFO: Restart count of pod container-probe-4469/liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 is now 1 (20.03215214s elapsed)
  Apr 28 15:48:29.325: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:31.328: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:33.331: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:35.334: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:37.338: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:39.342: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:41.344: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:43.347: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:45.350: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:47.353: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:47.353: INFO: Restart count of pod container-probe-4469/liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 is now 2 (40.063218211s elapsed)
  Apr 28 15:48:49.357: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:51.360: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:53.363: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:55.366: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:57.369: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:48:59.373: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:01.376: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:03.379: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:05.382: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:07.400: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:07.400: INFO: Restart count of pod container-probe-4469/liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 is now 3 (1m0.109991433s elapsed)
  Apr 28 15:49:09.404: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:11.407: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:13.411: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:15.414: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:17.418: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:19.421: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:21.424: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:23.428: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:25.431: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:27.435: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:27.435: INFO: Restart count of pod container-probe-4469/liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 is now 4 (1m20.14482702s elapsed)
  Apr 28 15:49:29.439: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:31.441: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:33.444: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:35.448: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:37.451: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:39.454: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:41.456: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:43.459: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:45.463: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:47.466: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:49.469: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:51.472: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:53.475: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:55.478: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:57.481: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:49:59.485: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:01.488: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:03.492: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:05.495: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:07.498: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:09.502: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:11.504: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:13.507: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:15.511: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:17.513: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:19.517: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:21.519: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:23.522: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:25.526: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:27.529: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:29.532: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:31.535: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:33.538: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:35.541: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:37.544: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:39.547: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:41.549: INFO: Get pod liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 in namespace container-probe-4469
  Apr 28 15:50:41.549: INFO: Restart count of pod container-probe-4469/liveness-bdd4922b-c49c-422f-84c6-2e99cd036de1 is now 5 (2m34.259600652s elapsed)
  Apr 28 15:50:41.550: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 04/28/24 15:50:41.552
  STEP: Destroying namespace "container-probe-4469" for this suite. @ 04/28/24 15:50:41.56
â€¢ [156.298 seconds]
------------------------------
SSSSS
------------------------------
[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]
k8s.io/kubernetes/test/e2e/apps/daemon_set.go:443
  STEP: Creating a kubernetes client @ 04/28/24 15:50:41.564
  Apr 28 15:50:41.564: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename daemonsets @ 04/28/24 15:50:41.565
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:50:41.574
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:50:41.576
  Apr 28 15:50:41.589: INFO: Create a RollingUpdate DaemonSet
  Apr 28 15:50:41.594: INFO: Check that daemon pods launch on every node of the cluster
  Apr 28 15:50:41.600: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 15:50:41.600: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 15:50:42.605: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 15:50:42.605: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 15:50:43.605: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Apr 28 15:50:43.605: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  Apr 28 15:50:43.605: INFO: Update the DaemonSet to trigger a rollout
  Apr 28 15:50:43.610: INFO: Updating DaemonSet daemon-set
  Apr 28 15:50:45.619: INFO: Roll back the DaemonSet before rollout is complete
  Apr 28 15:50:45.625: INFO: Updating DaemonSet daemon-set
  Apr 28 15:50:45.625: INFO: Make sure DaemonSet rollback is complete
  Apr 28 15:50:45.627: INFO: Wrong image for pod: daemon-set-kpgmt. Expected: registry.k8s.io/e2e-test-images/httpd:2.4.38-4, got: foo:non-existent.
  Apr 28 15:50:45.627: INFO: Pod daemon-set-kpgmt is not available
  Apr 28 15:50:48.633: INFO: Pod daemon-set-b7wl9 is not available
  STEP: Deleting DaemonSet "daemon-set" @ 04/28/24 15:50:48.639
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-6279, will wait for the garbage collector to delete the pods @ 04/28/24 15:50:48.639
  Apr 28 15:50:48.696: INFO: Deleting DaemonSet.extensions daemon-set took: 4.267937ms
  Apr 28 15:50:48.796: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.168718ms
  Apr 28 15:50:50.199: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 15:50:50.199: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Apr 28 15:50:50.201: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"5405"},"items":null}

  Apr 28 15:50:50.202: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"5405"},"items":null}

  Apr 28 15:50:50.207: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-6279" for this suite. @ 04/28/24 15:50:50.209
â€¢ [8.650 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]
k8s.io/kubernetes/test/e2e/apps/disruption.go:349
  STEP: Creating a kubernetes client @ 04/28/24 15:50:50.214
  Apr 28 15:50:50.214: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename disruption @ 04/28/24 15:50:50.215
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:50:50.222
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:50:50.224
  STEP: Creating a pdb that targets all three pods in a test replica set @ 04/28/24 15:50:50.226
  STEP: Waiting for the pdb to be processed @ 04/28/24 15:50:50.229
  STEP: First trying to evict a pod which shouldn't be evictable @ 04/28/24 15:50:52.236
  STEP: Waiting for all pods to be running @ 04/28/24 15:50:52.236
  Apr 28 15:50:52.238: INFO: pods: 0 < 3
  STEP: locating a running pod @ 04/28/24 15:50:54.241
  STEP: Updating the pdb to allow a pod to be evicted @ 04/28/24 15:50:54.246
  STEP: Waiting for the pdb to be processed @ 04/28/24 15:50:54.251
  STEP: Trying to evict the same pod we tried earlier which should now be evictable @ 04/28/24 15:50:56.255
  STEP: Waiting for all pods to be running @ 04/28/24 15:50:56.255
  STEP: Waiting for the pdb to observed all healthy pods @ 04/28/24 15:50:56.257
  STEP: Patching the pdb to disallow a pod to be evicted @ 04/28/24 15:50:56.275
  STEP: Waiting for the pdb to be processed @ 04/28/24 15:50:56.292
  STEP: Waiting for all pods to be running @ 04/28/24 15:50:58.296
  STEP: locating a running pod @ 04/28/24 15:50:58.298
  STEP: Deleting the pdb to allow a pod to be evicted @ 04/28/24 15:50:58.303
  STEP: Waiting for the pdb to be deleted @ 04/28/24 15:50:58.306
  STEP: Trying to evict the same pod we tried earlier which should now be evictable @ 04/28/24 15:50:58.307
  STEP: Waiting for all pods to be running @ 04/28/24 15:50:58.307
  Apr 28 15:50:58.318: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-1553" for this suite. @ 04/28/24 15:50:58.32
â€¢ [8.110 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:109
  STEP: Creating a kubernetes client @ 04/28/24 15:50:58.325
  Apr 28 15:50:58.325: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename configmap @ 04/28/24 15:50:58.326
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:50:58.336
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:50:58.338
  STEP: Creating configMap with name configmap-test-volume-map-8f463156-6673-45b1-9441-323c98f008c2 @ 04/28/24 15:50:58.34
  STEP: Creating a pod to test consume configMaps @ 04/28/24 15:50:58.343
  STEP: Saw pod success @ 04/28/24 15:51:00.354
  Apr 28 15:51:00.356: INFO: Trying to get logs from node k8sconformance-m02 pod pod-configmaps-02234a5a-fd92-4bb4-a4ed-dfdbd61dd29e container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 15:51:00.368
  Apr 28 15:51:00.378: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-9814" for this suite. @ 04/28/24 15:51:00.38
â€¢ [2.058 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]
k8s.io/kubernetes/test/e2e/scheduling/limit_range.go:61
  STEP: Creating a kubernetes client @ 04/28/24 15:51:00.384
  Apr 28 15:51:00.384: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename limitrange @ 04/28/24 15:51:00.385
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:51:00.391
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:51:00.393
  STEP: Creating a LimitRange @ 04/28/24 15:51:00.395
  STEP: Setting up watch @ 04/28/24 15:51:00.395
  STEP: Submitting a LimitRange @ 04/28/24 15:51:00.497
  STEP: Verifying LimitRange creation was observed @ 04/28/24 15:51:00.502
  STEP: Fetching the LimitRange to ensure it has proper values @ 04/28/24 15:51:00.502
  Apr 28 15:51:00.506: INFO: Verifying requests: expected map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}] with actual map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}]
  Apr 28 15:51:00.506: INFO: Verifying limits: expected map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Creating a Pod with no resource requirements @ 04/28/24 15:51:00.506
  STEP: Ensuring Pod has resource requirements applied from LimitRange @ 04/28/24 15:51:00.509
  Apr 28 15:51:00.511: INFO: Verifying requests: expected map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}] with actual map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}]
  Apr 28 15:51:00.511: INFO: Verifying limits: expected map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Creating a Pod with partial resource requirements @ 04/28/24 15:51:00.511
  STEP: Ensuring Pod has merged resource requirements applied from LimitRange @ 04/28/24 15:51:00.515
  Apr 28 15:51:00.517: INFO: Verifying requests: expected map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{161061273600 0} {<nil>} 150Gi BinarySI} memory:{{157286400 0} {<nil>} 150Mi BinarySI}] with actual map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{161061273600 0} {<nil>} 150Gi BinarySI} memory:{{157286400 0} {<nil>} 150Mi BinarySI}]
  Apr 28 15:51:00.517: INFO: Verifying limits: expected map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Failing to create a Pod with less than min resources @ 04/28/24 15:51:00.517
  STEP: Failing to create a Pod with more than max resources @ 04/28/24 15:51:00.519
  STEP: Updating a LimitRange @ 04/28/24 15:51:00.521
  STEP: Verifying LimitRange updating is effective @ 04/28/24 15:51:00.524
  STEP: Creating a Pod with less than former min resources @ 04/28/24 15:51:02.527
  STEP: Failing to create a Pod with more than max resources @ 04/28/24 15:51:02.531
  STEP: Deleting a LimitRange @ 04/28/24 15:51:02.532
  STEP: Verifying the LimitRange was deleted @ 04/28/24 15:51:02.538
  Apr 28 15:51:07.541: INFO: limitRange is already deleted
  STEP: Creating a Pod with more than former max resources @ 04/28/24 15:51:07.541
  Apr 28 15:51:07.546: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "limitrange-7320" for this suite. @ 04/28/24 15:51:07.548
â€¢ [7.170 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:238
  STEP: Creating a kubernetes client @ 04/28/24 15:51:07.554
  Apr 28 15:51:07.554: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 15:51:07.555
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:51:07.561
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:51:07.563
  STEP: Setting up server cert @ 04/28/24 15:51:07.574
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 15:51:07.964
  STEP: Deploying the webhook pod @ 04/28/24 15:51:07.97
  STEP: Wait for the deployment to be ready @ 04/28/24 15:51:07.977
  Apr 28 15:51:07.982: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/28/24 15:51:09.99
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 15:51:09.998
  Apr 28 15:51:10.998: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering a webhook that server cannot talk to, with fail closed policy, via the AdmissionRegistration API @ 04/28/24 15:51:11.002
  STEP: create a namespace for the webhook @ 04/28/24 15:51:11.014
  STEP: create a configmap should be unconditionally rejected by the webhook @ 04/28/24 15:51:11.021
  Apr 28 15:51:11.035: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-3704" for this suite. @ 04/28/24 15:51:11.063
  STEP: Destroying namespace "webhook-markers-6188" for this suite. @ 04/28/24 15:51:11.067
  STEP: Destroying namespace "fail-closed-namespace-1994" for this suite. @ 04/28/24 15:51:11.07
â€¢ [3.521 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtime.go:248
  STEP: Creating a kubernetes client @ 04/28/24 15:51:11.076
  Apr 28 15:51:11.076: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-runtime @ 04/28/24 15:51:11.076
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:51:11.084
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:51:11.086
  STEP: create the container @ 04/28/24 15:51:11.088
  W0428 15:51:11.093328      22 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 04/28/24 15:51:11.093
  STEP: get the container status @ 04/28/24 15:51:14.103
  STEP: the container should be terminated @ 04/28/24 15:51:14.105
  STEP: the termination message should be set @ 04/28/24 15:51:14.106
  Apr 28 15:51:14.106: INFO: Expected: &{OK} to match Container's Termination Message: OK --
  STEP: delete the container @ 04/28/24 15:51:14.106
  Apr 28 15:51:14.113: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-6746" for this suite. @ 04/28/24 15:51:14.117
â€¢ [3.044 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance]
k8s.io/kubernetes/test/e2e/apps/cronjob.go:161
  STEP: Creating a kubernetes client @ 04/28/24 15:51:14.121
  Apr 28 15:51:14.121: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename cronjob @ 04/28/24 15:51:14.122
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:51:14.128
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:51:14.13
  STEP: Creating a ReplaceConcurrent cronjob @ 04/28/24 15:51:14.132
  STEP: Ensuring a job is scheduled @ 04/28/24 15:51:14.136
  STEP: Ensuring exactly one is scheduled @ 04/28/24 15:52:00.14
  STEP: Ensuring exactly one running job exists by listing jobs explicitly @ 04/28/24 15:52:00.141
  STEP: Ensuring the job is replaced with a new one @ 04/28/24 15:52:00.143
  STEP: Removing cronjob @ 04/28/24 15:53:00.146
  Apr 28 15:53:00.150: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-4808" for this suite. @ 04/28/24 15:53:00.152
â€¢ [106.034 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:57
  STEP: Creating a kubernetes client @ 04/28/24 15:53:00.156
  Apr 28 15:53:00.156: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename configmap @ 04/28/24 15:53:00.157
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:53:00.168
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:53:00.17
  STEP: Creating configMap with name configmap-test-volume-4ecfffc9-55cc-42a1-8fea-556e86a9bcc3 @ 04/28/24 15:53:00.172
  STEP: Creating a pod to test consume configMaps @ 04/28/24 15:53:00.175
  STEP: Saw pod success @ 04/28/24 15:53:04.19
  Apr 28 15:53:04.192: INFO: Trying to get logs from node k8sconformance-m02 pod pod-configmaps-001d3699-6245-4ffa-bf20-58d17b88ba26 container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 15:53:04.204
  Apr 28 15:53:04.213: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-1172" for this suite. @ 04/28/24 15:53:04.215
â€¢ [4.064 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/discovery.go:125
  STEP: Creating a kubernetes client @ 04/28/24 15:53:04.22
  Apr 28 15:53:04.220: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename discovery @ 04/28/24 15:53:04.221
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:53:04.228
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:53:04.23
  STEP: Setting up server cert @ 04/28/24 15:53:04.232
  Apr 28 15:53:04.786: INFO: Checking APIGroup: apiregistration.k8s.io
  Apr 28 15:53:04.787: INFO: PreferredVersion.GroupVersion: apiregistration.k8s.io/v1
  Apr 28 15:53:04.787: INFO: Versions found [{apiregistration.k8s.io/v1 v1}]
  Apr 28 15:53:04.787: INFO: apiregistration.k8s.io/v1 matches apiregistration.k8s.io/v1
  Apr 28 15:53:04.787: INFO: Checking APIGroup: apps
  Apr 28 15:53:04.787: INFO: PreferredVersion.GroupVersion: apps/v1
  Apr 28 15:53:04.787: INFO: Versions found [{apps/v1 v1}]
  Apr 28 15:53:04.787: INFO: apps/v1 matches apps/v1
  Apr 28 15:53:04.787: INFO: Checking APIGroup: events.k8s.io
  Apr 28 15:53:04.788: INFO: PreferredVersion.GroupVersion: events.k8s.io/v1
  Apr 28 15:53:04.788: INFO: Versions found [{events.k8s.io/v1 v1}]
  Apr 28 15:53:04.788: INFO: events.k8s.io/v1 matches events.k8s.io/v1
  Apr 28 15:53:04.788: INFO: Checking APIGroup: authentication.k8s.io
  Apr 28 15:53:04.789: INFO: PreferredVersion.GroupVersion: authentication.k8s.io/v1
  Apr 28 15:53:04.789: INFO: Versions found [{authentication.k8s.io/v1 v1}]
  Apr 28 15:53:04.789: INFO: authentication.k8s.io/v1 matches authentication.k8s.io/v1
  Apr 28 15:53:04.789: INFO: Checking APIGroup: authorization.k8s.io
  Apr 28 15:53:04.789: INFO: PreferredVersion.GroupVersion: authorization.k8s.io/v1
  Apr 28 15:53:04.789: INFO: Versions found [{authorization.k8s.io/v1 v1}]
  Apr 28 15:53:04.789: INFO: authorization.k8s.io/v1 matches authorization.k8s.io/v1
  Apr 28 15:53:04.789: INFO: Checking APIGroup: autoscaling
  Apr 28 15:53:04.790: INFO: PreferredVersion.GroupVersion: autoscaling/v2
  Apr 28 15:53:04.790: INFO: Versions found [{autoscaling/v2 v2} {autoscaling/v1 v1}]
  Apr 28 15:53:04.790: INFO: autoscaling/v2 matches autoscaling/v2
  Apr 28 15:53:04.790: INFO: Checking APIGroup: batch
  Apr 28 15:53:04.790: INFO: PreferredVersion.GroupVersion: batch/v1
  Apr 28 15:53:04.790: INFO: Versions found [{batch/v1 v1}]
  Apr 28 15:53:04.790: INFO: batch/v1 matches batch/v1
  Apr 28 15:53:04.790: INFO: Checking APIGroup: certificates.k8s.io
  Apr 28 15:53:04.791: INFO: PreferredVersion.GroupVersion: certificates.k8s.io/v1
  Apr 28 15:53:04.791: INFO: Versions found [{certificates.k8s.io/v1 v1}]
  Apr 28 15:53:04.791: INFO: certificates.k8s.io/v1 matches certificates.k8s.io/v1
  Apr 28 15:53:04.791: INFO: Checking APIGroup: networking.k8s.io
  Apr 28 15:53:04.792: INFO: PreferredVersion.GroupVersion: networking.k8s.io/v1
  Apr 28 15:53:04.792: INFO: Versions found [{networking.k8s.io/v1 v1}]
  Apr 28 15:53:04.792: INFO: networking.k8s.io/v1 matches networking.k8s.io/v1
  Apr 28 15:53:04.792: INFO: Checking APIGroup: policy
  Apr 28 15:53:04.792: INFO: PreferredVersion.GroupVersion: policy/v1
  Apr 28 15:53:04.792: INFO: Versions found [{policy/v1 v1}]
  Apr 28 15:53:04.792: INFO: policy/v1 matches policy/v1
  Apr 28 15:53:04.792: INFO: Checking APIGroup: rbac.authorization.k8s.io
  Apr 28 15:53:04.793: INFO: PreferredVersion.GroupVersion: rbac.authorization.k8s.io/v1
  Apr 28 15:53:04.793: INFO: Versions found [{rbac.authorization.k8s.io/v1 v1}]
  Apr 28 15:53:04.793: INFO: rbac.authorization.k8s.io/v1 matches rbac.authorization.k8s.io/v1
  Apr 28 15:53:04.793: INFO: Checking APIGroup: storage.k8s.io
  Apr 28 15:53:04.793: INFO: PreferredVersion.GroupVersion: storage.k8s.io/v1
  Apr 28 15:53:04.793: INFO: Versions found [{storage.k8s.io/v1 v1}]
  Apr 28 15:53:04.793: INFO: storage.k8s.io/v1 matches storage.k8s.io/v1
  Apr 28 15:53:04.793: INFO: Checking APIGroup: admissionregistration.k8s.io
  Apr 28 15:53:04.794: INFO: PreferredVersion.GroupVersion: admissionregistration.k8s.io/v1
  Apr 28 15:53:04.794: INFO: Versions found [{admissionregistration.k8s.io/v1 v1}]
  Apr 28 15:53:04.794: INFO: admissionregistration.k8s.io/v1 matches admissionregistration.k8s.io/v1
  Apr 28 15:53:04.794: INFO: Checking APIGroup: apiextensions.k8s.io
  Apr 28 15:53:04.795: INFO: PreferredVersion.GroupVersion: apiextensions.k8s.io/v1
  Apr 28 15:53:04.795: INFO: Versions found [{apiextensions.k8s.io/v1 v1}]
  Apr 28 15:53:04.795: INFO: apiextensions.k8s.io/v1 matches apiextensions.k8s.io/v1
  Apr 28 15:53:04.795: INFO: Checking APIGroup: scheduling.k8s.io
  Apr 28 15:53:04.795: INFO: PreferredVersion.GroupVersion: scheduling.k8s.io/v1
  Apr 28 15:53:04.795: INFO: Versions found [{scheduling.k8s.io/v1 v1}]
  Apr 28 15:53:04.795: INFO: scheduling.k8s.io/v1 matches scheduling.k8s.io/v1
  Apr 28 15:53:04.795: INFO: Checking APIGroup: coordination.k8s.io
  Apr 28 15:53:04.796: INFO: PreferredVersion.GroupVersion: coordination.k8s.io/v1
  Apr 28 15:53:04.796: INFO: Versions found [{coordination.k8s.io/v1 v1}]
  Apr 28 15:53:04.796: INFO: coordination.k8s.io/v1 matches coordination.k8s.io/v1
  Apr 28 15:53:04.796: INFO: Checking APIGroup: node.k8s.io
  Apr 28 15:53:04.796: INFO: PreferredVersion.GroupVersion: node.k8s.io/v1
  Apr 28 15:53:04.796: INFO: Versions found [{node.k8s.io/v1 v1}]
  Apr 28 15:53:04.796: INFO: node.k8s.io/v1 matches node.k8s.io/v1
  Apr 28 15:53:04.796: INFO: Checking APIGroup: discovery.k8s.io
  Apr 28 15:53:04.797: INFO: PreferredVersion.GroupVersion: discovery.k8s.io/v1
  Apr 28 15:53:04.797: INFO: Versions found [{discovery.k8s.io/v1 v1}]
  Apr 28 15:53:04.797: INFO: discovery.k8s.io/v1 matches discovery.k8s.io/v1
  Apr 28 15:53:04.797: INFO: Checking APIGroup: flowcontrol.apiserver.k8s.io
  Apr 28 15:53:04.797: INFO: PreferredVersion.GroupVersion: flowcontrol.apiserver.k8s.io/v1beta3
  Apr 28 15:53:04.797: INFO: Versions found [{flowcontrol.apiserver.k8s.io/v1beta3 v1beta3} {flowcontrol.apiserver.k8s.io/v1beta2 v1beta2}]
  Apr 28 15:53:04.798: INFO: flowcontrol.apiserver.k8s.io/v1beta3 matches flowcontrol.apiserver.k8s.io/v1beta3
  Apr 28 15:53:04.798: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "discovery-1948" for this suite. @ 04/28/24 15:53:04.8
â€¢ [0.582 seconds]
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:153
  STEP: Creating a kubernetes client @ 04/28/24 15:53:04.803
  Apr 28 15:53:04.803: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/28/24 15:53:04.804
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:53:04.81
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:53:04.812
  Apr 28 15:53:04.814: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 04/28/24 15:53:06.027
  Apr 28 15:53:06.027: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-7551 --namespace=crd-publish-openapi-7551 create -f -'
  Apr 28 15:53:06.423: INFO: stderr: ""
  Apr 28 15:53:06.423: INFO: stdout: "e2e-test-crd-publish-openapi-7987-crd.crd-publish-openapi-test-empty.example.com/test-cr created\n"
  Apr 28 15:53:06.423: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-7551 --namespace=crd-publish-openapi-7551 delete e2e-test-crd-publish-openapi-7987-crds test-cr'
  Apr 28 15:53:06.481: INFO: stderr: ""
  Apr 28 15:53:06.481: INFO: stdout: "e2e-test-crd-publish-openapi-7987-crd.crd-publish-openapi-test-empty.example.com \"test-cr\" deleted\n"
  Apr 28 15:53:06.481: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-7551 --namespace=crd-publish-openapi-7551 apply -f -'
  Apr 28 15:53:06.603: INFO: stderr: ""
  Apr 28 15:53:06.603: INFO: stdout: "e2e-test-crd-publish-openapi-7987-crd.crd-publish-openapi-test-empty.example.com/test-cr created\n"
  Apr 28 15:53:06.603: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-7551 --namespace=crd-publish-openapi-7551 delete e2e-test-crd-publish-openapi-7987-crds test-cr'
  Apr 28 15:53:06.659: INFO: stderr: ""
  Apr 28 15:53:06.659: INFO: stdout: "e2e-test-crd-publish-openapi-7987-crd.crd-publish-openapi-test-empty.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR without validation schema @ 04/28/24 15:53:06.659
  Apr 28 15:53:06.659: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-7551 explain e2e-test-crd-publish-openapi-7987-crds'
  Apr 28 15:53:06.775: INFO: stderr: ""
  Apr 28 15:53:06.775: INFO: stdout: "GROUP:      crd-publish-openapi-test-empty.example.com\nKIND:       e2e-test-crd-publish-openapi-7987-crd\nVERSION:    v1\n\nDESCRIPTION:\n    <empty>\nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n\n"
  Apr 28 15:53:07.976: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-7551" for this suite. @ 04/28/24 15:53:07.982
â€¢ [3.182 seconds]
------------------------------
SSSSS
------------------------------
[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]
k8s.io/kubernetes/test/e2e/apps/job.go:430
  STEP: Creating a kubernetes client @ 04/28/24 15:53:07.986
  Apr 28 15:53:07.986: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename job @ 04/28/24 15:53:07.987
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:53:07.993
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:53:07.995
  STEP: Creating a job @ 04/28/24 15:53:07.997
  STEP: Ensuring job reaches completions @ 04/28/24 15:53:08
  Apr 28 15:53:16.003: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-7222" for this suite. @ 04/28/24 15:53:16.005
â€¢ [8.023 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:76
  STEP: Creating a kubernetes client @ 04/28/24 15:53:16.01
  Apr 28 15:53:16.010: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename resourcequota @ 04/28/24 15:53:16.01
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:53:16.018
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:53:16.02
  STEP: Counting existing ResourceQuota @ 04/28/24 15:53:16.022
  STEP: Creating a ResourceQuota @ 04/28/24 15:53:21.024
  STEP: Ensuring resource quota status is calculated @ 04/28/24 15:53:21.03
  Apr 28 15:53:23.033: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-4514" for this suite. @ 04/28/24 15:53:23.036
â€¢ [7.029 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:97
  STEP: Creating a kubernetes client @ 04/28/24 15:53:23.04
  Apr 28 15:53:23.040: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir @ 04/28/24 15:53:23.04
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:53:23.051
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:53:23.053
  STEP: Creating a pod to test emptydir 0644 on tmpfs @ 04/28/24 15:53:23.055
  STEP: Saw pod success @ 04/28/24 15:53:27.07
  Apr 28 15:53:27.072: INFO: Trying to get logs from node k8sconformance-m02 pod pod-2edb1765-8441-4879-b89e-a258a95fea18 container test-container: <nil>
  STEP: delete the pod @ 04/28/24 15:53:27.079
  Apr 28 15:53:27.087: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-2500" for this suite. @ 04/28/24 15:53:27.089
â€¢ [4.052 seconds]
------------------------------
SS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:187
  STEP: Creating a kubernetes client @ 04/28/24 15:53:27.092
  Apr 28 15:53:27.092: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir @ 04/28/24 15:53:27.093
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:53:27.099
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:53:27.101
  STEP: Creating a pod to test emptydir 0777 on node default medium @ 04/28/24 15:53:27.103
  STEP: Saw pod success @ 04/28/24 15:53:31.115
  Apr 28 15:53:31.118: INFO: Trying to get logs from node k8sconformance-m02 pod pod-d8bc3329-bed8-4efe-aba7-ccf0fb81dfcc container test-container: <nil>
  STEP: delete the pod @ 04/28/24 15:53:31.129
  Apr 28 15:53:31.138: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-9042" for this suite. @ 04/28/24 15:53:31.14
â€¢ [4.051 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:124
  STEP: Creating a kubernetes client @ 04/28/24 15:53:31.143
  Apr 28 15:53:31.143: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 15:53:31.144
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:53:31.152
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:53:31.154
  STEP: Creating projection with configMap that has name projected-configmap-test-upd-fc233cdb-5284-4b7a-a28d-750de67d7544 @ 04/28/24 15:53:31.157
  STEP: Creating the pod @ 04/28/24 15:53:31.16
  STEP: Updating configmap projected-configmap-test-upd-fc233cdb-5284-4b7a-a28d-750de67d7544 @ 04/28/24 15:53:33.178
  STEP: waiting to observe update in volume @ 04/28/24 15:53:33.181
  Apr 28 15:54:55.513: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4748" for this suite. @ 04/28/24 15:54:55.516
â€¢ [84.377 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:117
  STEP: Creating a kubernetes client @ 04/28/24 15:54:55.521
  Apr 28 15:54:55.521: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir @ 04/28/24 15:54:55.522
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:54:55.529
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:54:55.531
  STEP: Creating a pod to test emptydir 0777 on tmpfs @ 04/28/24 15:54:55.533
  STEP: Saw pod success @ 04/28/24 15:54:59.545
  Apr 28 15:54:59.547: INFO: Trying to get logs from node k8sconformance-m02 pod pod-bb84c988-1627-4b89-883e-43ab1bec220d container test-container: <nil>
  STEP: delete the pod @ 04/28/24 15:54:59.552
  Apr 28 15:54:59.560: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-1993" for this suite. @ 04/28/24 15:54:59.562
â€¢ [4.045 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:273
  STEP: Creating a kubernetes client @ 04/28/24 15:54:59.567
  Apr 28 15:54:59.567: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 15:54:59.568
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:54:59.574
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:54:59.576
  STEP: Setting up server cert @ 04/28/24 15:54:59.588
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 15:54:59.884
  STEP: Deploying the webhook pod @ 04/28/24 15:54:59.89
  STEP: Wait for the deployment to be ready @ 04/28/24 15:54:59.897
  Apr 28 15:54:59.902: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/28/24 15:55:01.909
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 15:55:01.918
  Apr 28 15:55:02.918: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering a validating webhook on ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects, via the AdmissionRegistration API @ 04/28/24 15:55:02.922
  STEP: Registering a mutating webhook on ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects, via the AdmissionRegistration API @ 04/28/24 15:55:02.933
  STEP: Creating a dummy validating-webhook-configuration object @ 04/28/24 15:55:02.942
  STEP: Deleting the validating-webhook-configuration, which should be possible to remove @ 04/28/24 15:55:02.949
  STEP: Creating a dummy mutating-webhook-configuration object @ 04/28/24 15:55:02.952
  STEP: Deleting the mutating-webhook-configuration, which should be possible to remove @ 04/28/24 15:55:02.959
  Apr 28 15:55:02.962: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-7427" for this suite. @ 04/28/24 15:55:02.99
  STEP: Destroying namespace "webhook-markers-7658" for this suite. @ 04/28/24 15:55:02.994
â€¢ [3.430 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:167
  STEP: Creating a kubernetes client @ 04/28/24 15:55:02.997
  Apr 28 15:55:02.997: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir @ 04/28/24 15:55:02.998
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:55:03.004
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:55:03.006
  STEP: Creating a pod to test emptydir 0644 on node default medium @ 04/28/24 15:55:03.008
  STEP: Saw pod success @ 04/28/24 15:55:05.017
  Apr 28 15:55:05.019: INFO: Trying to get logs from node k8sconformance-m02 pod pod-eb9142f6-e1fe-4c32-997a-e2fa301a74b5 container test-container: <nil>
  STEP: delete the pod @ 04/28/24 15:55:05.024
  Apr 28 15:55:05.032: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-5182" for this suite. @ 04/28/24 15:55:05.033
â€¢ [2.039 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:901
  STEP: Creating a kubernetes client @ 04/28/24 15:55:05.038
  Apr 28 15:55:05.038: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename statefulset @ 04/28/24 15:55:05.04
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:55:05.051
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:55:05.053
  STEP: Creating service test in namespace statefulset-468 @ 04/28/24 15:55:05.055
  STEP: Creating statefulset ss in namespace statefulset-468 @ 04/28/24 15:55:05.058
  Apr 28 15:55:05.065: INFO: Found 0 stateful pods, waiting for 1
  Apr 28 15:55:15.070: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: getting scale subresource @ 04/28/24 15:55:15.073
  STEP: updating a scale subresource @ 04/28/24 15:55:15.075
  STEP: verifying the statefulset Spec.Replicas was modified @ 04/28/24 15:55:15.092
  STEP: Patch a scale subresource @ 04/28/24 15:55:15.094
  STEP: verifying the statefulset Spec.Replicas was modified @ 04/28/24 15:55:15.099
  Apr 28 15:55:15.101: INFO: Deleting all statefulset in ns statefulset-468
  Apr 28 15:55:15.103: INFO: Scaling statefulset ss to 0
  Apr 28 15:55:25.165: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 28 15:55:25.167: INFO: Deleting statefulset ss
  Apr 28 15:55:25.173: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-468" for this suite. @ 04/28/24 15:55:25.175
â€¢ [20.140 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should provide secure master service  [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:775
  STEP: Creating a kubernetes client @ 04/28/24 15:55:25.181
  Apr 28 15:55:25.181: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 15:55:25.182
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:55:25.189
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:55:25.191
  Apr 28 15:55:25.195: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-1480" for this suite. @ 04/28/24 15:55:25.196
â€¢ [0.018 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:423
  STEP: Creating a kubernetes client @ 04/28/24 15:55:25.2
  Apr 28 15:55:25.200: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename configmap @ 04/28/24 15:55:25.2
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:55:25.208
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:55:25.21
  STEP: Creating configMap with name configmap-test-volume-cd95bb13-f632-40a0-b6c1-bc1659a95081 @ 04/28/24 15:55:25.212
  STEP: Creating a pod to test consume configMaps @ 04/28/24 15:55:25.214
  STEP: Saw pod success @ 04/28/24 15:55:27.224
  Apr 28 15:55:27.226: INFO: Trying to get logs from node k8sconformance-m02 pod pod-configmaps-0eadf742-f90d-454c-b6f6-97d8b3836795 container configmap-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 15:55:27.232
  Apr 28 15:55:27.241: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-614" for this suite. @ 04/28/24 15:55:27.243
â€¢ [2.047 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should delete a collection of services [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:3552
  STEP: Creating a kubernetes client @ 04/28/24 15:55:27.247
  Apr 28 15:55:27.247: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 15:55:27.248
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:55:27.254
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:55:27.256
  STEP: creating a collection of services @ 04/28/24 15:55:27.258
  Apr 28 15:55:27.258: INFO: Creating e2e-svc-a-fjzht
  Apr 28 15:55:27.265: INFO: Creating e2e-svc-b-rw8j7
  Apr 28 15:55:27.273: INFO: Creating e2e-svc-c-b4qbn
  STEP: deleting service collection @ 04/28/24 15:55:27.285
  Apr 28 15:55:27.305: INFO: Collection of services has been deleted
  Apr 28 15:55:27.305: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-2019" for this suite. @ 04/28/24 15:55:27.307
â€¢ [0.063 seconds]
------------------------------
SSS
------------------------------
[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance]
k8s.io/kubernetes/test/e2e/network/hostport.go:63
  STEP: Creating a kubernetes client @ 04/28/24 15:55:27.311
  Apr 28 15:55:27.311: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename hostport @ 04/28/24 15:55:27.311
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:55:27.319
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:55:27.321
  STEP: Trying to create a pod(pod1) with hostport 54323 and hostIP 127.0.0.1 and expect scheduled @ 04/28/24 15:55:27.325
  STEP: Trying to create another pod(pod2) with hostport 54323 but hostIP 192.168.49.2 on the node which pod1 resides and expect scheduled @ 04/28/24 15:55:29.333
  STEP: Trying to create a third pod(pod3) with hostport 54323, hostIP 192.168.49.2 but use UDP protocol on the node which pod2 resides @ 04/28/24 15:55:41.356
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 127.0.0.1, port: 54323 @ 04/28/24 15:55:45.376
  Apr 28 15:55:45.376: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g --connect-timeout 5 --interface 192.168.49.2 http://127.0.0.1:54323/hostname] Namespace:hostport-9257 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 15:55:45.376: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 15:55:45.377: INFO: ExecWithOptions: Clientset creation
  Apr 28 15:55:45.377: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/hostport-9257/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+--connect-timeout+5+--interface+192.168.49.2+http%3A%2F%2F127.0.0.1%3A54323%2Fhostname&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 192.168.49.2, port: 54323 @ 04/28/24 15:55:45.428
  Apr 28 15:55:45.428: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g --connect-timeout 5 http://192.168.49.2:54323/hostname] Namespace:hostport-9257 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 15:55:45.428: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 15:55:45.428: INFO: ExecWithOptions: Clientset creation
  Apr 28 15:55:45.429: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/hostport-9257/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+--connect-timeout+5+http%3A%2F%2F192.168.49.2%3A54323%2Fhostname&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 192.168.49.2, port: 54323 UDP @ 04/28/24 15:55:45.473
  Apr 28 15:55:45.473: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostname | nc -u -w 5 192.168.49.2 54323] Namespace:hostport-9257 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 15:55:45.473: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 15:55:45.474: INFO: ExecWithOptions: Clientset creation
  Apr 28 15:55:45.474: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/hostport-9257/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostname+%7C+nc+-u+-w+5+192.168.49.2+54323&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  Apr 28 15:55:50.523: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "hostport-9257" for this suite. @ 04/28/24 15:55:50.526
â€¢ [23.219 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:792
  STEP: Creating a kubernetes client @ 04/28/24 15:55:50.53
  Apr 28 15:55:50.530: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename statefulset @ 04/28/24 15:55:50.531
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:55:50.539
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:55:50.541
  STEP: Creating service test in namespace statefulset-6122 @ 04/28/24 15:55:50.543
  STEP: Looking for a node to schedule stateful set and pod @ 04/28/24 15:55:50.545
  STEP: Creating pod with conflicting port in namespace statefulset-6122 @ 04/28/24 15:55:50.547
  STEP: Waiting until pod test-pod will start running in namespace statefulset-6122 @ 04/28/24 15:55:50.553
  STEP: Creating statefulset with conflicting port in namespace statefulset-6122 @ 04/28/24 15:55:52.557
  STEP: Waiting until stateful pod ss-0 will be recreated and deleted at least once in namespace statefulset-6122 @ 04/28/24 15:55:52.561
  Apr 28 15:55:52.568: INFO: Observed stateful pod in namespace: statefulset-6122, name: ss-0, uid: e75c65f3-119f-4842-9e07-c10a5c05bbae, status phase: Pending. Waiting for statefulset controller to delete.
  Apr 28 15:55:52.578: INFO: Observed stateful pod in namespace: statefulset-6122, name: ss-0, uid: e75c65f3-119f-4842-9e07-c10a5c05bbae, status phase: Failed. Waiting for statefulset controller to delete.
  Apr 28 15:55:52.584: INFO: Observed stateful pod in namespace: statefulset-6122, name: ss-0, uid: e75c65f3-119f-4842-9e07-c10a5c05bbae, status phase: Failed. Waiting for statefulset controller to delete.
  Apr 28 15:55:52.586: INFO: Observed delete event for stateful pod ss-0 in namespace statefulset-6122
  STEP: Removing pod with conflicting port in namespace statefulset-6122 @ 04/28/24 15:55:52.586
  STEP: Waiting when stateful pod ss-0 will be recreated in namespace statefulset-6122 and will be in running state @ 04/28/24 15:55:52.592
  Apr 28 15:55:54.597: INFO: Deleting all statefulset in ns statefulset-6122
  Apr 28 15:55:54.599: INFO: Scaling statefulset ss to 0
  Apr 28 15:56:04.613: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 28 15:56:04.614: INFO: Deleting statefulset ss
  Apr 28 15:56:04.621: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-6122" for this suite. @ 04/28/24 15:56:04.623
â€¢ [14.096 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-architecture] Conformance Tests should have at least two untainted nodes [Conformance]
k8s.io/kubernetes/test/e2e/architecture/conformance.go:39
  STEP: Creating a kubernetes client @ 04/28/24 15:56:04.627
  Apr 28 15:56:04.627: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename conformance-tests @ 04/28/24 15:56:04.628
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:56:04.636
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:56:04.638
  STEP: Getting node addresses @ 04/28/24 15:56:04.64
  Apr 28 15:56:04.640: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  Apr 28 15:56:04.643: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "conformance-tests-6813" for this suite. @ 04/28/24 15:56:04.645
â€¢ [0.021 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:79
  STEP: Creating a kubernetes client @ 04/28/24 15:56:04.649
  Apr 28 15:56:04.649: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename secrets @ 04/28/24 15:56:04.65
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:56:04.657
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:56:04.658
  STEP: Creating secret with name secret-test-map-1765b2bd-18dc-46ff-9bef-07d74b03f2a4 @ 04/28/24 15:56:04.66
  STEP: Creating a pod to test consume secrets @ 04/28/24 15:56:04.663
  STEP: Saw pod success @ 04/28/24 15:56:08.677
  Apr 28 15:56:08.678: INFO: Trying to get logs from node k8sconformance-m02 pod pod-secrets-ae12af97-2606-457c-8a88-9dd5fd82abdc container secret-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 15:56:08.684
  Apr 28 15:56:08.692: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-9528" for this suite. @ 04/28/24 15:56:08.694
â€¢ [4.047 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:54
  STEP: Creating a kubernetes client @ 04/28/24 15:56:08.697
  Apr 28 15:56:08.697: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 15:56:08.697
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:56:08.705
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:56:08.706
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 15:56:08.708
  STEP: Saw pod success @ 04/28/24 15:56:12.719
  Apr 28 15:56:12.721: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-0e5a3eee-e9aa-4550-9f4a-9961205c92f0 container client-container: <nil>
  STEP: delete the pod @ 04/28/24 15:56:12.728
  Apr 28 15:56:12.736: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-8922" for this suite. @ 04/28/24 15:56:12.738
â€¢ [4.044 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/security_context.go:528
  STEP: Creating a kubernetes client @ 04/28/24 15:56:12.742
  Apr 28 15:56:12.742: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename security-context-test @ 04/28/24 15:56:12.742
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:56:12.749
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:56:12.751
  Apr 28 15:56:16.770: INFO: Got logs for pod "busybox-privileged-false-6105108e-465d-4ade-b080-ca6ea681f54a": "ip: RTNETLINK answers: Operation not permitted\n"
  Apr 28 15:56:16.770: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-4895" for this suite. @ 04/28/24 15:56:16.772
â€¢ [4.033 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:54
  STEP: Creating a kubernetes client @ 04/28/24 15:56:16.775
  Apr 28 15:56:16.776: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 15:56:16.776
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:56:16.783
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:56:16.785
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 15:56:16.787
  STEP: Saw pod success @ 04/28/24 15:56:20.798
  Apr 28 15:56:20.800: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-272ba05c-87d1-4170-8f43-bf40cd5fbc3e container client-container: <nil>
  STEP: delete the pod @ 04/28/24 15:56:20.806
  Apr 28 15:56:20.815: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4245" for this suite. @ 04/28/24 15:56:20.817
â€¢ [4.045 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown metadata fields of a typed object [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/field_validation.go:117
  STEP: Creating a kubernetes client @ 04/28/24 15:56:20.82
  Apr 28 15:56:20.820: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename field-validation @ 04/28/24 15:56:20.821
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:56:20.829
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:56:20.831
  STEP: apply creating a deployment @ 04/28/24 15:56:20.833
  Apr 28 15:56:20.834: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-1780" for this suite. @ 04/28/24 15:56:20.841
â€¢ [0.024 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:276
  STEP: Creating a kubernetes client @ 04/28/24 15:56:20.848
  Apr 28 15:56:20.848: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/28/24 15:56:20.848
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:56:20.855
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:56:20.857
  STEP: CRs in different groups (two CRDs) show up in OpenAPI documentation @ 04/28/24 15:56:20.859
  Apr 28 15:56:20.859: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 15:56:22.134: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 15:56:27.051: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-4382" for this suite. @ 04/28/24 15:56:27.057
â€¢ [6.214 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]
k8s.io/kubernetes/test/e2e/apps/daemon_set.go:875
  STEP: Creating a kubernetes client @ 04/28/24 15:56:27.062
  Apr 28 15:56:27.062: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename daemonsets @ 04/28/24 15:56:27.063
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:56:27.07
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:56:27.072
  STEP: Creating simple DaemonSet "daemon-set" @ 04/28/24 15:56:27.084
  STEP: Check that daemon pods launch on every node of the cluster. @ 04/28/24 15:56:27.087
  Apr 28 15:56:27.091: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 15:56:27.091: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 15:56:28.096: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 15:56:28.096: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 15:56:29.096: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Apr 28 15:56:29.096: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Getting /status @ 04/28/24 15:56:29.097
  Apr 28 15:56:29.099: INFO: Daemon Set daemon-set has Conditions: []
  STEP: updating the DaemonSet Status @ 04/28/24 15:56:29.099
  Apr 28 15:56:29.106: INFO: updatedStatus.Conditions: []v1.DaemonSetCondition{v1.DaemonSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the daemon set status to be updated @ 04/28/24 15:56:29.106
  Apr 28 15:56:29.107: INFO: Observed &DaemonSet event: ADDED
  Apr 28 15:56:29.107: INFO: Observed &DaemonSet event: MODIFIED
  Apr 28 15:56:29.108: INFO: Observed &DaemonSet event: MODIFIED
  Apr 28 15:56:29.108: INFO: Observed &DaemonSet event: MODIFIED
  Apr 28 15:56:29.108: INFO: Observed &DaemonSet event: MODIFIED
  Apr 28 15:56:29.108: INFO: Found daemon set daemon-set in namespace daemonsets-9749 with labels: map[daemonset-name:daemon-set] annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Apr 28 15:56:29.108: INFO: Daemon set daemon-set has an updated status
  STEP: patching the DaemonSet Status @ 04/28/24 15:56:29.108
  STEP: watching for the daemon set status to be patched @ 04/28/24 15:56:29.112
  Apr 28 15:56:29.113: INFO: Observed &DaemonSet event: ADDED
  Apr 28 15:56:29.113: INFO: Observed &DaemonSet event: MODIFIED
  Apr 28 15:56:29.114: INFO: Observed &DaemonSet event: MODIFIED
  Apr 28 15:56:29.114: INFO: Observed &DaemonSet event: MODIFIED
  Apr 28 15:56:29.114: INFO: Observed &DaemonSet event: MODIFIED
  Apr 28 15:56:29.114: INFO: Observed daemon set daemon-set in namespace daemonsets-9749 with annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Apr 28 15:56:29.114: INFO: Observed &DaemonSet event: MODIFIED
  Apr 28 15:56:29.114: INFO: Found daemon set daemon-set in namespace daemonsets-9749 with labels: map[daemonset-name:daemon-set] annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusPatched True 0001-01-01 00:00:00 +0000 UTC  }]
  Apr 28 15:56:29.114: INFO: Daemon set daemon-set has a patched status
  STEP: Deleting DaemonSet "daemon-set" @ 04/28/24 15:56:29.117
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-9749, will wait for the garbage collector to delete the pods @ 04/28/24 15:56:29.117
  Apr 28 15:56:29.174: INFO: Deleting DaemonSet.extensions daemon-set took: 4.452105ms
  Apr 28 15:56:29.275: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.947528ms
  Apr 28 15:56:30.477: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 15:56:30.477: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Apr 28 15:56:30.479: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"6946"},"items":null}

  Apr 28 15:56:30.481: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"6946"},"items":null}

  Apr 28 15:56:30.486: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-9749" for this suite. @ 04/28/24 15:56:30.488
â€¢ [3.429 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]
k8s.io/kubernetes/test/e2e/storage/empty_dir_wrapper.go:188
  STEP: Creating a kubernetes client @ 04/28/24 15:56:30.491
  Apr 28 15:56:30.491: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir-wrapper @ 04/28/24 15:56:30.492
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:56:30.498
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:56:30.5
  STEP: Creating 50 configmaps @ 04/28/24 15:56:30.502
  STEP: Creating RC which spawns configmap-volume pods @ 04/28/24 15:56:30.744
  Apr 28 15:56:30.858: INFO: Pod name wrapped-volume-race-ffa0d52d-e494-4429-82d7-ebe572e27f4a: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 04/28/24 15:56:30.858
  STEP: Creating RC which spawns configmap-volume pods @ 04/28/24 15:56:32.961
  Apr 28 15:56:32.972: INFO: Pod name wrapped-volume-race-14495787-8f8d-42a6-8319-f29ee08f0ba3: Found 0 pods out of 5
  Apr 28 15:56:37.977: INFO: Pod name wrapped-volume-race-14495787-8f8d-42a6-8319-f29ee08f0ba3: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 04/28/24 15:56:37.977
  STEP: Creating RC which spawns configmap-volume pods @ 04/28/24 15:56:37.989
  Apr 28 15:56:38.001: INFO: Pod name wrapped-volume-race-cac2c57c-4069-4dbf-872c-bed501b2b0f4: Found 0 pods out of 5
  Apr 28 15:56:43.008: INFO: Pod name wrapped-volume-race-cac2c57c-4069-4dbf-872c-bed501b2b0f4: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 04/28/24 15:56:43.008
  Apr 28 15:56:43.020: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController wrapped-volume-race-cac2c57c-4069-4dbf-872c-bed501b2b0f4 in namespace emptydir-wrapper-2366, will wait for the garbage collector to delete the pods @ 04/28/24 15:56:43.022
  Apr 28 15:56:43.078: INFO: Deleting ReplicationController wrapped-volume-race-cac2c57c-4069-4dbf-872c-bed501b2b0f4 took: 4.278853ms
  Apr 28 15:56:43.178: INFO: Terminating ReplicationController wrapped-volume-race-cac2c57c-4069-4dbf-872c-bed501b2b0f4 pods took: 100.509094ms
  STEP: deleting ReplicationController wrapped-volume-race-14495787-8f8d-42a6-8319-f29ee08f0ba3 in namespace emptydir-wrapper-2366, will wait for the garbage collector to delete the pods @ 04/28/24 15:56:44.079
  Apr 28 15:56:44.136: INFO: Deleting ReplicationController wrapped-volume-race-14495787-8f8d-42a6-8319-f29ee08f0ba3 took: 4.221015ms
  Apr 28 15:56:44.239: INFO: Terminating ReplicationController wrapped-volume-race-14495787-8f8d-42a6-8319-f29ee08f0ba3 pods took: 103.250004ms
  STEP: deleting ReplicationController wrapped-volume-race-ffa0d52d-e494-4429-82d7-ebe572e27f4a in namespace emptydir-wrapper-2366, will wait for the garbage collector to delete the pods @ 04/28/24 15:56:44.939
  Apr 28 15:56:44.996: INFO: Deleting ReplicationController wrapped-volume-race-ffa0d52d-e494-4429-82d7-ebe572e27f4a took: 4.076477ms
  Apr 28 15:56:45.097: INFO: Terminating ReplicationController wrapped-volume-race-ffa0d52d-e494-4429-82d7-ebe572e27f4a pods took: 100.889917ms
  STEP: Cleaning up the configMaps @ 04/28/24 15:56:46.098
  STEP: Destroying namespace "emptydir-wrapper-2366" for this suite. @ 04/28/24 15:56:46.234
â€¢ [15.746 seconds]
------------------------------
SSS
------------------------------
[sig-network] DNS should provide DNS for pods for Hostname [Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:244
  STEP: Creating a kubernetes client @ 04/28/24 15:56:46.237
  Apr 28 15:56:46.237: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename dns @ 04/28/24 15:56:46.238
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:56:46.246
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:56:46.248
  STEP: Creating a test headless service @ 04/28/24 15:56:46.25
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-2.dns-test-service-2.dns-8033.svc.cluster.local)" && echo OK > /results/wheezy_hosts@dns-querier-2.dns-test-service-2.dns-8033.svc.cluster.local;test -n "$$(getent hosts dns-querier-2)" && echo OK > /results/wheezy_hosts@dns-querier-2;sleep 1; done
   @ 04/28/24 15:56:46.252
  STEP: Running these commands on jessie: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-2.dns-test-service-2.dns-8033.svc.cluster.local)" && echo OK > /results/jessie_hosts@dns-querier-2.dns-test-service-2.dns-8033.svc.cluster.local;test -n "$$(getent hosts dns-querier-2)" && echo OK > /results/jessie_hosts@dns-querier-2;sleep 1; done
   @ 04/28/24 15:56:46.252
  STEP: creating a pod to probe DNS @ 04/28/24 15:56:46.252
  STEP: submitting the pod to kubernetes @ 04/28/24 15:56:46.252
  STEP: retrieving the pod @ 04/28/24 15:56:48.265
  STEP: looking for the results for each expected name from probers @ 04/28/24 15:56:48.267
  Apr 28 15:56:48.275: INFO: DNS probes using dns-8033/dns-test-7844205b-89a0-4379-b8de-8b14bfa40948 succeeded

  Apr 28 15:56:48.275: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 04/28/24 15:56:48.277
  STEP: deleting the test headless service @ 04/28/24 15:56:48.284
  STEP: Destroying namespace "dns-8033" for this suite. @ 04/28/24 15:56:48.289
â€¢ [2.055 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should reject a Pod requesting a non-existent RuntimeClass [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtimeclass.go:55
  STEP: Creating a kubernetes client @ 04/28/24 15:56:48.294
  Apr 28 15:56:48.294: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename runtimeclass @ 04/28/24 15:56:48.295
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:56:48.302
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:56:48.304
  Apr 28 15:56:48.309: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-3526" for this suite. @ 04/28/24 15:56:48.311
â€¢ [0.020 seconds]
------------------------------
SS
------------------------------
[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/security_context.go:609
  STEP: Creating a kubernetes client @ 04/28/24 15:56:48.314
  Apr 28 15:56:48.314: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename security-context-test @ 04/28/24 15:56:48.314
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:56:48.321
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:56:48.323
  Apr 28 15:56:52.348: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-8115" for this suite. @ 04/28/24 15:56:52.35
â€¢ [4.040 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:68
  STEP: Creating a kubernetes client @ 04/28/24 15:56:52.354
  Apr 28 15:56:52.354: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename secrets @ 04/28/24 15:56:52.355
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:56:52.365
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:56:52.366
  STEP: Creating secret with name secret-test-a40ed952-acb5-4429-9c3e-03d861ace236 @ 04/28/24 15:56:52.368
  STEP: Creating a pod to test consume secrets @ 04/28/24 15:56:52.371
  STEP: Saw pod success @ 04/28/24 15:56:54.382
  Apr 28 15:56:54.384: INFO: Trying to get logs from node k8sconformance-m02 pod pod-secrets-aa22098d-7ec5-4175-8be5-a8916f0a035e container secret-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 15:56:54.389
  Apr 28 15:56:54.396: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-4394" for this suite. @ 04/28/24 15:56:54.398
â€¢ [2.048 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:194
  STEP: Creating a kubernetes client @ 04/28/24 15:56:54.403
  Apr 28 15:56:54.403: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 15:56:54.404
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:56:54.41
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:56:54.412
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 15:56:54.414
  STEP: Saw pod success @ 04/28/24 15:56:56.425
  Apr 28 15:56:56.426: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-1edadb11-2092-45d9-8160-c9136161003b container client-container: <nil>
  STEP: delete the pod @ 04/28/24 15:56:56.432
  Apr 28 15:56:56.443: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6343" for this suite. @ 04/28/24 15:56:56.445
â€¢ [2.045 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a exec "cat /tmp/health" liveness probe [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:151
  STEP: Creating a kubernetes client @ 04/28/24 15:56:56.449
  Apr 28 15:56:56.449: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-probe @ 04/28/24 15:56:56.45
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 15:56:56.457
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 15:56:56.459
  STEP: Creating pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119 @ 04/28/24 15:56:56.461
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/28/24 15:56:58.47
  Apr 28 15:56:58.472: INFO: Initial restart count of pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae is 0
  Apr 28 15:56:58.473: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:00.476: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:02.479: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:04.481: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:06.485: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:08.488: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:10.491: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:12.494: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:14.498: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:16.501: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:18.504: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:20.508: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:22.511: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:24.514: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:26.517: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:28.521: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:30.524: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:32.528: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:34.531: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:36.534: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:38.538: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:40.541: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:42.545: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:44.548: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:46.552: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:48.554: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:50.557: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:52.560: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:54.563: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:56.567: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:57:58.570: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:00.572: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:02.575: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:04.578: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:06.581: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:08.584: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:10.588: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:12.590: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:14.593: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:16.596: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:18.600: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:20.603: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:22.607: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:24.610: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:26.614: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:28.616: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:30.619: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:32.623: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:34.626: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:36.629: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:38.633: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:40.635: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:42.638: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:44.642: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:46.645: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:48.649: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:50.652: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:52.656: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:54.660: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:56.663: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:58:58.666: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:00.669: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:02.673: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:04.676: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:06.679: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:08.682: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:10.685: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:12.687: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:14.691: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:16.694: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:18.697: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:20.699: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:22.703: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:24.706: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:26.709: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:28.712: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:30.715: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:32.719: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:34.722: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:36.725: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:38.728: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:40.731: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:42.734: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:44.737: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:46.740: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:48.744: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:50.746: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:52.749: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:54.752: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:56.756: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 15:59:58.759: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:00.762: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:02.765: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:04.768: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:06.771: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:08.774: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:10.777: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:12.781: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:14.784: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:16.789: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:18.792: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:20.795: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:22.797: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:24.801: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:26.804: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:28.807: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:30.810: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:32.813: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:34.816: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:36.820: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:38.822: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:40.824: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:42.828: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:44.831: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:46.835: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:48.838: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:50.840: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:52.844: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:54.847: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:56.850: INFO: Get pod busybox-c9393bfc-e069-43f2-922a-2eef4d8482ae in namespace container-probe-6119
  Apr 28 16:00:58.851: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 04/28/24 16:00:58.853
  STEP: Destroying namespace "container-probe-6119" for this suite. @ 04/28/24 16:00:58.861
â€¢ [242.416 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should test the lifecycle of an Endpoint [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:3142
  STEP: Creating a kubernetes client @ 04/28/24 16:00:58.866
  Apr 28 16:00:58.866: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 16:00:58.867
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:00:58.876
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:00:58.877
  STEP: creating an Endpoint @ 04/28/24 16:00:58.881
  STEP: waiting for available Endpoint @ 04/28/24 16:00:58.883
  STEP: listing all Endpoints @ 04/28/24 16:00:58.884
  STEP: updating the Endpoint @ 04/28/24 16:00:58.885
  STEP: fetching the Endpoint @ 04/28/24 16:00:58.889
  STEP: patching the Endpoint @ 04/28/24 16:00:58.89
  STEP: fetching the Endpoint @ 04/28/24 16:00:58.896
  STEP: deleting the Endpoint by Collection @ 04/28/24 16:00:58.897
  STEP: waiting for Endpoint deletion @ 04/28/24 16:00:58.901
  STEP: fetching the Endpoint @ 04/28/24 16:00:58.901
  Apr 28 16:00:58.903: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-4472" for this suite. @ 04/28/24 16:00:58.905
â€¢ [0.042 seconds]
------------------------------
SSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]
k8s.io/kubernetes/test/e2e/scheduling/predicates.go:444
  STEP: Creating a kubernetes client @ 04/28/24 16:00:58.908
  Apr 28 16:00:58.908: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename sched-pred @ 04/28/24 16:00:58.908
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:00:58.915
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:00:58.917
  Apr 28 16:00:58.918: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Apr 28 16:00:58.922: INFO: Waiting for terminating namespaces to be deleted...
  Apr 28 16:00:58.923: INFO: 
  Logging pods the apiserver thinks is on node k8sconformance before test
  Apr 28 16:00:58.926: INFO: coredns-5dd5756b68-4wfsw from kube-system started at 2024-04-28 15:26:56 +0000 UTC (1 container statuses recorded)
  Apr 28 16:00:58.926: INFO: 	Container coredns ready: true, restart count 1
  Apr 28 16:00:58.926: INFO: etcd-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 16:00:58.926: INFO: 	Container etcd ready: true, restart count 0
  Apr 28 16:00:58.926: INFO: kindnet-6nsws from kube-system started at 2024-04-28 15:26:55 +0000 UTC (1 container statuses recorded)
  Apr 28 16:00:58.926: INFO: 	Container kindnet-cni ready: true, restart count 0
  Apr 28 16:00:58.926: INFO: kube-apiserver-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 16:00:58.926: INFO: 	Container kube-apiserver ready: true, restart count 0
  Apr 28 16:00:58.926: INFO: kube-controller-manager-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 16:00:58.926: INFO: 	Container kube-controller-manager ready: true, restart count 0
  Apr 28 16:00:58.926: INFO: kube-proxy-kjs4b from kube-system started at 2024-04-28 15:26:55 +0000 UTC (1 container statuses recorded)
  Apr 28 16:00:58.926: INFO: 	Container kube-proxy ready: true, restart count 0
  Apr 28 16:00:58.926: INFO: kube-scheduler-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 16:00:58.926: INFO: 	Container kube-scheduler ready: true, restart count 0
  Apr 28 16:00:58.926: INFO: storage-provisioner from kube-system started at 2024-04-28 15:26:56 +0000 UTC (1 container statuses recorded)
  Apr 28 16:00:58.926: INFO: 	Container storage-provisioner ready: true, restart count 0
  Apr 28 16:00:58.926: INFO: sonobuoy-systemd-logs-daemon-set-5db54bb871f24159-clq66 from sonobuoy started at 2024-04-28 15:27:37 +0000 UTC (2 container statuses recorded)
  Apr 28 16:00:58.926: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 28 16:00:58.926: INFO: 	Container systemd-logs ready: true, restart count 0
  Apr 28 16:00:58.926: INFO: 
  Logging pods the apiserver thinks is on node k8sconformance-m02 before test
  Apr 28 16:00:58.929: INFO: kindnet-zclk7 from kube-system started at 2024-04-28 15:27:27 +0000 UTC (1 container statuses recorded)
  Apr 28 16:00:58.929: INFO: 	Container kindnet-cni ready: true, restart count 0
  Apr 28 16:00:58.929: INFO: kube-proxy-7t84r from kube-system started at 2024-04-28 15:27:27 +0000 UTC (1 container statuses recorded)
  Apr 28 16:00:58.929: INFO: 	Container kube-proxy ready: true, restart count 0
  Apr 28 16:00:58.929: INFO: sonobuoy from sonobuoy started at 2024-04-28 15:27:33 +0000 UTC (1 container statuses recorded)
  Apr 28 16:00:58.929: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Apr 28 16:00:58.929: INFO: sonobuoy-e2e-job-b135035bf3ea46b2 from sonobuoy started at 2024-04-28 15:27:37 +0000 UTC (2 container statuses recorded)
  Apr 28 16:00:58.929: INFO: 	Container e2e ready: true, restart count 0
  Apr 28 16:00:58.929: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 28 16:00:58.929: INFO: sonobuoy-systemd-logs-daemon-set-5db54bb871f24159-pn7kn from sonobuoy started at 2024-04-28 15:27:37 +0000 UTC (2 container statuses recorded)
  Apr 28 16:00:58.929: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 28 16:00:58.929: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to schedule Pod with nonempty NodeSelector. @ 04/28/24 16:00:58.929
  STEP: Considering event: 
  Type = [Warning], Name = [restricted-pod.17ca7d02c06b1918], Reason = [FailedScheduling], Message = [0/2 nodes are available: 2 node(s) didn't match Pod's node affinity/selector. preemption: 0/2 nodes are available: 2 Preemption is not helpful for scheduling..] @ 04/28/24 16:00:58.942
  Apr 28 16:00:59.942: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-4118" for this suite. @ 04/28/24 16:00:59.944
â€¢ [1.039 seconds]
------------------------------
[sig-instrumentation] Events API should delete a collection of events [Conformance]
k8s.io/kubernetes/test/e2e/instrumentation/events.go:207
  STEP: Creating a kubernetes client @ 04/28/24 16:00:59.947
  Apr 28 16:00:59.947: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename events @ 04/28/24 16:00:59.948
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:00:59.955
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:00:59.957
  STEP: Create set of events @ 04/28/24 16:00:59.959
  STEP: get a list of Events with a label in the current namespace @ 04/28/24 16:00:59.968
  STEP: delete a list of events @ 04/28/24 16:00:59.969
  Apr 28 16:00:59.969: INFO: requesting DeleteCollection of events
  STEP: check that the list of events matches the requested quantity @ 04/28/24 16:00:59.979
  Apr 28 16:00:59.980: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-7999" for this suite. @ 04/28/24 16:00:59.982
â€¢ [0.038 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/downwardapi.go:45
  STEP: Creating a kubernetes client @ 04/28/24 16:00:59.986
  Apr 28 16:00:59.986: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 16:00:59.987
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:00:59.993
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:00:59.995
  STEP: Creating a pod to test downward api env vars @ 04/28/24 16:00:59.997
  STEP: Saw pod success @ 04/28/24 16:01:04.01
  Apr 28 16:01:04.012: INFO: Trying to get logs from node k8sconformance-m02 pod downward-api-d0b5aec4-d25b-4780-ac9f-cdc5fdaf8202 container dapi-container: <nil>
  STEP: delete the pod @ 04/28/24 16:01:04.024
  Apr 28 16:01:04.036: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-2006" for this suite. @ 04/28/24 16:01:04.038
â€¢ [4.058 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:806
  STEP: Creating a kubernetes client @ 04/28/24 16:01:04.044
  Apr 28 16:01:04.044: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename resourcequota @ 04/28/24 16:01:04.045
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:01:04.052
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:01:04.054
  STEP: Creating a ResourceQuota with best effort scope @ 04/28/24 16:01:04.056
  STEP: Ensuring ResourceQuota status is calculated @ 04/28/24 16:01:04.06
  STEP: Creating a ResourceQuota with not best effort scope @ 04/28/24 16:01:06.062
  STEP: Ensuring ResourceQuota status is calculated @ 04/28/24 16:01:06.065
  STEP: Creating a best-effort pod @ 04/28/24 16:01:08.069
  STEP: Ensuring resource quota with best effort scope captures the pod usage @ 04/28/24 16:01:08.078
  STEP: Ensuring resource quota with not best effort ignored the pod usage @ 04/28/24 16:01:10.081
  STEP: Deleting the pod @ 04/28/24 16:01:12.084
  STEP: Ensuring resource quota status released the pod usage @ 04/28/24 16:01:12.092
  STEP: Creating a not best-effort pod @ 04/28/24 16:01:14.096
  STEP: Ensuring resource quota with not best effort scope captures the pod usage @ 04/28/24 16:01:14.104
  STEP: Ensuring resource quota with best effort scope ignored the pod usage @ 04/28/24 16:01:16.107
  STEP: Deleting the pod @ 04/28/24 16:01:18.109
  STEP: Ensuring resource quota status released the pod usage @ 04/28/24 16:01:18.116
  Apr 28 16:01:20.119: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-7994" for this suite. @ 04/28/24 16:01:20.122
â€¢ [16.081 seconds]
------------------------------
[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]
k8s.io/kubernetes/test/e2e/auth/service_accounts.go:78
  STEP: Creating a kubernetes client @ 04/28/24 16:01:20.125
  Apr 28 16:01:20.125: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename svcaccounts @ 04/28/24 16:01:20.126
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:01:20.134
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:01:20.136
  STEP: reading a file in the container @ 04/28/24 16:01:22.149
  Apr 28 16:01:22.149: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-8640 pod-service-account-09018e1d-5357-457d-bf89-1b590b40f9e9 -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/token'
  STEP: reading a file in the container @ 04/28/24 16:01:22.25
  Apr 28 16:01:22.250: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-8640 pod-service-account-09018e1d-5357-457d-bf89-1b590b40f9e9 -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
  STEP: reading a file in the container @ 04/28/24 16:01:22.345
  Apr 28 16:01:22.345: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-8640 pod-service-account-09018e1d-5357-457d-bf89-1b590b40f9e9 -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/namespace'
  Apr 28 16:01:22.443: INFO: Got root ca configmap in namespace "svcaccounts-8640"
  Apr 28 16:01:22.445: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-8640" for this suite. @ 04/28/24 16:01:22.447
â€¢ [2.325 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]
k8s.io/kubernetes/test/e2e/storage/csi_inline.go:157
  STEP: Creating a kubernetes client @ 04/28/24 16:01:22.452
  Apr 28 16:01:22.452: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename csiinlinevolumes @ 04/28/24 16:01:22.453
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:01:22.461
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:01:22.463
  STEP: Creating two CSIDrivers @ 04/28/24 16:01:22.465
  STEP: Getting "inline-driver-8698f35d-654f-4793-9cc0-90365356832f" & "inline-driver-853668be-969c-44c3-af97-46899f80969c" @ 04/28/24 16:01:22.474
  STEP: Patching the CSIDriver "inline-driver-853668be-969c-44c3-af97-46899f80969c" @ 04/28/24 16:01:22.477
  STEP: Updating the CSIDriver "inline-driver-853668be-969c-44c3-af97-46899f80969c" @ 04/28/24 16:01:22.486
  STEP: Listing all CSIDrivers with the labelSelector: "e2e-test=csiinlinevolumes-2435" @ 04/28/24 16:01:22.49
  STEP: Deleting CSIDriver "inline-driver-8698f35d-654f-4793-9cc0-90365356832f" @ 04/28/24 16:01:22.492
  STEP: Confirm deletion of CSIDriver "inline-driver-8698f35d-654f-4793-9cc0-90365356832f" @ 04/28/24 16:01:22.495
  STEP: Deleting CSIDriver "inline-driver-853668be-969c-44c3-af97-46899f80969c" via DeleteCollection @ 04/28/24 16:01:22.497
  STEP: Confirm deletion of CSIDriver "inline-driver-853668be-969c-44c3-af97-46899f80969c" @ 04/28/24 16:01:22.5
  Apr 28 16:01:22.502: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csiinlinevolumes-2435" for this suite. @ 04/28/24 16:01:22.503
â€¢ [0.055 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:357
  STEP: Creating a kubernetes client @ 04/28/24 16:01:22.507
  Apr 28 16:01:22.507: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/28/24 16:01:22.508
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:01:22.515
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:01:22.516
  STEP: CRs in the same group and version but different kinds (two CRDs) show up in OpenAPI documentation @ 04/28/24 16:01:22.518
  Apr 28 16:01:22.519: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:01:23.731: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:01:28.619: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-72" for this suite. @ 04/28/24 16:01:28.624
â€¢ [6.121 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works  [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/custom_resource_definition.go:269
  STEP: Creating a kubernetes client @ 04/28/24 16:01:28.628
  Apr 28 16:01:28.628: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename custom-resource-definition @ 04/28/24 16:01:28.629
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:01:28.636
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:01:28.638
  Apr 28 16:01:28.640: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:01:31.704: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-8756" for this suite. @ 04/28/24 16:01:31.707
â€¢ [3.082 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:69
  STEP: Creating a kubernetes client @ 04/28/24 16:01:31.711
  Apr 28 16:01:31.711: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:01:31.711
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:01:31.72
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:01:31.722
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 16:01:31.725
  STEP: Saw pod success @ 04/28/24 16:01:35.738
  Apr 28 16:01:35.740: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-f1cb66cc-a467-43fb-9fa6-f3b85a2f37da container client-container: <nil>
  STEP: delete the pod @ 04/28/24 16:01:35.745
  Apr 28 16:01:35.754: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4991" for this suite. @ 04/28/24 16:01:35.756
â€¢ [4.048 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:127
  STEP: Creating a kubernetes client @ 04/28/24 16:01:35.759
  Apr 28 16:01:35.759: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir @ 04/28/24 16:01:35.76
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:01:35.766
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:01:35.768
  STEP: Creating a pod to test emptydir 0644 on tmpfs @ 04/28/24 16:01:35.77
  STEP: Saw pod success @ 04/28/24 16:01:39.782
  Apr 28 16:01:39.784: INFO: Trying to get logs from node k8sconformance-m02 pod pod-e56d9bfd-e97b-4d5f-bd4d-7380407f3958 container test-container: <nil>
  STEP: delete the pod @ 04/28/24 16:01:39.79
  Apr 28 16:01:39.800: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-6761" for this suite. @ 04/28/24 16:01:39.802
â€¢ [4.047 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]
k8s.io/kubernetes/test/e2e/storage/empty_dir_wrapper.go:67
  STEP: Creating a kubernetes client @ 04/28/24 16:01:39.806
  Apr 28 16:01:39.806: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir-wrapper @ 04/28/24 16:01:39.807
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:01:39.814
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:01:39.816
  Apr 28 16:01:41.835: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Cleaning up the secret @ 04/28/24 16:01:41.837
  STEP: Cleaning up the configmap @ 04/28/24 16:01:41.84
  STEP: Cleaning up the pod @ 04/28/24 16:01:41.843
  STEP: Destroying namespace "emptydir-wrapper-8190" for this suite. @ 04/28/24 16:01:41.849
â€¢ [2.048 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/downwardapi.go:218
  STEP: Creating a kubernetes client @ 04/28/24 16:01:41.855
  Apr 28 16:01:41.855: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 16:01:41.856
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:01:41.863
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:01:41.865
  STEP: Creating a pod to test downward api env vars @ 04/28/24 16:01:41.867
  STEP: Saw pod success @ 04/28/24 16:01:45.881
  Apr 28 16:01:45.883: INFO: Trying to get logs from node k8sconformance-m02 pod downward-api-99ab11d7-3b7b-4fa6-98d3-99a85bb84ffc container dapi-container: <nil>
  STEP: delete the pod @ 04/28/24 16:01:45.889
  Apr 28 16:01:45.897: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1028" for this suite. @ 04/28/24 16:01:45.899
â€¢ [4.047 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:107
  STEP: Creating a kubernetes client @ 04/28/24 16:01:45.902
  Apr 28 16:01:45.902: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir @ 04/28/24 16:01:45.903
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:01:45.911
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:01:45.913
  STEP: Creating a pod to test emptydir 0666 on tmpfs @ 04/28/24 16:01:45.914
  STEP: Saw pod success @ 04/28/24 16:01:49.927
  Apr 28 16:01:49.928: INFO: Trying to get logs from node k8sconformance-m02 pod pod-aefc1c94-9f69-43a4-a2e1-3d959d7bfc5c container test-container: <nil>
  STEP: delete the pod @ 04/28/24 16:01:49.934
  Apr 28 16:01:49.943: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-7953" for this suite. @ 04/28/24 16:01:49.945
â€¢ [4.046 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:115
  STEP: Creating a kubernetes client @ 04/28/24 16:01:49.949
  Apr 28 16:01:49.949: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename var-expansion @ 04/28/24 16:01:49.949
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:01:49.956
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:01:49.958
  STEP: Creating a pod to test substitution in volume subpath @ 04/28/24 16:01:49.96
  STEP: Saw pod success @ 04/28/24 16:01:53.972
  Apr 28 16:01:53.974: INFO: Trying to get logs from node k8sconformance-m02 pod var-expansion-ad571532-5b5c-4f90-a389-241dd65de54f container dapi-container: <nil>
  STEP: delete the pod @ 04/28/24 16:01:53.979
  Apr 28 16:01:53.988: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-5361" for this suite. @ 04/28/24 16:01:53.99
â€¢ [4.044 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:163
  STEP: Creating a kubernetes client @ 04/28/24 16:01:53.994
  Apr 28 16:01:53.994: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:01:53.994
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:01:54.001
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:01:54.003
  STEP: Creating the pod @ 04/28/24 16:01:54.005
  Apr 28 16:01:56.530: INFO: Successfully updated pod "annotationupdatee5940248-07e6-4849-b14d-b77934b17180"
  Apr 28 16:02:00.550: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5224" for this suite. @ 04/28/24 16:02:00.552
â€¢ [6.562 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:371
  STEP: Creating a kubernetes client @ 04/28/24 16:02:00.556
  Apr 28 16:02:00.556: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 16:02:00.557
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:02:00.565
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:02:00.567
  STEP: Setting up server cert @ 04/28/24 16:02:00.579
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 16:02:00.899
  STEP: Deploying the webhook pod @ 04/28/24 16:02:00.904
  STEP: Wait for the deployment to be ready @ 04/28/24 16:02:00.912
  Apr 28 16:02:00.918: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/28/24 16:02:02.93
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 16:02:02.938
  Apr 28 16:02:03.938: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Setting timeout (1s) shorter than webhook latency (5s) @ 04/28/24 16:02:03.942
  STEP: Registering slow webhook via the AdmissionRegistration API @ 04/28/24 16:02:03.942
  STEP: Request fails when timeout (1s) is shorter than slow webhook latency (5s) @ 04/28/24 16:02:03.953
  STEP: Having no error when timeout is shorter than webhook latency and failure policy is ignore @ 04/28/24 16:02:04.959
  STEP: Registering slow webhook via the AdmissionRegistration API @ 04/28/24 16:02:04.959
  STEP: Having no error when timeout is longer than webhook latency @ 04/28/24 16:02:05.976
  STEP: Registering slow webhook via the AdmissionRegistration API @ 04/28/24 16:02:05.976
  STEP: Having no error when timeout is empty (defaulted to 10s in v1) @ 04/28/24 16:02:10.997
  STEP: Registering slow webhook via the AdmissionRegistration API @ 04/28/24 16:02:10.997
  Apr 28 16:02:16.016: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-6727" for this suite. @ 04/28/24 16:02:16.05
  STEP: Destroying namespace "webhook-markers-7880" for this suite. @ 04/28/24 16:02:16.053
â€¢ [15.500 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:47
  STEP: Creating a kubernetes client @ 04/28/24 16:02:16.058
  Apr 28 16:02:16.058: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename var-expansion @ 04/28/24 16:02:16.059
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:02:16.07
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:02:16.072
  STEP: Creating a pod to test env composition @ 04/28/24 16:02:16.074
  STEP: Saw pod success @ 04/28/24 16:02:20.089
  Apr 28 16:02:20.090: INFO: Trying to get logs from node k8sconformance-m02 pod var-expansion-8a3c438c-2df9-494f-aa9c-8670536044f9 container dapi-container: <nil>
  STEP: delete the pod @ 04/28/24 16:02:20.096
  Apr 28 16:02:20.106: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-5288" for this suite. @ 04/28/24 16:02:20.108
â€¢ [4.054 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:399
  STEP: Creating a kubernetes client @ 04/28/24 16:02:20.113
  Apr 28 16:02:20.113: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename pods @ 04/28/24 16:02:20.114
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:02:20.121
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:02:20.123
  STEP: creating the pod @ 04/28/24 16:02:20.124
  STEP: submitting the pod to kubernetes @ 04/28/24 16:02:20.125
  W0428 16:02:20.129386      22 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: verifying the pod is in kubernetes @ 04/28/24 16:02:22.136
  STEP: updating the pod @ 04/28/24 16:02:22.138
  Apr 28 16:02:22.647: INFO: Successfully updated pod "pod-update-activedeadlineseconds-6eb78ab3-1d5e-4c46-bd1a-b3afabb8d126"
  Apr 28 16:02:26.658: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-6611" for this suite. @ 04/28/24 16:02:26.661
â€¢ [6.551 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never  [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1707
  STEP: Creating a kubernetes client @ 04/28/24 16:02:26.665
  Apr 28 16:02:26.665: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 16:02:26.666
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:02:26.675
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:02:26.677
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 04/28/24 16:02:26.679
  Apr 28 16:02:26.679: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-5086 run e2e-test-httpd-pod --restart=Never --pod-running-timeout=2m0s --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4'
  Apr 28 16:02:26.737: INFO: stderr: ""
  Apr 28 16:02:26.737: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: verifying the pod e2e-test-httpd-pod was created @ 04/28/24 16:02:26.737
  Apr 28 16:02:26.739: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-5086 delete pods e2e-test-httpd-pod'
  Apr 28 16:02:28.278: INFO: stderr: ""
  Apr 28 16:02:28.278: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Apr 28 16:02:28.278: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-5086" for this suite. @ 04/28/24 16:02:28.28
â€¢ [1.618 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:391
  STEP: Creating a kubernetes client @ 04/28/24 16:02:28.284
  Apr 28 16:02:28.284: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/28/24 16:02:28.285
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:02:28.292
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:02:28.294
  STEP: set up a multi version CRD @ 04/28/24 16:02:28.296
  Apr 28 16:02:28.296: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: rename a version @ 04/28/24 16:02:31.413
  STEP: check the new version name is served @ 04/28/24 16:02:31.422
  STEP: check the old version name is removed @ 04/28/24 16:02:32.123
  STEP: check the other version is not changed @ 04/28/24 16:02:32.752
  Apr 28 16:02:35.227: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-7" for this suite. @ 04/28/24 16:02:35.232
â€¢ [6.952 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:2187
  STEP: Creating a kubernetes client @ 04/28/24 16:02:35.237
  Apr 28 16:02:35.237: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 16:02:35.237
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:02:35.244
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:02:35.246
  STEP: creating service in namespace services-5015 @ 04/28/24 16:02:35.248
  STEP: creating service affinity-clusterip-transition in namespace services-5015 @ 04/28/24 16:02:35.248
  STEP: creating replication controller affinity-clusterip-transition in namespace services-5015 @ 04/28/24 16:02:35.256
  I0428 16:02:35.261185      22 runners.go:197] Created replication controller with name: affinity-clusterip-transition, namespace: services-5015, replica count: 3
  I0428 16:02:38.313641      22 runners.go:197] affinity-clusterip-transition Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 28 16:02:38.317: INFO: Creating new exec pod
  Apr 28 16:02:41.326: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-5015 exec execpod-affinityx69nv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-clusterip-transition 80'
  Apr 28 16:02:41.424: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-clusterip-transition 80\nConnection to affinity-clusterip-transition 80 port [tcp/http] succeeded!\n"
  Apr 28 16:02:41.424: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 16:02:41.424: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-5015 exec execpod-affinityx69nv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.107.26.123 80'
  Apr 28 16:02:41.519: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.107.26.123 80\nConnection to 10.107.26.123 80 port [tcp/http] succeeded!\n"
  Apr 28 16:02:41.519: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 16:02:41.524: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-5015 exec execpod-affinityx69nv -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.107.26.123:80/ ; done'
  Apr 28 16:02:41.673: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n"
  Apr 28 16:02:41.673: INFO: stdout: "\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-qv27b\naffinity-clusterip-transition-sjbvm\naffinity-clusterip-transition-qv27b\naffinity-clusterip-transition-qv27b\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-qv27b\naffinity-clusterip-transition-qv27b\naffinity-clusterip-transition-sjbvm\naffinity-clusterip-transition-sjbvm\naffinity-clusterip-transition-sjbvm\naffinity-clusterip-transition-qv27b\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-sjbvm\naffinity-clusterip-transition-s868x"
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-qv27b
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-sjbvm
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-qv27b
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-qv27b
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-qv27b
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-qv27b
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-sjbvm
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-sjbvm
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-sjbvm
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-qv27b
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-sjbvm
  Apr 28 16:02:41.673: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.680: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-5015 exec execpod-affinityx69nv -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.107.26.123:80/ ; done'
  Apr 28 16:02:41.832: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.107.26.123:80/\n"
  Apr 28 16:02:41.832: INFO: stdout: "\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x\naffinity-clusterip-transition-s868x"
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Received response from host: affinity-clusterip-transition-s868x
  Apr 28 16:02:41.832: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Apr 28 16:02:41.835: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-clusterip-transition in namespace services-5015, will wait for the garbage collector to delete the pods @ 04/28/24 16:02:41.843
  Apr 28 16:02:41.899: INFO: Deleting ReplicationController affinity-clusterip-transition took: 3.882403ms
  Apr 28 16:02:42.000: INFO: Terminating ReplicationController affinity-clusterip-transition pods took: 100.59464ms
  STEP: Destroying namespace "services-5015" for this suite. @ 04/28/24 16:02:44.511
â€¢ [9.279 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtimeclass.go:104
  STEP: Creating a kubernetes client @ 04/28/24 16:02:44.516
  Apr 28 16:02:44.516: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename runtimeclass @ 04/28/24 16:02:44.517
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:02:44.524
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:02:44.526
  Apr 28 16:02:46.540: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-8496" for this suite. @ 04/28/24 16:02:46.546
â€¢ [2.032 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/garbage_collector.go:538
  STEP: Creating a kubernetes client @ 04/28/24 16:02:46.55
  Apr 28 16:02:46.550: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename gc @ 04/28/24 16:02:46.551
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:02:46.562
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:02:46.563
  STEP: create the deployment @ 04/28/24 16:02:46.565
  W0428 16:02:46.570114      22 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: Wait for the Deployment to create new ReplicaSet @ 04/28/24 16:02:46.57
  STEP: delete the deployment @ 04/28/24 16:02:47.077
  STEP: wait for deployment deletion to see if the garbage collector mistakenly deletes the rs @ 04/28/24 16:02:47.082
  STEP: Gathering metrics @ 04/28/24 16:02:47.593
  Apr 28 16:02:47.688: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Apr 28 16:02:47.688: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-6160" for this suite. @ 04/28/24 16:02:47.69
â€¢ [1.145 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/secrets.go:95
  STEP: Creating a kubernetes client @ 04/28/24 16:02:47.696
  Apr 28 16:02:47.696: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename secrets @ 04/28/24 16:02:47.697
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:02:47.704
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:02:47.706
  STEP: creating secret secrets-49/secret-test-d57ac0d7-fdf6-48e4-b1f2-9593028b0e41 @ 04/28/24 16:02:47.707
  STEP: Creating a pod to test consume secrets @ 04/28/24 16:02:47.71
  STEP: Saw pod success @ 04/28/24 16:02:49.719
  Apr 28 16:02:49.721: INFO: Trying to get logs from node k8sconformance-m02 pod pod-configmaps-81e61e7f-5e23-45e6-bd18-e5a37dd44874 container env-test: <nil>
  STEP: delete the pod @ 04/28/24 16:02:49.728
  Apr 28 16:02:49.737: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-49" for this suite. @ 04/28/24 16:02:49.739
â€¢ [2.046 seconds]
------------------------------
SSS
------------------------------
[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/sysctl.go:77
  STEP: Creating a kubernetes client @ 04/28/24 16:02:49.742
  Apr 28 16:02:49.742: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename sysctl @ 04/28/24 16:02:49.743
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:02:49.75
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:02:49.752
  STEP: Creating a pod with the kernel.shm_rmid_forced sysctl @ 04/28/24 16:02:49.753
  STEP: Watching for error events or started pod @ 04/28/24 16:02:49.757
  STEP: Waiting for pod completion @ 04/28/24 16:02:51.761
  STEP: Checking that the pod succeeded @ 04/28/24 16:02:51.765
  STEP: Getting logs from the pod @ 04/28/24 16:02:51.765
  STEP: Checking that the sysctl is actually updated @ 04/28/24 16:02:51.77
  Apr 28 16:02:51.770: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sysctl-9805" for this suite. @ 04/28/24 16:02:51.771
â€¢ [2.033 seconds]
------------------------------
SS
------------------------------
[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]
k8s.io/kubernetes/test/e2e/network/proxy.go:380
  STEP: Creating a kubernetes client @ 04/28/24 16:02:51.776
  Apr 28 16:02:51.776: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename proxy @ 04/28/24 16:02:51.777
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:02:51.783
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:02:51.785
  Apr 28 16:02:51.787: INFO: Creating pod...
  Apr 28 16:02:53.796: INFO: Creating service...
  Apr 28 16:02:53.805: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-8544/pods/agnhost/proxy?method=DELETE
  Apr 28 16:02:53.808: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Apr 28 16:02:53.808: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-8544/pods/agnhost/proxy?method=OPTIONS
  Apr 28 16:02:53.811: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Apr 28 16:02:53.811: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-8544/pods/agnhost/proxy?method=PATCH
  Apr 28 16:02:53.813: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Apr 28 16:02:53.813: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-8544/pods/agnhost/proxy?method=POST
  Apr 28 16:02:53.815: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Apr 28 16:02:53.815: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-8544/pods/agnhost/proxy?method=PUT
  Apr 28 16:02:53.816: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Apr 28 16:02:53.816: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-8544/services/e2e-proxy-test-service/proxy?method=DELETE
  Apr 28 16:02:53.818: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Apr 28 16:02:53.818: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-8544/services/e2e-proxy-test-service/proxy?method=OPTIONS
  Apr 28 16:02:53.820: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Apr 28 16:02:53.821: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-8544/services/e2e-proxy-test-service/proxy?method=PATCH
  Apr 28 16:02:53.823: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Apr 28 16:02:53.823: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-8544/services/e2e-proxy-test-service/proxy?method=POST
  Apr 28 16:02:53.824: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Apr 28 16:02:53.824: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-8544/services/e2e-proxy-test-service/proxy?method=PUT
  Apr 28 16:02:53.826: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Apr 28 16:02:53.826: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-8544/pods/agnhost/proxy?method=GET
  Apr 28 16:02:53.828: INFO: http.Client request:GET StatusCode:301
  Apr 28 16:02:53.828: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-8544/services/e2e-proxy-test-service/proxy?method=GET
  Apr 28 16:02:53.829: INFO: http.Client request:GET StatusCode:301
  Apr 28 16:02:53.829: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-8544/pods/agnhost/proxy?method=HEAD
  Apr 28 16:02:53.830: INFO: http.Client request:HEAD StatusCode:301
  Apr 28 16:02:53.830: INFO: Starting http.Client for https://10.96.0.1:443/api/v1/namespaces/proxy-8544/services/e2e-proxy-test-service/proxy?method=HEAD
  Apr 28 16:02:53.832: INFO: http.Client request:HEAD StatusCode:301
  Apr 28 16:02:53.832: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-8544" for this suite. @ 04/28/24 16:02:53.834
â€¢ [2.063 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/containers.go:41
  STEP: Creating a kubernetes client @ 04/28/24 16:02:53.841
  Apr 28 16:02:53.841: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename containers @ 04/28/24 16:02:53.841
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:02:53.848
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:02:53.85
  Apr 28 16:02:55.866: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-8970" for this suite. @ 04/28/24 16:02:55.868
â€¢ [2.031 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/security_context.go:486
  STEP: Creating a kubernetes client @ 04/28/24 16:02:55.874
  Apr 28 16:02:55.874: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename security-context-test @ 04/28/24 16:02:55.875
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:02:55.883
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:02:55.885
  Apr 28 16:02:57.895: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-7959" for this suite. @ 04/28/24 16:02:57.898
â€¢ [2.027 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]
k8s.io/kubernetes/test/e2e/node/taints.go:450
  STEP: Creating a kubernetes client @ 04/28/24 16:02:57.902
  Apr 28 16:02:57.902: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename taint-multiple-pods @ 04/28/24 16:02:57.902
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:02:57.912
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:02:57.914
  Apr 28 16:02:57.916: INFO: Waiting up to 1m0s for all nodes to be ready
  Apr 28 16:03:57.927: INFO: Waiting for terminating namespaces to be deleted...
  Apr 28 16:03:57.929: INFO: Starting informer...
  STEP: Starting pods... @ 04/28/24 16:03:57.929
  Apr 28 16:03:58.140: INFO: Pod1 is running on k8sconformance-m02. Tainting Node
  Apr 28 16:04:00.354: INFO: Pod2 is running on k8sconformance-m02. Tainting Node
  STEP: Trying to apply a taint on the Node @ 04/28/24 16:04:00.354
  STEP: verifying the node has the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 04/28/24 16:04:00.363
  STEP: Waiting for Pod1 and Pod2 to be deleted @ 04/28/24 16:04:00.365
  Apr 28 16:04:06.005: INFO: Noticed Pod "taint-eviction-b1" gets evicted.
  Apr 28 16:04:26.113: INFO: Noticed Pod "taint-eviction-b2" gets evicted.
  Apr 28 16:04:26.113: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: verifying the node doesn't have the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 04/28/24 16:04:26.124
  STEP: Destroying namespace "taint-multiple-pods-3108" for this suite. @ 04/28/24 16:04:26.127
â€¢ [88.231 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply an update to a Namespace [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/namespace.go:370
  STEP: Creating a kubernetes client @ 04/28/24 16:04:26.134
  Apr 28 16:04:26.135: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename namespaces @ 04/28/24 16:04:26.135
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:04:26.145
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:04:26.147
  STEP: Updating Namespace "namespaces-1143" @ 04/28/24 16:04:26.149
  Apr 28 16:04:26.155: INFO: Namespace "namespaces-1143" now has labels, map[string]string{"e2e-framework":"namespaces", "e2e-run":"6426f1e2-5605-4610-a975-1487afbb13b8", "kubernetes.io/metadata.name":"namespaces-1143", "namespaces-1143":"updated", "pod-security.kubernetes.io/audit":"baseline", "pod-security.kubernetes.io/enforce":"baseline", "pod-security.kubernetes.io/warn":"baseline"}
  Apr 28 16:04:26.155: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-1143" for this suite. @ 04/28/24 16:04:26.157
â€¢ [0.026 seconds]
------------------------------
S
------------------------------
[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1027
  STEP: Creating a kubernetes client @ 04/28/24 16:04:26.16
  Apr 28 16:04:26.160: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 16:04:26.161
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:04:26.169
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:04:26.171
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 04/28/24 16:04:26.173
  Apr 28 16:04:26.173: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3934 run e2e-test-httpd-pod --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4 --pod-running-timeout=2m0s --labels=run=e2e-test-httpd-pod'
  Apr 28 16:04:26.232: INFO: stderr: ""
  Apr 28 16:04:26.232: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: replace the image in the pod with server-side dry-run @ 04/28/24 16:04:26.232
  Apr 28 16:04:26.232: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3934 patch pod e2e-test-httpd-pod -p {"spec":{"containers":[{"name": "e2e-test-httpd-pod","image": "registry.k8s.io/e2e-test-images/busybox:1.29-4"}]}} --dry-run=server'
  Apr 28 16:04:26.289: INFO: stderr: ""
  Apr 28 16:04:26.289: INFO: stdout: "pod/e2e-test-httpd-pod patched\n"
  STEP: verifying the pod e2e-test-httpd-pod has the right image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 04/28/24 16:04:26.289
  Apr 28 16:04:26.291: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3934 delete pods e2e-test-httpd-pod'
  Apr 28 16:04:28.129: INFO: stderr: ""
  Apr 28 16:04:28.129: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Apr 28 16:04:28.129: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-3934" for this suite. @ 04/28/24 16:04:28.131
â€¢ [1.975 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]
k8s.io/kubernetes/test/e2e/node/security_context.go:129
  STEP: Creating a kubernetes client @ 04/28/24 16:04:28.136
  Apr 28 16:04:28.136: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename security-context @ 04/28/24 16:04:28.136
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:04:28.144
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:04:28.146
  STEP: Creating a pod to test pod.Spec.SecurityContext.RunAsUser @ 04/28/24 16:04:28.148
  STEP: Saw pod success @ 04/28/24 16:04:32.161
  Apr 28 16:04:32.163: INFO: Trying to get logs from node k8sconformance-m02 pod security-context-21aa4eeb-d56c-452c-9713-36ecbf8a0fac container test-container: <nil>
  STEP: delete the pod @ 04/28/24 16:04:32.174
  Apr 28 16:04:32.183: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-4976" for this suite. @ 04/28/24 16:04:32.185
â€¢ [4.053 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/containers.go:89
  STEP: Creating a kubernetes client @ 04/28/24 16:04:32.19
  Apr 28 16:04:32.190: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename containers @ 04/28/24 16:04:32.191
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:04:32.199
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:04:32.201
  STEP: Creating a pod to test override all @ 04/28/24 16:04:32.202
  STEP: Saw pod success @ 04/28/24 16:04:36.214
  Apr 28 16:04:36.216: INFO: Trying to get logs from node k8sconformance-m02 pod client-containers-5cce1d57-21cb-4f0d-b643-2ead28f80028 container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 16:04:36.221
  Apr 28 16:04:36.230: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-2865" for this suite. @ 04/28/24 16:04:36.232
â€¢ [4.045 seconds]
------------------------------
SSS
------------------------------
[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:897
  STEP: Creating a kubernetes client @ 04/28/24 16:04:36.235
  Apr 28 16:04:36.235: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename pods @ 04/28/24 16:04:36.236
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:04:36.244
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:04:36.246
  STEP: creating a Pod with a static label @ 04/28/24 16:04:36.25
  STEP: watching for Pod to be ready @ 04/28/24 16:04:36.254
  Apr 28 16:04:36.256: INFO: observed Pod pod-test in namespace pods-7351 in phase Pending with labels: map[test-pod-static:true] & conditions []
  Apr 28 16:04:36.259: INFO: observed Pod pod-test in namespace pods-7351 in phase Pending with labels: map[test-pod-static:true] & conditions [{PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:04:36 +0000 UTC  }]
  Apr 28 16:04:36.268: INFO: observed Pod pod-test in namespace pods-7351 in phase Pending with labels: map[test-pod-static:true] & conditions [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:04:36 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:04:36 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:04:36 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:04:36 +0000 UTC  }]
  Apr 28 16:04:37.196: INFO: Found Pod pod-test in namespace pods-7351 in phase Running with labels: map[test-pod-static:true] & conditions [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:04:36 +0000 UTC  } {Ready True 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:04:37 +0000 UTC  } {ContainersReady True 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:04:37 +0000 UTC  } {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:04:36 +0000 UTC  }]
  STEP: patching the Pod with a new Label and updated data @ 04/28/24 16:04:37.197
  STEP: getting the Pod and ensuring that it's patched @ 04/28/24 16:04:37.205
  STEP: replacing the Pod's status Ready condition to False @ 04/28/24 16:04:37.208
  STEP: check the Pod again to ensure its Ready conditions are False @ 04/28/24 16:04:37.215
  STEP: deleting the Pod via a Collection with a LabelSelector @ 04/28/24 16:04:37.215
  STEP: watching for the Pod to be deleted @ 04/28/24 16:04:37.22
  Apr 28 16:04:37.221: INFO: observed event type MODIFIED
  Apr 28 16:04:39.218: INFO: observed event type MODIFIED
  Apr 28 16:04:39.319: INFO: observed event type MODIFIED
  Apr 28 16:04:40.228: INFO: observed event type MODIFIED
  Apr 28 16:04:40.234: INFO: observed event type MODIFIED
  Apr 28 16:04:40.242: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-7351" for this suite. @ 04/28/24 16:04:40.244
â€¢ [4.012 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:946
  STEP: Creating a kubernetes client @ 04/28/24 16:04:40.249
  Apr 28 16:04:40.249: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename resourcequota @ 04/28/24 16:04:40.249
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:04:40.258
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:04:40.259
  STEP: Creating a ResourceQuota @ 04/28/24 16:04:40.261
  STEP: Getting a ResourceQuota @ 04/28/24 16:04:40.264
  STEP: Listing all ResourceQuotas with LabelSelector @ 04/28/24 16:04:40.265
  STEP: Patching the ResourceQuota @ 04/28/24 16:04:40.267
  STEP: Deleting a Collection of ResourceQuotas @ 04/28/24 16:04:40.271
  STEP: Verifying the deleted ResourceQuota @ 04/28/24 16:04:40.277
  Apr 28 16:04:40.278: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-4594" for this suite. @ 04/28/24 16:04:40.28
â€¢ [0.034 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to create a functioning NodePort service [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:1280
  STEP: Creating a kubernetes client @ 04/28/24 16:04:40.285
  Apr 28 16:04:40.285: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 16:04:40.286
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:04:40.293
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:04:40.295
  STEP: creating service nodeport-test with type=NodePort in namespace services-7391 @ 04/28/24 16:04:40.296
  STEP: creating replication controller nodeport-test in namespace services-7391 @ 04/28/24 16:04:40.307
  I0428 16:04:40.311867      22 runners.go:197] Created replication controller with name: nodeport-test, namespace: services-7391, replica count: 2
  I0428 16:04:43.363153      22 runners.go:197] nodeport-test Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 28 16:04:43.363: INFO: Creating new exec pod
  Apr 28 16:04:46.375: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-7391 exec execpodsj5px -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Apr 28 16:04:46.474: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Apr 28 16:04:46.474: INFO: stdout: ""
  Apr 28 16:04:47.475: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-7391 exec execpodsj5px -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Apr 28 16:04:47.573: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Apr 28 16:04:47.573: INFO: stdout: "nodeport-test-w6dw8"
  Apr 28 16:04:47.573: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-7391 exec execpodsj5px -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.109.86.234 80'
  Apr 28 16:04:47.669: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.109.86.234 80\nConnection to 10.109.86.234 80 port [tcp/http] succeeded!\n"
  Apr 28 16:04:47.669: INFO: stdout: "nodeport-test-w6dw8"
  Apr 28 16:04:47.669: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-7391 exec execpodsj5px -- /bin/sh -x -c echo hostName | nc -v -t -w 2 192.168.49.2 30164'
  Apr 28 16:04:47.765: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 192.168.49.2 30164\nConnection to 192.168.49.2 30164 port [tcp/*] succeeded!\n"
  Apr 28 16:04:47.765: INFO: stdout: "nodeport-test-w6dw8"
  Apr 28 16:04:47.765: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-7391 exec execpodsj5px -- /bin/sh -x -c echo hostName | nc -v -t -w 2 192.168.49.3 30164'
  Apr 28 16:04:47.859: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 192.168.49.3 30164\nConnection to 192.168.49.3 30164 port [tcp/*] succeeded!\n"
  Apr 28 16:04:47.859: INFO: stdout: ""
  Apr 28 16:04:48.860: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-7391 exec execpodsj5px -- /bin/sh -x -c echo hostName | nc -v -t -w 2 192.168.49.3 30164'
  Apr 28 16:04:48.956: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 192.168.49.3 30164\nConnection to 192.168.49.3 30164 port [tcp/*] succeeded!\n"
  Apr 28 16:04:48.957: INFO: stdout: "nodeport-test-w6dw8"
  Apr 28 16:04:48.957: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-7391" for this suite. @ 04/28/24 16:04:48.959
â€¢ [8.679 seconds]
------------------------------
SS
------------------------------
[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance]
k8s.io/kubernetes/test/e2e/network/endpointslice.go:207
  STEP: Creating a kubernetes client @ 04/28/24 16:04:48.964
  Apr 28 16:04:48.964: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename endpointslice @ 04/28/24 16:04:48.965
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:04:48.973
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:04:48.975
  STEP: referencing a single matching pod @ 04/28/24 16:04:54.017
  STEP: referencing matching pods with named port @ 04/28/24 16:04:59.023
  STEP: creating empty Endpoints and EndpointSlices for no matching Pods @ 04/28/24 16:05:04.028
  STEP: recreating EndpointSlices after they've been deleted @ 04/28/24 16:05:09.033
  Apr 28 16:05:09.043: INFO: EndpointSlice for Service endpointslice-6138/example-named-port not found
  Apr 28 16:05:19.050: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-6138" for this suite. @ 04/28/24 16:05:19.053
â€¢ [30.092 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/secrets.go:46
  STEP: Creating a kubernetes client @ 04/28/24 16:05:19.057
  Apr 28 16:05:19.057: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename secrets @ 04/28/24 16:05:19.058
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:05:19.065
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:05:19.066
  STEP: Creating secret with name secret-test-f61b3418-7918-4155-b82b-aa5ae2719b34 @ 04/28/24 16:05:19.068
  STEP: Creating a pod to test consume secrets @ 04/28/24 16:05:19.071
  STEP: Saw pod success @ 04/28/24 16:05:23.082
  Apr 28 16:05:23.084: INFO: Trying to get logs from node k8sconformance-m02 pod pod-secrets-b1e0860f-57dc-4d71-8df7-56c268f71203 container secret-env-test: <nil>
  STEP: delete the pod @ 04/28/24 16:05:23.09
  Apr 28 16:05:23.099: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-2837" for this suite. @ 04/28/24 16:05:23.101
â€¢ [4.048 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Slow] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:189
  STEP: Creating a kubernetes client @ 04/28/24 16:05:23.105
  Apr 28 16:05:23.105: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename var-expansion @ 04/28/24 16:05:23.106
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:05:23.113
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:05:23.115
  Apr 28 16:05:25.125: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Apr 28 16:05:25.128: INFO: Deleting pod "var-expansion-e6e44b96-7331-4c96-92ad-5a91ef6419a0" in namespace "var-expansion-832"
  Apr 28 16:05:25.133: INFO: Wait up to 5m0s for pod "var-expansion-e6e44b96-7331-4c96-92ad-5a91ef6419a0" to be fully deleted
  STEP: Destroying namespace "var-expansion-832" for this suite. @ 04/28/24 16:05:29.141
â€¢ [6.040 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]
k8s.io/kubernetes/test/e2e/apps/daemon_set.go:305
  STEP: Creating a kubernetes client @ 04/28/24 16:05:29.147
  Apr 28 16:05:29.147: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename daemonsets @ 04/28/24 16:05:29.148
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:05:29.158
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:05:29.16
  STEP: Creating a simple DaemonSet "daemon-set" @ 04/28/24 16:05:29.17
  STEP: Check that daemon pods launch on every node of the cluster. @ 04/28/24 16:05:29.174
  Apr 28 16:05:29.177: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 16:05:29.177: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 16:05:30.182: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 16:05:30.182: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 16:05:31.182: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Apr 28 16:05:31.182: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Set a daemon pod's phase to 'Failed', check that the daemon pod is revived. @ 04/28/24 16:05:31.184
  Apr 28 16:05:31.197: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 28 16:05:31.197: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 16:05:32.203: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 28 16:05:32.203: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 16:05:33.202: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Apr 28 16:05:33.202: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Wait for the failed daemon pod to be completely deleted. @ 04/28/24 16:05:33.202
  STEP: Deleting DaemonSet "daemon-set" @ 04/28/24 16:05:33.205
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-8352, will wait for the garbage collector to delete the pods @ 04/28/24 16:05:33.205
  Apr 28 16:05:33.263: INFO: Deleting DaemonSet.extensions daemon-set took: 5.511071ms
  Apr 28 16:05:33.364: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.899ms
  Apr 28 16:05:34.367: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 16:05:34.367: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Apr 28 16:05:34.369: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"9388"},"items":null}

  Apr 28 16:05:34.370: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"9388"},"items":null}

  Apr 28 16:05:34.376: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-8352" for this suite. @ 04/28/24 16:05:34.378
â€¢ [5.234 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:147
  STEP: Creating a kubernetes client @ 04/28/24 16:05:34.383
  Apr 28 16:05:34.383: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir @ 04/28/24 16:05:34.383
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:05:34.393
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:05:34.395
  STEP: Creating a pod to test emptydir 0777 on tmpfs @ 04/28/24 16:05:34.397
  STEP: Saw pod success @ 04/28/24 16:05:38.409
  Apr 28 16:05:38.411: INFO: Trying to get logs from node k8sconformance-m02 pod pod-8d1ff954-1fd4-4d66-baf4-ca5570fe8498 container test-container: <nil>
  STEP: delete the pod @ 04/28/24 16:05:38.417
  Apr 28 16:05:38.425: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-4716" for this suite. @ 04/28/24 16:05:38.428
â€¢ [4.049 seconds]
------------------------------
S
------------------------------
[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance]
k8s.io/kubernetes/test/e2e/storage/csi_inline.go:50
  STEP: Creating a kubernetes client @ 04/28/24 16:05:38.432
  Apr 28 16:05:38.432: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename csiinlinevolumes @ 04/28/24 16:05:38.433
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:05:38.44
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:05:38.442
  STEP: creating @ 04/28/24 16:05:38.444
  STEP: getting @ 04/28/24 16:05:38.454
  STEP: listing in namespace @ 04/28/24 16:05:38.455
  STEP: patching @ 04/28/24 16:05:38.457
  STEP: deleting @ 04/28/24 16:05:38.462
  Apr 28 16:05:38.467: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csiinlinevolumes-1055" for this suite. @ 04/28/24 16:05:38.469
â€¢ [0.040 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] Pods should patch a pod status [Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:1084
  STEP: Creating a kubernetes client @ 04/28/24 16:05:38.473
  Apr 28 16:05:38.473: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename pods @ 04/28/24 16:05:38.473
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:05:38.48
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:05:38.482
  STEP: Create a pod @ 04/28/24 16:05:38.484
  STEP: patching /status @ 04/28/24 16:05:40.493
  Apr 28 16:05:40.498: INFO: Status Message: "Patched by e2e test" and Reason: "E2E"
  Apr 28 16:05:40.498: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-6997" for this suite. @ 04/28/24 16:05:40.5
â€¢ [2.031 seconds]
------------------------------
S
------------------------------
[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:47
  STEP: Creating a kubernetes client @ 04/28/24 16:05:40.504
  Apr 28 16:05:40.504: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename secrets @ 04/28/24 16:05:40.504
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:05:40.513
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:05:40.515
  STEP: Creating secret with name secret-test-c4c7c0d0-0ea6-4d73-b133-d1d1200f21b7 @ 04/28/24 16:05:40.517
  STEP: Creating a pod to test consume secrets @ 04/28/24 16:05:40.52
  STEP: Saw pod success @ 04/28/24 16:05:44.533
  Apr 28 16:05:44.535: INFO: Trying to get logs from node k8sconformance-m02 pod pod-secrets-f237ae28-46b6-4e09-b74f-8998b0bb7b35 container secret-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 16:05:44.541
  Apr 28 16:05:44.552: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-9660" for this suite. @ 04/28/24 16:05:44.554
â€¢ [4.054 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Guestbook application should create and stop a working application  [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:396
  STEP: Creating a kubernetes client @ 04/28/24 16:05:44.559
  Apr 28 16:05:44.559: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 16:05:44.559
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:05:44.568
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:05:44.57
  STEP: creating all guestbook components @ 04/28/24 16:05:44.572
  Apr 28 16:05:44.572: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: agnhost-replica
    labels:
      app: agnhost
      role: replica
      tier: backend
  spec:
    ports:
    - port: 6379
    selector:
      app: agnhost
      role: replica
      tier: backend

  Apr 28 16:05:44.572: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-8825 create -f -'
  Apr 28 16:05:44.986: INFO: stderr: ""
  Apr 28 16:05:44.986: INFO: stdout: "service/agnhost-replica created\n"
  Apr 28 16:05:44.986: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: agnhost-primary
    labels:
      app: agnhost
      role: primary
      tier: backend
  spec:
    ports:
    - port: 6379
      targetPort: 6379
    selector:
      app: agnhost
      role: primary
      tier: backend

  Apr 28 16:05:44.986: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-8825 create -f -'
  Apr 28 16:05:45.156: INFO: stderr: ""
  Apr 28 16:05:45.156: INFO: stdout: "service/agnhost-primary created\n"
  Apr 28 16:05:45.156: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: frontend
    labels:
      app: guestbook
      tier: frontend
  spec:
    # if your cluster supports it, uncomment the following to automatically create
    # an external load-balanced IP for the frontend service.
    # type: LoadBalancer
    ports:
    - port: 80
    selector:
      app: guestbook
      tier: frontend

  Apr 28 16:05:45.156: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-8825 create -f -'
  Apr 28 16:05:45.324: INFO: stderr: ""
  Apr 28 16:05:45.324: INFO: stdout: "service/frontend created\n"
  Apr 28 16:05:45.324: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: frontend
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: guestbook
        tier: frontend
    template:
      metadata:
        labels:
          app: guestbook
          tier: frontend
      spec:
        containers:
        - name: guestbook-frontend
          image: registry.k8s.io/e2e-test-images/agnhost:2.47
          args: [ "guestbook", "--backend-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 80

  Apr 28 16:05:45.324: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-8825 create -f -'
  Apr 28 16:05:45.465: INFO: stderr: ""
  Apr 28 16:05:45.465: INFO: stdout: "deployment.apps/frontend created\n"
  Apr 28 16:05:45.465: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: agnhost-primary
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: agnhost
        role: primary
        tier: backend
    template:
      metadata:
        labels:
          app: agnhost
          role: primary
          tier: backend
      spec:
        containers:
        - name: primary
          image: registry.k8s.io/e2e-test-images/agnhost:2.47
          args: [ "guestbook", "--http-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 6379

  Apr 28 16:05:45.466: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-8825 create -f -'
  Apr 28 16:05:45.661: INFO: stderr: ""
  Apr 28 16:05:45.661: INFO: stdout: "deployment.apps/agnhost-primary created\n"
  Apr 28 16:05:45.662: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: agnhost-replica
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: agnhost
        role: replica
        tier: backend
    template:
      metadata:
        labels:
          app: agnhost
          role: replica
          tier: backend
      spec:
        containers:
        - name: replica
          image: registry.k8s.io/e2e-test-images/agnhost:2.47
          args: [ "guestbook", "--replicaof", "agnhost-primary", "--http-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 6379

  Apr 28 16:05:45.662: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-8825 create -f -'
  Apr 28 16:05:45.882: INFO: stderr: ""
  Apr 28 16:05:45.882: INFO: stdout: "deployment.apps/agnhost-replica created\n"
  STEP: validating guestbook app @ 04/28/24 16:05:45.882
  Apr 28 16:05:45.882: INFO: Waiting for all frontend pods to be Running.
  Apr 28 16:05:50.933: INFO: Waiting for frontend to serve content.
  Apr 28 16:05:50.938: INFO: Trying to add a new entry to the guestbook.
  Apr 28 16:05:50.944: INFO: Verifying that added entry can be retrieved.
  STEP: using delete to clean up resources @ 04/28/24 16:05:50.948
  Apr 28 16:05:50.948: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-8825 delete --grace-period=0 --force -f -'
  Apr 28 16:05:51.013: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 28 16:05:51.013: INFO: stdout: "service \"agnhost-replica\" force deleted\n"
  STEP: using delete to clean up resources @ 04/28/24 16:05:51.013
  Apr 28 16:05:51.013: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-8825 delete --grace-period=0 --force -f -'
  Apr 28 16:05:51.077: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 28 16:05:51.077: INFO: stdout: "service \"agnhost-primary\" force deleted\n"
  STEP: using delete to clean up resources @ 04/28/24 16:05:51.077
  Apr 28 16:05:51.077: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-8825 delete --grace-period=0 --force -f -'
  Apr 28 16:05:51.138: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 28 16:05:51.138: INFO: stdout: "service \"frontend\" force deleted\n"
  STEP: using delete to clean up resources @ 04/28/24 16:05:51.138
  Apr 28 16:05:51.138: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-8825 delete --grace-period=0 --force -f -'
  Apr 28 16:05:51.194: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 28 16:05:51.194: INFO: stdout: "deployment.apps \"frontend\" force deleted\n"
  STEP: using delete to clean up resources @ 04/28/24 16:05:51.194
  Apr 28 16:05:51.194: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-8825 delete --grace-period=0 --force -f -'
  Apr 28 16:05:51.269: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 28 16:05:51.269: INFO: stdout: "deployment.apps \"agnhost-primary\" force deleted\n"
  STEP: using delete to clean up resources @ 04/28/24 16:05:51.269
  Apr 28 16:05:51.270: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-8825 delete --grace-period=0 --force -f -'
  Apr 28 16:05:51.373: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 28 16:05:51.373: INFO: stdout: "deployment.apps \"agnhost-replica\" force deleted\n"
  Apr 28 16:05:51.373: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-8825" for this suite. @ 04/28/24 16:05:51.377
â€¢ [6.823 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/field_validation.go:168
  STEP: Creating a kubernetes client @ 04/28/24 16:05:51.382
  Apr 28 16:05:51.382: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename field-validation @ 04/28/24 16:05:51.383
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:05:51.398
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:05:51.401
  Apr 28 16:05:51.403: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  W0428 16:05:53.968944      22 warnings.go:70] unknown field "alpha"
  W0428 16:05:53.968970      22 warnings.go:70] unknown field "beta"
  W0428 16:05:53.968974      22 warnings.go:70] unknown field "delta"
  W0428 16:05:53.968977      22 warnings.go:70] unknown field "epsilon"
  W0428 16:05:53.968994      22 warnings.go:70] unknown field "gamma"
  Apr 28 16:05:54.490: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-267" for this suite. @ 04/28/24 16:05:54.498
â€¢ [3.121 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_combined.go:44
  STEP: Creating a kubernetes client @ 04/28/24 16:05:54.506
  Apr 28 16:05:54.506: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:05:54.507
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:05:54.514
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:05:54.516
  STEP: Creating configMap with name configmap-projected-all-test-volume-72b0875a-9e81-4254-85e5-17977163ec83 @ 04/28/24 16:05:54.518
  STEP: Creating secret with name secret-projected-all-test-volume-99b10b46-e88d-46fd-b6d1-1bf3a4ec6d32 @ 04/28/24 16:05:54.521
  STEP: Creating a pod to test Check all projections for projected volume plugin @ 04/28/24 16:05:54.524
  STEP: Saw pod success @ 04/28/24 16:05:58.545
  Apr 28 16:05:58.547: INFO: Trying to get logs from node k8sconformance-m02 pod projected-volume-61c214a4-82c5-41ae-983c-c4b2233d44e1 container projected-all-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 16:05:58.553
  Apr 28 16:05:58.561: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6924" for this suite. @ 04/28/24 16:05:58.563
â€¢ [4.060 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_watch.go:51
  STEP: Creating a kubernetes client @ 04/28/24 16:05:58.567
  Apr 28 16:05:58.567: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename crd-watch @ 04/28/24 16:05:58.567
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:05:58.574
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:05:58.576
  Apr 28 16:05:58.577: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Creating first CR  @ 04/28/24 16:06:01.106
  Apr 28 16:06:01.109: INFO: Got : ADDED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-04-28T16:06:01Z generation:1 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-04-28T16:06:01Z]] name:name1 resourceVersion:9793 uid:294f281c-9a2f-4d30-89de-a5a3fa606f24] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Creating second CR @ 04/28/24 16:06:11.109
  Apr 28 16:06:11.113: INFO: Got : ADDED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-04-28T16:06:11Z generation:1 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-04-28T16:06:11Z]] name:name2 resourceVersion:9813 uid:d3ae91ce-ecab-41d4-a608-3c19eed25fba] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Modifying first CR @ 04/28/24 16:06:21.114
  Apr 28 16:06:21.119: INFO: Got : MODIFIED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-04-28T16:06:01Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-04-28T16:06:21Z]] name:name1 resourceVersion:9823 uid:294f281c-9a2f-4d30-89de-a5a3fa606f24] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Modifying second CR @ 04/28/24 16:06:31.12
  Apr 28 16:06:31.124: INFO: Got : MODIFIED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-04-28T16:06:11Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-04-28T16:06:31Z]] name:name2 resourceVersion:9833 uid:d3ae91ce-ecab-41d4-a608-3c19eed25fba] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Deleting first CR @ 04/28/24 16:06:41.124
  Apr 28 16:06:41.129: INFO: Got : DELETED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-04-28T16:06:01Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-04-28T16:06:21Z]] name:name1 resourceVersion:9844 uid:294f281c-9a2f-4d30-89de-a5a3fa606f24] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Deleting second CR @ 04/28/24 16:06:51.131
  Apr 28 16:06:51.135: INFO: Got : DELETED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-04-28T16:06:11Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-04-28T16:06:31Z]] name:name2 resourceVersion:9853 uid:d3ae91ce-ecab-41d4-a608-3c19eed25fba] num:map[num1:9223372036854775807 num2:1000000]]}
  Apr 28 16:07:01.646: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-watch-351" for this suite. @ 04/28/24 16:07:01.648
â€¢ [63.085 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Secrets should fail to create secret due to empty secret key [Conformance]
k8s.io/kubernetes/test/e2e/common/node/secrets.go:140
  STEP: Creating a kubernetes client @ 04/28/24 16:07:01.652
  Apr 28 16:07:01.652: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename secrets @ 04/28/24 16:07:01.653
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:07:01.661
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:07:01.663
  STEP: Creating projection with secret that has name secret-emptykey-test-cc4963d9-09db-4860-8acf-675e4197d746 @ 04/28/24 16:07:01.665
  Apr 28 16:07:01.666: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-2963" for this suite. @ 04/28/24 16:07:01.668
â€¢ [0.019 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/lifecycle_hook.go:168
  STEP: Creating a kubernetes client @ 04/28/24 16:07:01.672
  Apr 28 16:07:01.672: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 04/28/24 16:07:01.673
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:07:01.681
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:07:01.683
  STEP: create the container to handle the HTTPGet hook request. @ 04/28/24 16:07:01.686
  STEP: create the pod with lifecycle hook @ 04/28/24 16:07:03.699
  STEP: check poststart hook @ 04/28/24 16:07:05.709
  STEP: delete the pod with lifecycle hook @ 04/28/24 16:07:05.72
  Apr 28 16:07:07.732: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-5986" for this suite. @ 04/28/24 16:07:07.734
â€¢ [6.067 seconds]
------------------------------
SSSSS
------------------------------
[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:488
  STEP: Creating a kubernetes client @ 04/28/24 16:07:07.74
  Apr 28 16:07:07.740: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename deployment @ 04/28/24 16:07:07.74
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:07:07.748
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:07:07.75
  STEP: creating a Deployment @ 04/28/24 16:07:07.753
  Apr 28 16:07:07.753: INFO: Creating simple deployment test-deployment-w4f7k
  Apr 28 16:07:07.761: INFO: deployment "test-deployment-w4f7k" doesn't have the required revision set
  STEP: Getting /status @ 04/28/24 16:07:09.769
  Apr 28 16:07:09.771: INFO: Deployment test-deployment-w4f7k has Conditions: [{Available True 2024-04-28 16:07:08 +0000 UTC 2024-04-28 16:07:08 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.} {Progressing True 2024-04-28 16:07:08 +0000 UTC 2024-04-28 16:07:07 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-w4f7k-5d576bd769" has successfully progressed.}]
  STEP: updating Deployment Status @ 04/28/24 16:07:09.771
  Apr 28 16:07:09.777: INFO: updatedStatus.Conditions: []v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 16, 7, 8, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 16, 7, 8, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 16, 7, 8, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 16, 7, 7, 0, time.Local), Reason:"NewReplicaSetAvailable", Message:"ReplicaSet \"test-deployment-w4f7k-5d576bd769\" has successfully progressed."}, v1.DeploymentCondition{Type:"StatusUpdate", Status:"True", LastUpdateTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the Deployment status to be updated @ 04/28/24 16:07:09.777
  Apr 28 16:07:09.778: INFO: Observed &Deployment event: ADDED
  Apr 28 16:07:09.778: INFO: Observed Deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-28 16:07:07 +0000 UTC 2024-04-28 16:07:07 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-w4f7k-5d576bd769"}
  Apr 28 16:07:09.779: INFO: Observed &Deployment event: MODIFIED
  Apr 28 16:07:09.779: INFO: Observed Deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-28 16:07:07 +0000 UTC 2024-04-28 16:07:07 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-w4f7k-5d576bd769"}
  Apr 28 16:07:09.779: INFO: Observed Deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-04-28 16:07:07 +0000 UTC 2024-04-28 16:07:07 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Apr 28 16:07:09.779: INFO: Observed &Deployment event: MODIFIED
  Apr 28 16:07:09.779: INFO: Observed Deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-04-28 16:07:07 +0000 UTC 2024-04-28 16:07:07 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Apr 28 16:07:09.779: INFO: Observed Deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-28 16:07:07 +0000 UTC 2024-04-28 16:07:07 +0000 UTC ReplicaSetUpdated ReplicaSet "test-deployment-w4f7k-5d576bd769" is progressing.}
  Apr 28 16:07:09.779: INFO: Observed &Deployment event: MODIFIED
  Apr 28 16:07:09.779: INFO: Observed Deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-04-28 16:07:08 +0000 UTC 2024-04-28 16:07:08 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Apr 28 16:07:09.779: INFO: Observed Deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-28 16:07:08 +0000 UTC 2024-04-28 16:07:07 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-w4f7k-5d576bd769" has successfully progressed.}
  Apr 28 16:07:09.779: INFO: Observed &Deployment event: MODIFIED
  Apr 28 16:07:09.779: INFO: Observed Deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-04-28 16:07:08 +0000 UTC 2024-04-28 16:07:08 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Apr 28 16:07:09.779: INFO: Observed Deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-28 16:07:08 +0000 UTC 2024-04-28 16:07:07 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-w4f7k-5d576bd769" has successfully progressed.}
  Apr 28 16:07:09.779: INFO: Found Deployment test-deployment-w4f7k in namespace deployment-2948 with labels: map[e2e:testing name:httpd] annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Apr 28 16:07:09.779: INFO: Deployment test-deployment-w4f7k has an updated status
  STEP: patching the Statefulset Status @ 04/28/24 16:07:09.779
  Apr 28 16:07:09.779: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Apr 28 16:07:09.785: INFO: Patched status conditions: []v1.DeploymentCondition{v1.DeploymentCondition{Type:"StatusPatched", Status:"True", LastUpdateTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Deployment status to be patched @ 04/28/24 16:07:09.785
  Apr 28 16:07:09.787: INFO: Observed &Deployment event: ADDED
  Apr 28 16:07:09.787: INFO: Observed deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-28 16:07:07 +0000 UTC 2024-04-28 16:07:07 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-w4f7k-5d576bd769"}
  Apr 28 16:07:09.787: INFO: Observed &Deployment event: MODIFIED
  Apr 28 16:07:09.787: INFO: Observed deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-28 16:07:07 +0000 UTC 2024-04-28 16:07:07 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-w4f7k-5d576bd769"}
  Apr 28 16:07:09.787: INFO: Observed deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-04-28 16:07:07 +0000 UTC 2024-04-28 16:07:07 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Apr 28 16:07:09.787: INFO: Observed &Deployment event: MODIFIED
  Apr 28 16:07:09.787: INFO: Observed deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-04-28 16:07:07 +0000 UTC 2024-04-28 16:07:07 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Apr 28 16:07:09.787: INFO: Observed deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-28 16:07:07 +0000 UTC 2024-04-28 16:07:07 +0000 UTC ReplicaSetUpdated ReplicaSet "test-deployment-w4f7k-5d576bd769" is progressing.}
  Apr 28 16:07:09.787: INFO: Observed &Deployment event: MODIFIED
  Apr 28 16:07:09.787: INFO: Observed deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-04-28 16:07:08 +0000 UTC 2024-04-28 16:07:08 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Apr 28 16:07:09.787: INFO: Observed deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-28 16:07:08 +0000 UTC 2024-04-28 16:07:07 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-w4f7k-5d576bd769" has successfully progressed.}
  Apr 28 16:07:09.787: INFO: Observed &Deployment event: MODIFIED
  Apr 28 16:07:09.787: INFO: Observed deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-04-28 16:07:08 +0000 UTC 2024-04-28 16:07:08 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Apr 28 16:07:09.787: INFO: Observed deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-04-28 16:07:08 +0000 UTC 2024-04-28 16:07:07 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-w4f7k-5d576bd769" has successfully progressed.}
  Apr 28 16:07:09.787: INFO: Observed deployment test-deployment-w4f7k in namespace deployment-2948 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Apr 28 16:07:09.787: INFO: Observed &Deployment event: MODIFIED
  Apr 28 16:07:09.787: INFO: Found deployment test-deployment-w4f7k in namespace deployment-2948 with labels: map[e2e:testing name:httpd] annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC  }
  Apr 28 16:07:09.787: INFO: Deployment test-deployment-w4f7k has a patched status
  Apr 28 16:07:09.790: INFO: Deployment "test-deployment-w4f7k":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=21) "test-deployment-w4f7k",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-2948",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "b89f15d9-18c5-46a1-8fee-438b0281fe96",
      ResourceVersion: (string) (len=4) "9940",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849917227,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=657) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 65 32 65  22 3a 7b 7d 2c 22 66 3a  |},"f:e2e":{},"f:|
              00000030  6e 61 6d 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |name":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  70 72 6f 67 72 65 73 73  |ec":{"f:progress|
              00000050  44 65 61 64 6c 69 6e 65  53 65 63 6f 6e 64 73 22  |DeadlineSeconds"|
              00000060  3a 7b 7d 2c 22 66 3a 72  65 70 6c 69 63 61 73 22  |:{},"f:replicas"|
              00000070  3a 7b 7d 2c 22 66 3a 72  65 76 69 73 69 6f 6e 48  |:{},"f:revisionH|
              00000080  69 73 74 6f 72 79 4c 69  6d 69 74 22 3a 7b 7d 2c  |istoryLimit":{},|
              00000090  22 66 3a 73 65 6c 65 63  74 6f 72 22 3a 7b 7d 2c  |"f:selector":{},|
              000000a0  22 66 3a 73 74 72 61 74  65 67 79 22 3a 7b 22 66  |"f:strategy":{"f|
              000000b0  3a 72 6f 6c 6c 69 6e 67  55 70 64 61 74 65 22 3a  |:rollingUpdate":|
              000000c0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6d 61 78 53 75  |{".":{},"f:maxSu|
              000000d0  72 67 65 22 3a 7b 7d 2c  22 66 3a 6d 61 78 55 6e  |rge":{},"f:maxUn|
              000000e0  61 76 61 69 6c 61 62 6c  65 22 3a 7b 7d 7d 2c 22  |available":{}},"|
              000000f0  66 3a 74 79 70 65 22 3a  7b 7d 7d 2c 22 66 3a 74  |f:type":{}},"f:t|
              00000100  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000110  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              00000120  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 65 32  |s":{".":{},"f:e2|
              00000130  65 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |e":{},"f:name":{|
              00000140  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              00000150  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000160  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              00000170  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              00000180  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000190  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              000001a0  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              000001b0  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              000001c0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000001d0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000001e0  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000210  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000220  69 63 79 22 3a 7b 7d 2c  22 66 3a 72 65 73 74 61  |icy":{},"f:resta|
              00000230  72 74 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |rtPolicy":{},"f:|
              00000240  73 63 68 65 64 75 6c 65  72 4e 61 6d 65 22 3a 7b  |schedulerName":{|
              00000250  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000260  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000270  69 6e 61 74 69 6f 6e 47  72 61 63 65 50 65 72 69  |inationGracePeri|
              00000280  6f 64 53 65 63 6f 6e 64  73 22 3a 7b 7d 7d 7d 7d  |odSeconds":{}}}}|
              00000290  7d                                                |}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917229,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=147) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 53 74 61 74  |{\"type\":\"Stat|
              00000030  75 73 50 61 74 63 68 65  64 5c 22 7d 22 3a 7b 22  |usPatched\"}":{"|
              00000040  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |.":{},"f:lastTra|
              00000050  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000060  22 66 3a 6c 61 73 74 55  70 64 61 74 65 54 69 6d  |"f:lastUpdateTim|
              00000070  65 22 3a 7b 7d 2c 22 66  3a 73 74 61 74 75 73 22  |e":{},"f:status"|
              00000080  3a 7b 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |:{},"f:type":{}}|
              00000090  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917229,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=373) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 50 72 6f  |:{\"type\":\"Pro|
              000000a0  67 72 65 73 73 69 6e 67  5c 22 7d 22 3a 7b 22 2e  |gressing\"}":{".|
              000000b0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000000c0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000000d0  66 3a 6c 61 73 74 55 70  64 61 74 65 54 69 6d 65  |f:lastUpdateTime|
              000000e0  22 3a 7b 7d 2c 22 66 3a  6d 65 73 73 61 67 65 22  |":{},"f:message"|
              000000f0  3a 7b 7d 2c 22 66 3a 72  65 61 73 6f 6e 22 3a 7b  |:{},"f:reason":{|
              00000100  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              00000110  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              00000120  3a 6f 62 73 65 72 76 65  64 47 65 6e 65 72 61 74  |:observedGenerat|
              00000130  69 6f 6e 22 3a 7b 7d 2c  22 66 3a 72 65 61 64 79  |ion":{},"f:ready|
              00000140  52 65 70 6c 69 63 61 73  22 3a 7b 7d 2c 22 66 3a  |Replicas":{},"f:|
              00000150  72 65 70 6c 69 63 61 73  22 3a 7b 7d 2c 22 66 3a  |replicas":{},"f:|
              00000160  75 70 64 61 74 65 64 52  65 70 6c 69 63 61 73 22  |updatedReplicas"|
              00000170  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=3) "e2e": (string) (len=7) "testing",
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=3) "e2e": (string) (len=7) "testing",
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=13) "StatusPatched",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917229,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917229,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "FoundNewReplicaSet",
          Message: (string) (len=56) "Found new replica set \"test-deployment-w4f7k-5d576bd769\""
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Apr 28 16:07:09.794: INFO: New ReplicaSet "test-deployment-w4f7k-5d576bd769" of Deployment "test-deployment-w4f7k":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-w4f7k-5d576bd769",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-2948",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "56448ff1-8910-4382-a2e2-04a22aecf3d5",
      ResourceVersion: (string) (len=4) "9935",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849917227,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=3) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=21) "test-deployment-w4f7k",
          UID: (types.UID) (len=36) "b89f15d9-18c5-46a1-8fee-438b0281fe96",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=803) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 65 32 65  22 3a 7b 7d 2c 22 66 3a  |},"f:e2e":{},"f:|
              000000d0  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 70 6f 64 2d  |name":{},"f:pod-|
              000000e0  74 65 6d 70 6c 61 74 65  2d 68 61 73 68 22 3a 7b  |template-hash":{|
              000000f0  7d 7d 2c 22 66 3a 6f 77  6e 65 72 52 65 66 65 72  |}},"f:ownerRefer|
              00000100  65 6e 63 65 73 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |ences":{".":{},"|
              00000110  6b 3a 7b 5c 22 75 69 64  5c 22 3a 5c 22 62 38 39  |k:{\"uid\":\"b89|
              00000120  66 31 35 64 39 2d 31 38  63 35 2d 34 36 61 31 2d  |f15d9-18c5-46a1-|
              00000130  38 66 65 65 2d 34 33 38  62 30 32 38 31 66 65 39  |8fee-438b0281fe9|
              00000140  36 5c 22 7d 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |6\"}":{}}},"f:sp|
              00000150  65 63 22 3a 7b 22 66 3a  72 65 70 6c 69 63 61 73  |ec":{"f:replicas|
              00000160  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000180  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000190  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              000001a0  3a 7b 7d 2c 22 66 3a 65  32 65 22 3a 7b 7d 2c 22  |:{},"f:e2e":{},"|
              000001b0  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 70 6f  |f:name":{},"f:po|
              000001c0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001d0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000001e0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000001f0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 68  |"k:{\"name\":\"h|
              00000200  74 74 70 64 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |ttpd\"}":{".":{}|
              00000210  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000220  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000230  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000240  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000250  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000260  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000270  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000280  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000290  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              000002a0  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              000002b0  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              000002c0  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              000002d0  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              000002e0  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000002f0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              00000300  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              00000310  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              00000320  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917228,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=3) {
          (string) (len=3) "e2e": (string) (len=7) "testing",
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=3) {
            (string) (len=3) "e2e": (string) (len=7) "testing",
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 28 16:07:09.797: INFO: Pod "test-deployment-w4f7k-5d576bd769-n4pl9" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=38) "test-deployment-w4f7k-5d576bd769-n4pl9",
      GenerateName: (string) (len=33) "test-deployment-w4f7k-5d576bd769-",
      Namespace: (string) (len=15) "deployment-2948",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "22698db7-dbc4-4aa2-957a-0181ba317863",
      ResourceVersion: (string) (len=4) "9934",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849917227,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=3) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=32) "test-deployment-w4f7k-5d576bd769",
          UID: (types.UID) (len=36) "56448ff1-8910-4382-a2e2-04a22aecf3d5",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=548) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 65 32 65 22 3a 7b 7d  |.":{},"f:e2e":{}|
              00000040  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000050  70 6f 64 2d 74 65 6d 70  6c 61 74 65 2d 68 61 73  |pod-template-has|
              00000060  68 22 3a 7b 7d 7d 2c 22  66 3a 6f 77 6e 65 72 52  |h":{}},"f:ownerR|
              00000070  65 66 65 72 65 6e 63 65  73 22 3a 7b 22 2e 22 3a  |eferences":{".":|
              00000080  7b 7d 2c 22 6b 3a 7b 5c  22 75 69 64 5c 22 3a 5c  |{},"k:{\"uid\":\|
              00000090  22 35 36 34 34 38 66 66  31 2d 38 39 31 30 2d 34  |"56448ff1-8910-4|
              000000a0  33 38 32 2d 61 32 65 32  2d 30 34 61 32 32 61 65  |382-a2e2-04a22ae|
              000000b0  63 66 33 64 35 5c 22 7d  22 3a 7b 7d 7d 7d 2c 22  |cf3d5\"}":{}}},"|
              000000c0  66 3a 73 70 65 63 22 3a  7b 22 66 3a 63 6f 6e 74  |f:spec":{"f:cont|
              000000d0  61 69 6e 65 72 73 22 3a  7b 22 6b 3a 7b 5c 22 6e  |ainers":{"k:{\"n|
              000000e0  61 6d 65 5c 22 3a 5c 22  68 74 74 70 64 5c 22 7d  |ame\":\"httpd\"}|
              000000f0  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |":{".":{},"f:ima|
              00000100  67 65 22 3a 7b 7d 2c 22  66 3a 69 6d 61 67 65 50  |ge":{},"f:imageP|
              00000110  75 6c 6c 50 6f 6c 69 63  79 22 3a 7b 7d 2c 22 66  |ullPolicy":{},"f|
              00000120  3a 6e 61 6d 65 22 3a 7b  7d 2c 22 66 3a 72 65 73  |:name":{},"f:res|
              00000130  6f 75 72 63 65 73 22 3a  7b 7d 2c 22 66 3a 73 65  |ources":{},"f:se|
              00000140  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000150  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000160  4d 65 73 73 61 67 65 50  61 74 68 22 3a 7b 7d 2c  |MessagePath":{},|
              00000170  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000180  73 73 61 67 65 50 6f 6c  69 63 79 22 3a 7b 7d 7d  |ssagePolicy":{}}|
              00000190  7d 2c 22 66 3a 64 6e 73  50 6f 6c 69 63 79 22 3a  |},"f:dnsPolicy":|
              000001a0  7b 7d 2c 22 66 3a 65 6e  61 62 6c 65 53 65 72 76  |{},"f:enableServ|
              000001b0  69 63 65 4c 69 6e 6b 73  22 3a 7b 7d 2c 22 66 3a  |iceLinks":{},"f:|
              000001c0  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000001d0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000001e0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000001f0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              00000200  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              00000210  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              00000220  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917228,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 32 34 34 2e 31  2e 31 36 38 5c 22 7d 22  |10.244.1.168\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-k6s8b",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-k6s8b",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917228,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917228,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.244.1.168",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.244.1.168"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849917227,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849917228,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=127) "docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=73) "docker://df9678d4d482c30163aea237fbe2972b08c32cb24b083d632d71ab4b9abbb9f4",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 16:07:09.799: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-2948" for this suite. @ 04/28/24 16:07:09.801
â€¢ [2.065 seconds]
------------------------------
[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/field_validation.go:474
  STEP: Creating a kubernetes client @ 04/28/24 16:07:09.805
  Apr 28 16:07:09.805: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename field-validation @ 04/28/24 16:07:09.805
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:07:09.813
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:07:09.815
  Apr 28 16:07:09.817: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  W0428 16:07:12.348961      22 warnings.go:70] unknown field "alpha"
  W0428 16:07:12.348981      22 warnings.go:70] unknown field "beta"
  W0428 16:07:12.349019      22 warnings.go:70] unknown field "delta"
  W0428 16:07:12.349023      22 warnings.go:70] unknown field "epsilon"
  W0428 16:07:12.349027      22 warnings.go:70] unknown field "gamma"
  Apr 28 16:07:12.865: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-6274" for this suite. @ 04/28/24 16:07:12.874
â€¢ [3.074 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]
k8s.io/kubernetes/test/e2e/apps/replica_set.go:111
  STEP: Creating a kubernetes client @ 04/28/24 16:07:12.881
  Apr 28 16:07:12.881: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename replicaset @ 04/28/24 16:07:12.882
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:07:12.889
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:07:12.891
  Apr 28 16:07:12.893: INFO: Creating ReplicaSet my-hostname-basic-a6f6ad33-e2df-4774-b083-ec8d87150aba
  Apr 28 16:07:12.940: INFO: Pod name my-hostname-basic-a6f6ad33-e2df-4774-b083-ec8d87150aba: Found 0 pods out of 1
  Apr 28 16:07:17.942: INFO: Pod name my-hostname-basic-a6f6ad33-e2df-4774-b083-ec8d87150aba: Found 1 pods out of 1
  Apr 28 16:07:17.942: INFO: Ensuring a pod for ReplicaSet "my-hostname-basic-a6f6ad33-e2df-4774-b083-ec8d87150aba" is running
  Apr 28 16:07:17.944: INFO: Pod "my-hostname-basic-a6f6ad33-e2df-4774-b083-ec8d87150aba-7nckc" is running (conditions: [{Type:Initialized Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-28 16:07:12 +0000 UTC Reason: Message:} {Type:Ready Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-28 16:07:14 +0000 UTC Reason: Message:} {Type:ContainersReady Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-28 16:07:14 +0000 UTC Reason: Message:} {Type:PodScheduled Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-28 16:07:12 +0000 UTC Reason: Message:}])
  Apr 28 16:07:17.945: INFO: Trying to dial the pod
  STEP: trying to dial each unique pod @ 04/28/24 16:07:17.945
  Apr 28 16:07:17.950: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-1678" for this suite. @ 04/28/24 16:07:17.952
â€¢ [5.074 seconds]
------------------------------
SSS
------------------------------
[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:168
  STEP: Creating a kubernetes client @ 04/28/24 16:07:17.955
  Apr 28 16:07:17.955: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-probe @ 04/28/24 16:07:17.956
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:07:17.964
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:07:17.966
  STEP: Creating pod liveness-007f3bb8-84f8-4e55-91af-0216ab405160 in namespace container-probe-7431 @ 04/28/24 16:07:17.968
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/28/24 16:07:19.978
  Apr 28 16:07:19.979: INFO: Initial restart count of pod liveness-007f3bb8-84f8-4e55-91af-0216ab405160 is 0
  Apr 28 16:07:19.981: INFO: Get pod liveness-007f3bb8-84f8-4e55-91af-0216ab405160 in namespace container-probe-7431
  Apr 28 16:07:21.984: INFO: Get pod liveness-007f3bb8-84f8-4e55-91af-0216ab405160 in namespace container-probe-7431
  Apr 28 16:07:23.987: INFO: Get pod liveness-007f3bb8-84f8-4e55-91af-0216ab405160 in namespace container-probe-7431
  Apr 28 16:07:25.989: INFO: Get pod liveness-007f3bb8-84f8-4e55-91af-0216ab405160 in namespace container-probe-7431
  Apr 28 16:07:27.992: INFO: Get pod liveness-007f3bb8-84f8-4e55-91af-0216ab405160 in namespace container-probe-7431
  Apr 28 16:07:29.995: INFO: Get pod liveness-007f3bb8-84f8-4e55-91af-0216ab405160 in namespace container-probe-7431
  Apr 28 16:07:31.999: INFO: Get pod liveness-007f3bb8-84f8-4e55-91af-0216ab405160 in namespace container-probe-7431
  Apr 28 16:07:34.001: INFO: Get pod liveness-007f3bb8-84f8-4e55-91af-0216ab405160 in namespace container-probe-7431
  Apr 28 16:07:36.005: INFO: Get pod liveness-007f3bb8-84f8-4e55-91af-0216ab405160 in namespace container-probe-7431
  Apr 28 16:07:38.008: INFO: Get pod liveness-007f3bb8-84f8-4e55-91af-0216ab405160 in namespace container-probe-7431
  Apr 28 16:07:40.011: INFO: Get pod liveness-007f3bb8-84f8-4e55-91af-0216ab405160 in namespace container-probe-7431
  Apr 28 16:07:40.011: INFO: Restart count of pod container-probe-7431/liveness-007f3bb8-84f8-4e55-91af-0216ab405160 is now 1 (20.031226018s elapsed)
  Apr 28 16:07:40.011: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 04/28/24 16:07:40.013
  STEP: Destroying namespace "container-probe-7431" for this suite. @ 04/28/24 16:07:40.021
â€¢ [22.069 seconds]
------------------------------
SS
------------------------------
[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]
k8s.io/kubernetes/test/e2e/apps/daemon_set.go:205
  STEP: Creating a kubernetes client @ 04/28/24 16:07:40.024
  Apr 28 16:07:40.024: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename daemonsets @ 04/28/24 16:07:40.025
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:07:40.037
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:07:40.039
  Apr 28 16:07:40.050: INFO: Creating daemon "daemon-set" with a node selector
  STEP: Initially, daemon pods should not be running on any nodes. @ 04/28/24 16:07:40.055
  Apr 28 16:07:40.056: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 16:07:40.056: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  STEP: Change node label to blue, check that daemon pod is launched. @ 04/28/24 16:07:40.056
  Apr 28 16:07:40.069: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 16:07:40.069: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 16:07:41.072: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 16:07:41.072: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 16:07:42.072: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 28 16:07:42.072: INFO: Number of running nodes: 1, number of available pods: 1 in daemonset daemon-set
  STEP: Update the node label to green, and wait for daemons to be unscheduled @ 04/28/24 16:07:42.073
  Apr 28 16:07:42.083: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 28 16:07:42.083: INFO: Number of running nodes: 0, number of available pods: 1 in daemonset daemon-set
  Apr 28 16:07:43.086: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 16:07:43.086: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  STEP: Update DaemonSet node selector to green, and change its update strategy to RollingUpdate @ 04/28/24 16:07:43.087
  Apr 28 16:07:43.096: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 16:07:43.096: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 16:07:44.100: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 16:07:44.100: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 16:07:45.141: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 28 16:07:45.141: INFO: Number of running nodes: 1, number of available pods: 1 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 04/28/24 16:07:45.144
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-7695, will wait for the garbage collector to delete the pods @ 04/28/24 16:07:45.144
  Apr 28 16:07:45.200: INFO: Deleting DaemonSet.extensions daemon-set took: 3.053063ms
  Apr 28 16:07:45.300: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.353657ms
  Apr 28 16:07:46.403: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 16:07:46.403: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Apr 28 16:07:46.404: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"10141"},"items":null}

  Apr 28 16:07:46.406: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"10141"},"items":null}

  Apr 28 16:07:46.417: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-7695" for this suite. @ 04/28/24 16:07:46.419
â€¢ [6.399 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image  [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1741
  STEP: Creating a kubernetes client @ 04/28/24 16:07:46.428
  Apr 28 16:07:46.428: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 16:07:46.429
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:07:46.438
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:07:46.44
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 04/28/24 16:07:46.442
  Apr 28 16:07:46.442: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-9086 run e2e-test-httpd-pod --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4 --pod-running-timeout=2m0s --labels=run=e2e-test-httpd-pod'
  Apr 28 16:07:46.505: INFO: stderr: ""
  Apr 28 16:07:46.505: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: verifying the pod e2e-test-httpd-pod is running @ 04/28/24 16:07:46.505
  STEP: verifying the pod e2e-test-httpd-pod was created @ 04/28/24 16:07:51.556
  Apr 28 16:07:51.556: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-9086 get pod e2e-test-httpd-pod -o json'
  Apr 28 16:07:51.608: INFO: stderr: ""
  Apr 28 16:07:51.609: INFO: stdout: "{\n    \"apiVersion\": \"v1\",\n    \"kind\": \"Pod\",\n    \"metadata\": {\n        \"creationTimestamp\": \"2024-04-28T16:07:46Z\",\n        \"labels\": {\n            \"run\": \"e2e-test-httpd-pod\"\n        },\n        \"name\": \"e2e-test-httpd-pod\",\n        \"namespace\": \"kubectl-9086\",\n        \"resourceVersion\": \"10154\",\n        \"uid\": \"3ba1da2b-3b24-43f8-b73b-d2474109d282\"\n    },\n    \"spec\": {\n        \"containers\": [\n            {\n                \"image\": \"registry.k8s.io/e2e-test-images/httpd:2.4.38-4\",\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"e2e-test-httpd-pod\",\n                \"resources\": {},\n                \"terminationMessagePath\": \"/dev/termination-log\",\n                \"terminationMessagePolicy\": \"File\",\n                \"volumeMounts\": [\n                    {\n                        \"mountPath\": \"/var/run/secrets/kubernetes.io/serviceaccount\",\n                        \"name\": \"kube-api-access-cjvld\",\n                        \"readOnly\": true\n                    }\n                ]\n            }\n        ],\n        \"dnsPolicy\": \"ClusterFirst\",\n        \"enableServiceLinks\": true,\n        \"nodeName\": \"k8sconformance-m02\",\n        \"preemptionPolicy\": \"PreemptLowerPriority\",\n        \"priority\": 0,\n        \"restartPolicy\": \"Always\",\n        \"schedulerName\": \"default-scheduler\",\n        \"securityContext\": {},\n        \"serviceAccount\": \"default\",\n        \"serviceAccountName\": \"default\",\n        \"terminationGracePeriodSeconds\": 30,\n        \"tolerations\": [\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/not-ready\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            },\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/unreachable\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            }\n        ],\n        \"volumes\": [\n            {\n                \"name\": \"kube-api-access-cjvld\",\n                \"projected\": {\n                    \"defaultMode\": 420,\n                    \"sources\": [\n                        {\n                            \"serviceAccountToken\": {\n                                \"expirationSeconds\": 3607,\n                                \"path\": \"token\"\n                            }\n                        },\n                        {\n                            \"configMap\": {\n                                \"items\": [\n                                    {\n                                        \"key\": \"ca.crt\",\n                                        \"path\": \"ca.crt\"\n                                    }\n                                ],\n                                \"name\": \"kube-root-ca.crt\"\n                            }\n                        },\n                        {\n                            \"downwardAPI\": {\n                                \"items\": [\n                                    {\n                                        \"fieldRef\": {\n                                            \"apiVersion\": \"v1\",\n                                            \"fieldPath\": \"metadata.namespace\"\n                                        },\n                                        \"path\": \"namespace\"\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    \"status\": {\n        \"conditions\": [\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-04-28T16:07:46Z\",\n                \"status\": \"True\",\n                \"type\": \"Initialized\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-04-28T16:07:47Z\",\n                \"status\": \"True\",\n                \"type\": \"Ready\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-04-28T16:07:47Z\",\n                \"status\": \"True\",\n                \"type\": \"ContainersReady\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-04-28T16:07:46Z\",\n                \"status\": \"True\",\n                \"type\": \"PodScheduled\"\n            }\n        ],\n        \"containerStatuses\": [\n            {\n                \"containerID\": \"docker://8e362323777ca055347eebebcc7b8e337c8c7485ca49458a6bf155668da536d8\",\n                \"image\": \"registry.k8s.io/e2e-test-images/httpd:2.4.38-4\",\n                \"imageID\": \"docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22\",\n                \"lastState\": {},\n                \"name\": \"e2e-test-httpd-pod\",\n                \"ready\": true,\n                \"restartCount\": 0,\n                \"started\": true,\n                \"state\": {\n                    \"running\": {\n                        \"startedAt\": \"2024-04-28T16:07:47Z\"\n                    }\n                }\n            }\n        ],\n        \"hostIP\": \"192.168.49.3\",\n        \"phase\": \"Running\",\n        \"podIP\": \"10.244.1.171\",\n        \"podIPs\": [\n            {\n                \"ip\": \"10.244.1.171\"\n            }\n        ],\n        \"qosClass\": \"BestEffort\",\n        \"startTime\": \"2024-04-28T16:07:46Z\"\n    }\n}\n"
  STEP: replace the image in the pod @ 04/28/24 16:07:51.609
  Apr 28 16:07:51.609: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-9086 replace -f -'
  Apr 28 16:07:51.776: INFO: stderr: ""
  Apr 28 16:07:51.776: INFO: stdout: "pod/e2e-test-httpd-pod replaced\n"
  STEP: verifying the pod e2e-test-httpd-pod has the right image registry.k8s.io/e2e-test-images/busybox:1.29-4 @ 04/28/24 16:07:51.776
  Apr 28 16:07:51.779: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-9086 delete pods e2e-test-httpd-pod'
  Apr 28 16:07:53.786: INFO: stderr: ""
  Apr 28 16:07:53.786: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Apr 28 16:07:53.786: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-9086" for this suite. @ 04/28/24 16:07:53.789
â€¢ [7.364 seconds]
------------------------------
SSSSS
------------------------------
[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]
k8s.io/kubernetes/test/e2e/network/ingressclass.go:266
  STEP: Creating a kubernetes client @ 04/28/24 16:07:53.793
  Apr 28 16:07:53.793: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename ingressclass @ 04/28/24 16:07:53.793
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:07:53.802
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:07:53.804
  STEP: getting /apis @ 04/28/24 16:07:53.806
  STEP: getting /apis/networking.k8s.io @ 04/28/24 16:07:53.809
  STEP: getting /apis/networking.k8s.iov1 @ 04/28/24 16:07:53.809
  STEP: creating @ 04/28/24 16:07:53.81
  STEP: getting @ 04/28/24 16:07:53.818
  STEP: listing @ 04/28/24 16:07:53.819
  STEP: watching @ 04/28/24 16:07:53.821
  Apr 28 16:07:53.821: INFO: starting watch
  STEP: patching @ 04/28/24 16:07:53.821
  STEP: updating @ 04/28/24 16:07:53.824
  Apr 28 16:07:53.827: INFO: waiting for watch events with expected annotations
  Apr 28 16:07:53.827: INFO: saw patched and updated annotations
  STEP: deleting @ 04/28/24 16:07:53.827
  STEP: deleting a collection @ 04/28/24 16:07:53.833
  Apr 28 16:07:53.841: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ingressclass-2552" for this suite. @ 04/28/24 16:07:53.843
â€¢ [0.053 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Lease lease API should be available [Conformance]
k8s.io/kubernetes/test/e2e/common/node/lease.go:72
  STEP: Creating a kubernetes client @ 04/28/24 16:07:53.847
  Apr 28 16:07:53.847: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename lease-test @ 04/28/24 16:07:53.848
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:07:53.855
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:07:53.856
  Apr 28 16:07:53.886: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "lease-test-9431" for this suite. @ 04/28/24 16:07:53.888
â€¢ [0.045 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:285
  STEP: Creating a kubernetes client @ 04/28/24 16:07:53.893
  Apr 28 16:07:53.893: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 16:07:53.894
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:07:53.902
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:07:53.904
  STEP: Setting up server cert @ 04/28/24 16:07:53.917
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 16:07:54.137
  STEP: Deploying the webhook pod @ 04/28/24 16:07:54.143
  STEP: Wait for the deployment to be ready @ 04/28/24 16:07:54.15
  Apr 28 16:07:54.155: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/28/24 16:07:56.162
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 16:07:56.17
  Apr 28 16:07:57.170: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Apr 28 16:07:57.174: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-4022-crds.webhook.example.com via the AdmissionRegistration API @ 04/28/24 16:07:57.681
  STEP: Creating a custom resource that should be mutated by the webhook @ 04/28/24 16:07:57.692
  Apr 28 16:07:59.711: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-5739" for this suite. @ 04/28/24 16:08:00.248
  STEP: Destroying namespace "webhook-markers-4035" for this suite. @ 04/28/24 16:08:00.252
â€¢ [6.362 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_secret.go:46
  STEP: Creating a kubernetes client @ 04/28/24 16:08:00.257
  Apr 28 16:08:00.257: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:08:00.257
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:00.266
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:00.268
  STEP: Creating projection with secret that has name projected-secret-test-67f9f1e7-3a9b-43fd-bfa0-c75b1a65802c @ 04/28/24 16:08:00.27
  STEP: Creating a pod to test consume secrets @ 04/28/24 16:08:00.273
  STEP: Saw pod success @ 04/28/24 16:08:02.283
  Apr 28 16:08:02.285: INFO: Trying to get logs from node k8sconformance-m02 pod pod-projected-secrets-f57ccb26-56da-4b1c-b5ab-09f4a4839783 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 16:08:02.297
  Apr 28 16:08:02.307: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2234" for this suite. @ 04/28/24 16:08:02.309
â€¢ [2.056 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:199
  STEP: Creating a kubernetes client @ 04/28/24 16:08:02.315
  Apr 28 16:08:02.315: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 16:08:02.316
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:02.324
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:02.326
  STEP: Setting up server cert @ 04/28/24 16:08:02.337
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 16:08:02.982
  STEP: Deploying the webhook pod @ 04/28/24 16:08:02.985
  STEP: Wait for the deployment to be ready @ 04/28/24 16:08:02.993
  Apr 28 16:08:02.998: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/28/24 16:08:05.005
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 16:08:05.014
  Apr 28 16:08:06.014: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the webhook via the AdmissionRegistration API @ 04/28/24 16:08:06.018
  STEP: create a pod that should be denied by the webhook @ 04/28/24 16:08:06.03
  STEP: create a pod that causes the webhook to hang @ 04/28/24 16:08:06.038
  STEP: create a configmap that should be denied by the webhook @ 04/28/24 16:08:16.042
  STEP: create a configmap that should be admitted by the webhook @ 04/28/24 16:08:16.049
  STEP: update (PUT) the admitted configmap to a non-compliant one should be rejected by the webhook @ 04/28/24 16:08:16.055
  STEP: update (PATCH) the admitted configmap to a non-compliant one should be rejected by the webhook @ 04/28/24 16:08:16.06
  STEP: create a namespace that bypass the webhook @ 04/28/24 16:08:16.063
  STEP: create a configmap that violates the webhook policy but is in a whitelisted namespace @ 04/28/24 16:08:16.07
  Apr 28 16:08:16.076: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-5593" for this suite. @ 04/28/24 16:08:16.1
  STEP: Destroying namespace "webhook-markers-6299" for this suite. @ 04/28/24 16:08:16.103
  STEP: Destroying namespace "exempted-namespace-4567" for this suite. @ 04/28/24 16:08:16.11
â€¢ [13.798 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance]
k8s.io/kubernetes/test/e2e/network/endpointslice.go:104
  STEP: Creating a kubernetes client @ 04/28/24 16:08:16.114
  Apr 28 16:08:16.114: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename endpointslice @ 04/28/24 16:08:16.114
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:16.125
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:16.127
  Apr 28 16:08:16.158: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-1878" for this suite. @ 04/28/24 16:08:16.16
â€¢ [0.051 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:131
  STEP: Creating a kubernetes client @ 04/28/24 16:08:16.165
  Apr 28 16:08:16.165: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:08:16.165
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:16.173
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:16.175
  STEP: Creating the pod @ 04/28/24 16:08:16.176
  Apr 28 16:08:18.704: INFO: Successfully updated pod "labelsupdate07f67056-9ed4-4493-a3cf-94b350e0aa63"
  Apr 28 16:08:22.725: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5234" for this suite. @ 04/28/24 16:08:22.727
â€¢ [6.566 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:117
  STEP: Creating a kubernetes client @ 04/28/24 16:08:22.732
  Apr 28 16:08:22.732: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename dns @ 04/28/24 16:08:22.733
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:22.741
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:22.743
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-1.dns-test-service.dns-7146.svc.cluster.local)" && echo OK > /results/wheezy_hosts@dns-querier-1.dns-test-service.dns-7146.svc.cluster.local;test -n "$$(getent hosts dns-querier-1)" && echo OK > /results/wheezy_hosts@dns-querier-1;sleep 1; done
   @ 04/28/24 16:08:22.745
  STEP: Running these commands on jessie: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-1.dns-test-service.dns-7146.svc.cluster.local)" && echo OK > /results/jessie_hosts@dns-querier-1.dns-test-service.dns-7146.svc.cluster.local;test -n "$$(getent hosts dns-querier-1)" && echo OK > /results/jessie_hosts@dns-querier-1;sleep 1; done
   @ 04/28/24 16:08:22.745
  STEP: creating a pod to probe /etc/hosts @ 04/28/24 16:08:22.745
  STEP: submitting the pod to kubernetes @ 04/28/24 16:08:22.745
  STEP: retrieving the pod @ 04/28/24 16:08:24.756
  STEP: looking for the results for each expected name from probers @ 04/28/24 16:08:24.758
  Apr 28 16:08:24.765: INFO: DNS probes using dns-7146/dns-test-546ac7fb-7265-4f10-b186-3d85fffdb5a2 succeeded

  Apr 28 16:08:24.766: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 04/28/24 16:08:24.767
  STEP: Destroying namespace "dns-7146" for this suite. @ 04/28/24 16:08:24.774
â€¢ [2.046 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]
k8s.io/kubernetes/test/e2e/network/proxy.go:101
  STEP: Creating a kubernetes client @ 04/28/24 16:08:24.78
  Apr 28 16:08:24.780: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename proxy @ 04/28/24 16:08:24.781
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:24.788
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:24.79
  STEP: starting an echo server on multiple ports @ 04/28/24 16:08:24.799
  STEP: creating replication controller proxy-service-6rtrx in namespace proxy-3444 @ 04/28/24 16:08:24.799
  I0428 16:08:24.804791      22 runners.go:197] Created replication controller with name: proxy-service-6rtrx, namespace: proxy-3444, replica count: 1
  I0428 16:08:25.855454      22 runners.go:197] proxy-service-6rtrx Pods: 1 out of 1 created, 0 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  I0428 16:08:26.856274      22 runners.go:197] proxy-service-6rtrx Pods: 1 out of 1 created, 1 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 28 16:08:26.858: INFO: setup took 2.066251764s, starting test cases
  STEP: running 16 cases, 20 attempts per case, 320 total attempts @ 04/28/24 16:08:26.858
  Apr 28 16:08:26.862: INFO: (0) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 3.548518ms)
  Apr 28 16:08:26.863: INFO: (0) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 4.596733ms)
  Apr 28 16:08:26.863: INFO: (0) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 4.664319ms)
  Apr 28 16:08:26.863: INFO: (0) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 4.606907ms)
  Apr 28 16:08:26.863: INFO: (0) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 4.805245ms)
  Apr 28 16:08:26.863: INFO: (0) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 4.810149ms)
  Apr 28 16:08:26.863: INFO: (0) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 4.878592ms)
  Apr 28 16:08:26.863: INFO: (0) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 4.969481ms)
  Apr 28 16:08:26.863: INFO: (0) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 4.791069ms)
  Apr 28 16:08:26.866: INFO: (0) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 8.020009ms)
  Apr 28 16:08:26.866: INFO: (0) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 8.118239ms)
  Apr 28 16:08:26.867: INFO: (0) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 8.652322ms)
  Apr 28 16:08:26.867: INFO: (0) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 9.24124ms)
  Apr 28 16:08:26.867: INFO: (0) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 9.486532ms)
  Apr 28 16:08:26.867: INFO: (0) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 9.417597ms)
  Apr 28 16:08:26.867: INFO: (0) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 9.389319ms)
  Apr 28 16:08:26.871: INFO: (1) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 3.163671ms)
  Apr 28 16:08:26.871: INFO: (1) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 3.219168ms)
  Apr 28 16:08:26.871: INFO: (1) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 3.201977ms)
  Apr 28 16:08:26.871: INFO: (1) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 3.19073ms)
  Apr 28 16:08:26.871: INFO: (1) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 3.192253ms)
  Apr 28 16:08:26.871: INFO: (1) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 3.407128ms)
  Apr 28 16:08:26.871: INFO: (1) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 3.222843ms)
  Apr 28 16:08:26.871: INFO: (1) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 3.303584ms)
  Apr 28 16:08:26.872: INFO: (1) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 3.824932ms)
  Apr 28 16:08:26.872: INFO: (1) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 3.822107ms)
  Apr 28 16:08:26.872: INFO: (1) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 3.876807ms)
  Apr 28 16:08:26.872: INFO: (1) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 3.97592ms)
  Apr 28 16:08:26.872: INFO: (1) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 4.009066ms)
  Apr 28 16:08:26.872: INFO: (1) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 4.070928ms)
  Apr 28 16:08:26.872: INFO: (1) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 4.238901ms)
  Apr 28 16:08:26.872: INFO: (1) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 4.24143ms)
  Apr 28 16:08:26.874: INFO: (2) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 1.945903ms)
  Apr 28 16:08:26.876: INFO: (2) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 4.054251ms)
  Apr 28 16:08:26.876: INFO: (2) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 4.019748ms)
  Apr 28 16:08:26.876: INFO: (2) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 4.077155ms)
  Apr 28 16:08:26.876: INFO: (2) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 4.166254ms)
  Apr 28 16:08:26.876: INFO: (2) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 4.130317ms)
  Apr 28 16:08:26.876: INFO: (2) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 4.117828ms)
  Apr 28 16:08:26.877: INFO: (2) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 4.761229ms)
  Apr 28 16:08:26.877: INFO: (2) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 4.737441ms)
  Apr 28 16:08:26.877: INFO: (2) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 4.682235ms)
  Apr 28 16:08:26.877: INFO: (2) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 4.68371ms)
  Apr 28 16:08:26.877: INFO: (2) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 4.771558ms)
  Apr 28 16:08:26.877: INFO: (2) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 4.862693ms)
  Apr 28 16:08:26.877: INFO: (2) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 4.824327ms)
  Apr 28 16:08:26.877: INFO: (2) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 4.81327ms)
  Apr 28 16:08:26.877: INFO: (2) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 4.784513ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 4.942959ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 4.917623ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 4.941423ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 4.936737ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 4.910786ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 5.032823ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 5.012372ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 5.045804ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 5.085424ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 5.159031ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 5.176112ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 5.076343ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 5.044269ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 5.187542ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 5.133022ms)
  Apr 28 16:08:26.882: INFO: (3) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 5.084868ms)
  Apr 28 16:08:26.886: INFO: (4) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 3.88846ms)
  Apr 28 16:08:26.886: INFO: (4) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 4.143702ms)
  Apr 28 16:08:26.886: INFO: (4) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 4.058799ms)
  Apr 28 16:08:26.886: INFO: (4) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 4.082692ms)
  Apr 28 16:08:26.886: INFO: (4) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 4.056869ms)
  Apr 28 16:08:26.886: INFO: (4) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 4.062401ms)
  Apr 28 16:08:26.886: INFO: (4) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 4.057282ms)
  Apr 28 16:08:26.886: INFO: (4) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 4.051311ms)
  Apr 28 16:08:26.887: INFO: (4) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 4.289628ms)
  Apr 28 16:08:26.887: INFO: (4) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 4.238057ms)
  Apr 28 16:08:26.887: INFO: (4) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 4.23343ms)
  Apr 28 16:08:26.887: INFO: (4) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 4.167835ms)
  Apr 28 16:08:26.887: INFO: (4) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 4.352357ms)
  Apr 28 16:08:26.887: INFO: (4) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 4.218038ms)
  Apr 28 16:08:26.887: INFO: (4) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 4.21355ms)
  Apr 28 16:08:26.887: INFO: (4) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 4.4013ms)
  Apr 28 16:08:26.889: INFO: (5) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 2.008675ms)
  Apr 28 16:08:26.889: INFO: (5) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 2.241821ms)
  Apr 28 16:08:26.889: INFO: (5) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 2.12661ms)
  Apr 28 16:08:26.891: INFO: (5) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 3.617842ms)
  Apr 28 16:08:26.891: INFO: (5) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 3.333926ms)
  Apr 28 16:08:26.891: INFO: (5) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 3.736887ms)
  Apr 28 16:08:26.891: INFO: (5) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 3.912461ms)
  Apr 28 16:08:26.891: INFO: (5) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 3.722535ms)
  Apr 28 16:08:26.891: INFO: (5) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 3.496296ms)
  Apr 28 16:08:26.891: INFO: (5) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 3.840279ms)
  Apr 28 16:08:26.891: INFO: (5) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 3.682018ms)
  Apr 28 16:08:26.891: INFO: (5) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 3.627605ms)
  Apr 28 16:08:26.891: INFO: (5) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 3.499415ms)
  Apr 28 16:08:26.891: INFO: (5) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 4.278283ms)
  Apr 28 16:08:26.891: INFO: (5) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 3.83253ms)
  Apr 28 16:08:26.891: INFO: (5) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 3.953082ms)
  Apr 28 16:08:26.894: INFO: (6) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 2.741687ms)
  Apr 28 16:08:26.895: INFO: (6) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 3.772753ms)
  Apr 28 16:08:26.895: INFO: (6) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 4.043968ms)
  Apr 28 16:08:26.896: INFO: (6) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 4.159417ms)
  Apr 28 16:08:26.896: INFO: (6) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 4.397139ms)
  Apr 28 16:08:26.896: INFO: (6) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 4.476052ms)
  Apr 28 16:08:26.896: INFO: (6) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 4.568515ms)
  Apr 28 16:08:26.896: INFO: (6) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 4.518253ms)
  Apr 28 16:08:26.896: INFO: (6) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 4.542627ms)
  Apr 28 16:08:26.896: INFO: (6) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 4.642709ms)
  Apr 28 16:08:26.896: INFO: (6) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 4.636985ms)
  Apr 28 16:08:26.896: INFO: (6) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 4.698821ms)
  Apr 28 16:08:26.896: INFO: (6) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 4.944284ms)
  Apr 28 16:08:26.896: INFO: (6) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 4.924729ms)
  Apr 28 16:08:26.896: INFO: (6) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 4.909442ms)
  Apr 28 16:08:26.896: INFO: (6) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 4.914922ms)
  Apr 28 16:08:26.899: INFO: (7) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 2.409244ms)
  Apr 28 16:08:26.899: INFO: (7) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 2.461716ms)
  Apr 28 16:08:26.899: INFO: (7) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 2.344997ms)
  Apr 28 16:08:26.899: INFO: (7) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 2.666412ms)
  Apr 28 16:08:26.900: INFO: (7) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 3.00946ms)
  Apr 28 16:08:26.900: INFO: (7) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 3.131929ms)
  Apr 28 16:08:26.900: INFO: (7) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 3.083847ms)
  Apr 28 16:08:26.900: INFO: (7) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 3.193642ms)
  Apr 28 16:08:26.900: INFO: (7) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 3.144312ms)
  Apr 28 16:08:26.900: INFO: (7) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 3.138033ms)
  Apr 28 16:08:26.900: INFO: (7) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 3.960179ms)
  Apr 28 16:08:26.901: INFO: (7) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 4.181798ms)
  Apr 28 16:08:26.901: INFO: (7) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 4.392802ms)
  Apr 28 16:08:26.901: INFO: (7) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 4.41361ms)
  Apr 28 16:08:26.901: INFO: (7) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 4.463436ms)
  Apr 28 16:08:26.901: INFO: (7) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 4.45385ms)
  Apr 28 16:08:26.904: INFO: (8) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 2.446311ms)
  Apr 28 16:08:26.904: INFO: (8) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 3.17762ms)
  Apr 28 16:08:26.904: INFO: (8) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 3.186423ms)
  Apr 28 16:08:26.904: INFO: (8) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 2.992536ms)
  Apr 28 16:08:26.904: INFO: (8) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 3.03839ms)
  Apr 28 16:08:26.904: INFO: (8) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 3.185905ms)
  Apr 28 16:08:26.904: INFO: (8) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 3.170183ms)
  Apr 28 16:08:26.904: INFO: (8) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 3.093473ms)
  Apr 28 16:08:26.904: INFO: (8) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 3.092387ms)
  Apr 28 16:08:26.905: INFO: (8) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 3.405214ms)
  Apr 28 16:08:26.905: INFO: (8) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 4.098757ms)
  Apr 28 16:08:26.905: INFO: (8) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 4.014041ms)
  Apr 28 16:08:26.905: INFO: (8) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 4.128385ms)
  Apr 28 16:08:26.905: INFO: (8) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 4.009035ms)
  Apr 28 16:08:26.905: INFO: (8) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 4.1039ms)
  Apr 28 16:08:26.905: INFO: (8) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 4.094445ms)
  Apr 28 16:08:26.939: INFO: (9) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 34.204541ms)
  Apr 28 16:08:26.941: INFO: (9) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 35.317139ms)
  Apr 28 16:08:26.941: INFO: (9) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 35.233924ms)
  Apr 28 16:08:26.941: INFO: (9) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 35.294392ms)
  Apr 28 16:08:26.941: INFO: (9) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 35.238954ms)
  Apr 28 16:08:26.941: INFO: (9) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 35.244981ms)
  Apr 28 16:08:26.941: INFO: (9) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 35.281203ms)
  Apr 28 16:08:26.941: INFO: (9) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 35.313164ms)
  Apr 28 16:08:26.941: INFO: (9) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 35.301867ms)
  Apr 28 16:08:26.941: INFO: (9) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 35.349218ms)
  Apr 28 16:08:26.941: INFO: (9) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 35.439718ms)
  Apr 28 16:08:26.941: INFO: (9) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 35.68992ms)
  Apr 28 16:08:26.941: INFO: (9) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 35.728004ms)
  Apr 28 16:08:26.941: INFO: (9) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 35.933428ms)
  Apr 28 16:08:26.941: INFO: (9) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 35.995722ms)
  Apr 28 16:08:26.941: INFO: (9) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 36.009428ms)
  Apr 28 16:08:26.944: INFO: (10) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 2.499717ms)
  Apr 28 16:08:26.944: INFO: (10) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 2.625351ms)
  Apr 28 16:08:26.944: INFO: (10) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 2.778996ms)
  Apr 28 16:08:26.946: INFO: (10) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 4.763646ms)
  Apr 28 16:08:26.946: INFO: (10) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 4.859916ms)
  Apr 28 16:08:26.946: INFO: (10) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 4.678025ms)
  Apr 28 16:08:26.946: INFO: (10) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 4.91199ms)
  Apr 28 16:08:26.947: INFO: (10) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 4.803407ms)
  Apr 28 16:08:26.947: INFO: (10) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 4.866465ms)
  Apr 28 16:08:26.947: INFO: (10) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 4.748112ms)
  Apr 28 16:08:26.947: INFO: (10) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 4.629351ms)
  Apr 28 16:08:26.947: INFO: (10) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 5.117713ms)
  Apr 28 16:08:26.947: INFO: (10) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 4.681168ms)
  Apr 28 16:08:26.947: INFO: (10) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 4.82171ms)
  Apr 28 16:08:26.947: INFO: (10) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 4.691272ms)
  Apr 28 16:08:26.947: INFO: (10) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 5.219651ms)
  Apr 28 16:08:26.950: INFO: (11) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 3.030357ms)
  Apr 28 16:08:26.950: INFO: (11) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 3.040968ms)
  Apr 28 16:08:26.950: INFO: (11) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 3.052047ms)
  Apr 28 16:08:26.950: INFO: (11) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 3.030456ms)
  Apr 28 16:08:26.950: INFO: (11) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 3.381288ms)
  Apr 28 16:08:26.950: INFO: (11) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 3.505082ms)
  Apr 28 16:08:26.950: INFO: (11) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 3.660096ms)
  Apr 28 16:08:26.950: INFO: (11) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 3.625458ms)
  Apr 28 16:08:26.951: INFO: (11) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 3.919172ms)
  Apr 28 16:08:26.951: INFO: (11) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 3.978862ms)
  Apr 28 16:08:26.951: INFO: (11) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 3.962456ms)
  Apr 28 16:08:26.951: INFO: (11) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 4.040889ms)
  Apr 28 16:08:26.951: INFO: (11) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 4.329395ms)
  Apr 28 16:08:26.951: INFO: (11) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 4.276543ms)
  Apr 28 16:08:26.951: INFO: (11) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 4.281643ms)
  Apr 28 16:08:26.951: INFO: (11) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 4.319532ms)
  Apr 28 16:08:26.955: INFO: (12) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 4.250723ms)
  Apr 28 16:08:26.955: INFO: (12) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 4.225965ms)
  Apr 28 16:08:26.955: INFO: (12) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 4.226011ms)
  Apr 28 16:08:26.955: INFO: (12) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 4.374865ms)
  Apr 28 16:08:26.956: INFO: (12) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 4.391112ms)
  Apr 28 16:08:26.956: INFO: (12) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 4.331375ms)
  Apr 28 16:08:26.956: INFO: (12) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 4.288417ms)
  Apr 28 16:08:26.956: INFO: (12) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 4.366315ms)
  Apr 28 16:08:26.956: INFO: (12) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 4.294688ms)
  Apr 28 16:08:26.956: INFO: (12) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 4.584228ms)
  Apr 28 16:08:26.956: INFO: (12) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 4.717158ms)
  Apr 28 16:08:26.956: INFO: (12) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 4.686973ms)
  Apr 28 16:08:26.956: INFO: (12) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 4.69066ms)
  Apr 28 16:08:26.956: INFO: (12) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 4.741564ms)
  Apr 28 16:08:26.956: INFO: (12) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 4.890973ms)
  Apr 28 16:08:26.956: INFO: (12) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 5.095803ms)
  Apr 28 16:08:26.959: INFO: (13) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 2.462944ms)
  Apr 28 16:08:26.959: INFO: (13) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 2.377758ms)
  Apr 28 16:08:26.959: INFO: (13) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 2.718766ms)
  Apr 28 16:08:26.959: INFO: (13) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 2.682743ms)
  Apr 28 16:08:26.960: INFO: (13) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 3.15351ms)
  Apr 28 16:08:26.960: INFO: (13) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 3.367464ms)
  Apr 28 16:08:26.960: INFO: (13) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 3.687876ms)
  Apr 28 16:08:26.961: INFO: (13) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 4.134809ms)
  Apr 28 16:08:26.961: INFO: (13) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 4.249648ms)
  Apr 28 16:08:26.961: INFO: (13) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 4.252999ms)
  Apr 28 16:08:26.961: INFO: (13) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 4.64503ms)
  Apr 28 16:08:26.961: INFO: (13) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 4.692957ms)
  Apr 28 16:08:26.961: INFO: (13) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 4.755326ms)
  Apr 28 16:08:26.961: INFO: (13) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 4.664754ms)
  Apr 28 16:08:26.961: INFO: (13) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 4.686944ms)
  Apr 28 16:08:26.961: INFO: (13) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 4.987912ms)
  Apr 28 16:08:26.964: INFO: (14) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 2.966438ms)
  Apr 28 16:08:26.965: INFO: (14) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 3.115771ms)
  Apr 28 16:08:26.965: INFO: (14) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 3.242482ms)
  Apr 28 16:08:26.965: INFO: (14) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 3.309173ms)
  Apr 28 16:08:26.965: INFO: (14) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 3.915744ms)
  Apr 28 16:08:26.965: INFO: (14) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 3.815869ms)
  Apr 28 16:08:26.965: INFO: (14) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 3.898225ms)
  Apr 28 16:08:26.965: INFO: (14) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 3.795996ms)
  Apr 28 16:08:26.965: INFO: (14) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 3.803713ms)
  Apr 28 16:08:26.965: INFO: (14) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 3.853073ms)
  Apr 28 16:08:26.966: INFO: (14) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 4.212824ms)
  Apr 28 16:08:26.966: INFO: (14) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 4.251561ms)
  Apr 28 16:08:26.966: INFO: (14) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 4.135544ms)
  Apr 28 16:08:26.966: INFO: (14) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 4.139784ms)
  Apr 28 16:08:26.966: INFO: (14) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 4.250521ms)
  Apr 28 16:08:26.966: INFO: (14) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 4.242891ms)
  Apr 28 16:08:26.968: INFO: (15) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 2.53206ms)
  Apr 28 16:08:26.968: INFO: (15) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 2.606288ms)
  Apr 28 16:08:26.969: INFO: (15) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 2.921235ms)
  Apr 28 16:08:26.969: INFO: (15) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 2.855285ms)
  Apr 28 16:08:26.969: INFO: (15) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 3.196752ms)
  Apr 28 16:08:26.969: INFO: (15) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 3.233498ms)
  Apr 28 16:08:26.969: INFO: (15) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 3.212011ms)
  Apr 28 16:08:26.969: INFO: (15) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 3.247403ms)
  Apr 28 16:08:26.969: INFO: (15) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 3.231369ms)
  Apr 28 16:08:26.969: INFO: (15) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 3.39158ms)
  Apr 28 16:08:26.969: INFO: (15) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 3.528335ms)
  Apr 28 16:08:26.970: INFO: (15) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 3.601781ms)
  Apr 28 16:08:26.970: INFO: (15) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 3.665056ms)
  Apr 28 16:08:26.970: INFO: (15) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 3.786944ms)
  Apr 28 16:08:26.970: INFO: (15) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 3.840334ms)
  Apr 28 16:08:26.970: INFO: (15) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 3.807108ms)
  Apr 28 16:08:26.973: INFO: (16) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 3.188165ms)
  Apr 28 16:08:26.974: INFO: (16) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 3.574916ms)
  Apr 28 16:08:26.974: INFO: (16) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 3.629871ms)
  Apr 28 16:08:26.974: INFO: (16) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 3.562556ms)
  Apr 28 16:08:26.974: INFO: (16) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 3.67395ms)
  Apr 28 16:08:26.974: INFO: (16) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 3.720462ms)
  Apr 28 16:08:26.974: INFO: (16) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 3.626613ms)
  Apr 28 16:08:26.974: INFO: (16) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 3.819989ms)
  Apr 28 16:08:26.974: INFO: (16) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 3.743459ms)
  Apr 28 16:08:26.974: INFO: (16) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 3.755996ms)
  Apr 28 16:08:26.974: INFO: (16) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 3.743457ms)
  Apr 28 16:08:26.974: INFO: (16) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 4.507223ms)
  Apr 28 16:08:26.975: INFO: (16) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 4.54505ms)
  Apr 28 16:08:26.975: INFO: (16) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 4.595408ms)
  Apr 28 16:08:26.975: INFO: (16) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 4.524351ms)
  Apr 28 16:08:26.975: INFO: (16) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 4.505505ms)
  Apr 28 16:08:26.977: INFO: (17) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 2.357409ms)
  Apr 28 16:08:26.977: INFO: (17) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 2.385777ms)
  Apr 28 16:08:26.977: INFO: (17) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 2.376732ms)
  Apr 28 16:08:26.977: INFO: (17) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 2.297526ms)
  Apr 28 16:08:26.979: INFO: (17) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 4.485927ms)
  Apr 28 16:08:26.980: INFO: (17) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 5.115893ms)
  Apr 28 16:08:26.980: INFO: (17) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 5.600341ms)
  Apr 28 16:08:26.981: INFO: (17) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 6.026708ms)
  Apr 28 16:08:27.039: INFO: (17) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 64.793424ms)
  Apr 28 16:08:27.040: INFO: (17) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 64.805459ms)
  Apr 28 16:08:27.040: INFO: (17) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 64.727683ms)
  Apr 28 16:08:27.040: INFO: (17) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 64.79502ms)
  Apr 28 16:08:27.040: INFO: (17) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 65.062708ms)
  Apr 28 16:08:27.040: INFO: (17) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 65.188847ms)
  Apr 28 16:08:27.040: INFO: (17) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 65.173751ms)
  Apr 28 16:08:27.040: INFO: (17) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 65.660175ms)
  Apr 28 16:08:27.053: INFO: (18) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 11.461471ms)
  Apr 28 16:08:27.053: INFO: (18) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 11.86218ms)
  Apr 28 16:08:27.053: INFO: (18) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 12.259105ms)
  Apr 28 16:08:27.053: INFO: (18) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 12.051806ms)
  Apr 28 16:08:27.053: INFO: (18) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 12.345212ms)
  Apr 28 16:08:27.053: INFO: (18) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 12.227002ms)
  Apr 28 16:08:27.053: INFO: (18) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 12.06854ms)
  Apr 28 16:08:27.053: INFO: (18) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 12.589926ms)
  Apr 28 16:08:27.054: INFO: (18) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 12.42321ms)
  Apr 28 16:08:27.057: INFO: (18) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 15.814629ms)
  Apr 28 16:08:27.059: INFO: (18) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 18.477053ms)
  Apr 28 16:08:27.059: INFO: (18) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 18.372362ms)
  Apr 28 16:08:27.059: INFO: (18) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 18.556705ms)
  Apr 28 16:08:27.059: INFO: (18) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 19.029147ms)
  Apr 28 16:08:27.059: INFO: (18) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 18.846597ms)
  Apr 28 16:08:27.060: INFO: (18) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 19.05597ms)
  Apr 28 16:08:27.063: INFO: (19) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:443/proxy/tlsrewritem... (200; 3.337819ms)
  Apr 28 16:08:27.140: INFO: (19) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">test<... (200; 79.944229ms)
  Apr 28 16:08:27.140: INFO: (19) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:1080/proxy/rewriteme">... (200; 80.01613ms)
  Apr 28 16:08:27.140: INFO: (19) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 79.975298ms)
  Apr 28 16:08:27.140: INFO: (19) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:462/proxy/: tls qux (200; 80.029362ms)
  Apr 28 16:08:27.140: INFO: (19) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname1/proxy/: foo (200; 80.078863ms)
  Apr 28 16:08:27.141: INFO: (19) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:162/proxy/: bar (200; 80.750626ms)
  Apr 28 16:08:27.141: INFO: (19) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/: <a href="/api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6/proxy/rewriteme">test</a> (200; 80.764572ms)
  Apr 28 16:08:27.141: INFO: (19) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname2/proxy/: tls qux (200; 80.801204ms)
  Apr 28 16:08:27.141: INFO: (19) /api/v1/namespaces/proxy-3444/pods/https:proxy-service-6rtrx-sfmw6:460/proxy/: tls baz (200; 80.76242ms)
  Apr 28 16:08:27.141: INFO: (19) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname2/proxy/: bar (200; 80.828636ms)
  Apr 28 16:08:27.141: INFO: (19) /api/v1/namespaces/proxy-3444/pods/http:proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 80.821447ms)
  Apr 28 16:08:27.141: INFO: (19) /api/v1/namespaces/proxy-3444/pods/proxy-service-6rtrx-sfmw6:160/proxy/: foo (200; 80.930864ms)
  Apr 28 16:08:27.142: INFO: (19) /api/v1/namespaces/proxy-3444/services/http:proxy-service-6rtrx:portname2/proxy/: bar (200; 82.18826ms)
  Apr 28 16:08:27.142: INFO: (19) /api/v1/namespaces/proxy-3444/services/proxy-service-6rtrx:portname1/proxy/: foo (200; 82.051863ms)
  Apr 28 16:08:27.142: INFO: (19) /api/v1/namespaces/proxy-3444/services/https:proxy-service-6rtrx:tlsportname1/proxy/: tls baz (200; 82.053272ms)
  Apr 28 16:08:27.142: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController proxy-service-6rtrx in namespace proxy-3444, will wait for the garbage collector to delete the pods @ 04/28/24 16:08:27.144
  Apr 28 16:08:27.201: INFO: Deleting ReplicationController proxy-service-6rtrx took: 4.55826ms
  Apr 28 16:08:27.301: INFO: Terminating ReplicationController proxy-service-6rtrx pods took: 100.425055ms
  STEP: Destroying namespace "proxy-3444" for this suite. @ 04/28/24 16:08:30.202
â€¢ [5.427 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] SubjectReview should support SubjectReview API operations [Conformance]
k8s.io/kubernetes/test/e2e/auth/subjectreviews.go:50
  STEP: Creating a kubernetes client @ 04/28/24 16:08:30.208
  Apr 28 16:08:30.208: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename subjectreview @ 04/28/24 16:08:30.209
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:30.218
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:30.22
  STEP: Creating a Serviceaccount "e2e" in namespace "subjectreview-2929" @ 04/28/24 16:08:30.222
  Apr 28 16:08:30.224: INFO: saUsername: "system:serviceaccount:subjectreview-2929:e2e"
  Apr 28 16:08:30.224: INFO: saGroups: []string{"system:authenticated", "system:serviceaccounts", "system:serviceaccounts:subjectreview-2929"}
  Apr 28 16:08:30.224: INFO: saUID: "fe7c8519-5792-4162-82fb-1a6443de45ee"
  STEP: Creating clientset to impersonate "system:serviceaccount:subjectreview-2929:e2e" @ 04/28/24 16:08:30.224
  STEP: Creating SubjectAccessReview for "system:serviceaccount:subjectreview-2929:e2e" @ 04/28/24 16:08:30.225
  Apr 28 16:08:30.226: INFO: sarResponse Status: v1.SubjectAccessReviewStatus{Allowed:false, Denied:false, Reason:"", EvaluationError:""}
  STEP: Verifying as "system:serviceaccount:subjectreview-2929:e2e" api 'list' configmaps in "subjectreview-2929" namespace @ 04/28/24 16:08:30.226
  Apr 28 16:08:30.227: INFO: SubjectAccessReview has been verified
  STEP: Creating a LocalSubjectAccessReview for "system:serviceaccount:subjectreview-2929:e2e" @ 04/28/24 16:08:30.227
  Apr 28 16:08:30.228: INFO: lsarResponse Status: v1.SubjectAccessReviewStatus{Allowed:false, Denied:false, Reason:"", EvaluationError:""}
  Apr 28 16:08:30.228: INFO: LocalSubjectAccessReview has been verified
  Apr 28 16:08:30.229: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subjectreview-2929" for this suite. @ 04/28/24 16:08:30.231
â€¢ [0.028 seconds]
------------------------------
SSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:99
  STEP: Creating a kubernetes client @ 04/28/24 16:08:30.237
  Apr 28 16:08:30.237: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename configmap @ 04/28/24 16:08:30.238
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:30.248
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:30.25
  STEP: Creating configMap with name configmap-test-volume-map-0400bb42-7e1a-4052-8cde-cc28f6747016 @ 04/28/24 16:08:30.252
  STEP: Creating a pod to test consume configMaps @ 04/28/24 16:08:30.256
  STEP: Saw pod success @ 04/28/24 16:08:32.265
  Apr 28 16:08:32.267: INFO: Trying to get logs from node k8sconformance-m02 pod pod-configmaps-d99e02a2-0e0b-4920-b9cd-40a67d26b720 container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 16:08:32.273
  Apr 28 16:08:32.281: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-458" for this suite. @ 04/28/24 16:08:32.283
â€¢ [2.049 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:2224
  STEP: Creating a kubernetes client @ 04/28/24 16:08:32.287
  Apr 28 16:08:32.287: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 16:08:32.287
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:32.295
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:32.297
  STEP: creating service in namespace services-4530 @ 04/28/24 16:08:32.299
  STEP: creating service affinity-nodeport-transition in namespace services-4530 @ 04/28/24 16:08:32.299
  STEP: creating replication controller affinity-nodeport-transition in namespace services-4530 @ 04/28/24 16:08:32.308
  I0428 16:08:32.313675      22 runners.go:197] Created replication controller with name: affinity-nodeport-transition, namespace: services-4530, replica count: 3
  I0428 16:08:35.364777      22 runners.go:197] affinity-nodeport-transition Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 28 16:08:35.369: INFO: Creating new exec pod
  Apr 28 16:08:38.380: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-4530 exec execpod-affinitypw8lh -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-nodeport-transition 80'
  Apr 28 16:08:38.479: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-nodeport-transition 80\nConnection to affinity-nodeport-transition 80 port [tcp/http] succeeded!\n"
  Apr 28 16:08:38.479: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 16:08:38.479: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-4530 exec execpod-affinitypw8lh -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.101.57.84 80'
  Apr 28 16:08:38.584: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.101.57.84 80\nConnection to 10.101.57.84 80 port [tcp/http] succeeded!\n"
  Apr 28 16:08:38.584: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 16:08:38.584: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-4530 exec execpod-affinitypw8lh -- /bin/sh -x -c echo hostName | nc -v -t -w 2 192.168.49.2 30164'
  Apr 28 16:08:38.678: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 192.168.49.2 30164\nConnection to 192.168.49.2 30164 port [tcp/*] succeeded!\n"
  Apr 28 16:08:38.678: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 16:08:38.678: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-4530 exec execpod-affinitypw8lh -- /bin/sh -x -c echo hostName | nc -v -t -w 2 192.168.49.3 30164'
  Apr 28 16:08:38.773: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 192.168.49.3 30164\nConnection to 192.168.49.3 30164 port [tcp/*] succeeded!\n"
  Apr 28 16:08:38.773: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 16:08:38.779: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-4530 exec execpod-affinitypw8lh -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://192.168.49.2:30164/ ; done'
  Apr 28 16:08:38.931: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n"
  Apr 28 16:08:38.932: INFO: stdout: "\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-cw7q6\naffinity-nodeport-transition-xpvj9\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-xpvj9\naffinity-nodeport-transition-xpvj9\naffinity-nodeport-transition-cw7q6\naffinity-nodeport-transition-cw7q6\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-xpvj9\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj"
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-cw7q6
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-xpvj9
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-xpvj9
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-xpvj9
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-cw7q6
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-cw7q6
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-xpvj9
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:38.932: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:38.938: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-4530 exec execpod-affinitypw8lh -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://192.168.49.2:30164/ ; done'
  Apr 28 16:08:39.088: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n+ echo\n+ curl -q -s --connect-timeout 2 http://192.168.49.2:30164/\n"
  Apr 28 16:08:39.088: INFO: stdout: "\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj\naffinity-nodeport-transition-shglj"
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Received response from host: affinity-nodeport-transition-shglj
  Apr 28 16:08:39.088: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Apr 28 16:08:39.091: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-nodeport-transition in namespace services-4530, will wait for the garbage collector to delete the pods @ 04/28/24 16:08:39.1
  Apr 28 16:08:39.157: INFO: Deleting ReplicationController affinity-nodeport-transition took: 4.113874ms
  Apr 28 16:08:39.258: INFO: Terminating ReplicationController affinity-nodeport-transition pods took: 101.086524ms
  STEP: Destroying namespace "services-4530" for this suite. @ 04/28/24 16:08:42.372
â€¢ [10.088 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl version should check is all data is printed  [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1674
  STEP: Creating a kubernetes client @ 04/28/24 16:08:42.377
  Apr 28 16:08:42.377: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 16:08:42.377
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:42.384
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:42.386
  Apr 28 16:08:42.388: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-7732 version'
  Apr 28 16:08:42.436: INFO: stderr: ""
  Apr 28 16:08:42.436: INFO: stdout: "Client Version: v1.28.9\nKustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3\nServer Version: v1.28.9\n"
  Apr 28 16:08:42.437: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-7732" for this suite. @ 04/28/24 16:08:42.44
â€¢ [0.067 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should support CronJob API operations [Conformance]
k8s.io/kubernetes/test/e2e/apps/cronjob.go:324
  STEP: Creating a kubernetes client @ 04/28/24 16:08:42.444
  Apr 28 16:08:42.444: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename cronjob @ 04/28/24 16:08:42.445
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:42.452
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:42.454
  STEP: Creating a cronjob @ 04/28/24 16:08:42.456
  STEP: creating @ 04/28/24 16:08:42.456
  STEP: getting @ 04/28/24 16:08:42.459
  STEP: listing @ 04/28/24 16:08:42.46
  STEP: watching @ 04/28/24 16:08:42.462
  Apr 28 16:08:42.462: INFO: starting watch
  STEP: cluster-wide listing @ 04/28/24 16:08:42.463
  STEP: cluster-wide watching @ 04/28/24 16:08:42.464
  Apr 28 16:08:42.464: INFO: starting watch
  STEP: patching @ 04/28/24 16:08:42.465
  STEP: updating @ 04/28/24 16:08:42.47
  Apr 28 16:08:42.475: INFO: waiting for watch events with expected annotations
  Apr 28 16:08:42.475: INFO: saw patched and updated annotations
  STEP: patching /status @ 04/28/24 16:08:42.475
  STEP: updating /status @ 04/28/24 16:08:42.479
  STEP: get /status @ 04/28/24 16:08:42.483
  STEP: deleting @ 04/28/24 16:08:42.485
  STEP: deleting a collection @ 04/28/24 16:08:42.496
  Apr 28 16:08:42.501: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-6938" for this suite. @ 04/28/24 16:08:42.502
â€¢ [0.061 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]
k8s.io/kubernetes/test/e2e/auth/certificates.go:200
  STEP: Creating a kubernetes client @ 04/28/24 16:08:42.506
  Apr 28 16:08:42.506: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename certificates @ 04/28/24 16:08:42.507
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:42.513
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:42.515
  STEP: getting /apis @ 04/28/24 16:08:43.004
  STEP: getting /apis/certificates.k8s.io @ 04/28/24 16:08:43.007
  STEP: getting /apis/certificates.k8s.io/v1 @ 04/28/24 16:08:43.008
  STEP: creating @ 04/28/24 16:08:43.009
  STEP: getting @ 04/28/24 16:08:43.021
  STEP: listing @ 04/28/24 16:08:43.023
  STEP: watching @ 04/28/24 16:08:43.025
  Apr 28 16:08:43.025: INFO: starting watch
  STEP: patching @ 04/28/24 16:08:43.026
  STEP: updating @ 04/28/24 16:08:43.03
  Apr 28 16:08:43.034: INFO: waiting for watch events with expected annotations
  Apr 28 16:08:43.034: INFO: saw patched and updated annotations
  STEP: getting /approval @ 04/28/24 16:08:43.034
  STEP: patching /approval @ 04/28/24 16:08:43.036
  STEP: updating /approval @ 04/28/24 16:08:43.04
  STEP: getting /status @ 04/28/24 16:08:43.044
  STEP: patching /status @ 04/28/24 16:08:43.046
  STEP: updating /status @ 04/28/24 16:08:43.052
  STEP: deleting @ 04/28/24 16:08:43.058
  STEP: deleting a collection @ 04/28/24 16:08:43.064
  Apr 28 16:08:43.073: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "certificates-4874" for this suite. @ 04/28/24 16:08:43.075
â€¢ [0.573 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:185
  STEP: Creating a kubernetes client @ 04/28/24 16:08:43.079
  Apr 28 16:08:43.079: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename deployment @ 04/28/24 16:08:43.08
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:43.088
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:43.089
  STEP: creating a Deployment @ 04/28/24 16:08:43.093
  STEP: waiting for Deployment to be created @ 04/28/24 16:08:43.096
  STEP: waiting for all Replicas to be Ready @ 04/28/24 16:08:43.098
  Apr 28 16:08:43.099: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 28 16:08:43.099: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 28 16:08:43.105: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 28 16:08:43.105: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 28 16:08:43.115: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 28 16:08:43.115: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 28 16:08:43.127: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 28 16:08:43.127: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Apr 28 16:08:43.734: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1 and labels map[test-deployment-static:true]
  Apr 28 16:08:43.734: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1 and labels map[test-deployment-static:true]
  Apr 28 16:08:44.376: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2 and labels map[test-deployment-static:true]
  STEP: patching the Deployment @ 04/28/24 16:08:44.376
  Apr 28 16:08:44.383: INFO: observed event type ADDED
  STEP: waiting for Replicas to scale @ 04/28/24 16:08:44.384
  Apr 28 16:08:44.385: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0
  Apr 28 16:08:44.385: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0
  Apr 28 16:08:44.385: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0
  Apr 28 16:08:44.385: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0
  Apr 28 16:08:44.385: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0
  Apr 28 16:08:44.385: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0
  Apr 28 16:08:44.385: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0
  Apr 28 16:08:44.385: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 0
  Apr 28 16:08:44.385: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1
  Apr 28 16:08:44.385: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1
  Apr 28 16:08:44.385: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2
  Apr 28 16:08:44.385: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2
  Apr 28 16:08:44.385: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2
  Apr 28 16:08:44.385: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2
  Apr 28 16:08:44.392: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2
  Apr 28 16:08:44.392: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2
  Apr 28 16:08:44.401: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2
  Apr 28 16:08:44.401: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2
  Apr 28 16:08:44.411: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1
  Apr 28 16:08:44.411: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1
  Apr 28 16:08:44.418: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1
  Apr 28 16:08:44.418: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1
  Apr 28 16:08:45.401: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2
  Apr 28 16:08:45.401: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2
  Apr 28 16:08:45.417: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1
  STEP: listing Deployments @ 04/28/24 16:08:45.418
  Apr 28 16:08:45.420: INFO: Found test-deployment with labels: map[test-deployment:patched test-deployment-static:true]
  STEP: updating the Deployment @ 04/28/24 16:08:45.42
  Apr 28 16:08:45.430: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1
  STEP: fetching the DeploymentStatus @ 04/28/24 16:08:45.43
  Apr 28 16:08:45.435: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 28 16:08:45.439: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 28 16:08:45.453: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 28 16:08:45.464: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 28 16:08:45.470: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 28 16:08:46.419: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 28 16:08:46.436: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 28 16:08:46.445: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Apr 28 16:08:47.795: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 3 and labels map[test-deployment:updated test-deployment-static:true]
  STEP: patching the DeploymentStatus @ 04/28/24 16:08:47.811
  STEP: fetching the DeploymentStatus @ 04/28/24 16:08:47.818
  Apr 28 16:08:47.821: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1
  Apr 28 16:08:47.821: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1
  Apr 28 16:08:47.821: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1
  Apr 28 16:08:47.821: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1
  Apr 28 16:08:47.821: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 1
  Apr 28 16:08:47.822: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2
  Apr 28 16:08:47.822: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2
  Apr 28 16:08:47.822: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 2
  Apr 28 16:08:47.822: INFO: observed Deployment test-deployment in namespace deployment-3219 with ReadyReplicas 3
  STEP: deleting the Deployment @ 04/28/24 16:08:47.822
  Apr 28 16:08:47.828: INFO: observed event type MODIFIED
  Apr 28 16:08:47.828: INFO: observed event type MODIFIED
  Apr 28 16:08:47.828: INFO: observed event type MODIFIED
  Apr 28 16:08:47.828: INFO: observed event type MODIFIED
  Apr 28 16:08:47.828: INFO: observed event type MODIFIED
  Apr 28 16:08:47.828: INFO: observed event type MODIFIED
  Apr 28 16:08:47.828: INFO: observed event type MODIFIED
  Apr 28 16:08:47.828: INFO: observed event type MODIFIED
  Apr 28 16:08:47.828: INFO: observed event type MODIFIED
  Apr 28 16:08:47.828: INFO: observed event type MODIFIED
  Apr 28 16:08:47.828: INFO: observed event type MODIFIED
  Apr 28 16:08:47.828: INFO: observed event type MODIFIED
  Apr 28 16:08:47.830: INFO: Log out all the ReplicaSets if there is no deployment created
  Apr 28 16:08:47.833: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-3219" for this suite. @ 04/28/24 16:08:47.835
â€¢ [4.761 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-instrumentation] Events should delete a collection of events [Conformance]
k8s.io/kubernetes/test/e2e/instrumentation/core_events.go:175
  STEP: Creating a kubernetes client @ 04/28/24 16:08:47.841
  Apr 28 16:08:47.841: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename events @ 04/28/24 16:08:47.842
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:47.851
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:47.853
  STEP: Create set of events @ 04/28/24 16:08:47.855
  Apr 28 16:08:47.858: INFO: created test-event-1
  Apr 28 16:08:47.862: INFO: created test-event-2
  Apr 28 16:08:47.865: INFO: created test-event-3
  STEP: get a list of Events with a label in the current namespace @ 04/28/24 16:08:47.865
  STEP: delete collection of events @ 04/28/24 16:08:47.866
  Apr 28 16:08:47.866: INFO: requesting DeleteCollection of events
  STEP: check that the list of events matches the requested quantity @ 04/28/24 16:08:47.875
  Apr 28 16:08:47.875: INFO: requesting list of events to confirm quantity
  Apr 28 16:08:47.876: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-6340" for this suite. @ 04/28/24 16:08:47.878
â€¢ [0.040 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance]
k8s.io/kubernetes/test/e2e/apps/disruption.go:141
  STEP: Creating a kubernetes client @ 04/28/24 16:08:47.882
  Apr 28 16:08:47.882: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename disruption @ 04/28/24 16:08:47.882
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:47.89
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:47.893
  STEP: Waiting for the pdb to be processed @ 04/28/24 16:08:47.898
  STEP: Waiting for all pods to be running @ 04/28/24 16:08:49.918
  Apr 28 16:08:49.920: INFO: running pods: 0 < 3
  Apr 28 16:08:51.926: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-4573" for this suite. @ 04/28/24 16:08:51.928
â€¢ [4.051 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:262
  STEP: Creating a kubernetes client @ 04/28/24 16:08:51.933
  Apr 28 16:08:51.933: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:08:51.934
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:51.943
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:51.945
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 16:08:51.947
  STEP: Saw pod success @ 04/28/24 16:08:53.957
  Apr 28 16:08:53.959: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-6f395c68-2836-49e8-a130-bea61a925dcf container client-container: <nil>
  STEP: delete the pod @ 04/28/24 16:08:53.965
  Apr 28 16:08:53.976: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4277" for this suite. @ 04/28/24 16:08:53.978
â€¢ [2.050 seconds]
------------------------------
SSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]
k8s.io/kubernetes/test/e2e/scheduling/preemption.go:130
  STEP: Creating a kubernetes client @ 04/28/24 16:08:53.983
  Apr 28 16:08:53.983: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename sched-preemption @ 04/28/24 16:08:53.984
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:08:53.992
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:08:53.994
  Apr 28 16:08:54.005: INFO: Waiting up to 1m0s for all nodes to be ready
  Apr 28 16:09:54.018: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Create pods that use 4/5 of node resources. @ 04/28/24 16:09:54.02
  Apr 28 16:09:54.032: INFO: Created pod: pod0-0-sched-preemption-low-priority
  Apr 28 16:09:54.037: INFO: Created pod: pod0-1-sched-preemption-medium-priority
  Apr 28 16:09:54.049: INFO: Created pod: pod1-0-sched-preemption-medium-priority
  Apr 28 16:09:54.054: INFO: Created pod: pod1-1-sched-preemption-medium-priority
  STEP: Wait for pods to be scheduled. @ 04/28/24 16:09:54.054
  STEP: Run a high priority pod that has same requirements as that of lower priority pod @ 04/28/24 16:09:56.065
  Apr 28 16:10:00.085: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-9110" for this suite. @ 04/28/24 16:10:00.103
â€¢ [66.123 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:105
  STEP: Creating a kubernetes client @ 04/28/24 16:10:00.106
  Apr 28 16:10:00.106: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename deployment @ 04/28/24 16:10:00.107
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:10:00.115
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:10:00.117
  Apr 28 16:10:00.119: INFO: Creating replica set "test-rolling-update-controller" (going to be adopted)
  Apr 28 16:10:00.123: INFO: Pod name sample-pod: Found 0 pods out of 1
  Apr 28 16:10:05.128: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 04/28/24 16:10:05.128
  Apr 28 16:10:05.128: INFO: Creating deployment "test-rolling-update-deployment"
  Apr 28 16:10:05.132: INFO: Ensuring deployment "test-rolling-update-deployment" gets the next revision from the one the adopted replica set "test-rolling-update-controller" has
  Apr 28 16:10:05.135: INFO: new replicaset for deployment "test-rolling-update-deployment" is yet to be created
  Apr 28 16:10:07.140: INFO: Ensuring status for deployment "test-rolling-update-deployment" is the expected
  Apr 28 16:10:07.142: INFO: Ensuring deployment "test-rolling-update-deployment" has one old replica set (the one it adopted)
  Apr 28 16:10:07.147: INFO: Deployment "test-rolling-update-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-rolling-update-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3751",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "5bbfb190-85b5-44cc-a7f9-35f7c86bc9c2",
      ResourceVersion: (string) (len=5) "11320",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849917405,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=10) "sample-pod"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305833"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917405,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=637) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 61  67 6e 68 6f 73 74 5c 22  |me\":\"agnhost\"|
              00000160  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000170  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000180  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000190  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              000001a0  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              000001b0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001c0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              000001d0  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              000001e0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001f0  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000200  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              00000210  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              00000220  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              00000230  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000270  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917406,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=10) "sample-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=10) "sample-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917405,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917405,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917406,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917405,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=83) "ReplicaSet \"test-rolling-update-deployment-7ddb77f68b\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Apr 28 16:10:07.150: INFO: New ReplicaSet "test-rolling-update-deployment-7ddb77f68b" of Deployment "test-rolling-update-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=41) "test-rolling-update-deployment-7ddb77f68b",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3751",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "10c7757c-91d2-4722-bc1d-8fe5faf91b20",
      ResourceVersion: (string) (len=5) "11304",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849917405,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "7ddb77f68b"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305833"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=30) "test-rolling-update-deployment",
          UID: (types.UID) (len=36) "5bbfb190-85b5-44cc-a7f9-35f7c86bc9c2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917405,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 35 62 62 66 62 31  39 30 2d 38 35 62 35 2d  |\"5bbfb190-85b5-|
              00000120  34 34 63 63 2d 61 37 66  39 2d 33 35 66 37 63 38  |44cc-a7f9-35f7c8|
              00000130  36 62 63 39 63 32 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |6bc9c2\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917406,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=10) "sample-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "7ddb77f68b"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=10) "sample-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "7ddb77f68b"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 28 16:10:07.151: INFO: All old ReplicaSets of Deployment "test-rolling-update-deployment":
  Apr 28 16:10:07.151: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-rolling-update-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3751",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "1357bedc-2356-45cf-a24a-0d1e45807c8e",
      ResourceVersion: (string) (len=5) "11318",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849917400,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305832"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=30) "test-rolling-update-deployment",
          UID: (types.UID) (len=36) "5bbfb190-85b5-44cc-a7f9-35f7c86bc9c2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917400,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=533) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  2c 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |,"f:labels":{"."|
              00000060  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              00000070  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              00000080  73 70 65 63 22 3a 7b 22  66 3a 73 65 6c 65 63 74  |spec":{"f:select|
              00000090  6f 72 22 3a 7b 7d 2c 22  66 3a 74 65 6d 70 6c 61  |or":{},"f:templa|
              000000a0  74 65 22 3a 7b 22 66 3a  6d 65 74 61 64 61 74 61  |te":{"f:metadata|
              000000b0  22 3a 7b 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |":{"f:labels":{"|
              000000c0  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              000000d0  7d 2c 22 66 3a 70 6f 64  22 3a 7b 7d 7d 7d 2c 22  |},"f:pod":{}}},"|
              000000e0  66 3a 73 70 65 63 22 3a  7b 22 66 3a 63 6f 6e 74  |f:spec":{"f:cont|
              000000f0  61 69 6e 65 72 73 22 3a  7b 22 6b 3a 7b 5c 22 6e  |ainers":{"k:{\"n|
              00000100  61 6d 65 5c 22 3a 5c 22  68 74 74 70 64 5c 22 7d  |ame\":\"httpd\"}|
              00000110  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |":{".":{},"f:ima|
              00000120  67 65 22 3a 7b 7d 2c 22  66 3a 69 6d 61 67 65 50  |ge":{},"f:imageP|
              00000130  75 6c 6c 50 6f 6c 69 63  79 22 3a 7b 7d 2c 22 66  |ullPolicy":{},"f|
              00000140  3a 6e 61 6d 65 22 3a 7b  7d 2c 22 66 3a 72 65 73  |:name":{},"f:res|
              00000150  6f 75 72 63 65 73 22 3a  7b 7d 2c 22 66 3a 74 65  |ources":{},"f:te|
              00000160  72 6d 69 6e 61 74 69 6f  6e 4d 65 73 73 61 67 65  |rminationMessage|
              00000170  50 61 74 68 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |Path":{},"f:term|
              00000180  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 6f  |inationMessagePo|
              00000190  6c 69 63 79 22 3a 7b 7d  7d 7d 2c 22 66 3a 64 6e  |licy":{}}},"f:dn|
              000001a0  73 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 72  |sPolicy":{},"f:r|
              000001b0  65 73 74 61 72 74 50 6f  6c 69 63 79 22 3a 7b 7d  |estartPolicy":{}|
              000001c0  2c 22 66 3a 73 63 68 65  64 75 6c 65 72 4e 61 6d  |,"f:schedulerNam|
              000001d0  65 22 3a 7b 7d 2c 22 66  3a 73 65 63 75 72 69 74  |e":{},"f:securit|
              000001e0  79 43 6f 6e 74 65 78 74  22 3a 7b 7d 2c 22 66 3a  |yContext":{},"f:|
              000001f0  74 65 72 6d 69 6e 61 74  69 6f 6e 47 72 61 63 65  |terminationGrace|
              00000200  50 65 72 69 6f 64 53 65  63 6f 6e 64 73 22 3a 7b  |PeriodSeconds":{|
              00000210  7d 7d 7d 7d 7d                                    |}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917406,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=242) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 66 3a 64 65 70 6c 6f  79 6d 65 6e 74 2e 6b 75  |"f:deployment.ku|
              00000030  62 65 72 6e 65 74 65 73  2e 69 6f 2f 64 65 73 69  |bernetes.io/desi|
              00000040  72 65 64 2d 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |red-replicas":{}|
              00000050  2c 22 66 3a 64 65 70 6c  6f 79 6d 65 6e 74 2e 6b  |,"f:deployment.k|
              00000060  75 62 65 72 6e 65 74 65  73 2e 69 6f 2f 6d 61 78  |ubernetes.io/max|
              00000070  2d 72 65 70 6c 69 63 61  73 22 3a 7b 7d 7d 2c 22  |-replicas":{}},"|
              00000080  66 3a 6f 77 6e 65 72 52  65 66 65 72 65 6e 63 65  |f:ownerReference|
              00000090  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 6b 3a 7b 5c  |s":{".":{},"k:{\|
              000000a0  22 75 69 64 5c 22 3a 5c  22 35 62 62 66 62 31 39  |"uid\":\"5bbfb19|
              000000b0  30 2d 38 35 62 35 2d 34  34 63 63 2d 61 37 66 39  |0-85b5-44cc-a7f9|
              000000c0  2d 33 35 66 37 63 38 36  62 63 39 63 32 5c 22 7d  |-35f7c86bc9c2\"}|
              000000d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000000e0  7b 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |{"f:replicas":{}|
              000000f0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917406,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=10) "sample-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=10) "sample-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 28 16:10:07.154: INFO: Pod "test-rolling-update-deployment-7ddb77f68b-6t9kb" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=47) "test-rolling-update-deployment-7ddb77f68b-6t9kb",
      GenerateName: (string) (len=42) "test-rolling-update-deployment-7ddb77f68b-",
      Namespace: (string) (len=15) "deployment-3751",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "9cb1d0bc-3c26-4cc4-b9b5-6a566fdcc24c",
      ResourceVersion: (string) (len=5) "11303",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849917405,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "7ddb77f68b"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=41) "test-rolling-update-deployment-7ddb77f68b",
          UID: (types.UID) (len=36) "10c7757c-91d2-4722-bc1d-8fe5faf91b20",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917405,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 30  63 37 37 35 37 63 2d 39  |d\":\"10c7757c-9|
              00000090  31 64 32 2d 34 37 32 32  2d 62 63 31 64 2d 38 66  |1d2-4722-bc1d-8f|
              000000a0  65 35 66 61 66 39 31 62  32 30 5c 22 7d 22 3a 7b  |e5faf91b20\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917406,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 32 34 34 2e 31  2e 31 39 32 5c 22 7d 22  |10.244.1.192\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-r4fzj",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-r4fzj",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917405,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917406,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917406,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849917405,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.244.1.192",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.244.1.192"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849917405,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=7) "agnhost",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849917405,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
          ImageID: (string) (len=129) "docker-pullable://registry.k8s.io/e2e-test-images/agnhost@sha256:cc249acbd34692826b2b335335615e060fdb3c0bca4954507aa3a1d1194de253",
          ContainerID: (string) (len=73) "docker://91ec3d9f2fcb36da77ff3558b741b6f6f6ef5fca8877142a46cd7cc8b177c303",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 16:10:07.155: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-3751" for this suite. @ 04/28/24 16:10:07.158
â€¢ [7.055 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/downwardapi.go:91
  STEP: Creating a kubernetes client @ 04/28/24 16:10:07.162
  Apr 28 16:10:07.162: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 16:10:07.162
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:10:07.172
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:10:07.173
  STEP: Creating a pod to test downward api env vars @ 04/28/24 16:10:07.175
  STEP: Saw pod success @ 04/28/24 16:10:11.189
  Apr 28 16:10:11.191: INFO: Trying to get logs from node k8sconformance-m02 pod downward-api-e374638d-a976-4400-ba35-cac4c7046bd9 container dapi-container: <nil>
  STEP: delete the pod @ 04/28/24 16:10:11.197
  Apr 28 16:10:11.207: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-3116" for this suite. @ 04/28/24 16:10:11.209
â€¢ [4.051 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:750
  STEP: Creating a kubernetes client @ 04/28/24 16:10:11.214
  Apr 28 16:10:11.214: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename statefulset @ 04/28/24 16:10:11.214
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:10:11.222
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:10:11.224
  STEP: Creating service test in namespace statefulset-484 @ 04/28/24 16:10:11.226
  STEP: Creating stateful set ss in namespace statefulset-484 @ 04/28/24 16:10:11.229
  STEP: Waiting until all stateful set ss replicas will be running in namespace statefulset-484 @ 04/28/24 16:10:11.233
  Apr 28 16:10:11.235: INFO: Found 0 stateful pods, waiting for 1
  Apr 28 16:10:21.238: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Confirming that stateful set scale up will not halt with unhealthy stateful pod @ 04/28/24 16:10:21.238
  Apr 28 16:10:21.240: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-484 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 28 16:10:21.342: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 28 16:10:21.342: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 28 16:10:21.342: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 28 16:10:21.345: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=true
  Apr 28 16:10:31.348: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Apr 28 16:10:31.348: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Apr 28 16:10:31.357: INFO: POD   NODE                PHASE    GRACE  CONDITIONS
  Apr 28 16:10:31.357: INFO: ss-0  k8sconformance-m02  Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:11 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:21 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:21 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:11 +0000 UTC  }]
  Apr 28 16:10:31.357: INFO: 
  Apr 28 16:10:31.357: INFO: StatefulSet ss has not reached scale 3, at 1
  Apr 28 16:10:32.360: INFO: Verifying statefulset ss doesn't scale past 3 for another 8.997985104s
  Apr 28 16:10:33.363: INFO: Verifying statefulset ss doesn't scale past 3 for another 7.995131776s
  Apr 28 16:10:34.366: INFO: Verifying statefulset ss doesn't scale past 3 for another 6.992236764s
  Apr 28 16:10:35.369: INFO: Verifying statefulset ss doesn't scale past 3 for another 5.988695593s
  Apr 28 16:10:36.373: INFO: Verifying statefulset ss doesn't scale past 3 for another 4.985204339s
  Apr 28 16:10:37.376: INFO: Verifying statefulset ss doesn't scale past 3 for another 3.982103193s
  Apr 28 16:10:38.379: INFO: Verifying statefulset ss doesn't scale past 3 for another 2.978458139s
  Apr 28 16:10:39.382: INFO: Verifying statefulset ss doesn't scale past 3 for another 1.975607612s
  Apr 28 16:10:40.385: INFO: Verifying statefulset ss doesn't scale past 3 for another 972.758982ms
  STEP: Scaling up stateful set ss to 3 replicas and waiting until all of them will be running in namespace statefulset-484 @ 04/28/24 16:10:41.386
  Apr 28 16:10:41.389: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-484 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 28 16:10:41.483: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Apr 28 16:10:41.483: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 28 16:10:41.483: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 28 16:10:41.483: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-484 exec ss-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 28 16:10:41.581: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\nmv: can't rename '/tmp/index.html': No such file or directory\n+ true\n"
  Apr 28 16:10:41.581: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 28 16:10:41.581: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 28 16:10:41.581: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-484 exec ss-2 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 28 16:10:41.679: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\nmv: can't rename '/tmp/index.html': No such file or directory\n+ true\n"
  Apr 28 16:10:41.679: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 28 16:10:41.679: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-2: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 28 16:10:41.682: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Apr 28 16:10:41.682: INFO: Waiting for pod ss-1 to enter Running - Ready=true, currently Running - Ready=true
  Apr 28 16:10:41.682: INFO: Waiting for pod ss-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Scale down will not halt with unhealthy stateful pod @ 04/28/24 16:10:41.682
  Apr 28 16:10:41.684: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-484 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 28 16:10:41.782: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 28 16:10:41.782: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 28 16:10:41.782: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 28 16:10:41.782: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-484 exec ss-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 28 16:10:41.880: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 28 16:10:41.880: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 28 16:10:41.880: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 28 16:10:41.880: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-484 exec ss-2 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 28 16:10:41.977: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 28 16:10:41.977: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 28 16:10:41.977: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-2: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 28 16:10:41.977: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Apr 28 16:10:41.979: INFO: Waiting for statefulset status.readyReplicas to become 0, currently 3
  Apr 28 16:10:51.985: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Apr 28 16:10:51.985: INFO: Waiting for pod ss-1 to enter Running - Ready=false, currently Running - Ready=false
  Apr 28 16:10:51.985: INFO: Waiting for pod ss-2 to enter Running - Ready=false, currently Running - Ready=false
  Apr 28 16:10:51.993: INFO: POD   NODE                PHASE    GRACE  CONDITIONS
  Apr 28 16:10:51.993: INFO: ss-0  k8sconformance-m02  Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:11 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:42 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:42 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:11 +0000 UTC  }]
  Apr 28 16:10:51.993: INFO: ss-1  k8sconformance-m02  Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:31 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:42 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:42 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:31 +0000 UTC  }]
  Apr 28 16:10:51.993: INFO: ss-2  k8sconformance      Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:31 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:42 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:42 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-04-28 16:10:31 +0000 UTC  }]
  Apr 28 16:10:51.993: INFO: 
  Apr 28 16:10:51.993: INFO: StatefulSet ss has not reached scale 0, at 3
  Apr 28 16:10:52.995: INFO: Verifying statefulset ss doesn't scale past 0 for another 8.997557389s
  Apr 28 16:10:53.998: INFO: Verifying statefulset ss doesn't scale past 0 for another 7.994672863s
  Apr 28 16:10:55.000: INFO: Verifying statefulset ss doesn't scale past 0 for another 6.992408152s
  Apr 28 16:10:56.003: INFO: Verifying statefulset ss doesn't scale past 0 for another 5.990057625s
  Apr 28 16:10:57.006: INFO: Verifying statefulset ss doesn't scale past 0 for another 4.986927806s
  Apr 28 16:10:58.008: INFO: Verifying statefulset ss doesn't scale past 0 for another 3.984711401s
  Apr 28 16:10:59.011: INFO: Verifying statefulset ss doesn't scale past 0 for another 2.982018681s
  Apr 28 16:11:00.014: INFO: Verifying statefulset ss doesn't scale past 0 for another 1.978714519s
  Apr 28 16:11:01.016: INFO: Verifying statefulset ss doesn't scale past 0 for another 976.194965ms
  STEP: Scaling down stateful set ss to 0 replicas and waiting until none of pods will run in namespacestatefulset-484 @ 04/28/24 16:11:02.016
  Apr 28 16:11:02.019: INFO: Scaling statefulset ss to 0
  Apr 28 16:11:02.026: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 28 16:11:02.027: INFO: Deleting all statefulset in ns statefulset-484
  Apr 28 16:11:02.028: INFO: Scaling statefulset ss to 0
  Apr 28 16:11:02.034: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 28 16:11:02.035: INFO: Deleting statefulset ss
  Apr 28 16:11:02.041: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-484" for this suite. @ 04/28/24 16:11:02.043
â€¢ [50.833 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/custom_resource_definition.go:85
  STEP: Creating a kubernetes client @ 04/28/24 16:11:02.047
  Apr 28 16:11:02.047: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename custom-resource-definition @ 04/28/24 16:11:02.048
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:11:02.057
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:11:02.058
  Apr 28 16:11:02.060: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:11:08.183: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-2944" for this suite. @ 04/28/24 16:11:08.185
â€¢ [6.142 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance]
k8s.io/kubernetes/test/e2e/auth/service_accounts.go:740
  STEP: Creating a kubernetes client @ 04/28/24 16:11:08.189
  Apr 28 16:11:08.189: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename svcaccounts @ 04/28/24 16:11:08.19
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:11:08.197
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:11:08.199
  Apr 28 16:11:08.203: INFO: Got root ca configmap in namespace "svcaccounts-9957"
  Apr 28 16:11:08.206: INFO: Deleted root ca configmap in namespace "svcaccounts-9957"
  STEP: waiting for a new root ca configmap created @ 04/28/24 16:11:08.707
  Apr 28 16:11:08.709: INFO: Recreated root ca configmap in namespace "svcaccounts-9957"
  Apr 28 16:11:08.713: INFO: Updated root ca configmap in namespace "svcaccounts-9957"
  STEP: waiting for the root ca configmap reconciled @ 04/28/24 16:11:09.213
  Apr 28 16:11:09.216: INFO: Reconciled root ca configmap in namespace "svcaccounts-9957"
  Apr 28 16:11:09.216: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-9957" for this suite. @ 04/28/24 16:11:09.218
â€¢ [1.032 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtime.go:216
  STEP: Creating a kubernetes client @ 04/28/24 16:11:09.221
  Apr 28 16:11:09.222: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-runtime @ 04/28/24 16:11:09.222
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:11:09.23
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:11:09.231
  STEP: create the container @ 04/28/24 16:11:09.233
  W0428 16:11:09.238918      22 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Failed @ 04/28/24 16:11:09.239
  STEP: get the container status @ 04/28/24 16:11:12.249
  STEP: the container should be terminated @ 04/28/24 16:11:12.251
  STEP: the termination message should be set @ 04/28/24 16:11:12.251
  Apr 28 16:11:12.251: INFO: Expected: &{DONE} to match Container's Termination Message: DONE --
  STEP: delete the container @ 04/28/24 16:11:12.251
  Apr 28 16:11:12.258: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-2504" for this suite. @ 04/28/24 16:11:12.262
â€¢ [3.044 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown and duplicate fields of a typed object [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/field_validation.go:64
  STEP: Creating a kubernetes client @ 04/28/24 16:11:12.266
  Apr 28 16:11:12.266: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename field-validation @ 04/28/24 16:11:12.267
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:11:12.274
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:11:12.276
  STEP: apply creating a deployment @ 04/28/24 16:11:12.278
  Apr 28 16:11:12.279: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-4817" for this suite. @ 04/28/24 16:11:12.286
â€¢ [0.024 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/watch.go:142
  STEP: Creating a kubernetes client @ 04/28/24 16:11:12.29
  Apr 28 16:11:12.290: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename watch @ 04/28/24 16:11:12.29
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:11:12.297
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:11:12.299
  STEP: creating a new configmap @ 04/28/24 16:11:12.301
  STEP: modifying the configmap once @ 04/28/24 16:11:12.303
  STEP: modifying the configmap a second time @ 04/28/24 16:11:12.307
  STEP: deleting the configmap @ 04/28/24 16:11:12.311
  STEP: creating a watch on configmaps from the resource version returned by the first update @ 04/28/24 16:11:12.314
  STEP: Expecting to observe notifications for all changes to the configmap after the first update @ 04/28/24 16:11:12.315
  Apr 28 16:11:12.315: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-resource-version  watch-8132  27fde3f0-4c1d-415f-ada9-6c5c788bb197 11711 0 2024-04-28 16:11:12 +0000 UTC <nil> <nil> map[watch-this-configmap:from-resource-version] map[] [] [] [{e2e.test Update v1 2024-04-28 16:11:12 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:11:12.316: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-resource-version  watch-8132  27fde3f0-4c1d-415f-ada9-6c5c788bb197 11712 0 2024-04-28 16:11:12 +0000 UTC <nil> <nil> map[watch-this-configmap:from-resource-version] map[] [] [] [{e2e.test Update v1 2024-04-28 16:11:12 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:11:12.316: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-8132" for this suite. @ 04/28/24 16:11:12.318
â€¢ [0.032 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply changes to a namespace status [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/namespace.go:303
  STEP: Creating a kubernetes client @ 04/28/24 16:11:12.323
  Apr 28 16:11:12.323: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename namespaces @ 04/28/24 16:11:12.323
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:11:12.33
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:11:12.331
  STEP: Read namespace status @ 04/28/24 16:11:12.333
  Apr 28 16:11:12.335: INFO: Status: v1.NamespaceStatus{Phase:"Active", Conditions:[]v1.NamespaceCondition(nil)}
  STEP: Patch namespace status @ 04/28/24 16:11:12.335
  Apr 28 16:11:12.339: INFO: Status.Condition: v1.NamespaceCondition{Type:"StatusPatch", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Patched by an e2e test"}
  STEP: Update namespace status @ 04/28/24 16:11:12.339
  Apr 28 16:11:12.344: INFO: Status.Condition: v1.NamespaceCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Updated by an e2e test"}
  Apr 28 16:11:12.344: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-439" for this suite. @ 04/28/24 16:11:12.348
â€¢ [0.028 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]
k8s.io/kubernetes/test/e2e/apps/job.go:513
  STEP: Creating a kubernetes client @ 04/28/24 16:11:12.351
  Apr 28 16:11:12.351: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename job @ 04/28/24 16:11:12.352
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:11:12.359
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:11:12.361
  STEP: Creating a job @ 04/28/24 16:11:12.363
  STEP: Ensuring active pods == parallelism @ 04/28/24 16:11:12.367
  STEP: Orphaning one of the Job's Pods @ 04/28/24 16:11:14.37
  Apr 28 16:11:14.881: INFO: Successfully updated pod "adopt-release-d5wm9"
  STEP: Checking that the Job readopts the Pod @ 04/28/24 16:11:14.881
  STEP: Removing the labels from the Job's Pod @ 04/28/24 16:11:16.886
  Apr 28 16:11:17.446: INFO: Successfully updated pod "adopt-release-d5wm9"
  STEP: Checking that the Job releases the Pod @ 04/28/24 16:11:17.446
  Apr 28 16:11:19.451: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-5430" for this suite. @ 04/28/24 16:11:19.453
â€¢ [7.105 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:125
  STEP: Creating a kubernetes client @ 04/28/24 16:11:19.456
  Apr 28 16:11:19.456: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename secrets @ 04/28/24 16:11:19.457
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:11:19.466
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:11:19.468
  STEP: Creating secret with name secret-test-51becfe3-8953-4327-afe2-29b5b3ca46c9 @ 04/28/24 16:11:19.469
  STEP: Creating a pod to test consume secrets @ 04/28/24 16:11:19.472
  STEP: Saw pod success @ 04/28/24 16:11:23.485
  Apr 28 16:11:23.487: INFO: Trying to get logs from node k8sconformance-m02 pod pod-secrets-c77017be-f8ed-4550-a78d-fe3fa44aec7a container secret-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 16:11:23.493
  Apr 28 16:11:23.503: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-2133" for this suite. @ 04/28/24 16:11:23.505
â€¢ [4.053 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] CSIStorageCapacity  should support CSIStorageCapacities API operations [Conformance]
k8s.io/kubernetes/test/e2e/storage/csistoragecapacity.go:49
  STEP: Creating a kubernetes client @ 04/28/24 16:11:23.51
  Apr 28 16:11:23.510: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename csistoragecapacity @ 04/28/24 16:11:23.511
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:11:23.518
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:11:23.52
  STEP: getting /apis @ 04/28/24 16:11:23.522
  STEP: getting /apis/storage.k8s.io @ 04/28/24 16:11:23.525
  STEP: getting /apis/storage.k8s.io/v1 @ 04/28/24 16:11:23.525
  STEP: creating @ 04/28/24 16:11:23.526
  STEP: watching @ 04/28/24 16:11:23.536
  Apr 28 16:11:23.536: INFO: starting watch
  STEP: getting @ 04/28/24 16:11:23.54
  STEP: listing in namespace @ 04/28/24 16:11:23.542
  STEP: listing across namespaces @ 04/28/24 16:11:23.543
  STEP: patching @ 04/28/24 16:11:23.544
  STEP: updating @ 04/28/24 16:11:23.547
  Apr 28 16:11:23.550: INFO: waiting for watch events with expected annotations in namespace
  Apr 28 16:11:23.550: INFO: waiting for watch events with expected annotations across namespace
  STEP: deleting @ 04/28/24 16:11:23.55
  STEP: deleting a collection @ 04/28/24 16:11:23.555
  Apr 28 16:11:23.563: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csistoragecapacity-9420" for this suite. @ 04/28/24 16:11:23.565
â€¢ [0.058 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/kubelet.go:110
  STEP: Creating a kubernetes client @ 04/28/24 16:11:23.569
  Apr 28 16:11:23.569: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubelet-test @ 04/28/24 16:11:23.57
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:11:23.578
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:11:23.58
  Apr 28 16:11:27.593: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-181" for this suite. @ 04/28/24 16:11:27.595
â€¢ [4.030 seconds]
------------------------------
[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:227
  STEP: Creating a kubernetes client @ 04/28/24 16:11:27.599
  Apr 28 16:11:27.599: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename pods @ 04/28/24 16:11:27.6
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:11:27.608
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:11:27.61
  STEP: creating the pod @ 04/28/24 16:11:27.612
  STEP: setting up watch @ 04/28/24 16:11:27.612
  STEP: submitting the pod to kubernetes @ 04/28/24 16:11:27.714
  STEP: verifying the pod is in kubernetes @ 04/28/24 16:11:27.722
  STEP: verifying pod creation was observed @ 04/28/24 16:11:27.724
  STEP: deleting the pod gracefully @ 04/28/24 16:11:29.731
  STEP: verifying pod deletion was observed @ 04/28/24 16:11:29.735
  Apr 28 16:11:30.733: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-7654" for this suite. @ 04/28/24 16:11:30.735
â€¢ [3.139 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:320
  STEP: Creating a kubernetes client @ 04/28/24 16:11:30.739
  Apr 28 16:11:30.739: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename statefulset @ 04/28/24 16:11:30.74
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:11:30.746
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:11:30.748
  STEP: Creating service test in namespace statefulset-843 @ 04/28/24 16:11:30.75
  STEP: Creating a new StatefulSet @ 04/28/24 16:11:30.753
  Apr 28 16:11:30.758: INFO: Found 0 stateful pods, waiting for 3
  Apr 28 16:11:40.761: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Apr 28 16:11:40.761: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Apr 28 16:11:40.761: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  Apr 28 16:11:40.766: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-843 exec ss2-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 28 16:11:40.869: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 28 16:11:40.869: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 28 16:11:40.869: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss2-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  STEP: Updating StatefulSet template: update image from registry.k8s.io/e2e-test-images/httpd:2.4.38-4 to registry.k8s.io/e2e-test-images/httpd:2.4.39-4 @ 04/28/24 16:11:50.878
  Apr 28 16:11:50.895: INFO: Updating stateful set ss2
  STEP: Creating a new revision @ 04/28/24 16:11:50.895
  STEP: Updating Pods in reverse ordinal order @ 04/28/24 16:12:00.904
  Apr 28 16:12:00.906: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-843 exec ss2-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 28 16:12:01.008: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Apr 28 16:12:01.008: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 28 16:12:01.008: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss2-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 28 16:12:11.020: INFO: Waiting for StatefulSet statefulset-843/ss2 to complete update
  Apr 28 16:12:11.020: INFO: Waiting for Pod statefulset-843/ss2-0 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  STEP: Rolling back to a previous revision @ 04/28/24 16:12:21.026
  Apr 28 16:12:21.026: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-843 exec ss2-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 28 16:12:21.125: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 28 16:12:21.125: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 28 16:12:21.125: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss2-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 28 16:12:31.152: INFO: Updating stateful set ss2
  STEP: Rolling back update in reverse ordinal order @ 04/28/24 16:12:41.162
  Apr 28 16:12:41.164: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-843 exec ss2-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 28 16:12:41.261: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Apr 28 16:12:41.261: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 28 16:12:41.261: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss2-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 28 16:12:51.275: INFO: Deleting all statefulset in ns statefulset-843
  Apr 28 16:12:51.276: INFO: Scaling statefulset ss2 to 0
  Apr 28 16:13:01.286: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 28 16:13:01.288: INFO: Deleting statefulset ss2
  Apr 28 16:13:01.294: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-843" for this suite. @ 04/28/24 16:13:01.297
â€¢ [90.561 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]
k8s.io/kubernetes/test/e2e/common/node/init_container.go:178
  STEP: Creating a kubernetes client @ 04/28/24 16:13:01.301
  Apr 28 16:13:01.301: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename init-container @ 04/28/24 16:13:01.301
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:13:01.309
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:13:01.311
  STEP: creating the pod @ 04/28/24 16:13:01.313
  Apr 28 16:13:01.313: INFO: PodSpec: initContainers in spec.initContainers
  Apr 28 16:13:05.541: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-1305" for this suite. @ 04/28/24 16:13:05.543
â€¢ [4.246 seconds]
------------------------------
[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]
k8s.io/kubernetes/test/e2e/instrumentation/events.go:98
  STEP: Creating a kubernetes client @ 04/28/24 16:13:05.546
  Apr 28 16:13:05.546: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename events @ 04/28/24 16:13:05.547
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:13:05.554
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:13:05.556
  STEP: creating a test event @ 04/28/24 16:13:05.558
  STEP: listing events in all namespaces @ 04/28/24 16:13:05.562
  STEP: listing events in test namespace @ 04/28/24 16:13:05.566
  STEP: listing events with field selection filtering on source @ 04/28/24 16:13:05.568
  STEP: listing events with field selection filtering on reportingController @ 04/28/24 16:13:05.57
  STEP: getting the test event @ 04/28/24 16:13:05.571
  STEP: patching the test event @ 04/28/24 16:13:05.572
  STEP: getting the test event @ 04/28/24 16:13:05.578
  STEP: updating the test event @ 04/28/24 16:13:05.58
  STEP: getting the test event @ 04/28/24 16:13:05.584
  STEP: deleting the test event @ 04/28/24 16:13:05.585
  STEP: listing events in all namespaces @ 04/28/24 16:13:05.588
  STEP: listing events in test namespace @ 04/28/24 16:13:05.592
  Apr 28 16:13:05.593: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-3210" for this suite. @ 04/28/24 16:13:05.595
â€¢ [0.052 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]
k8s.io/kubernetes/test/e2e/common/node/configmap.go:169
  STEP: Creating a kubernetes client @ 04/28/24 16:13:05.599
  Apr 28 16:13:05.599: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename configmap @ 04/28/24 16:13:05.6
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:13:05.606
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:13:05.608
  STEP: creating a ConfigMap @ 04/28/24 16:13:05.61
  STEP: fetching the ConfigMap @ 04/28/24 16:13:05.612
  STEP: patching the ConfigMap @ 04/28/24 16:13:05.614
  STEP: listing all ConfigMaps in all namespaces with a label selector @ 04/28/24 16:13:05.617
  STEP: deleting the ConfigMap by collection with a label selector @ 04/28/24 16:13:05.618
  STEP: listing all ConfigMaps in test namespace @ 04/28/24 16:13:05.622
  Apr 28 16:13:05.623: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-35" for this suite. @ 04/28/24 16:13:05.625
â€¢ [0.029 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_secret.go:215
  STEP: Creating a kubernetes client @ 04/28/24 16:13:05.628
  Apr 28 16:13:05.628: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:13:05.629
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:13:05.636
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:13:05.638
  STEP: Creating secret with name s-test-opt-del-fb6e5a14-bbd8-4dd2-bcd6-7c266c2b3b99 @ 04/28/24 16:13:05.641
  STEP: Creating secret with name s-test-opt-upd-e5cc0e5c-3b9c-420b-8554-ace91b99dbc4 @ 04/28/24 16:13:05.644
  STEP: Creating the pod @ 04/28/24 16:13:05.646
  STEP: Deleting secret s-test-opt-del-fb6e5a14-bbd8-4dd2-bcd6-7c266c2b3b99 @ 04/28/24 16:13:07.682
  STEP: Updating secret s-test-opt-upd-e5cc0e5c-3b9c-420b-8554-ace91b99dbc4 @ 04/28/24 16:13:07.687
  STEP: Creating secret with name s-test-opt-create-e70885be-73c0-4219-b2b4-7ce40d2796f7 @ 04/28/24 16:13:07.69
  STEP: waiting to observe update in volume @ 04/28/24 16:13:07.692
  Apr 28 16:14:11.957: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4557" for this suite. @ 04/28/24 16:14:11.96
â€¢ [66.336 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]
k8s.io/kubernetes/test/e2e/auth/service_accounts.go:647
  STEP: Creating a kubernetes client @ 04/28/24 16:14:11.964
  Apr 28 16:14:11.964: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename svcaccounts @ 04/28/24 16:14:11.965
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:14:11.974
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:14:11.977
  STEP: creating a ServiceAccount @ 04/28/24 16:14:11.979
  STEP: watching for the ServiceAccount to be added @ 04/28/24 16:14:11.983
  STEP: patching the ServiceAccount @ 04/28/24 16:14:11.984
  STEP: finding ServiceAccount in list of all ServiceAccounts (by LabelSelector) @ 04/28/24 16:14:11.988
  STEP: deleting the ServiceAccount @ 04/28/24 16:14:11.99
  Apr 28 16:14:11.996: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-8005" for this suite. @ 04/28/24 16:14:11.998
â€¢ [0.037 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-instrumentation] Events should manage the lifecycle of an event [Conformance]
k8s.io/kubernetes/test/e2e/instrumentation/core_events.go:57
  STEP: Creating a kubernetes client @ 04/28/24 16:14:12.003
  Apr 28 16:14:12.003: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename events @ 04/28/24 16:14:12.004
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:14:12.013
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:14:12.015
  STEP: creating a test event @ 04/28/24 16:14:12.017
  STEP: listing all events in all namespaces @ 04/28/24 16:14:12.022
  STEP: patching the test event @ 04/28/24 16:14:12.025
  STEP: fetching the test event @ 04/28/24 16:14:12.029
  STEP: updating the test event @ 04/28/24 16:14:12.031
  STEP: getting the test event @ 04/28/24 16:14:12.036
  STEP: deleting the test event @ 04/28/24 16:14:12.038
  STEP: listing all events in all namespaces @ 04/28/24 16:14:12.041
  Apr 28 16:14:12.045: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-5408" for this suite. @ 04/28/24 16:14:12.047
â€¢ [0.048 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-network] Services should serve multiport endpoints from pods  [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:846
  STEP: Creating a kubernetes client @ 04/28/24 16:14:12.051
  Apr 28 16:14:12.051: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 16:14:12.051
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:14:12.06
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:14:12.062
  STEP: creating service multi-endpoint-test in namespace services-9170 @ 04/28/24 16:14:12.064
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-9170 to expose endpoints map[] @ 04/28/24 16:14:12.072
  Apr 28 16:14:12.075: INFO: Failed go get Endpoints object: endpoints "multi-endpoint-test" not found
  Apr 28 16:14:13.082: INFO: successfully validated that service multi-endpoint-test in namespace services-9170 exposes endpoints map[]
  STEP: Creating pod pod1 in namespace services-9170 @ 04/28/24 16:14:13.082
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-9170 to expose endpoints map[pod1:[100]] @ 04/28/24 16:14:15.097
  Apr 28 16:14:15.103: INFO: successfully validated that service multi-endpoint-test in namespace services-9170 exposes endpoints map[pod1:[100]]
  STEP: Creating pod pod2 in namespace services-9170 @ 04/28/24 16:14:15.103
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-9170 to expose endpoints map[pod1:[100] pod2:[101]] @ 04/28/24 16:14:17.145
  Apr 28 16:14:17.155: INFO: successfully validated that service multi-endpoint-test in namespace services-9170 exposes endpoints map[pod1:[100] pod2:[101]]
  STEP: Checking if the Service forwards traffic to pods @ 04/28/24 16:14:17.155
  Apr 28 16:14:17.155: INFO: Creating new exec pod
  Apr 28 16:14:20.164: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-9170 exec execpodrxrc8 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 multi-endpoint-test 80'
  Apr 28 16:14:20.267: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 multi-endpoint-test 80\nConnection to multi-endpoint-test 80 port [tcp/http] succeeded!\n"
  Apr 28 16:14:20.267: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 16:14:20.267: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-9170 exec execpodrxrc8 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.107.64.15 80'
  Apr 28 16:14:20.365: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.107.64.15 80\nConnection to 10.107.64.15 80 port [tcp/http] succeeded!\n"
  Apr 28 16:14:20.365: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 16:14:20.366: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-9170 exec execpodrxrc8 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 multi-endpoint-test 81'
  Apr 28 16:14:20.465: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 multi-endpoint-test 81\nConnection to multi-endpoint-test 81 port [tcp/*] succeeded!\n"
  Apr 28 16:14:20.465: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 16:14:20.465: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-9170 exec execpodrxrc8 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.107.64.15 81'
  Apr 28 16:14:20.564: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.107.64.15 81\nConnection to 10.107.64.15 81 port [tcp/*] succeeded!\n"
  Apr 28 16:14:20.564: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod1 in namespace services-9170 @ 04/28/24 16:14:20.564
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-9170 to expose endpoints map[pod2:[101]] @ 04/28/24 16:14:20.574
  Apr 28 16:14:20.581: INFO: successfully validated that service multi-endpoint-test in namespace services-9170 exposes endpoints map[pod2:[101]]
  STEP: Deleting pod pod2 in namespace services-9170 @ 04/28/24 16:14:20.581
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-9170 to expose endpoints map[] @ 04/28/24 16:14:20.59
  Apr 28 16:14:21.602: INFO: successfully validated that service multi-endpoint-test in namespace services-9170 exposes endpoints map[]
  Apr 28 16:14:21.602: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-9170" for this suite. @ 04/28/24 16:14:21.616
â€¢ [9.571 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]
k8s.io/kubernetes/test/e2e/common/node/init_container.go:256
  STEP: Creating a kubernetes client @ 04/28/24 16:14:21.623
  Apr 28 16:14:21.623: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename init-container @ 04/28/24 16:14:21.624
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:14:21.631
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:14:21.633
  STEP: creating the pod @ 04/28/24 16:14:21.635
  Apr 28 16:14:21.635: INFO: PodSpec: initContainers in spec.initContainers
  Apr 28 16:14:24.980: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-1586" for this suite. @ 04/28/24 16:14:24.983
â€¢ [3.365 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]
k8s.io/kubernetes/test/e2e/scheduling/predicates.go:705
  STEP: Creating a kubernetes client @ 04/28/24 16:14:24.988
  Apr 28 16:14:24.988: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename sched-pred @ 04/28/24 16:14:24.989
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:14:24.997
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:14:24.999
  Apr 28 16:14:25.001: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Apr 28 16:14:25.005: INFO: Waiting for terminating namespaces to be deleted...
  Apr 28 16:14:25.007: INFO: 
  Logging pods the apiserver thinks is on node k8sconformance before test
  Apr 28 16:14:25.010: INFO: coredns-5dd5756b68-4wfsw from kube-system started at 2024-04-28 15:26:56 +0000 UTC (1 container statuses recorded)
  Apr 28 16:14:25.010: INFO: 	Container coredns ready: true, restart count 1
  Apr 28 16:14:25.010: INFO: etcd-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 16:14:25.010: INFO: 	Container etcd ready: true, restart count 0
  Apr 28 16:14:25.010: INFO: kindnet-6nsws from kube-system started at 2024-04-28 15:26:55 +0000 UTC (1 container statuses recorded)
  Apr 28 16:14:25.010: INFO: 	Container kindnet-cni ready: true, restart count 0
  Apr 28 16:14:25.010: INFO: kube-apiserver-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 16:14:25.010: INFO: 	Container kube-apiserver ready: true, restart count 0
  Apr 28 16:14:25.010: INFO: kube-controller-manager-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 16:14:25.010: INFO: 	Container kube-controller-manager ready: true, restart count 0
  Apr 28 16:14:25.010: INFO: kube-proxy-kjs4b from kube-system started at 2024-04-28 15:26:55 +0000 UTC (1 container statuses recorded)
  Apr 28 16:14:25.010: INFO: 	Container kube-proxy ready: true, restart count 0
  Apr 28 16:14:25.010: INFO: kube-scheduler-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 16:14:25.010: INFO: 	Container kube-scheduler ready: true, restart count 0
  Apr 28 16:14:25.010: INFO: storage-provisioner from kube-system started at 2024-04-28 15:26:56 +0000 UTC (1 container statuses recorded)
  Apr 28 16:14:25.010: INFO: 	Container storage-provisioner ready: true, restart count 0
  Apr 28 16:14:25.010: INFO: sonobuoy-systemd-logs-daemon-set-5db54bb871f24159-clq66 from sonobuoy started at 2024-04-28 15:27:37 +0000 UTC (2 container statuses recorded)
  Apr 28 16:14:25.010: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 28 16:14:25.010: INFO: 	Container systemd-logs ready: true, restart count 0
  Apr 28 16:14:25.010: INFO: 
  Logging pods the apiserver thinks is on node k8sconformance-m02 before test
  Apr 28 16:14:25.013: INFO: pod-init-ddf947db-3d22-4f96-b5b1-ab38df85b1ff from init-container-1586 started at 2024-04-28 16:14:21 +0000 UTC (1 container statuses recorded)
  Apr 28 16:14:25.013: INFO: 	Container run1 ready: true, restart count 0
  Apr 28 16:14:25.013: INFO: kindnet-9gwxd from kube-system started at 2024-04-28 16:04:26 +0000 UTC (1 container statuses recorded)
  Apr 28 16:14:25.013: INFO: 	Container kindnet-cni ready: true, restart count 0
  Apr 28 16:14:25.013: INFO: kube-proxy-7t84r from kube-system started at 2024-04-28 15:27:27 +0000 UTC (1 container statuses recorded)
  Apr 28 16:14:25.013: INFO: 	Container kube-proxy ready: true, restart count 0
  Apr 28 16:14:25.013: INFO: execpodrxrc8 from services-9170 started at 2024-04-28 16:14:17 +0000 UTC (1 container statuses recorded)
  Apr 28 16:14:25.013: INFO: 	Container agnhost-container ready: true, restart count 0
  Apr 28 16:14:25.013: INFO: sonobuoy from sonobuoy started at 2024-04-28 15:27:33 +0000 UTC (1 container statuses recorded)
  Apr 28 16:14:25.013: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Apr 28 16:14:25.013: INFO: sonobuoy-e2e-job-b135035bf3ea46b2 from sonobuoy started at 2024-04-28 15:27:37 +0000 UTC (2 container statuses recorded)
  Apr 28 16:14:25.013: INFO: 	Container e2e ready: true, restart count 0
  Apr 28 16:14:25.013: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 28 16:14:25.013: INFO: sonobuoy-systemd-logs-daemon-set-5db54bb871f24159-pn7kn from sonobuoy started at 2024-04-28 15:27:37 +0000 UTC (2 container statuses recorded)
  Apr 28 16:14:25.013: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 28 16:14:25.013: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 04/28/24 16:14:25.013
  STEP: Explicitly delete pod here to free the resource it takes. @ 04/28/24 16:14:27.029
  STEP: Trying to apply a random label on the found node. @ 04/28/24 16:14:27.041
  STEP: verifying the node has the label kubernetes.io/e2e-242a23f6-2dd8-422a-8d89-0be9515499d5 95 @ 04/28/24 16:14:27.049
  STEP: Trying to create a pod(pod4) with hostport 54322 and hostIP 0.0.0.0(empty string here) and expect scheduled @ 04/28/24 16:14:27.051
  STEP: Trying to create another pod(pod5) with hostport 54322 but hostIP 192.168.49.3 on the node which pod4 resides and expect not scheduled @ 04/28/24 16:14:29.061
  STEP: removing the label kubernetes.io/e2e-242a23f6-2dd8-422a-8d89-0be9515499d5 off the node k8sconformance-m02 @ 04/28/24 16:19:29.067
  STEP: verifying the node doesn't have the label kubernetes.io/e2e-242a23f6-2dd8-422a-8d89-0be9515499d5 @ 04/28/24 16:19:29.077
  Apr 28 16:19:29.080: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-476" for this suite. @ 04/28/24 16:19:29.082
â€¢ [304.097 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]
k8s.io/kubernetes/test/e2e/apps/rc.go:94
  STEP: Creating a kubernetes client @ 04/28/24 16:19:29.086
  Apr 28 16:19:29.086: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename replication-controller @ 04/28/24 16:19:29.087
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:19:29.102
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:19:29.104
  STEP: Given a Pod with a 'name' label pod-adoption is created @ 04/28/24 16:19:29.106
  STEP: When a replication controller with a matching selector is created @ 04/28/24 16:19:31.117
  STEP: Then the orphan pod is adopted @ 04/28/24 16:19:31.122
  Apr 28 16:19:32.126: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-5363" for this suite. @ 04/28/24 16:19:32.128
â€¢ [3.046 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:451
  STEP: Creating a kubernetes client @ 04/28/24 16:19:32.132
  Apr 28 16:19:32.132: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename resourcequota @ 04/28/24 16:19:32.133
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:19:32.142
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:19:32.144
  STEP: Counting existing ResourceQuota @ 04/28/24 16:19:32.146
  STEP: Creating a ResourceQuota @ 04/28/24 16:19:37.148
  STEP: Ensuring resource quota status is calculated @ 04/28/24 16:19:37.151
  STEP: Creating a ReplicaSet @ 04/28/24 16:19:39.154
  STEP: Ensuring resource quota status captures replicaset creation @ 04/28/24 16:19:39.162
  STEP: Deleting a ReplicaSet @ 04/28/24 16:19:41.165
  STEP: Ensuring resource quota status released usage @ 04/28/24 16:19:41.169
  Apr 28 16:19:43.172: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-5333" for this suite. @ 04/28/24 16:19:43.175
â€¢ [11.046 seconds]
------------------------------
S
------------------------------
[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]
k8s.io/kubernetes/test/e2e/apps/daemon_set.go:385
  STEP: Creating a kubernetes client @ 04/28/24 16:19:43.179
  Apr 28 16:19:43.179: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename daemonsets @ 04/28/24 16:19:43.179
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:19:43.187
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:19:43.189
  Apr 28 16:19:43.199: INFO: Creating simple daemon set daemon-set
  STEP: Check that daemon pods launch on every node of the cluster. @ 04/28/24 16:19:43.203
  Apr 28 16:19:43.206: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 16:19:43.206: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 16:19:44.211: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 28 16:19:44.212: INFO: Node k8sconformance-m02 is running 0 daemon pod, expected 1
  Apr 28 16:19:45.212: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Apr 28 16:19:45.212: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Update daemon pods image. @ 04/28/24 16:19:45.218
  STEP: Check that daemon pods images are updated. @ 04/28/24 16:19:45.223
  Apr 28 16:19:45.226: INFO: Wrong image for pod: daemon-set-82f4r. Expected: registry.k8s.io/e2e-test-images/agnhost:2.47, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Apr 28 16:19:45.227: INFO: Wrong image for pod: daemon-set-rgcn9. Expected: registry.k8s.io/e2e-test-images/agnhost:2.47, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Apr 28 16:19:46.231: INFO: Wrong image for pod: daemon-set-rgcn9. Expected: registry.k8s.io/e2e-test-images/agnhost:2.47, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Apr 28 16:19:47.231: INFO: Pod daemon-set-bbc9d is not available
  Apr 28 16:19:47.231: INFO: Wrong image for pod: daemon-set-rgcn9. Expected: registry.k8s.io/e2e-test-images/agnhost:2.47, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Apr 28 16:19:48.231: INFO: Pod daemon-set-qbm9j is not available
  STEP: Check that daemon pods are still running on every node of the cluster. @ 04/28/24 16:19:48.24
  Apr 28 16:19:48.245: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 28 16:19:48.245: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 16:19:49.250: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Apr 28 16:19:49.250: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 04/28/24 16:19:49.257
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-5015, will wait for the garbage collector to delete the pods @ 04/28/24 16:19:49.257
  Apr 28 16:19:49.313: INFO: Deleting DaemonSet.extensions daemon-set took: 3.890703ms
  Apr 28 16:19:49.413: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.167821ms
  Apr 28 16:19:51.215: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 16:19:51.215: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Apr 28 16:19:51.216: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"13227"},"items":null}

  Apr 28 16:19:51.218: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"13227"},"items":null}

  Apr 28 16:19:51.223: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-5015" for this suite. @ 04/28/24 16:19:51.224
â€¢ [8.049 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for ExternalName services [Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:329
  STEP: Creating a kubernetes client @ 04/28/24 16:19:51.228
  Apr 28 16:19:51.228: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename dns @ 04/28/24 16:19:51.229
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:19:51.235
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:19:51.237
  STEP: Creating a test externalName service @ 04/28/24 16:19:51.241
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-2521.svc.cluster.local CNAME > /results/wheezy_udp@dns-test-service-3.dns-2521.svc.cluster.local; sleep 1; done
   @ 04/28/24 16:19:51.243
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-2521.svc.cluster.local CNAME > /results/jessie_udp@dns-test-service-3.dns-2521.svc.cluster.local; sleep 1; done
   @ 04/28/24 16:19:51.243
  STEP: creating a pod to probe DNS @ 04/28/24 16:19:51.243
  STEP: submitting the pod to kubernetes @ 04/28/24 16:19:51.244
  STEP: retrieving the pod @ 04/28/24 16:19:53.253
  STEP: looking for the results for each expected name from probers @ 04/28/24 16:19:53.255
  Apr 28 16:19:53.259: INFO: DNS probes using dns-test-47f75b7d-8431-46de-8d92-c36fb9fd6df6 succeeded

  STEP: changing the externalName to bar.example.com @ 04/28/24 16:19:53.259
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-2521.svc.cluster.local CNAME > /results/wheezy_udp@dns-test-service-3.dns-2521.svc.cluster.local; sleep 1; done
   @ 04/28/24 16:19:53.263
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-2521.svc.cluster.local CNAME > /results/jessie_udp@dns-test-service-3.dns-2521.svc.cluster.local; sleep 1; done
   @ 04/28/24 16:19:53.263
  STEP: creating a second pod to probe DNS @ 04/28/24 16:19:53.263
  STEP: submitting the pod to kubernetes @ 04/28/24 16:19:53.263
  STEP: retrieving the pod @ 04/28/24 16:19:55.273
  STEP: looking for the results for each expected name from probers @ 04/28/24 16:19:55.275
  Apr 28 16:19:55.277: INFO: File wheezy_udp@dns-test-service-3.dns-2521.svc.cluster.local from pod  dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Apr 28 16:19:55.279: INFO: File jessie_udp@dns-test-service-3.dns-2521.svc.cluster.local from pod  dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Apr 28 16:19:55.279: INFO: Lookups using dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 failed for: [wheezy_udp@dns-test-service-3.dns-2521.svc.cluster.local jessie_udp@dns-test-service-3.dns-2521.svc.cluster.local]

  Apr 28 16:19:55.290: INFO: Pod client logs for webserver: 
  Apr 28 16:19:55.295: INFO: Pod client logs for querier: 
  Apr 28 16:19:55.300: INFO: Pod client logs for jessie-querier: 
  Apr 28 16:20:00.305: INFO: File wheezy_udp@dns-test-service-3.dns-2521.svc.cluster.local from pod  dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Apr 28 16:20:00.307: INFO: File jessie_udp@dns-test-service-3.dns-2521.svc.cluster.local from pod  dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Apr 28 16:20:00.307: INFO: Lookups using dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 failed for: [wheezy_udp@dns-test-service-3.dns-2521.svc.cluster.local jessie_udp@dns-test-service-3.dns-2521.svc.cluster.local]

  Apr 28 16:20:00.313: INFO: Pod client logs for webserver: 
  Apr 28 16:20:00.318: INFO: Pod client logs for querier: 
  Apr 28 16:20:00.323: INFO: Pod client logs for jessie-querier: 
  Apr 28 16:20:05.303: INFO: File wheezy_udp@dns-test-service-3.dns-2521.svc.cluster.local from pod  dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Apr 28 16:20:05.305: INFO: File jessie_udp@dns-test-service-3.dns-2521.svc.cluster.local from pod  dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Apr 28 16:20:05.305: INFO: Lookups using dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 failed for: [wheezy_udp@dns-test-service-3.dns-2521.svc.cluster.local jessie_udp@dns-test-service-3.dns-2521.svc.cluster.local]

  Apr 28 16:20:05.312: INFO: Pod client logs for webserver: 
  Apr 28 16:20:05.317: INFO: Pod client logs for querier: 
  Apr 28 16:20:05.322: INFO: Pod client logs for jessie-querier: 
  Apr 28 16:20:10.306: INFO: File wheezy_udp@dns-test-service-3.dns-2521.svc.cluster.local from pod  dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Apr 28 16:20:10.308: INFO: File jessie_udp@dns-test-service-3.dns-2521.svc.cluster.local from pod  dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Apr 28 16:20:10.308: INFO: Lookups using dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 failed for: [wheezy_udp@dns-test-service-3.dns-2521.svc.cluster.local jessie_udp@dns-test-service-3.dns-2521.svc.cluster.local]

  Apr 28 16:20:10.313: INFO: Pod client logs for webserver: 
  Apr 28 16:20:10.318: INFO: Pod client logs for querier: 
  Apr 28 16:20:10.322: INFO: Pod client logs for jessie-querier: 
  Apr 28 16:20:15.305: INFO: File wheezy_udp@dns-test-service-3.dns-2521.svc.cluster.local from pod  dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Apr 28 16:20:15.307: INFO: File jessie_udp@dns-test-service-3.dns-2521.svc.cluster.local from pod  dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Apr 28 16:20:15.307: INFO: Lookups using dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 failed for: [wheezy_udp@dns-test-service-3.dns-2521.svc.cluster.local jessie_udp@dns-test-service-3.dns-2521.svc.cluster.local]

  Apr 28 16:20:15.312: INFO: Pod client logs for webserver: 
  Apr 28 16:20:15.317: INFO: Pod client logs for querier: 
  Apr 28 16:20:15.323: INFO: Pod client logs for jessie-querier: 
  Apr 28 16:20:20.306: INFO: File wheezy_udp@dns-test-service-3.dns-2521.svc.cluster.local from pod  dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Apr 28 16:20:20.308: INFO: File jessie_udp@dns-test-service-3.dns-2521.svc.cluster.local from pod  dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Apr 28 16:20:20.308: INFO: Lookups using dns-2521/dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 failed for: [wheezy_udp@dns-test-service-3.dns-2521.svc.cluster.local jessie_udp@dns-test-service-3.dns-2521.svc.cluster.local]

  Apr 28 16:20:20.313: INFO: Pod client logs for webserver: 
  Apr 28 16:20:20.318: INFO: Pod client logs for querier: 
  Apr 28 16:20:20.322: INFO: Pod client logs for jessie-querier: 
  Apr 28 16:20:25.308: INFO: DNS probes using dns-test-dbd99b8e-3504-40f8-8919-4feb099aa876 succeeded

  STEP: changing the service to type=ClusterIP @ 04/28/24 16:20:25.308
  W0428 16:20:25.319562      22 warnings.go:70] spec.externalName is ignored when spec.type is not "ExternalName"
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-2521.svc.cluster.local A > /results/wheezy_udp@dns-test-service-3.dns-2521.svc.cluster.local; sleep 1; done
   @ 04/28/24 16:20:25.319
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-2521.svc.cluster.local A > /results/jessie_udp@dns-test-service-3.dns-2521.svc.cluster.local; sleep 1; done
   @ 04/28/24 16:20:25.319
  STEP: creating a third pod to probe DNS @ 04/28/24 16:20:25.319
  STEP: submitting the pod to kubernetes @ 04/28/24 16:20:25.321
  STEP: retrieving the pod @ 04/28/24 16:20:27.333
  STEP: looking for the results for each expected name from probers @ 04/28/24 16:20:27.334
  Apr 28 16:20:27.339: INFO: DNS probes using dns-test-731c8565-d75b-4127-be21-4ac055fbfcd3 succeeded

  Apr 28 16:20:27.339: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 04/28/24 16:20:27.341
  STEP: deleting the pod @ 04/28/24 16:20:27.349
  STEP: deleting the pod @ 04/28/24 16:20:27.359
  STEP: deleting the test externalName service @ 04/28/24 16:20:27.371
  STEP: Destroying namespace "dns-2521" for this suite. @ 04/28/24 16:20:27.384
â€¢ [36.161 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/namespace.go:243
  STEP: Creating a kubernetes client @ 04/28/24 16:20:27.39
  Apr 28 16:20:27.390: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename namespaces @ 04/28/24 16:20:27.391
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:20:27.4
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:20:27.402
  STEP: Creating a test namespace @ 04/28/24 16:20:27.405
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:20:27.442
  STEP: Creating a pod in the namespace @ 04/28/24 16:20:27.444
  STEP: Waiting for the pod to have running status @ 04/28/24 16:20:27.452
  STEP: Deleting the namespace @ 04/28/24 16:20:29.458
  STEP: Waiting for the namespace to be removed. @ 04/28/24 16:20:29.464
  STEP: Recreating the namespace @ 04/28/24 16:20:40.466
  STEP: Verifying there are no pods in the namespace @ 04/28/24 16:20:40.474
  Apr 28 16:20:40.475: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-4045" for this suite. @ 04/28/24 16:20:40.477
  STEP: Destroying namespace "nsdeletetest-2906" for this suite. @ 04/28/24 16:20:40.481
  Apr 28 16:20:40.483: INFO: Namespace nsdeletetest-2906 was already deleted
  STEP: Destroying namespace "nsdeletetest-9677" for this suite. @ 04/28/24 16:20:40.483
â€¢ [13.095 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:1416
  STEP: Creating a kubernetes client @ 04/28/24 16:20:40.486
  Apr 28 16:20:40.486: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 16:20:40.487
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:20:40.495
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:20:40.496
  STEP: creating a service externalname-service with the type=ExternalName in namespace services-4393 @ 04/28/24 16:20:40.498
  STEP: changing the ExternalName service to type=ClusterIP @ 04/28/24 16:20:40.501
  STEP: creating replication controller externalname-service in namespace services-4393 @ 04/28/24 16:20:40.509
  I0428 16:20:40.512956      22 runners.go:197] Created replication controller with name: externalname-service, namespace: services-4393, replica count: 2
  I0428 16:20:43.565885      22 runners.go:197] externalname-service Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 28 16:20:43.565: INFO: Creating new exec pod
  Apr 28 16:20:46.574: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-4393 exec execpodzgj62 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Apr 28 16:20:46.672: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Apr 28 16:20:46.672: INFO: stdout: "externalname-service-lvvpc"
  Apr 28 16:20:46.672: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-4393 exec execpodzgj62 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.106.100.62 80'
  Apr 28 16:20:46.767: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.106.100.62 80\nConnection to 10.106.100.62 80 port [tcp/http] succeeded!\n"
  Apr 28 16:20:46.767: INFO: stdout: "externalname-service-lvvpc"
  Apr 28 16:20:46.767: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Apr 28 16:20:46.770: INFO: Cleaning up the ExternalName to ClusterIP test service
  STEP: Destroying namespace "services-4393" for this suite. @ 04/28/24 16:20:46.781
â€¢ [6.299 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl logs logs should be able to retrieve and filter logs  [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/logs.go:114
  STEP: Creating a kubernetes client @ 04/28/24 16:20:46.792
  Apr 28 16:20:46.792: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl-logs @ 04/28/24 16:20:46.793
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:20:46.805
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:20:46.807
  STEP: creating an pod @ 04/28/24 16:20:46.808
  Apr 28 16:20:46.809: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-logs-2596 run logs-generator --image=registry.k8s.io/e2e-test-images/agnhost:2.47 --restart=Never --pod-running-timeout=2m0s -- logs-generator --log-lines-total 100 --run-duration 20s'
  Apr 28 16:20:46.866: INFO: stderr: ""
  Apr 28 16:20:46.866: INFO: stdout: "pod/logs-generator created\n"
  STEP: Waiting for log generator to start. @ 04/28/24 16:20:46.866
  Apr 28 16:20:46.866: INFO: Waiting up to 5m0s for 1 pods to be running and ready, or succeeded: [logs-generator]
  Apr 28 16:20:48.872: INFO: Wanted all 1 pods to be running and ready, or succeeded. Result: true. Pods: [logs-generator]
  STEP: checking for a matching strings @ 04/28/24 16:20:48.872
  Apr 28 16:20:48.873: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-logs-2596 logs logs-generator logs-generator'
  Apr 28 16:20:48.931: INFO: stderr: ""
  Apr 28 16:20:48.931: INFO: stdout: "I0428 16:20:47.423781       1 logs_generator.go:76] 0 PUT /api/v1/namespaces/kube-system/pods/bxqn 357\nI0428 16:20:47.624171       1 logs_generator.go:76] 1 POST /api/v1/namespaces/default/pods/glwb 268\nI0428 16:20:47.824571       1 logs_generator.go:76] 2 PUT /api/v1/namespaces/kube-system/pods/kk8 443\nI0428 16:20:48.023816       1 logs_generator.go:76] 3 PUT /api/v1/namespaces/default/pods/7ll 483\nI0428 16:20:48.224199       1 logs_generator.go:76] 4 PUT /api/v1/namespaces/default/pods/hvsj 425\nI0428 16:20:48.424541       1 logs_generator.go:76] 5 GET /api/v1/namespaces/default/pods/tdx 503\nI0428 16:20:48.623822       1 logs_generator.go:76] 6 POST /api/v1/namespaces/kube-system/pods/ktn 421\nI0428 16:20:48.824219       1 logs_generator.go:76] 7 GET /api/v1/namespaces/default/pods/9b4 259\n"
  STEP: limiting log lines @ 04/28/24 16:20:48.931
  Apr 28 16:20:48.931: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-logs-2596 logs logs-generator logs-generator --tail=1'
  Apr 28 16:20:48.989: INFO: stderr: ""
  Apr 28 16:20:48.989: INFO: stdout: "I0428 16:20:48.824219       1 logs_generator.go:76] 7 GET /api/v1/namespaces/default/pods/9b4 259\n"
  Apr 28 16:20:48.989: INFO: got output "I0428 16:20:48.824219       1 logs_generator.go:76] 7 GET /api/v1/namespaces/default/pods/9b4 259\n"
  STEP: limiting log bytes @ 04/28/24 16:20:48.989
  Apr 28 16:20:48.989: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-logs-2596 logs logs-generator logs-generator --limit-bytes=1'
  Apr 28 16:20:49.049: INFO: stderr: ""
  Apr 28 16:20:49.049: INFO: stdout: "I"
  Apr 28 16:20:49.049: INFO: got output "I"
  STEP: exposing timestamps @ 04/28/24 16:20:49.049
  Apr 28 16:20:49.049: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-logs-2596 logs logs-generator logs-generator --tail=1 --timestamps'
  Apr 28 16:20:49.110: INFO: stderr: ""
  Apr 28 16:20:49.110: INFO: stdout: "2024-04-28T16:20:49.024704628Z I0428 16:20:49.024562       1 logs_generator.go:76] 8 GET /api/v1/namespaces/default/pods/kjg9 292\n"
  Apr 28 16:20:49.110: INFO: got output "2024-04-28T16:20:49.024704628Z I0428 16:20:49.024562       1 logs_generator.go:76] 8 GET /api/v1/namespaces/default/pods/kjg9 292\n"
  STEP: restricting to a time range @ 04/28/24 16:20:49.11
  Apr 28 16:20:51.610: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-logs-2596 logs logs-generator logs-generator --since=1s'
  Apr 28 16:20:51.670: INFO: stderr: ""
  Apr 28 16:20:51.670: INFO: stdout: "I0428 16:20:50.824164       1 logs_generator.go:76] 17 GET /api/v1/namespaces/default/pods/d7q 422\nI0428 16:20:51.024501       1 logs_generator.go:76] 18 PUT /api/v1/namespaces/kube-system/pods/96nq 286\nI0428 16:20:51.224835       1 logs_generator.go:76] 19 PUT /api/v1/namespaces/kube-system/pods/f2hx 478\nI0428 16:20:51.424151       1 logs_generator.go:76] 20 PUT /api/v1/namespaces/default/pods/bpp 245\nI0428 16:20:51.624540       1 logs_generator.go:76] 21 POST /api/v1/namespaces/default/pods/dn9v 380\n"
  Apr 28 16:20:51.670: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-logs-2596 logs logs-generator logs-generator --since=24h'
  Apr 28 16:20:51.733: INFO: stderr: ""
  Apr 28 16:20:51.733: INFO: stdout: "I0428 16:20:47.423781       1 logs_generator.go:76] 0 PUT /api/v1/namespaces/kube-system/pods/bxqn 357\nI0428 16:20:47.624171       1 logs_generator.go:76] 1 POST /api/v1/namespaces/default/pods/glwb 268\nI0428 16:20:47.824571       1 logs_generator.go:76] 2 PUT /api/v1/namespaces/kube-system/pods/kk8 443\nI0428 16:20:48.023816       1 logs_generator.go:76] 3 PUT /api/v1/namespaces/default/pods/7ll 483\nI0428 16:20:48.224199       1 logs_generator.go:76] 4 PUT /api/v1/namespaces/default/pods/hvsj 425\nI0428 16:20:48.424541       1 logs_generator.go:76] 5 GET /api/v1/namespaces/default/pods/tdx 503\nI0428 16:20:48.623822       1 logs_generator.go:76] 6 POST /api/v1/namespaces/kube-system/pods/ktn 421\nI0428 16:20:48.824219       1 logs_generator.go:76] 7 GET /api/v1/namespaces/default/pods/9b4 259\nI0428 16:20:49.024562       1 logs_generator.go:76] 8 GET /api/v1/namespaces/default/pods/kjg9 292\nI0428 16:20:49.223821       1 logs_generator.go:76] 9 POST /api/v1/namespaces/kube-system/pods/7ck 256\nI0428 16:20:49.423964       1 logs_generator.go:76] 10 PUT /api/v1/namespaces/ns/pods/5jsq 447\nI0428 16:20:49.624248       1 logs_generator.go:76] 11 GET /api/v1/namespaces/default/pods/5dx 311\nI0428 16:20:49.824596       1 logs_generator.go:76] 12 GET /api/v1/namespaces/ns/pods/svpx 357\nI0428 16:20:50.023866       1 logs_generator.go:76] 13 PUT /api/v1/namespaces/kube-system/pods/p92 543\nI0428 16:20:50.224213       1 logs_generator.go:76] 14 GET /api/v1/namespaces/ns/pods/bzn 486\nI0428 16:20:50.424551       1 logs_generator.go:76] 15 POST /api/v1/namespaces/kube-system/pods/m7w 380\nI0428 16:20:50.623833       1 logs_generator.go:76] 16 POST /api/v1/namespaces/kube-system/pods/z4mc 259\nI0428 16:20:50.824164       1 logs_generator.go:76] 17 GET /api/v1/namespaces/default/pods/d7q 422\nI0428 16:20:51.024501       1 logs_generator.go:76] 18 PUT /api/v1/namespaces/kube-system/pods/96nq 286\nI0428 16:20:51.224835       1 logs_generator.go:76] 19 PUT /api/v1/namespaces/kube-system/pods/f2hx 478\nI0428 16:20:51.424151       1 logs_generator.go:76] 20 PUT /api/v1/namespaces/default/pods/bpp 245\nI0428 16:20:51.624540       1 logs_generator.go:76] 21 POST /api/v1/namespaces/default/pods/dn9v 380\n"
  Apr 28 16:20:51.733: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-logs-2596 delete pod logs-generator'
  Apr 28 16:20:52.434: INFO: stderr: ""
  Apr 28 16:20:52.434: INFO: stdout: "pod \"logs-generator\" deleted\n"
  Apr 28 16:20:52.434: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-logs-2596" for this suite. @ 04/28/24 16:20:52.436
â€¢ [5.647 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtime.go:52
  STEP: Creating a kubernetes client @ 04/28/24 16:20:52.44
  Apr 28 16:20:52.440: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-runtime @ 04/28/24 16:20:52.441
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:20:52.448
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:20:52.45
  STEP: Container 'terminate-cmd-rpa': should get the expected 'RestartCount' @ 04/28/24 16:20:52.456
  STEP: Container 'terminate-cmd-rpa': should get the expected 'Phase' @ 04/28/24 16:21:07.5
  STEP: Container 'terminate-cmd-rpa': should get the expected 'Ready' condition @ 04/28/24 16:21:07.502
  STEP: Container 'terminate-cmd-rpa': should get the expected 'State' @ 04/28/24 16:21:07.505
  STEP: Container 'terminate-cmd-rpa': should be possible to delete [NodeConformance] @ 04/28/24 16:21:07.505
  STEP: Container 'terminate-cmd-rpof': should get the expected 'RestartCount' @ 04/28/24 16:21:07.516
  STEP: Container 'terminate-cmd-rpof': should get the expected 'Phase' @ 04/28/24 16:21:10.526
  STEP: Container 'terminate-cmd-rpof': should get the expected 'Ready' condition @ 04/28/24 16:21:11.531
  STEP: Container 'terminate-cmd-rpof': should get the expected 'State' @ 04/28/24 16:21:11.535
  STEP: Container 'terminate-cmd-rpof': should be possible to delete [NodeConformance] @ 04/28/24 16:21:11.535
  STEP: Container 'terminate-cmd-rpn': should get the expected 'RestartCount' @ 04/28/24 16:21:11.549
  STEP: Container 'terminate-cmd-rpn': should get the expected 'Phase' @ 04/28/24 16:21:12.553
  STEP: Container 'terminate-cmd-rpn': should get the expected 'Ready' condition @ 04/28/24 16:21:14.56
  STEP: Container 'terminate-cmd-rpn': should get the expected 'State' @ 04/28/24 16:21:14.564
  STEP: Container 'terminate-cmd-rpn': should be possible to delete [NodeConformance] @ 04/28/24 16:21:14.564
  Apr 28 16:21:14.572: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-7370" for this suite. @ 04/28/24 16:21:14.578
â€¢ [22.140 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:210
  STEP: Creating a kubernetes client @ 04/28/24 16:21:14.581
  Apr 28 16:21:14.581: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 16:21:14.582
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:21:14.589
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:21:14.591
  STEP: Setting up server cert @ 04/28/24 16:21:14.602
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 16:21:14.84
  STEP: Deploying the webhook pod @ 04/28/24 16:21:14.845
  STEP: Wait for the deployment to be ready @ 04/28/24 16:21:14.852
  Apr 28 16:21:14.856: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 04/28/24 16:21:16.863
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 16:21:16.872
  Apr 28 16:21:17.872: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the webhook via the AdmissionRegistration API @ 04/28/24 16:21:17.876
  STEP: create a pod @ 04/28/24 16:21:17.887
  STEP: 'kubectl attach' the pod, should be denied by the webhook @ 04/28/24 16:21:19.895
  Apr 28 16:21:19.895: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=webhook-2244 attach --namespace=webhook-2244 to-be-attached-pod -i -c=container1'
  Apr 28 16:21:19.956: INFO: rc: 1
  Apr 28 16:21:19.956: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-2244" for this suite. @ 04/28/24 16:21:19.983
  STEP: Destroying namespace "webhook-markers-4574" for this suite. @ 04/28/24 16:21:19.989
â€¢ [5.410 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]
k8s.io/kubernetes/test/e2e/scheduling/predicates.go:467
  STEP: Creating a kubernetes client @ 04/28/24 16:21:19.993
  Apr 28 16:21:19.993: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename sched-pred @ 04/28/24 16:21:19.993
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:21:20.002
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:21:20.004
  Apr 28 16:21:20.006: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Apr 28 16:21:20.010: INFO: Waiting for terminating namespaces to be deleted...
  Apr 28 16:21:20.012: INFO: 
  Logging pods the apiserver thinks is on node k8sconformance before test
  Apr 28 16:21:20.015: INFO: coredns-5dd5756b68-4wfsw from kube-system started at 2024-04-28 15:26:56 +0000 UTC (1 container statuses recorded)
  Apr 28 16:21:20.016: INFO: 	Container coredns ready: true, restart count 1
  Apr 28 16:21:20.016: INFO: etcd-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 16:21:20.016: INFO: 	Container etcd ready: true, restart count 0
  Apr 28 16:21:20.016: INFO: kindnet-6nsws from kube-system started at 2024-04-28 15:26:55 +0000 UTC (1 container statuses recorded)
  Apr 28 16:21:20.016: INFO: 	Container kindnet-cni ready: true, restart count 0
  Apr 28 16:21:20.016: INFO: kube-apiserver-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 16:21:20.016: INFO: 	Container kube-apiserver ready: true, restart count 0
  Apr 28 16:21:20.016: INFO: kube-controller-manager-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 16:21:20.016: INFO: 	Container kube-controller-manager ready: true, restart count 0
  Apr 28 16:21:20.016: INFO: kube-proxy-kjs4b from kube-system started at 2024-04-28 15:26:55 +0000 UTC (1 container statuses recorded)
  Apr 28 16:21:20.016: INFO: 	Container kube-proxy ready: true, restart count 0
  Apr 28 16:21:20.016: INFO: kube-scheduler-k8sconformance from kube-system started at 2024-04-28 15:26:43 +0000 UTC (1 container statuses recorded)
  Apr 28 16:21:20.016: INFO: 	Container kube-scheduler ready: true, restart count 0
  Apr 28 16:21:20.016: INFO: storage-provisioner from kube-system started at 2024-04-28 15:26:56 +0000 UTC (1 container statuses recorded)
  Apr 28 16:21:20.016: INFO: 	Container storage-provisioner ready: true, restart count 0
  Apr 28 16:21:20.016: INFO: sonobuoy-systemd-logs-daemon-set-5db54bb871f24159-clq66 from sonobuoy started at 2024-04-28 15:27:37 +0000 UTC (2 container statuses recorded)
  Apr 28 16:21:20.016: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 28 16:21:20.016: INFO: 	Container systemd-logs ready: true, restart count 0
  Apr 28 16:21:20.016: INFO: 
  Logging pods the apiserver thinks is on node k8sconformance-m02 before test
  Apr 28 16:21:20.019: INFO: kindnet-9gwxd from kube-system started at 2024-04-28 16:04:26 +0000 UTC (1 container statuses recorded)
  Apr 28 16:21:20.019: INFO: 	Container kindnet-cni ready: true, restart count 0
  Apr 28 16:21:20.019: INFO: kube-proxy-7t84r from kube-system started at 2024-04-28 15:27:27 +0000 UTC (1 container statuses recorded)
  Apr 28 16:21:20.019: INFO: 	Container kube-proxy ready: true, restart count 0
  Apr 28 16:21:20.019: INFO: sonobuoy from sonobuoy started at 2024-04-28 15:27:33 +0000 UTC (1 container statuses recorded)
  Apr 28 16:21:20.019: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Apr 28 16:21:20.019: INFO: sonobuoy-e2e-job-b135035bf3ea46b2 from sonobuoy started at 2024-04-28 15:27:37 +0000 UTC (2 container statuses recorded)
  Apr 28 16:21:20.019: INFO: 	Container e2e ready: true, restart count 0
  Apr 28 16:21:20.019: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 28 16:21:20.019: INFO: sonobuoy-systemd-logs-daemon-set-5db54bb871f24159-pn7kn from sonobuoy started at 2024-04-28 15:27:37 +0000 UTC (2 container statuses recorded)
  Apr 28 16:21:20.019: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Apr 28 16:21:20.019: INFO: 	Container systemd-logs ready: true, restart count 0
  Apr 28 16:21:20.019: INFO: to-be-attached-pod from webhook-2244 started at 2024-04-28 16:21:17 +0000 UTC (1 container statuses recorded)
  Apr 28 16:21:20.019: INFO: 	Container container1 ready: true, restart count 0
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 04/28/24 16:21:20.019
  STEP: Explicitly delete pod here to free the resource it takes. @ 04/28/24 16:21:22.032
  STEP: Trying to apply a random label on the found node. @ 04/28/24 16:21:22.037
  STEP: verifying the node has the label kubernetes.io/e2e-8215428e-4c1d-4edf-825a-6f4c0e1bd2f5 42 @ 04/28/24 16:21:22.045
  STEP: Trying to relaunch the pod, now with labels. @ 04/28/24 16:21:22.047
  STEP: removing the label kubernetes.io/e2e-8215428e-4c1d-4edf-825a-6f4c0e1bd2f5 off the node k8sconformance-m02 @ 04/28/24 16:21:24.059
  STEP: verifying the node doesn't have the label kubernetes.io/e2e-8215428e-4c1d-4edf-825a-6f4c0e1bd2f5 @ 04/28/24 16:21:24.067
  Apr 28 16:21:24.069: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-5467" for this suite. @ 04/28/24 16:21:24.071
â€¢ [4.082 seconds]
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:161
  STEP: Creating a kubernetes client @ 04/28/24 16:21:24.075
  Apr 28 16:21:24.075: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename resourcequota @ 04/28/24 16:21:24.075
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:21:24.083
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:21:24.086
  STEP: Discovering how many secrets are in namespace by default @ 04/28/24 16:21:24.088
  STEP: Counting existing ResourceQuota @ 04/28/24 16:21:29.09
  STEP: Creating a ResourceQuota @ 04/28/24 16:21:34.093
  STEP: Ensuring resource quota status is calculated @ 04/28/24 16:21:34.098
  STEP: Creating a Secret @ 04/28/24 16:21:36.101
  STEP: Ensuring resource quota status captures secret creation @ 04/28/24 16:21:36.109
  STEP: Deleting a secret @ 04/28/24 16:21:38.112
  STEP: Ensuring resource quota status released usage @ 04/28/24 16:21:38.116
  Apr 28 16:21:40.119: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-165" for this suite. @ 04/28/24 16:21:40.122
â€¢ [16.051 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should update a ServiceAccount [Conformance]
k8s.io/kubernetes/test/e2e/auth/service_accounts.go:808
  STEP: Creating a kubernetes client @ 04/28/24 16:21:40.126
  Apr 28 16:21:40.126: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename svcaccounts @ 04/28/24 16:21:40.126
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:21:40.136
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:21:40.138
  STEP: Creating ServiceAccount "e2e-sa-sjzsj"  @ 04/28/24 16:21:40.139
  Apr 28 16:21:40.142: INFO: AutomountServiceAccountToken: false
  STEP: Updating ServiceAccount "e2e-sa-sjzsj"  @ 04/28/24 16:21:40.142
  Apr 28 16:21:40.145: INFO: AutomountServiceAccountToken: true
  Apr 28 16:21:40.146: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-8764" for this suite. @ 04/28/24 16:21:40.147
â€¢ [0.026 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]
k8s.io/kubernetes/test/e2e/storage/subpath.go:69
  STEP: Creating a kubernetes client @ 04/28/24 16:21:40.152
  Apr 28 16:21:40.152: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename subpath @ 04/28/24 16:21:40.153
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:21:40.159
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:21:40.161
  STEP: Setting up data @ 04/28/24 16:21:40.163
  STEP: Creating pod pod-subpath-test-configmap-sb6c @ 04/28/24 16:21:40.17
  STEP: Creating a pod to test atomic-volume-subpath @ 04/28/24 16:21:40.17
  STEP: Saw pod success @ 04/28/24 16:22:02.212
  Apr 28 16:22:02.214: INFO: Trying to get logs from node k8sconformance-m02 pod pod-subpath-test-configmap-sb6c container test-container-subpath-configmap-sb6c: <nil>
  STEP: delete the pod @ 04/28/24 16:22:02.22
  STEP: Deleting pod pod-subpath-test-configmap-sb6c @ 04/28/24 16:22:02.232
  Apr 28 16:22:02.232: INFO: Deleting pod "pod-subpath-test-configmap-sb6c" in namespace "subpath-8434"
  Apr 28 16:22:02.233: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-8434" for this suite. @ 04/28/24 16:22:02.235
â€¢ [22.086 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:646
  STEP: Creating a kubernetes client @ 04/28/24 16:22:02.239
  Apr 28 16:22:02.239: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 16:22:02.24
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:22:02.248
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:22:02.25
  STEP: Setting up server cert @ 04/28/24 16:22:02.261
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 16:22:02.441
  STEP: Deploying the webhook pod @ 04/28/24 16:22:02.446
  STEP: Wait for the deployment to be ready @ 04/28/24 16:22:02.455
  Apr 28 16:22:02.458: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 04/28/24 16:22:04.465
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 16:22:04.473
  Apr 28 16:22:05.473: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Listing all of the created validation webhooks @ 04/28/24 16:22:05.515
  STEP: Creating a configMap that should be mutated @ 04/28/24 16:22:05.524
  STEP: Deleting the collection of validation webhooks @ 04/28/24 16:22:05.543
  STEP: Creating a configMap that should not be mutated @ 04/28/24 16:22:05.565
  Apr 28 16:22:05.571: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-629" for this suite. @ 04/28/24 16:22:05.592
  STEP: Destroying namespace "webhook-markers-7017" for this suite. @ 04/28/24 16:22:05.595
â€¢ [3.360 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:214
  STEP: Creating a kubernetes client @ 04/28/24 16:22:05.599
  Apr 28 16:22:05.599: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-probe @ 04/28/24 16:22:05.599
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:22:05.607
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:22:05.608
  STEP: Creating pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601 @ 04/28/24 16:22:05.61
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/28/24 16:22:07.62
  Apr 28 16:22:07.622: INFO: Initial restart count of pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d is 0
  Apr 28 16:22:07.624: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:09.627: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:11.630: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:13.633: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:15.637: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:17.640: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:19.643: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:21.646: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:23.650: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:25.653: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:27.656: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:29.660: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:31.662: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:33.666: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:35.669: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:37.673: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:39.676: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:41.679: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:43.682: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:45.685: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:47.688: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:49.692: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:51.704: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:53.708: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:55.714: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:57.717: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:22:59.720: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:01.724: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:03.728: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:05.731: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:07.734: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:09.737: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:11.740: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:13.743: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:15.746: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:17.749: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:19.752: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:21.755: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:23.757: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:25.760: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:27.764: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:29.767: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:31.770: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:33.773: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:35.777: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:37.780: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:39.784: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:41.786: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:43.789: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:45.792: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:47.795: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:49.798: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:51.801: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:53.805: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:55.809: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:57.812: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:23:59.816: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:01.818: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:03.821: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:05.824: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:07.828: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:09.831: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:11.834: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:13.837: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:15.840: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:17.844: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:19.847: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:21.850: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:23.853: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:25.856: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:27.860: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:29.863: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:31.865: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:33.868: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:35.871: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:37.873: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:39.876: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:41.879: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:43.882: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:45.885: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:47.889: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:49.892: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:51.895: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:53.898: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:55.900: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:57.904: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:24:59.906: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:01.909: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:03.913: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:05.915: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:07.918: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:09.921: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:11.925: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:13.929: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:15.932: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:17.935: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:19.938: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:21.941: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:23.944: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:25.947: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:27.951: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:29.953: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:31.956: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:33.960: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:35.963: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:37.966: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:39.969: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:41.972: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:43.975: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:45.978: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:47.981: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:49.984: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:51.988: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:53.992: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:55.994: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:25:57.998: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:26:00.001: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:26:02.004: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:26:04.007: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:26:06.010: INFO: Get pod test-webserver-f0e4184c-cc57-4fc4-b2a9-807fbb32c77d in namespace container-probe-2601
  Apr 28 16:26:08.010: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 04/28/24 16:26:08.013
  STEP: Destroying namespace "container-probe-2601" for this suite. @ 04/28/24 16:26:08.019
â€¢ [242.427 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:208
  STEP: Creating a kubernetes client @ 04/28/24 16:26:08.026
  Apr 28 16:26:08.026: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 16:26:08.027
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:26:08.036
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:26:08.038
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 16:26:08.04
  STEP: Saw pod success @ 04/28/24 16:26:12.053
  Apr 28 16:26:12.055: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-24a0b558-ed50-4a96-8e77-817c93860966 container client-container: <nil>
  STEP: delete the pod @ 04/28/24 16:26:12.067
  Apr 28 16:26:12.076: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-8932" for this suite. @ 04/28/24 16:26:12.078
â€¢ [4.055 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/field_validation.go:289
  STEP: Creating a kubernetes client @ 04/28/24 16:26:12.083
  Apr 28 16:26:12.083: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename field-validation @ 04/28/24 16:26:12.083
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:26:12.092
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:26:12.094
  Apr 28 16:26:12.096: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:26:15.147: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-7178" for this suite. @ 04/28/24 16:26:15.155
â€¢ [3.075 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:74
  STEP: Creating a kubernetes client @ 04/28/24 16:26:15.158
  Apr 28 16:26:15.158: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename configmap @ 04/28/24 16:26:15.159
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:26:15.166
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:26:15.168
  STEP: Creating configMap with name configmap-test-volume-3e277207-add3-4275-b72e-88322bd78112 @ 04/28/24 16:26:15.17
  STEP: Creating a pod to test consume configMaps @ 04/28/24 16:26:15.172
  STEP: Saw pod success @ 04/28/24 16:26:19.182
  Apr 28 16:26:19.184: INFO: Trying to get logs from node k8sconformance-m02 pod pod-configmaps-70f88736-2e85-431e-91fa-a8f23601cd56 container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 16:26:19.19
  Apr 28 16:26:19.198: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-6810" for this suite. @ 04/28/24 16:26:19.2
â€¢ [4.045 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:961
  STEP: Creating a kubernetes client @ 04/28/24 16:26:19.204
  Apr 28 16:26:19.204: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename statefulset @ 04/28/24 16:26:19.204
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:26:19.213
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:26:19.215
  STEP: Creating service test in namespace statefulset-2248 @ 04/28/24 16:26:19.216
  Apr 28 16:26:19.225: INFO: Found 0 stateful pods, waiting for 1
  Apr 28 16:26:29.229: INFO: Waiting for pod test-ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: patching the StatefulSet @ 04/28/24 16:26:29.233
  W0428 16:26:29.240192      22 warnings.go:70] unknown field "spec.template.spec.TerminationGracePeriodSeconds"
  Apr 28 16:26:29.244: INFO: Found 1 stateful pods, waiting for 2
  Apr 28 16:26:39.250: INFO: Waiting for pod test-ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Apr 28 16:26:39.250: INFO: Waiting for pod test-ss-1 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Listing all StatefulSets @ 04/28/24 16:26:39.254
  STEP: Delete all of the StatefulSets @ 04/28/24 16:26:39.255
  STEP: Verify that StatefulSets have been deleted @ 04/28/24 16:26:39.259
  Apr 28 16:26:39.261: INFO: Deleting all statefulset in ns statefulset-2248
  Apr 28 16:26:39.267: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-2248" for this suite. @ 04/28/24 16:26:39.269
â€¢ [20.072 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:207
  STEP: Creating a kubernetes client @ 04/28/24 16:26:39.276
  Apr 28 16:26:39.276: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir @ 04/28/24 16:26:39.276
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:26:39.285
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:26:39.288
  STEP: Creating a pod to test emptydir 0666 on node default medium @ 04/28/24 16:26:39.29
  STEP: Saw pod success @ 04/28/24 16:26:43.304
  Apr 28 16:26:43.306: INFO: Trying to get logs from node k8sconformance-m02 pod pod-2256e9e3-cb87-43ed-8ab7-d0071cbb999e container test-container: <nil>
  STEP: delete the pod @ 04/28/24 16:26:43.311
  Apr 28 16:26:43.320: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-1525" for this suite. @ 04/28/24 16:26:43.322
â€¢ [4.049 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] server version should find the server version [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/server_version.go:40
  STEP: Creating a kubernetes client @ 04/28/24 16:26:43.326
  Apr 28 16:26:43.326: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename server-version @ 04/28/24 16:26:43.327
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:26:43.334
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:26:43.336
  STEP: Request ServerVersion @ 04/28/24 16:26:43.337
  STEP: Confirm major version @ 04/28/24 16:26:43.338
  Apr 28 16:26:43.338: INFO: Major version: 1
  STEP: Confirm minor version @ 04/28/24 16:26:43.338
  Apr 28 16:26:43.338: INFO: cleanMinorVersion: 28
  Apr 28 16:26:43.338: INFO: Minor version: 28
  Apr 28 16:26:43.338: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "server-version-4406" for this suite. @ 04/28/24 16:26:43.34
â€¢ [0.017 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/security_context.go:347
  STEP: Creating a kubernetes client @ 04/28/24 16:26:43.343
  Apr 28 16:26:43.343: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename security-context-test @ 04/28/24 16:26:43.344
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:26:43.351
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:26:43.352
  Apr 28 16:26:47.366: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-2346" for this suite. @ 04/28/24 16:26:47.368
â€¢ [4.028 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:101
  STEP: Creating a kubernetes client @ 04/28/24 16:26:47.371
  Apr 28 16:26:47.371: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename resourcequota @ 04/28/24 16:26:47.372
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:26:47.379
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:26:47.381
  STEP: Counting existing ResourceQuota @ 04/28/24 16:26:47.382
  STEP: Creating a ResourceQuota @ 04/28/24 16:26:52.385
  STEP: Ensuring resource quota status is calculated @ 04/28/24 16:26:52.388
  STEP: Creating a Service @ 04/28/24 16:26:54.392
  STEP: Creating a NodePort Service @ 04/28/24 16:26:54.405
  STEP: Not allowing a LoadBalancer Service with NodePort to be created that exceeds remaining quota @ 04/28/24 16:26:54.42
  STEP: Ensuring resource quota status captures service creation @ 04/28/24 16:26:54.436
  STEP: Deleting Services @ 04/28/24 16:26:56.439
  STEP: Ensuring resource quota status released usage @ 04/28/24 16:26:56.461
  Apr 28 16:26:58.464: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-2327" for this suite. @ 04/28/24 16:26:58.466
â€¢ [11.100 seconds]
------------------------------
S
------------------------------
[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:131
  STEP: Creating a kubernetes client @ 04/28/24 16:26:58.471
  Apr 28 16:26:58.471: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 16:26:58.472
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:26:58.479
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:26:58.481
  STEP: Creating the pod @ 04/28/24 16:26:58.482
  Apr 28 16:27:01.007: INFO: Successfully updated pod "labelsupdate3f4af8cf-6fd2-4cc4-8728-fb8570ecdacf"
  Apr 28 16:27:05.028: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-9977" for this suite. @ 04/28/24 16:27:05.03
â€¢ [6.563 seconds]
------------------------------
[sig-apps] Job should delete a job [Conformance]
k8s.io/kubernetes/test/e2e/apps/job.go:485
  STEP: Creating a kubernetes client @ 04/28/24 16:27:05.034
  Apr 28 16:27:05.034: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename job @ 04/28/24 16:27:05.034
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:27:05.042
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:27:05.044
  STEP: Creating a job @ 04/28/24 16:27:05.045
  STEP: Ensuring active pods == parallelism @ 04/28/24 16:27:05.049
  STEP: delete a job @ 04/28/24 16:27:07.053
  STEP: deleting Job.batch foo in namespace job-4273, will wait for the garbage collector to delete the pods @ 04/28/24 16:27:07.053
  Apr 28 16:27:07.109: INFO: Deleting Job.batch foo took: 4.010224ms
  Apr 28 16:27:07.210: INFO: Terminating Job.batch foo pods took: 101.026595ms
  STEP: Ensuring job was deleted @ 04/28/24 16:27:38.011
  Apr 28 16:27:38.013: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-4273" for this suite. @ 04/28/24 16:27:38.015
â€¢ [32.985 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] Pods Extended Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]
k8s.io/kubernetes/test/e2e/node/pods.go:163
  STEP: Creating a kubernetes client @ 04/28/24 16:27:38.019
  Apr 28 16:27:38.019: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename pods @ 04/28/24 16:27:38.019
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:27:38.027
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:27:38.029
  STEP: creating the pod @ 04/28/24 16:27:38.031
  STEP: submitting the pod to kubernetes @ 04/28/24 16:27:38.031
  STEP: verifying QOS class is set on the pod @ 04/28/24 16:27:38.036
  Apr 28 16:27:38.038: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-1494" for this suite. @ 04/28/24 16:27:38.04
â€¢ [0.025 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling an agnhost Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/kubelet.go:148
  STEP: Creating a kubernetes client @ 04/28/24 16:27:38.044
  Apr 28 16:27:38.044: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubelet-test @ 04/28/24 16:27:38.044
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:27:38.052
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:27:38.054
  STEP: Waiting for pod completion @ 04/28/24 16:27:38.059
  Apr 28 16:27:40.070: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-6450" for this suite. @ 04/28/24 16:27:40.072
â€¢ [2.033 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:177
  STEP: Creating a kubernetes client @ 04/28/24 16:27:40.077
  Apr 28 16:27:40.077: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir @ 04/28/24 16:27:40.078
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:27:40.085
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:27:40.087
  STEP: Creating a pod to test emptydir 0666 on node default medium @ 04/28/24 16:27:40.089
  STEP: Saw pod success @ 04/28/24 16:27:42.098
  Apr 28 16:27:42.100: INFO: Trying to get logs from node k8sconformance-m02 pod pod-d7ed65c1-22c5-4900-a068-edc846a86320 container test-container: <nil>
  STEP: delete the pod @ 04/28/24 16:27:42.106
  Apr 28 16:27:42.116: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-7557" for this suite. @ 04/28/24 16:27:42.119
â€¢ [2.045 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/network/networking.go:95
  STEP: Creating a kubernetes client @ 04/28/24 16:27:42.123
  Apr 28 16:27:42.123: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename pod-network-test @ 04/28/24 16:27:42.124
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:27:42.131
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:27:42.133
  STEP: Performing setup for networking test in namespace pod-network-test-7159 @ 04/28/24 16:27:42.134
  STEP: creating a selector @ 04/28/24 16:27:42.134
  STEP: Creating the service pods in kubernetes @ 04/28/24 16:27:42.135
  Apr 28 16:27:42.135: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 04/28/24 16:27:54.173
  Apr 28 16:27:56.181: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Apr 28 16:27:56.181: INFO: Breadth first check of 10.244.0.80 on host 192.168.49.2...
  Apr 28 16:27:56.183: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.244.1.248:9080/dial?request=hostname&protocol=udp&host=10.244.0.80&port=8081&tries=1'] Namespace:pod-network-test-7159 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:27:56.183: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:27:56.183: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:27:56.183: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-7159/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.244.1.248%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D10.244.0.80%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Apr 28 16:27:56.228: INFO: Waiting for responses: map[]
  Apr 28 16:27:56.228: INFO: reached 10.244.0.80 after 0/1 tries
  Apr 28 16:27:56.228: INFO: Breadth first check of 10.244.1.247 on host 192.168.49.3...
  Apr 28 16:27:56.230: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.244.1.248:9080/dial?request=hostname&protocol=udp&host=10.244.1.247&port=8081&tries=1'] Namespace:pod-network-test-7159 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:27:56.230: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:27:56.231: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:27:56.231: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-7159/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.244.1.248%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D10.244.1.247%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Apr 28 16:27:56.273: INFO: Waiting for responses: map[]
  Apr 28 16:27:56.273: INFO: reached 10.244.1.247 after 0/1 tries
  Apr 28 16:27:56.273: INFO: Going to retry 0 out of 2 pods....
  Apr 28 16:27:56.274: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-7159" for this suite. @ 04/28/24 16:27:56.276
â€¢ [14.157 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/watch.go:60
  STEP: Creating a kubernetes client @ 04/28/24 16:27:56.28
  Apr 28 16:27:56.280: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename watch @ 04/28/24 16:27:56.281
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:27:56.289
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:27:56.291
  STEP: creating a watch on configmaps with label A @ 04/28/24 16:27:56.293
  STEP: creating a watch on configmaps with label B @ 04/28/24 16:27:56.294
  STEP: creating a watch on configmaps with label A or B @ 04/28/24 16:27:56.295
  STEP: creating a configmap with label A and ensuring the correct watchers observe the notification @ 04/28/24 16:27:56.295
  Apr 28 16:27:56.298: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-9328  f6f15339-14d2-4518-9498-00295340e79a 14796 0 2024-04-28 16:27:56 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-28 16:27:56 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:27:56.298: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-9328  f6f15339-14d2-4518-9498-00295340e79a 14796 0 2024-04-28 16:27:56 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-28 16:27:56 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying configmap A and ensuring the correct watchers observe the notification @ 04/28/24 16:27:56.298
  Apr 28 16:27:56.302: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-9328  f6f15339-14d2-4518-9498-00295340e79a 14797 0 2024-04-28 16:27:56 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-28 16:27:56 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:27:56.302: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-9328  f6f15339-14d2-4518-9498-00295340e79a 14797 0 2024-04-28 16:27:56 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-28 16:27:56 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying configmap A again and ensuring the correct watchers observe the notification @ 04/28/24 16:27:56.302
  Apr 28 16:27:56.307: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-9328  f6f15339-14d2-4518-9498-00295340e79a 14798 0 2024-04-28 16:27:56 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-28 16:27:56 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:27:56.307: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-9328  f6f15339-14d2-4518-9498-00295340e79a 14798 0 2024-04-28 16:27:56 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-28 16:27:56 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: deleting configmap A and ensuring the correct watchers observe the notification @ 04/28/24 16:27:56.307
  Apr 28 16:27:56.310: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-9328  f6f15339-14d2-4518-9498-00295340e79a 14799 0 2024-04-28 16:27:56 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-28 16:27:56 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:27:56.310: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-9328  f6f15339-14d2-4518-9498-00295340e79a 14799 0 2024-04-28 16:27:56 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-04-28 16:27:56 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: creating a configmap with label B and ensuring the correct watchers observe the notification @ 04/28/24 16:27:56.31
  Apr 28 16:27:56.313: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-9328  4dfa4713-8491-4594-bb51-19f96c74a33c 14800 0 2024-04-28 16:27:56 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-04-28 16:27:56 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:27:56.313: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-9328  4dfa4713-8491-4594-bb51-19f96c74a33c 14800 0 2024-04-28 16:27:56 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-04-28 16:27:56 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: deleting configmap B and ensuring the correct watchers observe the notification @ 04/28/24 16:28:06.313
  Apr 28 16:28:06.318: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-9328  4dfa4713-8491-4594-bb51-19f96c74a33c 14841 0 2024-04-28 16:27:56 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-04-28 16:27:56 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:28:06.318: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-9328  4dfa4713-8491-4594-bb51-19f96c74a33c 14841 0 2024-04-28 16:27:56 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-04-28 16:27:56 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:28:16.319: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-9328" for this suite. @ 04/28/24 16:28:16.322
â€¢ [20.046 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:309
  STEP: Creating a kubernetes client @ 04/28/24 16:28:16.327
  Apr 28 16:28:16.327: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/28/24 16:28:16.328
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:28:16.335
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:28:16.337
  STEP: CRs in the same group but different versions (one multiversion CRD) show up in OpenAPI documentation @ 04/28/24 16:28:16.338
  Apr 28 16:28:16.339: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: CRs in the same group but different versions (two CRDs) show up in OpenAPI documentation @ 04/28/24 16:28:21.285
  Apr 28 16:28:21.285: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:28:22.496: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:28:27.471: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-2470" for this suite. @ 04/28/24 16:28:27.477
â€¢ [11.155 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/configmap.go:45
  STEP: Creating a kubernetes client @ 04/28/24 16:28:27.482
  Apr 28 16:28:27.482: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename configmap @ 04/28/24 16:28:27.483
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:28:27.49
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:28:27.492
  STEP: Creating configMap configmap-3927/configmap-test-d2a56f14-c97a-4341-9d07-bebb5e8bb12c @ 04/28/24 16:28:27.494
  STEP: Creating a pod to test consume configMaps @ 04/28/24 16:28:27.498
  STEP: Saw pod success @ 04/28/24 16:28:29.506
  Apr 28 16:28:29.508: INFO: Trying to get logs from node k8sconformance-m02 pod pod-configmaps-f1137f00-3921-4350-9d77-9b91d5e0ce57 container env-test: <nil>
  STEP: delete the pod @ 04/28/24 16:28:29.514
  Apr 28 16:28:29.523: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-3927" for this suite. @ 04/28/24 16:28:29.525
â€¢ [2.046 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:261
  STEP: Creating a kubernetes client @ 04/28/24 16:28:29.529
  Apr 28 16:28:29.529: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 16:28:29.53
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:28:29.537
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:28:29.539
  STEP: Setting up server cert @ 04/28/24 16:28:29.553
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 16:28:30.008
  STEP: Deploying the webhook pod @ 04/28/24 16:28:30.013
  STEP: Wait for the deployment to be ready @ 04/28/24 16:28:30.021
  Apr 28 16:28:30.027: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/28/24 16:28:32.033
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 16:28:32.041
  Apr 28 16:28:33.041: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the mutating pod webhook via the AdmissionRegistration API @ 04/28/24 16:28:33.045
  STEP: create a pod that should be updated by the webhook @ 04/28/24 16:28:33.057
  Apr 28 16:28:33.070: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-6094" for this suite. @ 04/28/24 16:28:33.1
  STEP: Destroying namespace "webhook-markers-3067" for this suite. @ 04/28/24 16:28:33.105
â€¢ [3.580 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/kubelet_etc_hosts.go:64
  STEP: Creating a kubernetes client @ 04/28/24 16:28:33.109
  Apr 28 16:28:33.109: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename e2e-kubelet-etc-hosts @ 04/28/24 16:28:33.109
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:28:33.116
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:28:33.118
  STEP: Setting up the test @ 04/28/24 16:28:33.12
  STEP: Creating hostNetwork=false pod @ 04/28/24 16:28:33.12
  STEP: Creating hostNetwork=true pod @ 04/28/24 16:28:35.133
  STEP: Running the test @ 04/28/24 16:28:37.146
  STEP: Verifying /etc/hosts of container is kubelet-managed for pod with hostNetwork=false @ 04/28/24 16:28:37.146
  Apr 28 16:28:37.146: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-9938 PodName:test-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:28:37.146: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:28:37.147: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:28:37.147: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9938/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Apr 28 16:28:37.188: INFO: Exec stderr: ""
  Apr 28 16:28:37.188: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-9938 PodName:test-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:28:37.188: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:28:37.189: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:28:37.189: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9938/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Apr 28 16:28:37.231: INFO: Exec stderr: ""
  Apr 28 16:28:37.231: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-9938 PodName:test-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:28:37.231: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:28:37.231: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:28:37.231: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9938/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Apr 28 16:28:37.272: INFO: Exec stderr: ""
  Apr 28 16:28:37.272: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-9938 PodName:test-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:28:37.272: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:28:37.273: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:28:37.273: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9938/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Apr 28 16:28:37.313: INFO: Exec stderr: ""
  STEP: Verifying /etc/hosts of container is not kubelet-managed since container specifies /etc/hosts mount @ 04/28/24 16:28:37.314
  Apr 28 16:28:37.314: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-9938 PodName:test-pod ContainerName:busybox-3 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:28:37.314: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:28:37.314: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:28:37.314: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9938/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-3&container=busybox-3&stderr=true&stdout=true)
  Apr 28 16:28:37.359: INFO: Exec stderr: ""
  Apr 28 16:28:37.359: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-9938 PodName:test-pod ContainerName:busybox-3 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:28:37.359: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:28:37.360: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:28:37.360: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9938/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-3&container=busybox-3&stderr=true&stdout=true)
  Apr 28 16:28:37.400: INFO: Exec stderr: ""
  STEP: Verifying /etc/hosts content of container is not kubelet-managed for pod with hostNetwork=true @ 04/28/24 16:28:37.4
  Apr 28 16:28:37.400: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-9938 PodName:test-host-network-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:28:37.400: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:28:37.401: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:28:37.401: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9938/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Apr 28 16:28:37.440: INFO: Exec stderr: ""
  Apr 28 16:28:37.440: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-9938 PodName:test-host-network-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:28:37.440: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:28:37.441: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:28:37.441: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9938/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Apr 28 16:28:37.483: INFO: Exec stderr: ""
  Apr 28 16:28:37.483: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-9938 PodName:test-host-network-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:28:37.483: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:28:37.484: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:28:37.484: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9938/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Apr 28 16:28:37.525: INFO: Exec stderr: ""
  Apr 28 16:28:37.525: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-9938 PodName:test-host-network-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:28:37.525: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:28:37.525: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:28:37.526: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-9938/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Apr 28 16:28:37.563: INFO: Exec stderr: ""
  Apr 28 16:28:37.564: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "e2e-kubelet-etc-hosts-9938" for this suite. @ 04/28/24 16:28:37.567
â€¢ [4.462 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:221
  STEP: Creating a kubernetes client @ 04/28/24 16:28:37.571
  Apr 28 16:28:37.571: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 16:28:37.571
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:28:37.581
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:28:37.582
  STEP: Setting up server cert @ 04/28/24 16:28:37.595
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 16:28:37.977
  STEP: Deploying the webhook pod @ 04/28/24 16:28:37.98
  STEP: Wait for the deployment to be ready @ 04/28/24 16:28:37.989
  Apr 28 16:28:37.992: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  Apr 28 16:28:39.999: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.April, 28, 16, 28, 38, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 16, 28, 38, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 16, 28, 38, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 16, 28, 37, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-webhook-deployment-7c55c7d74c\" is progressing."}}, CollisionCount:(*int32)(nil)}
  STEP: Deploying the webhook service @ 04/28/24 16:28:42.003
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 16:28:42.012
  Apr 28 16:28:43.012: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Apr 28 16:28:43.016: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Registering the custom resource webhook via the AdmissionRegistration API @ 04/28/24 16:28:43.523
  STEP: Creating a custom resource that should be denied by the webhook @ 04/28/24 16:28:43.537
  STEP: Creating a custom resource whose deletion would be denied by the webhook @ 04/28/24 16:28:45.544
  STEP: Updating the custom resource with disallowed data should be denied @ 04/28/24 16:28:45.548
  STEP: Deleting the custom resource should be denied @ 04/28/24 16:28:45.553
  STEP: Remove the offending key and value from the custom resource data @ 04/28/24 16:28:45.556
  STEP: Deleting the updated custom resource should be successful @ 04/28/24 16:28:45.561
  Apr 28 16:28:45.565: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-5558" for this suite. @ 04/28/24 16:28:46.1
  STEP: Destroying namespace "webhook-markers-4312" for this suite. @ 04/28/24 16:28:46.104
â€¢ [8.539 seconds]
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:89
  STEP: Creating a kubernetes client @ 04/28/24 16:28:46.109
  Apr 28 16:28:46.109: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:28:46.11
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:28:46.117
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:28:46.119
  STEP: Creating configMap with name projected-configmap-test-volume-map-78d2bfb6-f767-43d1-a0e1-c2927238fe7b @ 04/28/24 16:28:46.121
  STEP: Creating a pod to test consume configMaps @ 04/28/24 16:28:46.125
  STEP: Saw pod success @ 04/28/24 16:28:50.138
  Apr 28 16:28:50.140: INFO: Trying to get logs from node k8sconformance-m02 pod pod-projected-configmaps-286e1233-cfcd-4107-af62-f55ef299b4ab container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 16:28:50.145
  Apr 28 16:28:50.155: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-1533" for this suite. @ 04/28/24 16:28:50.157
â€¢ [4.051 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:71
  STEP: Creating a kubernetes client @ 04/28/24 16:28:50.162
  Apr 28 16:28:50.162: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-probe @ 04/28/24 16:28:50.163
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:28:50.171
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:28:50.173
  Apr 28 16:29:12.215: INFO: Container started at 2024-04-28 16:28:50 +0000 UTC, pod became ready at 2024-04-28 16:29:10 +0000 UTC
  Apr 28 16:29:12.215: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-9453" for this suite. @ 04/28/24 16:29:12.217
â€¢ [22.059 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should release no longer matching pods [Conformance]
k8s.io/kubernetes/test/e2e/apps/rc.go:103
  STEP: Creating a kubernetes client @ 04/28/24 16:29:12.222
  Apr 28 16:29:12.222: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename replication-controller @ 04/28/24 16:29:12.222
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:29:12.232
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:29:12.235
  STEP: Given a ReplicationController is created @ 04/28/24 16:29:12.237
  STEP: When the matched label of one of its pods change @ 04/28/24 16:29:12.24
  Apr 28 16:29:12.242: INFO: Pod name pod-release: Found 0 pods out of 1
  Apr 28 16:29:17.246: INFO: Pod name pod-release: Found 1 pods out of 1
  STEP: Then the pod is released @ 04/28/24 16:29:17.251
  Apr 28 16:29:18.256: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-9176" for this suite. @ 04/28/24 16:29:18.258
â€¢ [6.040 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/containers.go:75
  STEP: Creating a kubernetes client @ 04/28/24 16:29:18.263
  Apr 28 16:29:18.263: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename containers @ 04/28/24 16:29:18.264
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:29:18.273
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:29:18.275
  STEP: Creating a pod to test override command @ 04/28/24 16:29:18.277
  STEP: Saw pod success @ 04/28/24 16:29:20.286
  Apr 28 16:29:20.288: INFO: Trying to get logs from node k8sconformance-m02 pod client-containers-721942c9-f04f-4b9c-a6f0-91c3f5abfde0 container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 16:29:20.293
  Apr 28 16:29:20.303: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-3441" for this suite. @ 04/28/24 16:29:20.304
â€¢ [2.045 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:386
  STEP: Creating a kubernetes client @ 04/28/24 16:29:20.308
  Apr 28 16:29:20.308: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename secrets @ 04/28/24 16:29:20.309
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:29:20.315
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:29:20.317
  Apr 28 16:29:20.337: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-615" for this suite. @ 04/28/24 16:29:20.338
â€¢ [0.034 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:328
  STEP: Creating a kubernetes client @ 04/28/24 16:29:20.343
  Apr 28 16:29:20.343: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename resourcequota @ 04/28/24 16:29:20.343
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:29:20.35
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:29:20.352
  STEP: Counting existing ResourceQuota @ 04/28/24 16:29:37.356
  STEP: Creating a ResourceQuota @ 04/28/24 16:29:42.359
  STEP: Ensuring resource quota status is calculated @ 04/28/24 16:29:42.362
  STEP: Creating a ConfigMap @ 04/28/24 16:29:44.365
  STEP: Ensuring resource quota status captures configMap creation @ 04/28/24 16:29:44.373
  STEP: Deleting a ConfigMap @ 04/28/24 16:29:46.376
  STEP: Ensuring resource quota status released usage @ 04/28/24 16:29:46.38
  Apr 28 16:29:48.383: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-2600" for this suite. @ 04/28/24 16:29:48.386
â€¢ [28.046 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:217
  STEP: Creating a kubernetes client @ 04/28/24 16:29:48.39
  Apr 28 16:29:48.390: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir @ 04/28/24 16:29:48.39
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:29:48.397
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:29:48.399
  STEP: Creating a pod to test emptydir 0777 on node default medium @ 04/28/24 16:29:48.401
  STEP: Saw pod success @ 04/28/24 16:29:50.409
  Apr 28 16:29:50.411: INFO: Trying to get logs from node k8sconformance-m02 pod pod-0146b95a-1ea3-460b-8904-2a44f97892ce container test-container: <nil>
  STEP: delete the pod @ 04/28/24 16:29:50.416
  Apr 28 16:29:50.426: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-3551" for this suite. @ 04/28/24 16:29:50.428
â€¢ [2.041 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:174
  STEP: Creating a kubernetes client @ 04/28/24 16:29:50.432
  Apr 28 16:29:50.432: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:29:50.433
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:29:50.44
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:29:50.443
  STEP: Creating configMap with name cm-test-opt-del-e20d4e79-4fd7-4615-afed-4cb1b1e9d47f @ 04/28/24 16:29:50.446
  STEP: Creating configMap with name cm-test-opt-upd-4ff594a3-0fc2-47bc-ac56-a9f7b7e5d4c1 @ 04/28/24 16:29:50.449
  STEP: Creating the pod @ 04/28/24 16:29:50.452
  STEP: Deleting configmap cm-test-opt-del-e20d4e79-4fd7-4615-afed-4cb1b1e9d47f @ 04/28/24 16:29:52.479
  STEP: Updating configmap cm-test-opt-upd-4ff594a3-0fc2-47bc-ac56-a9f7b7e5d4c1 @ 04/28/24 16:29:52.482
  STEP: Creating configMap with name cm-test-opt-create-06eda6c2-d59f-4478-b39e-76209878dd1b @ 04/28/24 16:29:52.485
  STEP: waiting to observe update in volume @ 04/28/24 16:29:52.49
  Apr 28 16:29:56.519: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-923" for this suite. @ 04/28/24 16:29:56.521
â€¢ [6.094 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:119
  STEP: Creating a kubernetes client @ 04/28/24 16:29:56.526
  Apr 28 16:29:56.526: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 16:29:56.527
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:29:56.534
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:29:56.536
  STEP: Setting up server cert @ 04/28/24 16:29:56.548
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 16:29:56.732
  STEP: Deploying the webhook pod @ 04/28/24 16:29:56.737
  STEP: Wait for the deployment to be ready @ 04/28/24 16:29:56.745
  Apr 28 16:29:56.750: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/28/24 16:29:58.757
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 16:29:58.764
  Apr 28 16:29:59.764: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: fetching the /apis discovery document @ 04/28/24 16:29:59.768
  STEP: finding the admissionregistration.k8s.io API group in the /apis discovery document @ 04/28/24 16:29:59.769
  STEP: finding the admissionregistration.k8s.io/v1 API group/version in the /apis discovery document @ 04/28/24 16:29:59.769
  STEP: fetching the /apis/admissionregistration.k8s.io discovery document @ 04/28/24 16:29:59.769
  STEP: finding the admissionregistration.k8s.io/v1 API group/version in the /apis/admissionregistration.k8s.io discovery document @ 04/28/24 16:29:59.77
  STEP: fetching the /apis/admissionregistration.k8s.io/v1 discovery document @ 04/28/24 16:29:59.77
  STEP: finding mutatingwebhookconfigurations and validatingwebhookconfigurations resources in the /apis/admissionregistration.k8s.io/v1 discovery document @ 04/28/24 16:29:59.771
  Apr 28 16:29:59.771: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-2608" for this suite. @ 04/28/24 16:29:59.793
  STEP: Destroying namespace "webhook-markers-9360" for this suite. @ 04/28/24 16:29:59.8
â€¢ [3.278 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]
k8s.io/kubernetes/test/e2e/storage/subpath.go:79
  STEP: Creating a kubernetes client @ 04/28/24 16:29:59.804
  Apr 28 16:29:59.804: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename subpath @ 04/28/24 16:29:59.805
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:29:59.812
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:29:59.814
  STEP: Setting up data @ 04/28/24 16:29:59.816
  STEP: Creating pod pod-subpath-test-configmap-fwdm @ 04/28/24 16:29:59.821
  STEP: Creating a pod to test atomic-volume-subpath @ 04/28/24 16:29:59.821
  STEP: Saw pod success @ 04/28/24 16:30:23.865
  Apr 28 16:30:23.867: INFO: Trying to get logs from node k8sconformance-m02 pod pod-subpath-test-configmap-fwdm container test-container-subpath-configmap-fwdm: <nil>
  STEP: delete the pod @ 04/28/24 16:30:23.873
  STEP: Deleting pod pod-subpath-test-configmap-fwdm @ 04/28/24 16:30:23.88
  Apr 28 16:30:23.880: INFO: Deleting pod "pod-subpath-test-configmap-fwdm" in namespace "subpath-5447"
  Apr 28 16:30:23.882: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-5447" for this suite. @ 04/28/24 16:30:23.884
â€¢ [24.083 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:99
  STEP: Creating a kubernetes client @ 04/28/24 16:30:23.888
  Apr 28 16:30:23.888: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename secrets @ 04/28/24 16:30:23.889
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:30:23.897
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:30:23.899
  STEP: Creating secret with name secret-test-8b8626c9-af76-4cd3-9e51-06d02f775338 @ 04/28/24 16:30:23.91
  STEP: Creating a pod to test consume secrets @ 04/28/24 16:30:23.912
  STEP: Saw pod success @ 04/28/24 16:30:27.925
  Apr 28 16:30:27.927: INFO: Trying to get logs from node k8sconformance-m02 pod pod-secrets-8ee18d9a-ed10-4fc0-95e5-f654d7e23255 container secret-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 16:30:27.932
  Apr 28 16:30:27.943: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-5360" for this suite. @ 04/28/24 16:30:27.945
  STEP: Destroying namespace "secret-namespace-8262" for this suite. @ 04/28/24 16:30:27.948
â€¢ [4.064 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:197
  STEP: Creating a kubernetes client @ 04/28/24 16:30:27.953
  Apr 28 16:30:27.954: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir @ 04/28/24 16:30:27.954
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:30:27.961
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:30:27.963
  STEP: Creating a pod to test emptydir 0644 on node default medium @ 04/28/24 16:30:27.965
  STEP: Saw pod success @ 04/28/24 16:30:31.978
  Apr 28 16:30:31.980: INFO: Trying to get logs from node k8sconformance-m02 pod pod-022c891a-02dc-46ef-abde-00e88c5ad52c container test-container: <nil>
  STEP: delete the pod @ 04/28/24 16:30:31.986
  Apr 28 16:30:31.995: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-4696" for this suite. @ 04/28/24 16:30:31.998
â€¢ [4.047 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-network] Ingress API should support creating Ingress API operations [Conformance]
k8s.io/kubernetes/test/e2e/network/ingress.go:556
  STEP: Creating a kubernetes client @ 04/28/24 16:30:32.001
  Apr 28 16:30:32.001: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename ingress @ 04/28/24 16:30:32.002
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:30:32.009
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:30:32.011
  STEP: getting /apis @ 04/28/24 16:30:32.013
  STEP: getting /apis/networking.k8s.io @ 04/28/24 16:30:32.015
  STEP: getting /apis/networking.k8s.iov1 @ 04/28/24 16:30:32.016
  STEP: creating @ 04/28/24 16:30:32.017
  STEP: getting @ 04/28/24 16:30:32.025
  STEP: listing @ 04/28/24 16:30:32.028
  STEP: watching @ 04/28/24 16:30:32.03
  Apr 28 16:30:32.030: INFO: starting watch
  STEP: cluster-wide listing @ 04/28/24 16:30:32.03
  STEP: cluster-wide watching @ 04/28/24 16:30:32.032
  Apr 28 16:30:32.032: INFO: starting watch
  STEP: patching @ 04/28/24 16:30:32.033
  STEP: updating @ 04/28/24 16:30:32.036
  Apr 28 16:30:32.040: INFO: waiting for watch events with expected annotations
  Apr 28 16:30:32.040: INFO: saw patched and updated annotations
  STEP: patching /status @ 04/28/24 16:30:32.041
  STEP: updating /status @ 04/28/24 16:30:32.044
  STEP: get /status @ 04/28/24 16:30:32.048
  STEP: deleting @ 04/28/24 16:30:32.049
  STEP: deleting a collection @ 04/28/24 16:30:32.055
  Apr 28 16:30:32.062: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ingress-9623" for this suite. @ 04/28/24 16:30:32.064
â€¢ [0.066 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]
k8s.io/kubernetes/test/e2e/scheduling/preemption.go:624
  STEP: Creating a kubernetes client @ 04/28/24 16:30:32.068
  Apr 28 16:30:32.068: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename sched-preemption @ 04/28/24 16:30:32.069
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:30:32.075
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:30:32.077
  Apr 28 16:30:32.086: INFO: Waiting up to 1m0s for all nodes to be ready
  Apr 28 16:31:32.099: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Creating a kubernetes client @ 04/28/24 16:31:32.1
  Apr 28 16:31:32.100: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename sched-preemption-path @ 04/28/24 16:31:32.101
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:31:32.11
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:31:32.112
  STEP: Finding an available node @ 04/28/24 16:31:32.114
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 04/28/24 16:31:32.114
  STEP: Explicitly delete pod here to free the resource it takes. @ 04/28/24 16:31:34.128
  Apr 28 16:31:34.135: INFO: found a healthy node: k8sconformance-m02
  Apr 28 16:31:40.187: INFO: pods created so far: [1 1 1]
  Apr 28 16:31:40.187: INFO: length of pods created so far: 3
  Apr 28 16:31:42.195: INFO: pods created so far: [2 2 1]
  Apr 28 16:31:49.197: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Apr 28 16:31:49.215: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-path-7769" for this suite. @ 04/28/24 16:31:49.238
  STEP: Destroying namespace "sched-preemption-3209" for this suite. @ 04/28/24 16:31:49.241
â€¢ [77.176 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]
k8s.io/kubernetes/test/e2e/common/node/podtemplates.go:53
  STEP: Creating a kubernetes client @ 04/28/24 16:31:49.244
  Apr 28 16:31:49.244: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename podtemplate @ 04/28/24 16:31:49.245
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:31:49.252
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:31:49.254
  Apr 28 16:31:49.279: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-4425" for this suite. @ 04/28/24 16:31:49.285
â€¢ [0.098 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Service endpoints latency should not be very high  [Conformance]
k8s.io/kubernetes/test/e2e/network/service_latency.go:59
  STEP: Creating a kubernetes client @ 04/28/24 16:31:49.343
  Apr 28 16:31:49.343: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename svc-latency @ 04/28/24 16:31:49.344
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:31:49.352
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:31:49.353
  Apr 28 16:31:49.355: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: creating replication controller svc-latency-rc in namespace svc-latency-383 @ 04/28/24 16:31:49.356
  I0428 16:31:49.360979      22 runners.go:197] Created replication controller with name: svc-latency-rc, namespace: svc-latency-383, replica count: 1
  I0428 16:31:50.412624      22 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 1 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 28 16:31:50.522: INFO: Created: latency-svc-49t8p
  Apr 28 16:31:50.526: INFO: Got endpoints: latency-svc-49t8p [12.509006ms]
  Apr 28 16:31:50.537: INFO: Created: latency-svc-qvp95
  Apr 28 16:31:50.541: INFO: Got endpoints: latency-svc-qvp95 [15.638085ms]
  Apr 28 16:31:50.544: INFO: Created: latency-svc-phzsm
  Apr 28 16:31:50.549: INFO: Got endpoints: latency-svc-phzsm [23.461646ms]
  Apr 28 16:31:50.550: INFO: Created: latency-svc-fdm6m
  Apr 28 16:31:50.556: INFO: Got endpoints: latency-svc-fdm6m [30.320342ms]
  Apr 28 16:31:50.559: INFO: Created: latency-svc-rqwj8
  Apr 28 16:31:50.563: INFO: Got endpoints: latency-svc-rqwj8 [37.032838ms]
  Apr 28 16:31:50.564: INFO: Created: latency-svc-7jkqh
  Apr 28 16:31:50.570: INFO: Got endpoints: latency-svc-7jkqh [43.640776ms]
  Apr 28 16:31:50.573: INFO: Created: latency-svc-8bmn8
  Apr 28 16:31:50.578: INFO: Got endpoints: latency-svc-8bmn8 [51.738444ms]
  Apr 28 16:31:50.579: INFO: Created: latency-svc-wtfk4
  Apr 28 16:31:50.581: INFO: Got endpoints: latency-svc-wtfk4 [54.743206ms]
  Apr 28 16:31:50.585: INFO: Created: latency-svc-6w9ch
  Apr 28 16:31:50.589: INFO: Got endpoints: latency-svc-6w9ch [62.672132ms]
  Apr 28 16:31:50.590: INFO: Created: latency-svc-f2jlc
  Apr 28 16:31:50.593: INFO: Got endpoints: latency-svc-f2jlc [66.616049ms]
  Apr 28 16:31:50.598: INFO: Created: latency-svc-mtcjz
  Apr 28 16:31:50.600: INFO: Got endpoints: latency-svc-mtcjz [74.364792ms]
  Apr 28 16:31:50.604: INFO: Created: latency-svc-nkjsh
  Apr 28 16:31:50.610: INFO: Got endpoints: latency-svc-nkjsh [84.00658ms]
  Apr 28 16:31:50.641: INFO: Created: latency-svc-b5qwm
  Apr 28 16:31:50.643: INFO: Got endpoints: latency-svc-b5qwm [116.97224ms]
  Apr 28 16:31:50.648: INFO: Created: latency-svc-grhks
  Apr 28 16:31:50.651: INFO: Got endpoints: latency-svc-grhks [124.722351ms]
  Apr 28 16:31:50.659: INFO: Created: latency-svc-s265l
  Apr 28 16:31:50.662: INFO: Got endpoints: latency-svc-s265l [136.020905ms]
  Apr 28 16:31:50.664: INFO: Created: latency-svc-zzzgp
  Apr 28 16:31:50.668: INFO: Got endpoints: latency-svc-zzzgp [142.378567ms]
  Apr 28 16:31:50.669: INFO: Created: latency-svc-q6486
  Apr 28 16:31:50.674: INFO: Got endpoints: latency-svc-q6486 [132.983406ms]
  Apr 28 16:31:50.675: INFO: Created: latency-svc-27bf7
  Apr 28 16:31:50.678: INFO: Got endpoints: latency-svc-27bf7 [128.560582ms]
  Apr 28 16:31:50.682: INFO: Created: latency-svc-rjjcn
  Apr 28 16:31:50.684: INFO: Got endpoints: latency-svc-rjjcn [128.255048ms]
  Apr 28 16:31:50.689: INFO: Created: latency-svc-6b6sc
  Apr 28 16:31:50.693: INFO: Got endpoints: latency-svc-6b6sc [129.760344ms]
  Apr 28 16:31:50.695: INFO: Created: latency-svc-n94zc
  Apr 28 16:31:50.699: INFO: Got endpoints: latency-svc-n94zc [129.225207ms]
  Apr 28 16:31:50.703: INFO: Created: latency-svc-v6572
  Apr 28 16:31:50.742: INFO: Created: latency-svc-h2n8h
  Apr 28 16:31:50.743: INFO: Got endpoints: latency-svc-v6572 [165.637994ms]
  Apr 28 16:31:50.746: INFO: Got endpoints: latency-svc-h2n8h [165.506279ms]
  Apr 28 16:31:50.749: INFO: Created: latency-svc-mz2fn
  Apr 28 16:31:50.751: INFO: Got endpoints: latency-svc-mz2fn [162.152779ms]
  Apr 28 16:31:50.755: INFO: Created: latency-svc-dwm88
  Apr 28 16:31:50.765: INFO: Got endpoints: latency-svc-dwm88 [172.124734ms]
  Apr 28 16:31:50.765: INFO: Created: latency-svc-5wt2r
  Apr 28 16:31:50.773: INFO: Got endpoints: latency-svc-5wt2r [172.696857ms]
  Apr 28 16:31:50.774: INFO: Created: latency-svc-5dfwv
  Apr 28 16:31:50.777: INFO: Got endpoints: latency-svc-5dfwv [167.062463ms]
  Apr 28 16:31:50.782: INFO: Created: latency-svc-ss7t6
  Apr 28 16:31:50.786: INFO: Got endpoints: latency-svc-ss7t6 [142.688799ms]
  Apr 28 16:31:50.787: INFO: Created: latency-svc-vvdw7
  Apr 28 16:31:50.790: INFO: Got endpoints: latency-svc-vvdw7 [138.780943ms]
  Apr 28 16:31:50.795: INFO: Created: latency-svc-lj9m9
  Apr 28 16:31:50.801: INFO: Got endpoints: latency-svc-lj9m9 [139.012023ms]
  Apr 28 16:31:50.840: INFO: Created: latency-svc-x5ftx
  Apr 28 16:31:50.840: INFO: Got endpoints: latency-svc-x5ftx [172.282882ms]
  Apr 28 16:31:50.848: INFO: Created: latency-svc-wz5zz
  Apr 28 16:31:50.852: INFO: Got endpoints: latency-svc-wz5zz [177.922192ms]
  Apr 28 16:31:50.854: INFO: Created: latency-svc-kcw95
  Apr 28 16:31:50.857: INFO: Got endpoints: latency-svc-kcw95 [179.193974ms]
  Apr 28 16:31:50.861: INFO: Created: latency-svc-sr886
  Apr 28 16:31:50.871: INFO: Got endpoints: latency-svc-sr886 [186.689345ms]
  Apr 28 16:31:50.875: INFO: Created: latency-svc-jn2c7
  Apr 28 16:31:50.878: INFO: Got endpoints: latency-svc-jn2c7 [185.331976ms]
  Apr 28 16:31:50.879: INFO: Created: latency-svc-vmlhm
  Apr 28 16:31:50.884: INFO: Got endpoints: latency-svc-vmlhm [185.222655ms]
  Apr 28 16:31:50.887: INFO: Created: latency-svc-vlpj5
  Apr 28 16:31:50.891: INFO: Got endpoints: latency-svc-vlpj5 [147.458105ms]
  Apr 28 16:31:50.893: INFO: Created: latency-svc-xr4gs
  Apr 28 16:31:50.898: INFO: Created: latency-svc-n8hdv
  Apr 28 16:31:50.904: INFO: Created: latency-svc-rbjw9
  Apr 28 16:31:50.909: INFO: Created: latency-svc-z9vwd
  Apr 28 16:31:50.915: INFO: Created: latency-svc-shf4m
  Apr 28 16:31:50.942: INFO: Created: latency-svc-qg9pm
  Apr 28 16:31:50.943: INFO: Got endpoints: latency-svc-xr4gs [196.920836ms]
  Apr 28 16:31:50.947: INFO: Created: latency-svc-89jb2
  Apr 28 16:31:50.954: INFO: Created: latency-svc-mrpss
  Apr 28 16:31:50.970: INFO: Created: latency-svc-wtpfc
  Apr 28 16:31:51.041: INFO: Got endpoints: latency-svc-n8hdv [290.305773ms]
  Apr 28 16:31:51.044: INFO: Got endpoints: latency-svc-rbjw9 [278.571459ms]
  Apr 28 16:31:51.048: INFO: Created: latency-svc-cl8sk
  Apr 28 16:31:51.054: INFO: Created: latency-svc-c8nrf
  Apr 28 16:31:51.062: INFO: Created: latency-svc-7sp2p
  Apr 28 16:31:51.066: INFO: Created: latency-svc-w48nt
  Apr 28 16:31:51.069: INFO: Created: latency-svc-n7v7b
  Apr 28 16:31:51.074: INFO: Created: latency-svc-tlkrr
  Apr 28 16:31:51.075: INFO: Got endpoints: latency-svc-z9vwd [302.123769ms]
  Apr 28 16:31:51.083: INFO: Created: latency-svc-2ls6t
  Apr 28 16:31:51.088: INFO: Created: latency-svc-dzb7x
  Apr 28 16:31:51.093: INFO: Created: latency-svc-4x8v2
  Apr 28 16:31:51.098: INFO: Created: latency-svc-gzh6n
  Apr 28 16:31:51.126: INFO: Got endpoints: latency-svc-shf4m [348.752646ms]
  Apr 28 16:31:51.139: INFO: Created: latency-svc-8qx5w
  Apr 28 16:31:51.176: INFO: Got endpoints: latency-svc-qg9pm [389.936255ms]
  Apr 28 16:31:51.188: INFO: Created: latency-svc-m8qxg
  Apr 28 16:31:51.226: INFO: Got endpoints: latency-svc-89jb2 [436.294206ms]
  Apr 28 16:31:51.234: INFO: Created: latency-svc-4hjsj
  Apr 28 16:31:51.278: INFO: Got endpoints: latency-svc-mrpss [476.994073ms]
  Apr 28 16:31:51.290: INFO: Created: latency-svc-gx74m
  Apr 28 16:31:51.326: INFO: Got endpoints: latency-svc-wtpfc [485.486978ms]
  Apr 28 16:31:51.334: INFO: Created: latency-svc-pn29m
  Apr 28 16:31:51.377: INFO: Got endpoints: latency-svc-cl8sk [524.637899ms]
  Apr 28 16:31:51.385: INFO: Created: latency-svc-5xbgc
  Apr 28 16:31:51.426: INFO: Got endpoints: latency-svc-c8nrf [568.719949ms]
  Apr 28 16:31:51.435: INFO: Created: latency-svc-j8fdk
  Apr 28 16:31:51.477: INFO: Got endpoints: latency-svc-7sp2p [606.20921ms]
  Apr 28 16:31:51.486: INFO: Created: latency-svc-p7n64
  Apr 28 16:31:51.530: INFO: Got endpoints: latency-svc-w48nt [652.211863ms]
  Apr 28 16:31:51.540: INFO: Created: latency-svc-vdgft
  Apr 28 16:31:51.577: INFO: Got endpoints: latency-svc-n7v7b [692.797031ms]
  Apr 28 16:31:51.585: INFO: Created: latency-svc-p8rhx
  Apr 28 16:31:51.628: INFO: Got endpoints: latency-svc-tlkrr [736.864502ms]
  Apr 28 16:31:51.636: INFO: Created: latency-svc-77r2j
  Apr 28 16:31:51.677: INFO: Got endpoints: latency-svc-2ls6t [733.602386ms]
  Apr 28 16:31:51.686: INFO: Created: latency-svc-4m8sp
  Apr 28 16:31:51.729: INFO: Got endpoints: latency-svc-dzb7x [687.253349ms]
  Apr 28 16:31:51.738: INFO: Created: latency-svc-vznd4
  Apr 28 16:31:51.776: INFO: Got endpoints: latency-svc-4x8v2 [732.353992ms]
  Apr 28 16:31:51.785: INFO: Created: latency-svc-gq5xt
  Apr 28 16:31:51.827: INFO: Got endpoints: latency-svc-gzh6n [752.024838ms]
  Apr 28 16:31:51.836: INFO: Created: latency-svc-v457b
  Apr 28 16:31:51.877: INFO: Got endpoints: latency-svc-8qx5w [751.533809ms]
  Apr 28 16:31:51.887: INFO: Created: latency-svc-kptg6
  Apr 28 16:31:51.927: INFO: Got endpoints: latency-svc-m8qxg [750.829025ms]
  Apr 28 16:31:51.935: INFO: Created: latency-svc-trddw
  Apr 28 16:31:51.976: INFO: Got endpoints: latency-svc-4hjsj [749.790325ms]
  Apr 28 16:31:51.984: INFO: Created: latency-svc-ftpg7
  Apr 28 16:31:52.026: INFO: Got endpoints: latency-svc-gx74m [748.095465ms]
  Apr 28 16:31:52.036: INFO: Created: latency-svc-tnszv
  Apr 28 16:31:52.077: INFO: Got endpoints: latency-svc-pn29m [751.3921ms]
  Apr 28 16:31:52.085: INFO: Created: latency-svc-lx6kw
  Apr 28 16:31:52.126: INFO: Got endpoints: latency-svc-5xbgc [748.720984ms]
  Apr 28 16:31:52.135: INFO: Created: latency-svc-tdsfn
  Apr 28 16:31:52.176: INFO: Got endpoints: latency-svc-j8fdk [749.532325ms]
  Apr 28 16:31:52.185: INFO: Created: latency-svc-2558s
  Apr 28 16:31:52.227: INFO: Got endpoints: latency-svc-p7n64 [750.046538ms]
  Apr 28 16:31:52.238: INFO: Created: latency-svc-mzxhn
  Apr 28 16:31:52.276: INFO: Got endpoints: latency-svc-vdgft [745.475419ms]
  Apr 28 16:31:52.284: INFO: Created: latency-svc-ts6rj
  Apr 28 16:31:52.326: INFO: Got endpoints: latency-svc-p8rhx [748.627524ms]
  Apr 28 16:31:52.337: INFO: Created: latency-svc-klrmp
  Apr 28 16:31:52.377: INFO: Got endpoints: latency-svc-77r2j [748.719564ms]
  Apr 28 16:31:52.385: INFO: Created: latency-svc-gt48x
  Apr 28 16:31:52.428: INFO: Got endpoints: latency-svc-4m8sp [751.436393ms]
  Apr 28 16:31:52.440: INFO: Created: latency-svc-gc9b2
  Apr 28 16:31:52.476: INFO: Got endpoints: latency-svc-vznd4 [747.701781ms]
  Apr 28 16:31:52.485: INFO: Created: latency-svc-rvstv
  Apr 28 16:31:52.527: INFO: Got endpoints: latency-svc-gq5xt [750.811791ms]
  Apr 28 16:31:52.538: INFO: Created: latency-svc-5r9d6
  Apr 28 16:31:52.576: INFO: Got endpoints: latency-svc-v457b [748.317464ms]
  Apr 28 16:31:52.585: INFO: Created: latency-svc-gj7xb
  Apr 28 16:31:52.630: INFO: Got endpoints: latency-svc-kptg6 [752.433944ms]
  Apr 28 16:31:52.641: INFO: Created: latency-svc-h27n7
  Apr 28 16:31:52.676: INFO: Got endpoints: latency-svc-trddw [749.278378ms]
  Apr 28 16:31:52.684: INFO: Created: latency-svc-sp5mm
  Apr 28 16:31:52.727: INFO: Got endpoints: latency-svc-ftpg7 [750.740311ms]
  Apr 28 16:31:52.735: INFO: Created: latency-svc-c6wb2
  Apr 28 16:31:52.777: INFO: Got endpoints: latency-svc-tnszv [750.552437ms]
  Apr 28 16:31:52.785: INFO: Created: latency-svc-2p5rt
  Apr 28 16:31:52.826: INFO: Got endpoints: latency-svc-lx6kw [748.83434ms]
  Apr 28 16:31:52.836: INFO: Created: latency-svc-zr2jd
  Apr 28 16:31:52.876: INFO: Got endpoints: latency-svc-tdsfn [750.633621ms]
  Apr 28 16:31:52.886: INFO: Created: latency-svc-7lvkm
  Apr 28 16:31:52.926: INFO: Got endpoints: latency-svc-2558s [750.586982ms]
  Apr 28 16:31:52.937: INFO: Created: latency-svc-7gfb5
  Apr 28 16:31:52.976: INFO: Got endpoints: latency-svc-mzxhn [748.197102ms]
  Apr 28 16:31:52.986: INFO: Created: latency-svc-ggn2c
  Apr 28 16:31:53.027: INFO: Got endpoints: latency-svc-ts6rj [751.419897ms]
  Apr 28 16:31:53.036: INFO: Created: latency-svc-th6cn
  Apr 28 16:31:53.076: INFO: Got endpoints: latency-svc-klrmp [750.780747ms]
  Apr 28 16:31:53.086: INFO: Created: latency-svc-vl5b9
  Apr 28 16:31:53.126: INFO: Got endpoints: latency-svc-gt48x [749.399707ms]
  Apr 28 16:31:53.151: INFO: Created: latency-svc-ffx5m
  Apr 28 16:31:53.176: INFO: Got endpoints: latency-svc-gc9b2 [747.874208ms]
  Apr 28 16:31:53.184: INFO: Created: latency-svc-nf8tw
  Apr 28 16:31:53.226: INFO: Got endpoints: latency-svc-rvstv [749.318954ms]
  Apr 28 16:31:53.234: INFO: Created: latency-svc-67sqp
  Apr 28 16:31:53.277: INFO: Got endpoints: latency-svc-5r9d6 [750.130673ms]
  Apr 28 16:31:53.285: INFO: Created: latency-svc-qhf5q
  Apr 28 16:31:53.326: INFO: Got endpoints: latency-svc-gj7xb [750.160345ms]
  Apr 28 16:31:53.335: INFO: Created: latency-svc-v8qxv
  Apr 28 16:31:53.376: INFO: Got endpoints: latency-svc-h27n7 [746.652899ms]
  Apr 28 16:31:53.385: INFO: Created: latency-svc-m8plb
  Apr 28 16:31:53.426: INFO: Got endpoints: latency-svc-sp5mm [749.646951ms]
  Apr 28 16:31:53.434: INFO: Created: latency-svc-c7wr8
  Apr 28 16:31:53.476: INFO: Got endpoints: latency-svc-c6wb2 [749.206968ms]
  Apr 28 16:31:53.485: INFO: Created: latency-svc-jjkl5
  Apr 28 16:31:53.529: INFO: Got endpoints: latency-svc-2p5rt [751.674365ms]
  Apr 28 16:31:53.541: INFO: Created: latency-svc-xkp2z
  Apr 28 16:31:53.579: INFO: Got endpoints: latency-svc-zr2jd [753.141111ms]
  Apr 28 16:31:53.588: INFO: Created: latency-svc-tqlhm
  Apr 28 16:31:53.627: INFO: Got endpoints: latency-svc-7lvkm [750.755979ms]
  Apr 28 16:31:53.636: INFO: Created: latency-svc-rp2ns
  Apr 28 16:31:53.676: INFO: Got endpoints: latency-svc-7gfb5 [749.543725ms]
  Apr 28 16:31:53.688: INFO: Created: latency-svc-jzqfb
  Apr 28 16:31:53.727: INFO: Got endpoints: latency-svc-ggn2c [751.002214ms]
  Apr 28 16:31:53.735: INFO: Created: latency-svc-kfxz9
  Apr 28 16:31:53.776: INFO: Got endpoints: latency-svc-th6cn [748.658789ms]
  Apr 28 16:31:53.789: INFO: Created: latency-svc-j8dvk
  Apr 28 16:31:53.826: INFO: Got endpoints: latency-svc-vl5b9 [749.621947ms]
  Apr 28 16:31:53.834: INFO: Created: latency-svc-flrrm
  Apr 28 16:31:53.876: INFO: Got endpoints: latency-svc-ffx5m [750.00967ms]
  Apr 28 16:31:53.884: INFO: Created: latency-svc-7xtwq
  Apr 28 16:31:53.927: INFO: Got endpoints: latency-svc-nf8tw [750.305226ms]
  Apr 28 16:31:53.935: INFO: Created: latency-svc-hrc8t
  Apr 28 16:31:53.977: INFO: Got endpoints: latency-svc-67sqp [751.053267ms]
  Apr 28 16:31:53.985: INFO: Created: latency-svc-rdcdv
  Apr 28 16:31:54.026: INFO: Got endpoints: latency-svc-qhf5q [749.262987ms]
  Apr 28 16:31:54.036: INFO: Created: latency-svc-4hxqr
  Apr 28 16:31:54.077: INFO: Got endpoints: latency-svc-v8qxv [750.972178ms]
  Apr 28 16:31:54.086: INFO: Created: latency-svc-b5rbz
  Apr 28 16:31:54.126: INFO: Got endpoints: latency-svc-m8plb [749.776375ms]
  Apr 28 16:31:54.135: INFO: Created: latency-svc-l2ls7
  Apr 28 16:31:54.177: INFO: Got endpoints: latency-svc-c7wr8 [750.850116ms]
  Apr 28 16:31:54.185: INFO: Created: latency-svc-bltfv
  Apr 28 16:31:54.226: INFO: Got endpoints: latency-svc-jjkl5 [749.786078ms]
  Apr 28 16:31:54.235: INFO: Created: latency-svc-9l2bg
  Apr 28 16:31:54.278: INFO: Got endpoints: latency-svc-xkp2z [749.792915ms]
  Apr 28 16:31:54.292: INFO: Created: latency-svc-kmlbz
  Apr 28 16:31:54.343: INFO: Got endpoints: latency-svc-tqlhm [763.927203ms]
  Apr 28 16:31:54.352: INFO: Created: latency-svc-fgxkg
  Apr 28 16:31:54.375: INFO: Got endpoints: latency-svc-rp2ns [747.819701ms]
  Apr 28 16:31:54.385: INFO: Created: latency-svc-8sv66
  Apr 28 16:31:54.442: INFO: Got endpoints: latency-svc-jzqfb [765.845587ms]
  Apr 28 16:31:54.453: INFO: Created: latency-svc-q2xsj
  Apr 28 16:31:54.475: INFO: Got endpoints: latency-svc-kfxz9 [748.142447ms]
  Apr 28 16:31:54.483: INFO: Created: latency-svc-5tz9z
  Apr 28 16:31:54.546: INFO: Got endpoints: latency-svc-j8dvk [770.274581ms]
  Apr 28 16:31:54.556: INFO: Created: latency-svc-glxvg
  Apr 28 16:31:54.575: INFO: Got endpoints: latency-svc-flrrm [748.952972ms]
  Apr 28 16:31:54.583: INFO: Created: latency-svc-fwsjx
  Apr 28 16:31:54.642: INFO: Got endpoints: latency-svc-7xtwq [766.148596ms]
  Apr 28 16:31:54.653: INFO: Created: latency-svc-vwwch
  Apr 28 16:31:54.676: INFO: Got endpoints: latency-svc-hrc8t [749.245444ms]
  Apr 28 16:31:54.685: INFO: Created: latency-svc-vmshc
  Apr 28 16:31:54.729: INFO: Got endpoints: latency-svc-rdcdv [751.869135ms]
  Apr 28 16:31:54.737: INFO: Created: latency-svc-lhqxb
  Apr 28 16:31:54.775: INFO: Got endpoints: latency-svc-4hxqr [749.127722ms]
  Apr 28 16:31:54.784: INFO: Created: latency-svc-98vkp
  Apr 28 16:31:54.827: INFO: Got endpoints: latency-svc-b5rbz [750.302469ms]
  Apr 28 16:31:54.835: INFO: Created: latency-svc-krccx
  Apr 28 16:31:54.875: INFO: Got endpoints: latency-svc-l2ls7 [749.225995ms]
  Apr 28 16:31:54.884: INFO: Created: latency-svc-blrs6
  Apr 28 16:31:54.926: INFO: Got endpoints: latency-svc-bltfv [749.151029ms]
  Apr 28 16:31:54.933: INFO: Created: latency-svc-cx6rb
  Apr 28 16:31:54.988: INFO: Got endpoints: latency-svc-9l2bg [762.560303ms]
  Apr 28 16:31:55.044: INFO: Created: latency-svc-mk6gq
  Apr 28 16:31:55.044: INFO: Got endpoints: latency-svc-kmlbz [765.377265ms]
  Apr 28 16:31:55.052: INFO: Created: latency-svc-nsbb9
  Apr 28 16:31:55.075: INFO: Got endpoints: latency-svc-fgxkg [731.742625ms]
  Apr 28 16:31:55.086: INFO: Created: latency-svc-br9gz
  Apr 28 16:31:55.142: INFO: Got endpoints: latency-svc-8sv66 [766.773496ms]
  Apr 28 16:31:55.154: INFO: Created: latency-svc-md7jl
  Apr 28 16:31:55.175: INFO: Got endpoints: latency-svc-q2xsj [733.724893ms]
  Apr 28 16:31:55.183: INFO: Created: latency-svc-t5w6r
  Apr 28 16:31:55.227: INFO: Got endpoints: latency-svc-5tz9z [751.67459ms]
  Apr 28 16:31:55.235: INFO: Created: latency-svc-hjhxk
  Apr 28 16:31:55.277: INFO: Got endpoints: latency-svc-glxvg [730.840203ms]
  Apr 28 16:31:55.285: INFO: Created: latency-svc-lt6ct
  Apr 28 16:31:55.328: INFO: Got endpoints: latency-svc-fwsjx [752.525912ms]
  Apr 28 16:31:55.337: INFO: Created: latency-svc-m846v
  Apr 28 16:31:55.377: INFO: Got endpoints: latency-svc-vwwch [734.597013ms]
  Apr 28 16:31:55.385: INFO: Created: latency-svc-dmfbd
  Apr 28 16:31:55.426: INFO: Got endpoints: latency-svc-vmshc [750.368521ms]
  Apr 28 16:31:55.434: INFO: Created: latency-svc-9tmgk
  Apr 28 16:31:55.478: INFO: Got endpoints: latency-svc-lhqxb [749.228059ms]
  Apr 28 16:31:55.486: INFO: Created: latency-svc-29bfq
  Apr 28 16:31:55.526: INFO: Got endpoints: latency-svc-98vkp [750.556864ms]
  Apr 28 16:31:55.535: INFO: Created: latency-svc-5cngx
  Apr 28 16:31:55.577: INFO: Got endpoints: latency-svc-krccx [749.629526ms]
  Apr 28 16:31:55.587: INFO: Created: latency-svc-kw44j
  Apr 28 16:31:55.627: INFO: Got endpoints: latency-svc-blrs6 [751.169161ms]
  Apr 28 16:31:55.636: INFO: Created: latency-svc-sxtvl
  Apr 28 16:31:55.677: INFO: Got endpoints: latency-svc-cx6rb [750.906419ms]
  Apr 28 16:31:55.688: INFO: Created: latency-svc-r4945
  Apr 28 16:31:55.726: INFO: Got endpoints: latency-svc-mk6gq [737.689097ms]
  Apr 28 16:31:55.736: INFO: Created: latency-svc-gp8s2
  Apr 28 16:31:55.775: INFO: Got endpoints: latency-svc-nsbb9 [731.549364ms]
  Apr 28 16:31:55.783: INFO: Created: latency-svc-lwtjs
  Apr 28 16:31:55.827: INFO: Got endpoints: latency-svc-br9gz [751.789923ms]
  Apr 28 16:31:55.835: INFO: Created: latency-svc-sqczg
  Apr 28 16:31:55.876: INFO: Got endpoints: latency-svc-md7jl [734.443761ms]
  Apr 28 16:31:55.884: INFO: Created: latency-svc-vw4cp
  Apr 28 16:31:55.927: INFO: Got endpoints: latency-svc-t5w6r [751.841464ms]
  Apr 28 16:31:55.935: INFO: Created: latency-svc-592st
  Apr 28 16:31:55.976: INFO: Got endpoints: latency-svc-hjhxk [749.608508ms]
  Apr 28 16:31:55.985: INFO: Created: latency-svc-7rrgw
  Apr 28 16:31:56.028: INFO: Got endpoints: latency-svc-lt6ct [750.370305ms]
  Apr 28 16:31:56.035: INFO: Created: latency-svc-cxnzz
  Apr 28 16:31:56.078: INFO: Got endpoints: latency-svc-m846v [750.719801ms]
  Apr 28 16:31:56.086: INFO: Created: latency-svc-9rtxk
  Apr 28 16:31:56.126: INFO: Got endpoints: latency-svc-dmfbd [748.980245ms]
  Apr 28 16:31:56.134: INFO: Created: latency-svc-q8trs
  Apr 28 16:31:56.177: INFO: Got endpoints: latency-svc-9tmgk [751.152484ms]
  Apr 28 16:31:56.186: INFO: Created: latency-svc-8lh6t
  Apr 28 16:31:56.226: INFO: Got endpoints: latency-svc-29bfq [748.330729ms]
  Apr 28 16:31:56.236: INFO: Created: latency-svc-lnnmw
  Apr 28 16:31:56.277: INFO: Got endpoints: latency-svc-5cngx [751.19793ms]
  Apr 28 16:31:56.285: INFO: Created: latency-svc-6hxd7
  Apr 28 16:31:56.327: INFO: Got endpoints: latency-svc-kw44j [749.805518ms]
  Apr 28 16:31:56.337: INFO: Created: latency-svc-prc8b
  Apr 28 16:31:56.375: INFO: Got endpoints: latency-svc-sxtvl [748.747553ms]
  Apr 28 16:31:56.384: INFO: Created: latency-svc-4zbm7
  Apr 28 16:31:56.426: INFO: Got endpoints: latency-svc-r4945 [749.589505ms]
  Apr 28 16:31:56.438: INFO: Created: latency-svc-qc9nr
  Apr 28 16:31:56.476: INFO: Got endpoints: latency-svc-gp8s2 [749.89241ms]
  Apr 28 16:31:56.484: INFO: Created: latency-svc-l55rm
  Apr 28 16:31:56.527: INFO: Got endpoints: latency-svc-lwtjs [751.885772ms]
  Apr 28 16:31:56.536: INFO: Created: latency-svc-mpczh
  Apr 28 16:31:56.576: INFO: Got endpoints: latency-svc-sqczg [748.578136ms]
  Apr 28 16:31:56.584: INFO: Created: latency-svc-2fp6x
  Apr 28 16:31:56.627: INFO: Got endpoints: latency-svc-vw4cp [750.417844ms]
  Apr 28 16:31:56.635: INFO: Created: latency-svc-dkwkf
  Apr 28 16:31:56.676: INFO: Got endpoints: latency-svc-592st [748.452138ms]
  Apr 28 16:31:56.685: INFO: Created: latency-svc-v5rln
  Apr 28 16:31:56.729: INFO: Got endpoints: latency-svc-7rrgw [752.697564ms]
  Apr 28 16:31:56.738: INFO: Created: latency-svc-kgqtv
  Apr 28 16:31:56.778: INFO: Got endpoints: latency-svc-cxnzz [750.112945ms]
  Apr 28 16:31:56.786: INFO: Created: latency-svc-rkz47
  Apr 28 16:31:56.826: INFO: Got endpoints: latency-svc-9rtxk [747.955032ms]
  Apr 28 16:31:56.835: INFO: Created: latency-svc-s2jd4
  Apr 28 16:31:56.876: INFO: Got endpoints: latency-svc-q8trs [750.152953ms]
  Apr 28 16:31:56.885: INFO: Created: latency-svc-gh2d2
  Apr 28 16:31:56.926: INFO: Got endpoints: latency-svc-8lh6t [748.580044ms]
  Apr 28 16:31:56.939: INFO: Created: latency-svc-px4bb
  Apr 28 16:31:56.977: INFO: Got endpoints: latency-svc-lnnmw [750.317779ms]
  Apr 28 16:31:56.985: INFO: Created: latency-svc-rg59z
  Apr 28 16:31:57.026: INFO: Got endpoints: latency-svc-6hxd7 [748.59703ms]
  Apr 28 16:31:57.035: INFO: Created: latency-svc-gv4zz
  Apr 28 16:31:57.076: INFO: Got endpoints: latency-svc-prc8b [748.860249ms]
  Apr 28 16:31:57.085: INFO: Created: latency-svc-vxdm9
  Apr 28 16:31:57.126: INFO: Got endpoints: latency-svc-4zbm7 [750.453874ms]
  Apr 28 16:31:57.135: INFO: Created: latency-svc-dfdxm
  Apr 28 16:31:57.176: INFO: Got endpoints: latency-svc-qc9nr [749.266114ms]
  Apr 28 16:31:57.198: INFO: Created: latency-svc-xlkzv
  Apr 28 16:31:57.241: INFO: Got endpoints: latency-svc-l55rm [764.62126ms]
  Apr 28 16:31:57.249: INFO: Created: latency-svc-4pcdq
  Apr 28 16:31:57.276: INFO: Got endpoints: latency-svc-mpczh [748.244743ms]
  Apr 28 16:31:57.284: INFO: Created: latency-svc-vvl7m
  Apr 28 16:31:57.326: INFO: Got endpoints: latency-svc-2fp6x [750.648031ms]
  Apr 28 16:31:57.334: INFO: Created: latency-svc-w8784
  Apr 28 16:31:57.377: INFO: Got endpoints: latency-svc-dkwkf [749.721248ms]
  Apr 28 16:31:57.385: INFO: Created: latency-svc-gmnd4
  Apr 28 16:31:57.426: INFO: Got endpoints: latency-svc-v5rln [749.936983ms]
  Apr 28 16:31:57.435: INFO: Created: latency-svc-m7ksf
  Apr 28 16:31:57.476: INFO: Got endpoints: latency-svc-kgqtv [745.978907ms]
  Apr 28 16:31:57.484: INFO: Created: latency-svc-bs55x
  Apr 28 16:31:57.527: INFO: Got endpoints: latency-svc-rkz47 [748.965586ms]
  Apr 28 16:31:57.537: INFO: Created: latency-svc-m7pgk
  Apr 28 16:31:57.576: INFO: Got endpoints: latency-svc-s2jd4 [749.928978ms]
  Apr 28 16:31:57.584: INFO: Created: latency-svc-5rn87
  Apr 28 16:31:57.626: INFO: Got endpoints: latency-svc-gh2d2 [749.76898ms]
  Apr 28 16:31:57.634: INFO: Created: latency-svc-k8z6l
  Apr 28 16:31:57.676: INFO: Got endpoints: latency-svc-px4bb [749.574808ms]
  Apr 28 16:31:57.684: INFO: Created: latency-svc-q76rw
  Apr 28 16:31:57.728: INFO: Got endpoints: latency-svc-rg59z [751.560121ms]
  Apr 28 16:31:57.737: INFO: Created: latency-svc-6hk52
  Apr 28 16:31:57.776: INFO: Got endpoints: latency-svc-gv4zz [750.024692ms]
  Apr 28 16:31:57.784: INFO: Created: latency-svc-g57qq
  Apr 28 16:31:57.828: INFO: Got endpoints: latency-svc-vxdm9 [751.863862ms]
  Apr 28 16:31:57.836: INFO: Created: latency-svc-wz2qq
  Apr 28 16:31:57.876: INFO: Got endpoints: latency-svc-dfdxm [750.306881ms]
  Apr 28 16:31:57.886: INFO: Created: latency-svc-sj7dh
  Apr 28 16:31:57.926: INFO: Got endpoints: latency-svc-xlkzv [750.743145ms]
  Apr 28 16:31:57.936: INFO: Created: latency-svc-hp5dj
  Apr 28 16:31:57.976: INFO: Got endpoints: latency-svc-4pcdq [735.059033ms]
  Apr 28 16:31:57.984: INFO: Created: latency-svc-6xfcf
  Apr 28 16:31:58.026: INFO: Got endpoints: latency-svc-vvl7m [750.617625ms]
  Apr 28 16:31:58.035: INFO: Created: latency-svc-6jzcz
  Apr 28 16:31:58.079: INFO: Got endpoints: latency-svc-w8784 [752.553203ms]
  Apr 28 16:31:58.087: INFO: Created: latency-svc-jrgql
  Apr 28 16:31:58.127: INFO: Got endpoints: latency-svc-gmnd4 [750.579051ms]
  Apr 28 16:31:58.137: INFO: Created: latency-svc-jfc5t
  Apr 28 16:31:58.176: INFO: Got endpoints: latency-svc-m7ksf [749.672999ms]
  Apr 28 16:31:58.184: INFO: Created: latency-svc-6hq8h
  Apr 28 16:31:58.226: INFO: Got endpoints: latency-svc-bs55x [750.430431ms]
  Apr 28 16:31:58.235: INFO: Created: latency-svc-256gz
  Apr 28 16:31:58.277: INFO: Got endpoints: latency-svc-m7pgk [750.220704ms]
  Apr 28 16:31:58.288: INFO: Created: latency-svc-w6c6w
  Apr 28 16:31:58.327: INFO: Got endpoints: latency-svc-5rn87 [750.169491ms]
  Apr 28 16:31:58.334: INFO: Created: latency-svc-6qn2z
  Apr 28 16:31:58.376: INFO: Got endpoints: latency-svc-k8z6l [750.177458ms]
  Apr 28 16:31:58.425: INFO: Got endpoints: latency-svc-q76rw [749.682459ms]
  Apr 28 16:31:58.476: INFO: Got endpoints: latency-svc-6hk52 [747.394792ms]
  Apr 28 16:31:58.531: INFO: Got endpoints: latency-svc-g57qq [754.920291ms]
  Apr 28 16:31:58.577: INFO: Got endpoints: latency-svc-wz2qq [748.982253ms]
  Apr 28 16:31:58.627: INFO: Got endpoints: latency-svc-sj7dh [750.721346ms]
  Apr 28 16:31:58.677: INFO: Got endpoints: latency-svc-hp5dj [750.649931ms]
  Apr 28 16:31:58.729: INFO: Got endpoints: latency-svc-6xfcf [753.272963ms]
  Apr 28 16:31:58.777: INFO: Got endpoints: latency-svc-6jzcz [750.313649ms]
  Apr 28 16:31:58.828: INFO: Got endpoints: latency-svc-jrgql [748.91764ms]
  Apr 28 16:31:58.877: INFO: Got endpoints: latency-svc-jfc5t [749.162838ms]
  Apr 28 16:31:58.927: INFO: Got endpoints: latency-svc-6hq8h [751.47502ms]
  Apr 28 16:31:58.976: INFO: Got endpoints: latency-svc-256gz [750.199328ms]
  Apr 28 16:31:59.026: INFO: Got endpoints: latency-svc-w6c6w [748.603083ms]
  Apr 28 16:31:59.076: INFO: Got endpoints: latency-svc-6qn2z [749.785695ms]
  Apr 28 16:31:59.076: INFO: Latencies: [15.638085ms 23.461646ms 30.320342ms 37.032838ms 43.640776ms 51.738444ms 54.743206ms 62.672132ms 66.616049ms 74.364792ms 84.00658ms 116.97224ms 124.722351ms 128.255048ms 128.560582ms 129.225207ms 129.760344ms 132.983406ms 136.020905ms 138.780943ms 139.012023ms 142.378567ms 142.688799ms 147.458105ms 162.152779ms 165.506279ms 165.637994ms 167.062463ms 172.124734ms 172.282882ms 172.696857ms 177.922192ms 179.193974ms 185.222655ms 185.331976ms 186.689345ms 196.920836ms 278.571459ms 290.305773ms 302.123769ms 348.752646ms 389.936255ms 436.294206ms 476.994073ms 485.486978ms 524.637899ms 568.719949ms 606.20921ms 652.211863ms 687.253349ms 692.797031ms 730.840203ms 731.549364ms 731.742625ms 732.353992ms 733.602386ms 733.724893ms 734.443761ms 734.597013ms 735.059033ms 736.864502ms 737.689097ms 745.475419ms 745.978907ms 746.652899ms 747.394792ms 747.701781ms 747.819701ms 747.874208ms 747.955032ms 748.095465ms 748.142447ms 748.197102ms 748.244743ms 748.317464ms 748.330729ms 748.452138ms 748.578136ms 748.580044ms 748.59703ms 748.603083ms 748.627524ms 748.658789ms 748.719564ms 748.720984ms 748.747553ms 748.83434ms 748.860249ms 748.91764ms 748.952972ms 748.965586ms 748.980245ms 748.982253ms 749.127722ms 749.151029ms 749.162838ms 749.206968ms 749.225995ms 749.228059ms 749.245444ms 749.262987ms 749.266114ms 749.278378ms 749.318954ms 749.399707ms 749.532325ms 749.543725ms 749.574808ms 749.589505ms 749.608508ms 749.621947ms 749.629526ms 749.646951ms 749.672999ms 749.682459ms 749.721248ms 749.76898ms 749.776375ms 749.785695ms 749.786078ms 749.790325ms 749.792915ms 749.805518ms 749.89241ms 749.928978ms 749.936983ms 750.00967ms 750.024692ms 750.046538ms 750.112945ms 750.130673ms 750.152953ms 750.160345ms 750.169491ms 750.177458ms 750.199328ms 750.220704ms 750.302469ms 750.305226ms 750.306881ms 750.313649ms 750.317779ms 750.368521ms 750.370305ms 750.417844ms 750.430431ms 750.453874ms 750.552437ms 750.556864ms 750.579051ms 750.586982ms 750.617625ms 750.633621ms 750.648031ms 750.649931ms 750.719801ms 750.721346ms 750.740311ms 750.743145ms 750.755979ms 750.780747ms 750.811791ms 750.829025ms 750.850116ms 750.906419ms 750.972178ms 751.002214ms 751.053267ms 751.152484ms 751.169161ms 751.19793ms 751.3921ms 751.419897ms 751.436393ms 751.47502ms 751.533809ms 751.560121ms 751.674365ms 751.67459ms 751.789923ms 751.841464ms 751.863862ms 751.869135ms 751.885772ms 752.024838ms 752.433944ms 752.525912ms 752.553203ms 752.697564ms 753.141111ms 753.272963ms 754.920291ms 762.560303ms 763.927203ms 764.62126ms 765.377265ms 765.845587ms 766.148596ms 766.773496ms 770.274581ms]
  Apr 28 16:31:59.077: INFO: 50 %ile: 749.262987ms
  Apr 28 16:31:59.077: INFO: 90 %ile: 751.841464ms
  Apr 28 16:31:59.077: INFO: 99 %ile: 766.773496ms
  Apr 28 16:31:59.077: INFO: Total sample count: 200
  Apr 28 16:31:59.077: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svc-latency-383" for this suite. @ 04/28/24 16:31:59.079
â€¢ [9.743 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:250
  STEP: Creating a kubernetes client @ 04/28/24 16:31:59.087
  Apr 28 16:31:59.087: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 16:31:59.087
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:31:59.096
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:31:59.098
  STEP: Setting up server cert @ 04/28/24 16:31:59.11
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 16:31:59.624
  STEP: Deploying the webhook pod @ 04/28/24 16:31:59.629
  STEP: Wait for the deployment to be ready @ 04/28/24 16:31:59.638
  Apr 28 16:31:59.642: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 04/28/24 16:32:01.648
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 16:32:01.657
  Apr 28 16:32:02.657: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the mutating configmap webhook via the AdmissionRegistration API @ 04/28/24 16:32:02.661
  STEP: create a configmap that should be updated by the webhook @ 04/28/24 16:32:02.672
  Apr 28 16:32:02.682: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-7075" for this suite. @ 04/28/24 16:32:02.707
  STEP: Destroying namespace "webhook-markers-2285" for this suite. @ 04/28/24 16:32:02.711
â€¢ [3.629 seconds]
------------------------------
SSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:331
  STEP: Creating a kubernetes client @ 04/28/24 16:32:02.715
  Apr 28 16:32:02.715: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename statefulset @ 04/28/24 16:32:02.716
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:32:02.723
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:32:02.725
  STEP: Creating service test in namespace statefulset-3251 @ 04/28/24 16:32:02.728
  STEP: Creating a new StatefulSet @ 04/28/24 16:32:02.731
  Apr 28 16:32:02.743: INFO: Found 0 stateful pods, waiting for 3
  Apr 28 16:32:12.747: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Apr 28 16:32:12.747: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Apr 28 16:32:12.747: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Updating stateful set template: update image from registry.k8s.io/e2e-test-images/httpd:2.4.38-4 to registry.k8s.io/e2e-test-images/httpd:2.4.39-4 @ 04/28/24 16:32:12.753
  Apr 28 16:32:12.770: INFO: Updating stateful set ss2
  STEP: Creating a new revision @ 04/28/24 16:32:12.77
  STEP: Not applying an update when the partition is greater than the number of replicas @ 04/28/24 16:32:22.779
  STEP: Performing a canary update @ 04/28/24 16:32:22.779
  Apr 28 16:32:22.795: INFO: Updating stateful set ss2
  Apr 28 16:32:22.800: INFO: Waiting for Pod statefulset-3251/ss2-2 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  STEP: Restoring Pods to the correct revision when they are deleted @ 04/28/24 16:32:32.807
  Apr 28 16:32:32.829: INFO: Found 1 stateful pods, waiting for 3
  Apr 28 16:32:42.832: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Apr 28 16:32:42.832: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Apr 28 16:32:42.832: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Performing a phased rolling update @ 04/28/24 16:32:42.836
  Apr 28 16:32:42.853: INFO: Updating stateful set ss2
  Apr 28 16:32:42.857: INFO: Waiting for Pod statefulset-3251/ss2-1 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  Apr 28 16:32:52.880: INFO: Updating stateful set ss2
  Apr 28 16:32:52.884: INFO: Waiting for StatefulSet statefulset-3251/ss2 to complete update
  Apr 28 16:32:52.884: INFO: Waiting for Pod statefulset-3251/ss2-0 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  Apr 28 16:33:02.890: INFO: Deleting all statefulset in ns statefulset-3251
  Apr 28 16:33:02.892: INFO: Scaling statefulset ss2 to 0
  Apr 28 16:33:12.905: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 28 16:33:12.906: INFO: Deleting statefulset ss2
  Apr 28 16:33:12.913: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-3251" for this suite. @ 04/28/24 16:33:12.915
â€¢ [70.203 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtime.go:232
  STEP: Creating a kubernetes client @ 04/28/24 16:33:12.92
  Apr 28 16:33:12.920: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-runtime @ 04/28/24 16:33:12.92
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:33:12.927
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:33:12.929
  STEP: create the container @ 04/28/24 16:33:12.931
  W0428 16:33:12.936933      22 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 04/28/24 16:33:12.937
  STEP: get the container status @ 04/28/24 16:33:14.944
  STEP: the container should be terminated @ 04/28/24 16:33:14.946
  STEP: the termination message should be set @ 04/28/24 16:33:14.946
  Apr 28 16:33:14.946: INFO: Expected: &{} to match Container's Termination Message:  --
  STEP: delete the container @ 04/28/24 16:33:14.946
  Apr 28 16:33:14.953: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-75" for this suite. @ 04/28/24 16:33:14.957
â€¢ [2.041 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:375
  STEP: Creating a kubernetes client @ 04/28/24 16:33:14.962
  Apr 28 16:33:14.962: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:33:14.962
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:33:14.971
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:33:14.973
  STEP: Creating configMap with name projected-configmap-test-volume-ee8a7ad6-2c43-4fdc-85fc-b4e564aa49ee @ 04/28/24 16:33:14.974
  STEP: Creating a pod to test consume configMaps @ 04/28/24 16:33:14.977
  STEP: Saw pod success @ 04/28/24 16:33:16.986
  Apr 28 16:33:16.988: INFO: Trying to get logs from node k8sconformance-m02 pod pod-projected-configmaps-bbe3fc1d-f49b-422c-9ff5-9de0eaffaafa container projected-configmap-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 16:33:16.999
  Apr 28 16:33:17.008: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-813" for this suite. @ 04/28/24 16:33:17.01
â€¢ [2.052 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]
k8s.io/kubernetes/test/e2e/apps/statefulset.go:640
  STEP: Creating a kubernetes client @ 04/28/24 16:33:17.015
  Apr 28 16:33:17.015: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename statefulset @ 04/28/24 16:33:17.015
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:33:17.023
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:33:17.025
  STEP: Creating service test in namespace statefulset-9693 @ 04/28/24 16:33:17.026
  STEP: Initializing watcher for selector baz=blah,foo=bar @ 04/28/24 16:33:17.03
  STEP: Creating stateful set ss in namespace statefulset-9693 @ 04/28/24 16:33:17.032
  STEP: Waiting until all stateful set ss replicas will be running in namespace statefulset-9693 @ 04/28/24 16:33:17.035
  Apr 28 16:33:17.036: INFO: Found 0 stateful pods, waiting for 1
  Apr 28 16:33:27.040: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Confirming that stateful set scale up will halt with unhealthy stateful pod @ 04/28/24 16:33:27.04
  Apr 28 16:33:27.042: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-9693 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 28 16:33:27.143: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 28 16:33:27.143: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 28 16:33:27.143: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 28 16:33:27.145: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=true
  Apr 28 16:33:37.149: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Apr 28 16:33:37.149: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Apr 28 16:33:37.160: INFO: Verifying statefulset ss doesn't scale past 1 for another 9.999999748s
  Apr 28 16:33:38.163: INFO: Verifying statefulset ss doesn't scale past 1 for another 8.996673878s
  Apr 28 16:33:39.166: INFO: Verifying statefulset ss doesn't scale past 1 for another 7.993059527s
  Apr 28 16:33:40.169: INFO: Verifying statefulset ss doesn't scale past 1 for another 6.990494392s
  Apr 28 16:33:41.172: INFO: Verifying statefulset ss doesn't scale past 1 for another 5.987775359s
  Apr 28 16:33:42.174: INFO: Verifying statefulset ss doesn't scale past 1 for another 4.985068297s
  Apr 28 16:33:43.177: INFO: Verifying statefulset ss doesn't scale past 1 for another 3.982399184s
  Apr 28 16:33:44.180: INFO: Verifying statefulset ss doesn't scale past 1 for another 2.978949238s
  Apr 28 16:33:45.183: INFO: Verifying statefulset ss doesn't scale past 1 for another 1.976397907s
  Apr 28 16:33:46.186: INFO: Verifying statefulset ss doesn't scale past 1 for another 973.295129ms
  STEP: Scaling up stateful set ss to 3 replicas and waiting until all of them will be running in namespace statefulset-9693 @ 04/28/24 16:33:47.186
  Apr 28 16:33:47.189: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-9693 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 28 16:33:47.285: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Apr 28 16:33:47.285: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 28 16:33:47.285: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 28 16:33:47.287: INFO: Found 1 stateful pods, waiting for 3
  Apr 28 16:33:57.291: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Apr 28 16:33:57.291: INFO: Waiting for pod ss-1 to enter Running - Ready=true, currently Running - Ready=true
  Apr 28 16:33:57.291: INFO: Waiting for pod ss-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Verifying that stateful set ss was scaled up in order @ 04/28/24 16:33:57.291
  STEP: Scale down will halt with unhealthy stateful pod @ 04/28/24 16:33:57.291
  Apr 28 16:33:57.295: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-9693 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 28 16:33:57.391: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 28 16:33:57.391: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 28 16:33:57.391: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 28 16:33:57.391: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-9693 exec ss-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 28 16:33:57.563: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 28 16:33:57.563: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 28 16:33:57.563: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 28 16:33:57.563: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-9693 exec ss-2 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Apr 28 16:33:57.660: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Apr 28 16:33:57.660: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Apr 28 16:33:57.660: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-2: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Apr 28 16:33:57.660: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Apr 28 16:33:57.662: INFO: Waiting for statefulset status.readyReplicas to become 0, currently 3
  Apr 28 16:34:07.668: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Apr 28 16:34:07.668: INFO: Waiting for pod ss-1 to enter Running - Ready=false, currently Running - Ready=false
  Apr 28 16:34:07.668: INFO: Waiting for pod ss-2 to enter Running - Ready=false, currently Running - Ready=false
  Apr 28 16:34:07.676: INFO: Verifying statefulset ss doesn't scale past 3 for another 9.999999616s
  Apr 28 16:34:08.679: INFO: Verifying statefulset ss doesn't scale past 3 for another 8.997385696s
  Apr 28 16:34:09.681: INFO: Verifying statefulset ss doesn't scale past 3 for another 7.994609238s
  Apr 28 16:34:10.685: INFO: Verifying statefulset ss doesn't scale past 3 for another 6.991534707s
  Apr 28 16:34:11.687: INFO: Verifying statefulset ss doesn't scale past 3 for another 5.988575495s
  Apr 28 16:34:12.690: INFO: Verifying statefulset ss doesn't scale past 3 for another 4.985615049s
  Apr 28 16:34:13.693: INFO: Verifying statefulset ss doesn't scale past 3 for another 3.983092737s
  Apr 28 16:34:14.696: INFO: Verifying statefulset ss doesn't scale past 3 for another 2.980124334s
  Apr 28 16:34:15.699: INFO: Verifying statefulset ss doesn't scale past 3 for another 1.976709757s
  Apr 28 16:34:16.703: INFO: Verifying statefulset ss doesn't scale past 3 for another 972.951416ms
  STEP: Scaling down stateful set ss to 0 replicas and waiting until none of pods will run in namespacestatefulset-9693 @ 04/28/24 16:34:17.704
  Apr 28 16:34:17.707: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-9693 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 28 16:34:17.807: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Apr 28 16:34:17.807: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 28 16:34:17.807: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 28 16:34:17.807: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-9693 exec ss-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 28 16:34:17.908: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Apr 28 16:34:17.908: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 28 16:34:17.908: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 28 16:34:17.908: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=statefulset-9693 exec ss-2 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Apr 28 16:34:18.007: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Apr 28 16:34:18.007: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Apr 28 16:34:18.007: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-2: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Apr 28 16:34:18.007: INFO: Scaling statefulset ss to 0
  STEP: Verifying that stateful set ss was scaled down in reverse order @ 04/28/24 16:34:28.018
  Apr 28 16:34:28.018: INFO: Deleting all statefulset in ns statefulset-9693
  Apr 28 16:34:28.020: INFO: Scaling statefulset ss to 0
  Apr 28 16:34:28.026: INFO: Waiting for statefulset status.replicas updated to 0
  Apr 28 16:34:28.027: INFO: Deleting statefulset ss
  Apr 28 16:34:28.033: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-9693" for this suite. @ 04/28/24 16:34:28.035
â€¢ [71.024 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] RuntimeClass  should support RuntimeClasses API operations [Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtimeclass.go:189
  STEP: Creating a kubernetes client @ 04/28/24 16:34:28.039
  Apr 28 16:34:28.039: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename runtimeclass @ 04/28/24 16:34:28.04
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:34:28.047
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:34:28.049
  STEP: getting /apis @ 04/28/24 16:34:28.051
  STEP: getting /apis/node.k8s.io @ 04/28/24 16:34:28.054
  STEP: getting /apis/node.k8s.io/v1 @ 04/28/24 16:34:28.054
  STEP: creating @ 04/28/24 16:34:28.055
  STEP: watching @ 04/28/24 16:34:28.068
  Apr 28 16:34:28.068: INFO: starting watch
  STEP: getting @ 04/28/24 16:34:28.073
  STEP: listing @ 04/28/24 16:34:28.074
  STEP: patching @ 04/28/24 16:34:28.076
  STEP: updating @ 04/28/24 16:34:28.078
  Apr 28 16:34:28.081: INFO: waiting for watch events with expected annotations
  STEP: deleting @ 04/28/24 16:34:28.081
  STEP: deleting a collection @ 04/28/24 16:34:28.086
  Apr 28 16:34:28.093: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-2818" for this suite. @ 04/28/24 16:34:28.095
â€¢ [0.058 seconds]
------------------------------
S
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:137
  STEP: Creating a kubernetes client @ 04/28/24 16:34:28.098
  Apr 28 16:34:28.098: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir @ 04/28/24 16:34:28.098
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:34:28.107
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:34:28.109
  STEP: Creating a pod to test emptydir 0666 on tmpfs @ 04/28/24 16:34:28.11
  STEP: Saw pod success @ 04/28/24 16:34:32.124
  Apr 28 16:34:32.125: INFO: Trying to get logs from node k8sconformance-m02 pod pod-b8666485-050c-4f79-9a09-e067149a55a8 container test-container: <nil>
  STEP: delete the pod @ 04/28/24 16:34:32.133
  Apr 28 16:34:32.142: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-5776" for this suite. @ 04/28/24 16:34:32.144
â€¢ [4.050 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/custom_resource_definition.go:58
  STEP: Creating a kubernetes client @ 04/28/24 16:34:32.148
  Apr 28 16:34:32.148: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename custom-resource-definition @ 04/28/24 16:34:32.149
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:34:32.157
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:34:32.159
  Apr 28 16:34:32.160: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:34:33.173: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-3830" for this suite. @ 04/28/24 16:34:33.175
â€¢ [1.031 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance]
k8s.io/kubernetes/test/e2e/auth/service_accounts.go:529
  STEP: Creating a kubernetes client @ 04/28/24 16:34:33.18
  Apr 28 16:34:33.180: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename svcaccounts @ 04/28/24 16:34:33.18
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:34:33.187
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:34:33.189
  Apr 28 16:34:33.199: INFO: created pod
  STEP: Saw pod success @ 04/28/24 16:34:37.248
  Apr 28 16:35:07.249: INFO: polling logs
  Apr 28 16:35:07.256: INFO: Pod logs: 
  I0428 16:34:33.814805       1 log.go:245] OK: Got token
  I0428 16:34:33.814876       1 log.go:245] validating with in-cluster discovery
  I0428 16:34:33.815196       1 log.go:245] OK: got issuer https://kubernetes.default.svc.cluster.local
  I0428 16:34:33.815226       1 log.go:245] Full, not-validated claims: 
  openidmetadata.claims{Claims:jwt.Claims{Issuer:"https://kubernetes.default.svc.cluster.local", Subject:"system:serviceaccount:svcaccounts-8236:default", Audience:jwt.Audience{"oidc-discovery-test"}, Expiry:(*jwt.NumericDate)(0xc0004c5060), NotBefore:(*jwt.NumericDate)(0xc0004c5148), IssuedAt:(*jwt.NumericDate)(0xc0004c5070), ID:""}, Kubernetes:openidmetadata.kubeClaims{Namespace:"svcaccounts-8236", ServiceAccount:openidmetadata.kubeName{Name:"default", UID:"338124fb-2f02-4a71-ba04-0b83867f9f46"}}}
  I0428 16:34:33.843171       1 log.go:245] OK: Constructed OIDC provider for issuer https://kubernetes.default.svc.cluster.local
  I0428 16:34:33.847409       1 log.go:245] OK: Validated signature on JWT
  I0428 16:34:33.847479       1 log.go:245] OK: Got valid claims from token!
  I0428 16:34:33.847500       1 log.go:245] Full, validated claims: 
  &openidmetadata.claims{Claims:jwt.Claims{Issuer:"https://kubernetes.default.svc.cluster.local", Subject:"system:serviceaccount:svcaccounts-8236:default", Audience:jwt.Audience{"oidc-discovery-test"}, Expiry:(*jwt.NumericDate)(0xc000386670), NotBefore:(*jwt.NumericDate)(0xc000386698), IssuedAt:(*jwt.NumericDate)(0xc000386678), ID:""}, Kubernetes:openidmetadata.kubeClaims{Namespace:"svcaccounts-8236", ServiceAccount:openidmetadata.kubeName{Name:"default", UID:"338124fb-2f02-4a71-ba04-0b83867f9f46"}}}

  Apr 28 16:35:07.256: INFO: completed pod
  Apr 28 16:35:07.260: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-8236" for this suite. @ 04/28/24 16:35:07.262
â€¢ [34.087 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:183
  STEP: Creating a kubernetes client @ 04/28/24 16:35:07.268
  Apr 28 16:35:07.268: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-probe @ 04/28/24 16:35:07.269
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:35:07.276
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:35:07.278
  STEP: Creating pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553 @ 04/28/24 16:35:07.28
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/28/24 16:35:09.291
  Apr 28 16:35:09.292: INFO: Initial restart count of pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 is 0
  Apr 28 16:35:09.294: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:11.297: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:13.300: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:15.304: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:17.307: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:19.310: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:21.313: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:23.316: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:25.320: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:27.324: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:29.327: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:31.329: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:33.333: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:35.336: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:37.340: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:39.343: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:41.346: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:43.349: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:45.352: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:47.355: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:49.359: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:51.362: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:53.365: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:55.367: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:57.371: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:35:59.374: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:01.377: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:03.379: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:05.382: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:07.386: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:09.389: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:11.392: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:13.396: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:15.399: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:17.403: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:19.407: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:21.410: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:23.413: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:25.416: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:27.420: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:29.423: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:31.426: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:33.430: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:35.433: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:37.436: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:39.439: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:41.442: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:43.445: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:45.448: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:47.452: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:49.454: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:51.457: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:53.460: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:55.463: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:57.467: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:36:59.469: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:01.471: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:03.474: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:05.477: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:07.481: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:09.483: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:11.486: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:13.489: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:15.493: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:17.497: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:19.500: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:21.503: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:23.506: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:25.509: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:27.512: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:29.516: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:31.518: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:33.521: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:35.524: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:37.527: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:39.530: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:41.533: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:43.535: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:45.539: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:47.543: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:49.545: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:51.548: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:53.550: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:55.553: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:57.556: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:37:59.559: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:01.562: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:03.565: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:05.568: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:07.572: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:09.575: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:11.578: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:13.581: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:15.584: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:17.588: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:19.592: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:21.594: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:23.597: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:25.600: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:27.604: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:29.607: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:31.610: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:33.613: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:35.615: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:37.619: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:39.622: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:41.624: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:43.628: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:45.631: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:47.635: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:49.638: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:51.640: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:53.643: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:55.647: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:57.650: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:38:59.653: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:39:01.655: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:39:03.658: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:39:05.661: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:39:07.664: INFO: Get pod liveness-2f8520c2-af82-4b97-825c-8b8a6d204ae6 in namespace container-probe-4553
  Apr 28 16:39:09.665: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 04/28/24 16:39:09.668
  STEP: Destroying namespace "container-probe-4553" for this suite. @ 04/28/24 16:39:09.676
â€¢ [242.412 seconds]
------------------------------
[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/garbage_collector.go:321
  STEP: Creating a kubernetes client @ 04/28/24 16:39:09.68
  Apr 28 16:39:09.680: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename gc @ 04/28/24 16:39:09.68
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:39:09.691
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:39:09.693
  STEP: create the rc @ 04/28/24 16:39:09.695
  W0428 16:39:09.699672      22 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: delete the rc @ 04/28/24 16:39:14.702
  STEP: wait for all pods to be garbage collected @ 04/28/24 16:39:14.706
  STEP: Gathering metrics @ 04/28/24 16:39:19.71
  Apr 28 16:39:19.784: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Apr 28 16:39:19.784: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-8107" for this suite. @ 04/28/24 16:39:19.787
â€¢ [10.111 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]
k8s.io/kubernetes/test/e2e/scheduling/preemption.go:224
  STEP: Creating a kubernetes client @ 04/28/24 16:39:19.791
  Apr 28 16:39:19.791: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename sched-preemption @ 04/28/24 16:39:19.792
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:39:19.801
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:39:19.803
  Apr 28 16:39:19.812: INFO: Waiting up to 1m0s for all nodes to be ready
  Apr 28 16:40:19.824: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Create pods that use 4/5 of node resources. @ 04/28/24 16:40:19.826
  Apr 28 16:40:19.839: INFO: Created pod: pod0-0-sched-preemption-low-priority
  Apr 28 16:40:19.842: INFO: Created pod: pod0-1-sched-preemption-medium-priority
  Apr 28 16:40:19.855: INFO: Created pod: pod1-0-sched-preemption-medium-priority
  Apr 28 16:40:19.859: INFO: Created pod: pod1-1-sched-preemption-medium-priority
  STEP: Wait for pods to be scheduled. @ 04/28/24 16:40:19.859
  STEP: Run a critical pod that use same resources as that of a lower priority pod @ 04/28/24 16:40:21.87
  Apr 28 16:40:23.897: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-754" for this suite. @ 04/28/24 16:40:23.916
â€¢ [64.128 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:85
  STEP: Creating a kubernetes client @ 04/28/24 16:40:23.92
  Apr 28 16:40:23.920: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 16:40:23.921
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:40:23.929
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:40:23.931
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 16:40:23.932
  STEP: Saw pod success @ 04/28/24 16:40:27.945
  Apr 28 16:40:27.947: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-daadbe9f-2cb0-4559-ba6e-3a9a22aabfa0 container client-container: <nil>
  STEP: delete the pod @ 04/28/24 16:40:27.962
  Apr 28 16:40:27.970: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-8742" for this suite. @ 04/28/24 16:40:27.972
â€¢ [4.056 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:262
  STEP: Creating a kubernetes client @ 04/28/24 16:40:27.976
  Apr 28 16:40:27.976: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 16:40:27.977
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:40:27.984
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:40:27.986
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 16:40:27.987
  STEP: Saw pod success @ 04/28/24 16:40:32.001
  Apr 28 16:40:32.003: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-34cac27b-c54f-4790-a159-d99925120d43 container client-container: <nil>
  STEP: delete the pod @ 04/28/24 16:40:32.008
  Apr 28 16:40:32.019: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-4161" for this suite. @ 04/28/24 16:40:32.021
â€¢ [4.048 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]
k8s.io/kubernetes/test/e2e/apps/daemon_set.go:177
  STEP: Creating a kubernetes client @ 04/28/24 16:40:32.025
  Apr 28 16:40:32.025: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename daemonsets @ 04/28/24 16:40:32.026
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:40:32.032
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:40:32.034
  STEP: Creating simple DaemonSet "daemon-set" @ 04/28/24 16:40:32.045
  STEP: Check that daemon pods launch on every node of the cluster. @ 04/28/24 16:40:32.048
  Apr 28 16:40:32.052: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 16:40:32.052: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 16:40:33.058: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 28 16:40:33.058: INFO: Node k8sconformance-m02 is running 0 daemon pod, expected 1
  Apr 28 16:40:34.058: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Apr 28 16:40:34.058: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Stop a daemon pod, check that the daemon pod is revived. @ 04/28/24 16:40:34.06
  Apr 28 16:40:34.072: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 28 16:40:34.072: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  Apr 28 16:40:35.077: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Apr 28 16:40:35.077: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 04/28/24 16:40:35.078
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-3216, will wait for the garbage collector to delete the pods @ 04/28/24 16:40:35.078
  Apr 28 16:40:35.137: INFO: Deleting DaemonSet.extensions daemon-set took: 5.737205ms
  Apr 28 16:40:35.237: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.361991ms
  Apr 28 16:40:37.040: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 16:40:37.040: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Apr 28 16:40:37.041: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"19087"},"items":null}

  Apr 28 16:40:37.043: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"19087"},"items":null}

  Apr 28 16:40:37.048: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-3216" for this suite. @ 04/28/24 16:40:37.051
â€¢ [5.030 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/custom_resource_definition.go:145
  STEP: Creating a kubernetes client @ 04/28/24 16:40:37.056
  Apr 28 16:40:37.056: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename custom-resource-definition @ 04/28/24 16:40:37.057
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:40:37.066
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:40:37.068
  Apr 28 16:40:37.070: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:40:37.594: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-5877" for this suite. @ 04/28/24 16:40:37.596
â€¢ [0.543 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance]
k8s.io/kubernetes/test/e2e/common/node/ephemeral_containers.go:51
  STEP: Creating a kubernetes client @ 04/28/24 16:40:37.6
  Apr 28 16:40:37.600: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename ephemeral-containers-test @ 04/28/24 16:40:37.601
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:40:37.607
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:40:37.609
  STEP: creating a target pod @ 04/28/24 16:40:37.611
  STEP: adding an ephemeral container @ 04/28/24 16:40:39.624
  STEP: checking pod container endpoints @ 04/28/24 16:40:41.639
  Apr 28 16:40:41.639: INFO: ExecWithOptions {Command:[/bin/echo marco] Namespace:ephemeral-containers-test-4371 PodName:ephemeral-containers-target-pod ContainerName:debugger Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:40:41.639: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:40:41.640: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:40:41.640: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/ephemeral-containers-test-4371/pods/ephemeral-containers-target-pod/exec?command=%2Fbin%2Fecho&command=marco&container=debugger&container=debugger&stderr=true&stdout=true)
  Apr 28 16:40:41.681: INFO: Exec stderr: ""
  Apr 28 16:40:41.687: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ephemeral-containers-test-4371" for this suite. @ 04/28/24 16:40:41.689
â€¢ [4.094 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:163
  STEP: Creating a kubernetes client @ 04/28/24 16:40:41.694
  Apr 28 16:40:41.694: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 16:40:41.695
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:40:41.702
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:40:41.703
  STEP: Creating the pod @ 04/28/24 16:40:41.705
  Apr 28 16:40:44.232: INFO: Successfully updated pod "annotationupdatea649b924-6a60-4ac9-9fcb-01d033241d5b"
  Apr 28 16:40:48.252: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1506" for this suite. @ 04/28/24 16:40:48.254
â€¢ [6.565 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should mount projected service account token [Conformance]
k8s.io/kubernetes/test/e2e/auth/service_accounts.go:275
  STEP: Creating a kubernetes client @ 04/28/24 16:40:48.259
  Apr 28 16:40:48.259: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename svcaccounts @ 04/28/24 16:40:48.26
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:40:48.267
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:40:48.269
  STEP: Creating a pod to test service account token:  @ 04/28/24 16:40:48.271
  STEP: Saw pod success @ 04/28/24 16:40:52.284
  Apr 28 16:40:52.286: INFO: Trying to get logs from node k8sconformance-m02 pod test-pod-8da2cac8-26cc-454e-b03a-dd8f6bdf6528 container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 16:40:52.291
  Apr 28 16:40:52.301: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-449" for this suite. @ 04/28/24 16:40:52.303
â€¢ [4.046 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Pods should delete a collection of pods [Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:846
  STEP: Creating a kubernetes client @ 04/28/24 16:40:52.306
  Apr 28 16:40:52.306: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename pods @ 04/28/24 16:40:52.307
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:40:52.315
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:40:52.316
  STEP: Create set of pods @ 04/28/24 16:40:52.318
  Apr 28 16:40:52.322: INFO: created test-pod-1
  Apr 28 16:40:52.326: INFO: created test-pod-2
  Apr 28 16:40:52.330: INFO: created test-pod-3
  STEP: waiting for all 3 pods to be running @ 04/28/24 16:40:52.33
  STEP: waiting for all pods to be deleted @ 04/28/24 16:40:54.351
  Apr 28 16:40:54.353: INFO: Pod quantity 3 is different from expected quantity 0
  Apr 28 16:40:55.356: INFO: Pod quantity 3 is different from expected quantity 0
  Apr 28 16:40:56.356: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-1874" for this suite. @ 04/28/24 16:40:56.358
â€¢ [4.055 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:232
  STEP: Creating a kubernetes client @ 04/28/24 16:40:56.362
  Apr 28 16:40:56.362: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename resourcequota @ 04/28/24 16:40:56.363
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:40:56.372
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:40:56.374
  STEP: Counting existing ResourceQuota @ 04/28/24 16:40:56.376
  STEP: Creating a ResourceQuota @ 04/28/24 16:41:01.378
  STEP: Ensuring resource quota status is calculated @ 04/28/24 16:41:01.381
  STEP: Creating a Pod that fits quota @ 04/28/24 16:41:03.385
  STEP: Ensuring ResourceQuota status captures the pod usage @ 04/28/24 16:41:03.395
  STEP: Not allowing a pod to be created that exceeds remaining quota @ 04/28/24 16:41:05.398
  STEP: Not allowing a pod to be created that exceeds remaining quota(validation on extended resources) @ 04/28/24 16:41:05.4
  STEP: Ensuring a pod cannot update its resource requirements @ 04/28/24 16:41:05.402
  STEP: Ensuring attempts to update pod resource requirements did not change quota usage @ 04/28/24 16:41:05.405
  STEP: Deleting the pod @ 04/28/24 16:41:07.407
  STEP: Ensuring resource quota status released the pod usage @ 04/28/24 16:41:07.413
  Apr 28 16:41:09.417: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-2121" for this suite. @ 04/28/24 16:41:09.419
â€¢ [13.061 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply a finalizer to a Namespace [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/namespace.go:398
  STEP: Creating a kubernetes client @ 04/28/24 16:41:09.423
  Apr 28 16:41:09.423: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename namespaces @ 04/28/24 16:41:09.424
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:41:09.433
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:41:09.435
  STEP: Creating namespace "e2e-ns-mzdxd" @ 04/28/24 16:41:09.436
  Apr 28 16:41:09.443: INFO: Namespace "e2e-ns-mzdxd-2347" has []v1.FinalizerName{"kubernetes"}
  STEP: Adding e2e finalizer to namespace "e2e-ns-mzdxd-2347" @ 04/28/24 16:41:09.443
  Apr 28 16:41:09.447: INFO: Namespace "e2e-ns-mzdxd-2347" has []v1.FinalizerName{"kubernetes", "e2e.example.com/fakeFinalizer"}
  STEP: Removing e2e finalizer from namespace "e2e-ns-mzdxd-2347" @ 04/28/24 16:41:09.447
  Apr 28 16:41:09.451: INFO: Namespace "e2e-ns-mzdxd-2347" has []v1.FinalizerName{"kubernetes"}
  Apr 28 16:41:09.451: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-3113" for this suite. @ 04/28/24 16:41:09.453
  STEP: Destroying namespace "e2e-ns-mzdxd-2347" for this suite. @ 04/28/24 16:41:09.456
â€¢ [0.037 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/field_validation.go:350
  STEP: Creating a kubernetes client @ 04/28/24 16:41:09.461
  Apr 28 16:41:09.461: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename field-validation @ 04/28/24 16:41:09.462
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:41:09.469
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:41:09.47
  Apr 28 16:41:09.472: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  W0428 16:41:09.473387      22 field_validation.go:423] props: &JSONSchemaProps{ID:,Schema:,Ref:nil,Description:,Type:object,Format:,Title:,Default:nil,Maximum:nil,ExclusiveMaximum:false,Minimum:nil,ExclusiveMinimum:false,MaxLength:nil,MinLength:nil,Pattern:,MaxItems:nil,MinItems:nil,UniqueItems:false,MultipleOf:nil,Enum:[]JSON{},MaxProperties:nil,MinProperties:nil,Required:[],Items:nil,AllOf:[]JSONSchemaProps{},OneOf:[]JSONSchemaProps{},AnyOf:[]JSONSchemaProps{},Not:nil,Properties:map[string]JSONSchemaProps{spec: {  <nil>  object   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[cronSpec:{  <nil>  string   nil <nil> false <nil> false <nil> <nil> ^(\d+|\*)(/\d+)?(\s+(\d+|\*)(/\d+)?){4}$ <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []} foo:{  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []} ports:{  <nil>  array   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] &JSONSchemaPropsOrArray{Schema:&JSONSchemaProps{ID:,Schema:,Ref:nil,Description:,Type:object,Format:,Title:,Default:nil,Maximum:nil,ExclusiveMaximum:false,Minimum:nil,ExclusiveMinimum:false,MaxLength:nil,MinLength:nil,Pattern:,MaxItems:nil,MinItems:nil,UniqueItems:false,MultipleOf:nil,Enum:[]JSON{},MaxProperties:nil,MinProperties:nil,Required:[containerPort protocol],Items:nil,AllOf:[]JSONSchemaProps{},OneOf:[]JSONSchemaProps{},AnyOf:[]JSONSchemaProps{},Not:nil,Properties:map[string]JSONSchemaProps{containerPort: {  <nil>  integer int32  nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},hostIP: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},hostPort: {  <nil>  integer int32  nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},name: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},protocol: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},},AdditionalProperties:nil,PatternProperties:map[string]JSONSchemaProps{},Dependencies:JSONSchemaDependencies{},AdditionalItems:nil,Definitions:JSONSchemaDefinitions{},ExternalDocs:nil,Example:nil,Nullable:false,XPreserveUnknownFields:nil,XEmbeddedResource:false,XIntOrString:false,XListMapKeys:[],XListType:nil,XMapType:nil,XValidations:[]ValidationRule{},},JSONSchemas:[]JSONSchemaProps{},} [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [containerPort protocol] 0xc0041a9670 <nil> []}] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},},AdditionalProperties:nil,PatternProperties:map[string]JSONSchemaProps{},Dependencies:JSONSchemaDependencies{},AdditionalItems:nil,Definitions:JSONSchemaDefinitions{},ExternalDocs:nil,Example:nil,Nullable:false,XPreserveUnknownFields:nil,XEmbeddedResource:false,XIntOrString:false,XListMapKeys:[],XListType:nil,XMapType:nil,XValidations:[]ValidationRule{},}
  W0428 16:41:12.007455      22 warnings.go:70] unknown field "alpha"
  W0428 16:41:12.007481      22 warnings.go:70] unknown field "beta"
  W0428 16:41:12.007486      22 warnings.go:70] unknown field "delta"
  W0428 16:41:12.007495      22 warnings.go:70] unknown field "epsilon"
  W0428 16:41:12.007499      22 warnings.go:70] unknown field "gamma"
  Apr 28 16:41:12.524: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-5983" for this suite. @ 04/28/24 16:41:12.532
â€¢ [3.075 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/kubelet.go:52
  STEP: Creating a kubernetes client @ 04/28/24 16:41:12.537
  Apr 28 16:41:12.537: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubelet-test @ 04/28/24 16:41:12.538
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:41:12.544
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:41:12.546
  Apr 28 16:41:14.565: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-8078" for this suite. @ 04/28/24 16:41:14.568
â€¢ [2.035 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:109
  STEP: Creating a kubernetes client @ 04/28/24 16:41:14.572
  Apr 28 16:41:14.572: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:41:14.573
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:41:14.582
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:41:14.584
  STEP: Creating configMap with name projected-configmap-test-volume-map-e6d558fb-4daf-45d0-9722-5838484d447d @ 04/28/24 16:41:14.586
  STEP: Creating a pod to test consume configMaps @ 04/28/24 16:41:14.644
  STEP: Saw pod success @ 04/28/24 16:41:18.657
  Apr 28 16:41:18.658: INFO: Trying to get logs from node k8sconformance-m02 pod pod-projected-configmaps-ca684737-9a3f-462c-ac86-dc35e39fd465 container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 16:41:18.664
  Apr 28 16:41:18.673: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-1586" for this suite. @ 04/28/24 16:41:18.675
â€¢ [4.106 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment deployment should support rollover [Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:132
  STEP: Creating a kubernetes client @ 04/28/24 16:41:18.679
  Apr 28 16:41:18.679: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename deployment @ 04/28/24 16:41:18.68
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:41:18.693
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:41:18.695
  Apr 28 16:41:18.707: INFO: Pod name rollover-pod: Found 0 pods out of 1
  Apr 28 16:41:23.709: INFO: Pod name rollover-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 04/28/24 16:41:23.709
  Apr 28 16:41:23.709: INFO: Waiting for pods owned by replica set "test-rollover-controller" to become ready
  Apr 28 16:41:25.712: INFO: Creating deployment "test-rollover-deployment"
  Apr 28 16:41:25.718: INFO: Make sure deployment "test-rollover-deployment" performs scaling operations
  Apr 28 16:41:27.723: INFO: Check revision of new replica set for deployment "test-rollover-deployment"
  Apr 28 16:41:27.729: INFO: Ensure that both replica sets have 1 created replica
  Apr 28 16:41:27.732: INFO: Rollover old replica sets for deployment "test-rollover-deployment" with new image update
  Apr 28 16:41:27.739: INFO: Updating deployment test-rollover-deployment
  Apr 28 16:41:27.739: INFO: Wait deployment "test-rollover-deployment" to be observed by the deployment controller
  Apr 28 16:41:29.743: INFO: Wait for revision update of deployment "test-rollover-deployment" to 2
  Apr 28 16:41:29.746: INFO: Make sure deployment "test-rollover-deployment" is complete
  Apr 28 16:41:29.750: INFO: all replica sets need to contain the pod-template-hash label
  Apr 28 16:41:29.750: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 16, 41, 25, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 16, 41, 25, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 16, 41, 28, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 16, 41, 25, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-68774655d5\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 16:41:31.754: INFO: all replica sets need to contain the pod-template-hash label
  Apr 28 16:41:31.755: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 16, 41, 25, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 16, 41, 25, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 16, 41, 28, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 16, 41, 25, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-68774655d5\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 16:41:33.755: INFO: all replica sets need to contain the pod-template-hash label
  Apr 28 16:41:33.755: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 16, 41, 25, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 16, 41, 25, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 16, 41, 28, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 16, 41, 25, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-68774655d5\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 16:41:35.755: INFO: all replica sets need to contain the pod-template-hash label
  Apr 28 16:41:35.755: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 16, 41, 25, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 16, 41, 25, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 16, 41, 28, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 16, 41, 25, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-68774655d5\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 16:41:37.755: INFO: all replica sets need to contain the pod-template-hash label
  Apr 28 16:41:37.755: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 16, 41, 25, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 16, 41, 25, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.April, 28, 16, 41, 28, 0, time.Local), LastTransitionTime:time.Date(2024, time.April, 28, 16, 41, 25, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-68774655d5\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Apr 28 16:41:39.755: INFO: 
  Apr 28 16:41:39.755: INFO: Ensure that both old replica sets have no replicas
  Apr 28 16:41:39.759: INFO: Deployment "test-rollover-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-rollover-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-821",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6fbef37a-ff37-43db-acba-a69cf1754d51",
      ResourceVersion: (string) (len=5) "19525",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849919285,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919287,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000040  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000050  2c 22 66 3a 70 72 6f 67  72 65 73 73 44 65 61 64  |,"f:progressDead|
              00000060  6c 69 6e 65 53 65 63 6f  6e 64 73 22 3a 7b 7d 2c  |lineSeconds":{},|
              00000070  22 66 3a 72 65 70 6c 69  63 61 73 22 3a 7b 7d 2c  |"f:replicas":{},|
              00000080  22 66 3a 72 65 76 69 73  69 6f 6e 48 69 73 74 6f  |"f:revisionHisto|
              00000090  72 79 4c 69 6d 69 74 22  3a 7b 7d 2c 22 66 3a 73  |ryLimit":{},"f:s|
              000000a0  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 73  |elector":{},"f:s|
              000000b0  74 72 61 74 65 67 79 22  3a 7b 22 66 3a 72 6f 6c  |trategy":{"f:rol|
              000000c0  6c 69 6e 67 55 70 64 61  74 65 22 3a 7b 22 2e 22  |lingUpdate":{"."|
              000000d0  3a 7b 7d 2c 22 66 3a 6d  61 78 53 75 72 67 65 22  |:{},"f:maxSurge"|
              000000e0  3a 7b 7d 2c 22 66 3a 6d  61 78 55 6e 61 76 61 69  |:{},"f:maxUnavai|
              000000f0  6c 61 62 6c 65 22 3a 7b  7d 7d 2c 22 66 3a 74 79  |lable":{}},"f:ty|
              00000100  70 65 22 3a 7b 7d 7d 2c  22 66 3a 74 65 6d 70 6c  |pe":{}},"f:templ|
              00000110  61 74 65 22 3a 7b 22 66  3a 6d 65 74 61 64 61 74  |ate":{"f:metadat|
              00000120  61 22 3a 7b 22 66 3a 6c  61 62 65 6c 73 22 3a 7b  |a":{"f:labels":{|
              00000130  22 2e 22 3a 7b 7d 2c 22  66 3a 6e 61 6d 65 22 3a  |".":{},"f:name":|
              00000140  7b 7d 7d 7d 2c 22 66 3a  73 70 65 63 22 3a 7b 22  |{}}},"f:spec":{"|
              00000150  66 3a 63 6f 6e 74 61 69  6e 65 72 73 22 3a 7b 22  |f:containers":{"|
              00000160  6b 3a 7b 5c 22 6e 61 6d  65 5c 22 3a 5c 22 61 67  |k:{\"name\":\"ag|
              00000170  6e 68 6f 73 74 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |nhost\"}":{".":{|
              00000180  7d 2c 22 66 3a 69 6d 61  67 65 22 3a 7b 7d 2c 22  |},"f:image":{},"|
              00000190  66 3a 69 6d 61 67 65 50  75 6c 6c 50 6f 6c 69 63  |f:imagePullPolic|
              000001a0  79 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |y":{},"f:name":{|
              000001b0  7d 2c 22 66 3a 72 65 73  6f 75 72 63 65 73 22 3a  |},"f:resources":|
              000001c0  7b 7d 2c 22 66 3a 73 65  63 75 72 69 74 79 43 6f  |{},"f:securityCo|
              000001d0  6e 74 65 78 74 22 3a 7b  7d 2c 22 66 3a 74 65 72  |ntext":{},"f:ter|
              000001e0  6d 69 6e 61 74 69 6f 6e  4d 65 73 73 61 67 65 50  |minationMessageP|
              000001f0  61 74 68 22 3a 7b 7d 2c  22 66 3a 74 65 72 6d 69  |ath":{},"f:termi|
              00000200  6e 61 74 69 6f 6e 4d 65  73 73 61 67 65 50 6f 6c  |nationMessagePol|
              00000210  69 63 79 22 3a 7b 7d 7d  7d 2c 22 66 3a 64 6e 73  |icy":{}}},"f:dns|
              00000220  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 72 65  |Policy":{},"f:re|
              00000230  73 74 61 72 74 50 6f 6c  69 63 79 22 3a 7b 7d 2c  |startPolicy":{},|
              00000240  22 66 3a 73 63 68 65 64  75 6c 65 72 4e 61 6d 65  |"f:schedulerName|
              00000250  22 3a 7b 7d 2c 22 66 3a  73 65 63 75 72 69 74 79  |":{},"f:security|
              00000260  43 6f 6e 74 65 78 74 22  3a 7b 7d 2c 22 66 3a 74  |Context":{},"f:t|
              00000270  65 72 6d 69 6e 61 74 69  6f 6e 47 72 61 63 65 50  |erminationGraceP|
              00000280  65 72 69 6f 64 53 65 63  6f 6e 64 73 22 3a 7b 7d  |eriodSeconds":{}|
              00000290  7d 7d 7d 7d                                       |}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919298,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 0,
            StrVal: (string) ""
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 1,
            StrVal: (string) ""
          })
        })
      },
      MinReadySeconds: (int32) 10,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 2,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919285,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919285,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919298,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919285,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=77) "ReplicaSet \"test-rollover-deployment-68774655d5\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Apr 28 16:41:39.763: INFO: New ReplicaSet "test-rollover-deployment-68774655d5" of Deployment "test-rollover-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-rollover-deployment-68774655d5",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-821",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "4ed25df0-8947-4377-8d3f-21e7bf28ea0a",
      ResourceVersion: (string) (len=5) "19514",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849919287,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "68774655d5"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "6fbef37a-ff37-43db-acba-a69cf1754d51",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919287,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=806) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 36 66 62 65 66 33  37 61 2d 66 66 33 37 2d  |\"6fbef37a-ff37-|
              00000120  34 33 64 62 2d 61 63 62  61 2d 61 36 39 63 66 31  |43db-acba-a69cf1|
              00000130  37 35 34 64 35 31 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |754d51\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000150  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000160  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000170  2c 22 66 3a 73 65 6c 65  63 74 6f 72 22 3a 7b 7d  |,"f:selector":{}|
              00000180  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000190  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              000001a0  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              000001b0  22 66 3a 6e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 70  |"f:name":{},"f:p|
              000001c0  6f 64 2d 74 65 6d 70 6c  61 74 65 2d 68 61 73 68  |od-template-hash|
              000001d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000001e0  7b 22 66 3a 63 6f 6e 74  61 69 6e 65 72 73 22 3a  |{"f:containers":|
              000001f0  7b 22 6b 3a 7b 5c 22 6e  61 6d 65 5c 22 3a 5c 22  |{"k:{\"name\":\"|
              00000200  61 67 6e 68 6f 73 74 5c  22 7d 22 3a 7b 22 2e 22  |agnhost\"}":{"."|
              00000210  3a 7b 7d 2c 22 66 3a 69  6d 61 67 65 22 3a 7b 7d  |:{},"f:image":{}|
              00000220  2c 22 66 3a 69 6d 61 67  65 50 75 6c 6c 50 6f 6c  |,"f:imagePullPol|
              00000230  69 63 79 22 3a 7b 7d 2c  22 66 3a 6e 61 6d 65 22  |icy":{},"f:name"|
              00000240  3a 7b 7d 2c 22 66 3a 72  65 73 6f 75 72 63 65 73  |:{},"f:resources|
              00000250  22 3a 7b 7d 2c 22 66 3a  73 65 63 75 72 69 74 79  |":{},"f:security|
              00000260  43 6f 6e 74 65 78 74 22  3a 7b 7d 2c 22 66 3a 74  |Context":{},"f:t|
              00000270  65 72 6d 69 6e 61 74 69  6f 6e 4d 65 73 73 61 67  |erminationMessag|
              00000280  65 50 61 74 68 22 3a 7b  7d 2c 22 66 3a 74 65 72  |ePath":{},"f:ter|
              00000290  6d 69 6e 61 74 69 6f 6e  4d 65 73 73 61 67 65 50  |minationMessageP|
              000002a0  6f 6c 69 63 79 22 3a 7b  7d 7d 7d 2c 22 66 3a 64  |olicy":{}}},"f:d|
              000002b0  6e 73 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |nsPolicy":{},"f:|
              000002c0  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000002d0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000002e0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000002f0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              00000300  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              00000310  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              00000320  7b 7d 7d 7d 7d 7d                                 |{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919298,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 10,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "68774655d5"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "68774655d5"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 28 16:41:39.764: INFO: All old ReplicaSets of Deployment "test-rollover-deployment":
  Apr 28 16:41:39.764: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-rollover-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-821",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e1840eb3-101c-4e9a-b979-99a7206b0cc7",
      ResourceVersion: (string) (len=5) "19524",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849919278,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=2) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "6fbef37a-ff37-43db-acba-a69cf1754d51",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919278,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=467) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              00000030  3a 70 6f 64 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |:pod":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  73 65 6c 65 63 74 6f 72  |ec":{"f:selector|
              00000050  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000060  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000070  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              00000080  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              00000090  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              000000a0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              000000b0  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              000000c0  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              000000d0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              000000e0  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              000000f0  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000100  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000110  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |rces":{},"f:term|
              00000120  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000130  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000140  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000150  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000160  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              00000170  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              00000180  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              00000190  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000001a0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              000001b0  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              000001c0  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              000001d0  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919298,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=249) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 7d 2c 22 66  3a 6f 77 6e 65 72 52 65  |":{}},"f:ownerRe|
              00000090  66 65 72 65 6e 63 65 73  22 3a 7b 22 2e 22 3a 7b  |ferences":{".":{|
              000000a0  7d 2c 22 6b 3a 7b 5c 22  75 69 64 5c 22 3a 5c 22  |},"k:{\"uid\":\"|
              000000b0  36 66 62 65 66 33 37 61  2d 66 66 33 37 2d 34 33  |6fbef37a-ff37-43|
              000000c0  64 62 2d 61 63 62 61 2d  61 36 39 63 66 31 37 35  |db-acba-a69cf175|
              000000d0  34 64 35 31 5c 22 7d 22  3a 7b 7d 7d 7d 2c 22 66  |4d51\"}":{}}},"f|
              000000e0  3a 73 70 65 63 22 3a 7b  22 66 3a 72 65 70 6c 69  |:spec":{"f:repli|
              000000f0  63 61 73 22 3a 7b 7d 7d  7d                       |cas":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919298,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=3) "pod": (string) (len=5) "httpd",
          (string) (len=4) "name": (string) (len=12) "rollover-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 28 16:41:39.765: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-rollover-deployment-664fc6c874",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-821",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "0aacd127-cb53-4125-90a3-7bf78a45d027",
      ResourceVersion: (string) (len=5) "19486",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849919285,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "6fbef37a-ff37-43db-acba-a69cf1754d51",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919287,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=810) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 36 66 62 65 66 33  37 61 2d 66 66 33 37 2d  |\"6fbef37a-ff37-|
              00000120  34 33 64 62 2d 61 63 62  61 2d 61 36 39 63 66 31  |43db-acba-a69cf1|
              00000130  37 35 34 64 35 31 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |754d51\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000150  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000160  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000170  2c 22 66 3a 73 65 6c 65  63 74 6f 72 22 3a 7b 7d  |,"f:selector":{}|
              00000180  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000190  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              000001a0  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              000001b0  22 66 3a 6e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 70  |"f:name":{},"f:p|
              000001c0  6f 64 2d 74 65 6d 70 6c  61 74 65 2d 68 61 73 68  |od-template-hash|
              000001d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000001e0  7b 22 66 3a 63 6f 6e 74  61 69 6e 65 72 73 22 3a  |{"f:containers":|
              000001f0  7b 22 6b 3a 7b 5c 22 6e  61 6d 65 5c 22 3a 5c 22  |{"k:{\"name\":\"|
              00000200  72 65 64 69 73 2d 73 6c  61 76 65 5c 22 7d 22 3a  |redis-slave\"}":|
              00000210  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              00000220  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000230  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000240  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000250  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 73 65 63 75  |rces":{},"f:secu|
              00000260  72 69 74 79 43 6f 6e 74  65 78 74 22 3a 7b 7d 2c  |rityContext":{},|
              00000270  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000280  73 73 61 67 65 50 61 74  68 22 3a 7b 7d 2c 22 66  |ssagePath":{},"f|
              00000290  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 4d 65 73 73  |:terminationMess|
              000002a0  61 67 65 50 6f 6c 69 63  79 22 3a 7b 7d 7d 7d 2c  |agePolicy":{}}},|
              000002b0  22 66 3a 64 6e 73 50 6f  6c 69 63 79 22 3a 7b 7d  |"f:dnsPolicy":{}|
              000002c0  2c 22 66 3a 72 65 73 74  61 72 74 50 6f 6c 69 63  |,"f:restartPolic|
              000002d0  79 22 3a 7b 7d 2c 22 66  3a 73 63 68 65 64 75 6c  |y":{},"f:schedul|
              000002e0  65 72 4e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 73 65  |erName":{},"f:se|
              000002f0  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000300  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000310  47 72 61 63 65 50 65 72  69 6f 64 53 65 63 6f 6e  |GracePeriodSecon|
              00000320  64 73 22 3a 7b 7d 7d 7d  7d 7d                    |ds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919287,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 10,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874",
            (string) (len=4) "name": (string) (len=12) "rollover-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=11) "redis-slave",
              Image: (string) (len=47) "gcr.io/google_samples/gb-redisslave:nonexistent",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 28 16:41:39.768: INFO: Pod "test-rollover-deployment-68774655d5-9m848" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=41) "test-rollover-deployment-68774655d5-9m848",
      GenerateName: (string) (len=36) "test-rollover-deployment-68774655d5-",
      Namespace: (string) (len=14) "deployment-821",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ae7a095a-c8f9-41e7-b3b9-724d35772be0",
      ResourceVersion: (string) (len=5) "19502",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849919287,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "68774655d5"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=35) "test-rollover-deployment-68774655d5",
          UID: (types.UID) (len=36) "4ed25df0-8947-4377-8d3f-21e7bf28ea0a",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919287,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 34 65  64 32 35 64 66 30 2d 38  |d\":\"4ed25df0-8|
              00000090  39 34 37 2d 34 33 37 37  2d 38 64 33 66 2d 32 31  |947-4377-8d3f-21|
              000000a0  65 37 62 66 32 38 65 61  30 61 5c 22 7d 22 3a 7b  |e7bf28ea0a\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919288,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 32 34 34 2e 31  2e 34 39 5c 22 7d 22 3a  |10.244.1.49\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-xsfvn",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-xsfvn",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919287,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919288,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919288,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919287,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.244.1.49",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.244.1.49"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849919287,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=7) "agnhost",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849919288,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
          ImageID: (string) (len=129) "docker-pullable://registry.k8s.io/e2e-test-images/agnhost@sha256:cc249acbd34692826b2b335335615e060fdb3c0bca4954507aa3a1d1194de253",
          ContainerID: (string) (len=73) "docker://5cfa61385005b6fc7f0906b6b274a17d9b425999373acc254a89ec5b78828d3b",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 16:41:39.770: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-821" for this suite. @ 04/28/24 16:41:39.772
â€¢ [21.096 seconds]
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:442
  STEP: Creating a kubernetes client @ 04/28/24 16:41:39.775
  Apr 28 16:41:39.775: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/28/24 16:41:39.776
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:41:39.785
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:41:39.787
  STEP: set up a multi version CRD @ 04/28/24 16:41:39.789
  Apr 28 16:41:39.789: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: mark a version not serverd @ 04/28/24 16:41:42.977
  STEP: check the unserved version gets removed @ 04/28/24 16:41:42.989
  STEP: check the other version is not changed @ 04/28/24 16:41:43.682
  Apr 28 16:41:46.148: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-6219" for this suite. @ 04/28/24 16:41:46.153
â€¢ [6.381 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:124
  STEP: Creating a kubernetes client @ 04/28/24 16:41:46.157
  Apr 28 16:41:46.157: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename configmap @ 04/28/24 16:41:46.157
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:41:46.167
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:41:46.169
  STEP: Creating configMap with name configmap-test-upd-b66fb6ed-49a1-4625-b3b7-48e1e4316828 @ 04/28/24 16:41:46.172
  STEP: Creating the pod @ 04/28/24 16:41:46.175
  STEP: Updating configmap configmap-test-upd-b66fb6ed-49a1-4625-b3b7-48e1e4316828 @ 04/28/24 16:41:48.191
  STEP: waiting to observe update in volume @ 04/28/24 16:41:48.194
  Apr 28 16:43:00.471: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-136" for this suite. @ 04/28/24 16:43:00.473
â€¢ [74.320 seconds]
------------------------------
[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:2165
  STEP: Creating a kubernetes client @ 04/28/24 16:43:00.477
  Apr 28 16:43:00.477: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 16:43:00.477
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:43:00.486
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:43:00.488
  STEP: creating service in namespace services-1824 @ 04/28/24 16:43:00.49
  STEP: creating service affinity-clusterip in namespace services-1824 @ 04/28/24 16:43:00.49
  STEP: creating replication controller affinity-clusterip in namespace services-1824 @ 04/28/24 16:43:00.497
  I0428 16:43:00.502927      22 runners.go:197] Created replication controller with name: affinity-clusterip, namespace: services-1824, replica count: 3
  I0428 16:43:03.554234      22 runners.go:197] affinity-clusterip Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Apr 28 16:43:03.557: INFO: Creating new exec pod
  Apr 28 16:43:06.566: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-1824 exec execpod-affinitygl8tr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-clusterip 80'
  Apr 28 16:43:06.660: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-clusterip 80\nConnection to affinity-clusterip 80 port [tcp/http] succeeded!\n"
  Apr 28 16:43:06.660: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 16:43:06.660: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-1824 exec execpod-affinitygl8tr -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.108.2.107 80'
  Apr 28 16:43:06.757: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.108.2.107 80\nConnection to 10.108.2.107 80 port [tcp/http] succeeded!\n"
  Apr 28 16:43:06.757: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Apr 28 16:43:06.757: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=services-1824 exec execpod-affinitygl8tr -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.108.2.107:80/ ; done'
  Apr 28 16:43:06.911: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.108.2.107:80/\n"
  Apr 28 16:43:06.911: INFO: stdout: "\naffinity-clusterip-kn8mm\naffinity-clusterip-kn8mm\naffinity-clusterip-kn8mm\naffinity-clusterip-kn8mm\naffinity-clusterip-kn8mm\naffinity-clusterip-kn8mm\naffinity-clusterip-kn8mm\naffinity-clusterip-kn8mm\naffinity-clusterip-kn8mm\naffinity-clusterip-kn8mm\naffinity-clusterip-kn8mm\naffinity-clusterip-kn8mm\naffinity-clusterip-kn8mm\naffinity-clusterip-kn8mm\naffinity-clusterip-kn8mm\naffinity-clusterip-kn8mm"
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Received response from host: affinity-clusterip-kn8mm
  Apr 28 16:43:06.911: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Apr 28 16:43:06.914: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-clusterip in namespace services-1824, will wait for the garbage collector to delete the pods @ 04/28/24 16:43:06.921
  Apr 28 16:43:06.978: INFO: Deleting ReplicationController affinity-clusterip took: 3.8678ms
  Apr 28 16:43:07.078: INFO: Terminating ReplicationController affinity-clusterip pods took: 100.096196ms
  STEP: Destroying namespace "services-1824" for this suite. @ 04/28/24 16:43:09.889
â€¢ [9.415 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]
k8s.io/kubernetes/test/e2e/node/taints.go:290
  STEP: Creating a kubernetes client @ 04/28/24 16:43:09.893
  Apr 28 16:43:09.893: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename taint-single-pod @ 04/28/24 16:43:09.893
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:43:09.901
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:43:09.902
  Apr 28 16:43:09.904: INFO: Waiting up to 1m0s for all nodes to be ready
  Apr 28 16:44:09.915: INFO: Waiting for terminating namespaces to be deleted...
  Apr 28 16:44:09.917: INFO: Starting informer...
  STEP: Starting pod... @ 04/28/24 16:44:09.917
  Apr 28 16:44:10.127: INFO: Pod is running on k8sconformance-m02. Tainting Node
  STEP: Trying to apply a taint on the Node @ 04/28/24 16:44:10.127
  STEP: verifying the node has the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 04/28/24 16:44:10.136
  STEP: Waiting short time to make sure Pod is queued for deletion @ 04/28/24 16:44:10.138
  Apr 28 16:44:10.138: INFO: Pod wasn't evicted. Proceeding
  Apr 28 16:44:10.138: INFO: Removing taint from Node
  STEP: verifying the node doesn't have the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 04/28/24 16:44:10.149
  STEP: Waiting some time to make sure that toleration time passed. @ 04/28/24 16:44:10.151
  Apr 28 16:45:25.152: INFO: Pod wasn't evicted. Test successful
  Apr 28 16:45:25.152: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "taint-single-pod-3923" for this suite. @ 04/28/24 16:45:25.155
â€¢ [135.265 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance]
k8s.io/kubernetes/test/e2e/apps/cronjob.go:70
  STEP: Creating a kubernetes client @ 04/28/24 16:45:25.16
  Apr 28 16:45:25.160: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename cronjob @ 04/28/24 16:45:25.16
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:45:25.17
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:45:25.173
  STEP: Creating a cronjob @ 04/28/24 16:45:25.174
  STEP: Ensuring more than one job is running at a time @ 04/28/24 16:45:25.179
  STEP: Ensuring at least two running jobs exists by listing jobs explicitly @ 04/28/24 16:47:01.181
  STEP: Removing cronjob @ 04/28/24 16:47:01.183
  Apr 28 16:47:01.187: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-4276" for this suite. @ 04/28/24 16:47:01.189
â€¢ [96.033 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/empty_dir.go:227
  STEP: Creating a kubernetes client @ 04/28/24 16:47:01.193
  Apr 28 16:47:01.193: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename emptydir @ 04/28/24 16:47:01.194
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:01.204
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:01.206
  STEP: Creating Pod @ 04/28/24 16:47:01.209
  STEP: Reading file content from the nginx-container @ 04/28/24 16:47:03.22
  Apr 28 16:47:03.220: INFO: ExecWithOptions {Command:[/bin/sh -c cat /usr/share/volumeshare/shareddata.txt] Namespace:emptydir-5971 PodName:pod-sharedvolume-06b76f6d-37d5-49c7-8ca1-59fa107d72fe ContainerName:busybox-main-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:47:03.220: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:47:03.220: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:47:03.220: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/emptydir-5971/pods/pod-sharedvolume-06b76f6d-37d5-49c7-8ca1-59fa107d72fe/exec?command=%2Fbin%2Fsh&command=-c&command=cat+%2Fusr%2Fshare%2Fvolumeshare%2Fshareddata.txt&container=busybox-main-container&container=busybox-main-container&stderr=true&stdout=true)
  Apr 28 16:47:03.261: INFO: Exec stderr: ""
  Apr 28 16:47:03.262: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-5971" for this suite. @ 04/28/24 16:47:03.264
â€¢ [2.075 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:205
  STEP: Creating a kubernetes client @ 04/28/24 16:47:03.275
  Apr 28 16:47:03.275: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename secrets @ 04/28/24 16:47:03.276
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:03.283
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:03.285
  STEP: Creating secret with name s-test-opt-del-b7666765-45da-4257-9f63-b2927324c2c9 @ 04/28/24 16:47:03.289
  STEP: Creating secret with name s-test-opt-upd-d90703e9-6e05-407c-a0cd-f23465c87dfa @ 04/28/24 16:47:03.291
  STEP: Creating the pod @ 04/28/24 16:47:03.293
  STEP: Deleting secret s-test-opt-del-b7666765-45da-4257-9f63-b2927324c2c9 @ 04/28/24 16:47:05.327
  STEP: Updating secret s-test-opt-upd-d90703e9-6e05-407c-a0cd-f23465c87dfa @ 04/28/24 16:47:05.331
  STEP: Creating secret with name s-test-opt-create-4f93c4f7-15fd-4a1f-b771-c21728a686d3 @ 04/28/24 16:47:05.334
  STEP: waiting to observe update in volume @ 04/28/24 16:47:05.336
  Apr 28 16:47:09.367: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-3633" for this suite. @ 04/28/24 16:47:09.369
â€¢ [6.097 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for the cluster  [Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:50
  STEP: Creating a kubernetes client @ 04/28/24 16:47:09.373
  Apr 28 16:47:09.373: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename dns @ 04/28/24 16:47:09.374
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:09.382
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:09.384
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@kubernetes.default.svc.cluster.local;check="$$(dig +tcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@kubernetes.default.svc.cluster.local;sleep 1; done
   @ 04/28/24 16:47:09.386
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@kubernetes.default.svc.cluster.local;check="$$(dig +tcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@kubernetes.default.svc.cluster.local;sleep 1; done
   @ 04/28/24 16:47:09.386
  STEP: creating a pod to probe DNS @ 04/28/24 16:47:09.386
  STEP: submitting the pod to kubernetes @ 04/28/24 16:47:09.386
  STEP: retrieving the pod @ 04/28/24 16:47:11.396
  STEP: looking for the results for each expected name from probers @ 04/28/24 16:47:11.398
  Apr 28 16:47:11.405: INFO: DNS probes using dns-9220/dns-test-6187fc3a-e49a-4ef2-b11a-dd18fdc1b536 succeeded

  Apr 28 16:47:11.405: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 04/28/24 16:47:11.407
  STEP: Destroying namespace "dns-9220" for this suite. @ 04/28/24 16:47:11.417
â€¢ [2.047 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]
k8s.io/kubernetes/test/e2e/apps/rc.go:112
  STEP: Creating a kubernetes client @ 04/28/24 16:47:11.42
  Apr 28 16:47:11.420: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename replication-controller @ 04/28/24 16:47:11.421
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:11.429
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:11.431
  STEP: creating a ReplicationController @ 04/28/24 16:47:11.435
  STEP: waiting for RC to be added @ 04/28/24 16:47:11.437
  STEP: waiting for available Replicas @ 04/28/24 16:47:11.438
  STEP: patching ReplicationController @ 04/28/24 16:47:12.106
  STEP: waiting for RC to be modified @ 04/28/24 16:47:12.111
  STEP: patching ReplicationController status @ 04/28/24 16:47:12.111
  STEP: waiting for RC to be modified @ 04/28/24 16:47:12.116
  STEP: waiting for available Replicas @ 04/28/24 16:47:12.116
  STEP: fetching ReplicationController status @ 04/28/24 16:47:12.119
  STEP: patching ReplicationController scale @ 04/28/24 16:47:12.121
  STEP: waiting for RC to be modified @ 04/28/24 16:47:12.124
  STEP: waiting for ReplicationController's scale to be the max amount @ 04/28/24 16:47:12.124
  STEP: fetching ReplicationController; ensuring that it's patched @ 04/28/24 16:47:13.282
  STEP: updating ReplicationController status @ 04/28/24 16:47:13.284
  STEP: waiting for RC to be modified @ 04/28/24 16:47:13.287
  STEP: listing all ReplicationControllers @ 04/28/24 16:47:13.288
  STEP: checking that ReplicationController has expected values @ 04/28/24 16:47:13.289
  STEP: deleting ReplicationControllers by collection @ 04/28/24 16:47:13.289
  STEP: waiting for ReplicationController to have a DELETED watchEvent @ 04/28/24 16:47:13.294
  Apr 28 16:47:13.330: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  E0428 16:47:13.331068      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "replication-controller-9740" for this suite. @ 04/28/24 16:47:13.333
â€¢ [1.917 seconds]
------------------------------
SS
------------------------------
[sig-node] Secrets should patch a secret [Conformance]
k8s.io/kubernetes/test/e2e/common/node/secrets.go:154
  STEP: Creating a kubernetes client @ 04/28/24 16:47:13.338
  Apr 28 16:47:13.338: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename secrets @ 04/28/24 16:47:13.338
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:13.347
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:13.35
  STEP: creating a secret @ 04/28/24 16:47:13.352
  STEP: listing secrets in all namespaces to ensure that there are more than zero @ 04/28/24 16:47:13.355
  STEP: patching the secret @ 04/28/24 16:47:13.357
  STEP: deleting the secret using a LabelSelector @ 04/28/24 16:47:13.362
  STEP: listing secrets in all namespaces, searching for label name and value in patch @ 04/28/24 16:47:13.366
  Apr 28 16:47:13.368: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-6230" for this suite. @ 04/28/24 16:47:13.369
â€¢ [0.034 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:208
  STEP: Creating a kubernetes client @ 04/28/24 16:47:13.373
  Apr 28 16:47:13.373: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:47:13.374
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:13.382
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:13.384
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 16:47:13.385
  E0428 16:47:14.331236      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:15.332347      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:47:15.395
  Apr 28 16:47:15.396: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-7b4cc789-e2c5-4365-afce-2c721ca34765 container client-container: <nil>
  STEP: delete the pod @ 04/28/24 16:47:15.402
  Apr 28 16:47:15.410: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7992" for this suite. @ 04/28/24 16:47:15.412
â€¢ [2.043 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]
k8s.io/kubernetes/test/e2e/apps/rc.go:69
  STEP: Creating a kubernetes client @ 04/28/24 16:47:15.416
  Apr 28 16:47:15.416: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename replication-controller @ 04/28/24 16:47:15.416
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:15.423
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:15.425
  STEP: Creating replication controller my-hostname-basic-056f2184-a8dc-4925-82af-d668b91a940e @ 04/28/24 16:47:15.427
  Apr 28 16:47:15.432: INFO: Pod name my-hostname-basic-056f2184-a8dc-4925-82af-d668b91a940e: Found 0 pods out of 1
  E0428 16:47:16.333305      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:17.333539      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:18.333768      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:19.333973      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:20.334214      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:47:20.434: INFO: Pod name my-hostname-basic-056f2184-a8dc-4925-82af-d668b91a940e: Found 1 pods out of 1
  Apr 28 16:47:20.434: INFO: Ensuring all pods for ReplicationController "my-hostname-basic-056f2184-a8dc-4925-82af-d668b91a940e" are running
  Apr 28 16:47:20.436: INFO: Pod "my-hostname-basic-056f2184-a8dc-4925-82af-d668b91a940e-92f8b" is running and ready(conditions: [{Type:Initialized Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-28 16:47:15 +0000 UTC Reason: Message:} {Type:Ready Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-28 16:47:16 +0000 UTC Reason: Message:} {Type:ContainersReady Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-28 16:47:16 +0000 UTC Reason: Message:} {Type:PodScheduled Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-04-28 16:47:15 +0000 UTC Reason: Message:}])
  Apr 28 16:47:20.436: INFO: Trying to dial the pod
  STEP: trying to dial each unique pod @ 04/28/24 16:47:20.436
  Apr 28 16:47:20.441: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-6891" for this suite. @ 04/28/24 16:47:20.443
â€¢ [5.031 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:57
  STEP: Creating a kubernetes client @ 04/28/24 16:47:20.449
  Apr 28 16:47:20.449: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:47:20.449
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:20.457
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:20.459
  STEP: Creating configMap with name projected-configmap-test-volume-bd8a4d94-f815-4384-9acc-e2e7b050ef2b @ 04/28/24 16:47:20.461
  STEP: Creating a pod to test consume configMaps @ 04/28/24 16:47:20.464
  E0428 16:47:21.335167      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:22.335239      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:47:22.475
  Apr 28 16:47:22.476: INFO: Trying to get logs from node k8sconformance-m02 pod pod-projected-configmaps-e60a87ba-710a-4884-a596-2ae074de67fe container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 16:47:22.482
  Apr 28 16:47:22.492: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8715" for this suite. @ 04/28/24 16:47:22.494
â€¢ [2.048 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/field_validation.go:622
  STEP: Creating a kubernetes client @ 04/28/24 16:47:22.498
  Apr 28 16:47:22.498: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename field-validation @ 04/28/24 16:47:22.499
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:22.507
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:22.509
  Apr 28 16:47:22.511: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  E0428 16:47:23.335645      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:24.336311      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  W0428 16:47:25.063004      22 warnings.go:70] unknown field "alpha"
  W0428 16:47:25.063024      22 warnings.go:70] unknown field "beta"
  W0428 16:47:25.063028      22 warnings.go:70] unknown field "delta"
  W0428 16:47:25.063032      22 warnings.go:70] unknown field "epsilon"
  W0428 16:47:25.063035      22 warnings.go:70] unknown field "gamma"
  E0428 16:47:25.336405      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:47:25.578: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-8841" for this suite. @ 04/28/24 16:47:25.586
â€¢ [3.091 seconds]
------------------------------
SSS
------------------------------
[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]
k8s.io/kubernetes/test/e2e/apps/controller_revision.go:124
  STEP: Creating a kubernetes client @ 04/28/24 16:47:25.589
  Apr 28 16:47:25.589: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename controllerrevisions @ 04/28/24 16:47:25.59
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:25.598
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:25.6
  STEP: Creating DaemonSet "e2e-hwhpn-daemon-set" @ 04/28/24 16:47:25.609
  STEP: Check that daemon pods launch on every node of the cluster. @ 04/28/24 16:47:25.612
  Apr 28 16:47:25.617: INFO: Number of nodes with available pods controlled by daemonset e2e-hwhpn-daemon-set: 0
  Apr 28 16:47:25.617: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  E0428 16:47:26.337005      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:47:26.622: INFO: Number of nodes with available pods controlled by daemonset e2e-hwhpn-daemon-set: 2
  Apr 28 16:47:26.622: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset e2e-hwhpn-daemon-set
  STEP: Confirm DaemonSet "e2e-hwhpn-daemon-set" successfully created with "daemonset-name=e2e-hwhpn-daemon-set" label @ 04/28/24 16:47:26.623
  STEP: Listing all ControllerRevisions with label "daemonset-name=e2e-hwhpn-daemon-set" @ 04/28/24 16:47:26.627
  Apr 28 16:47:26.628: INFO: Located ControllerRevision: "e2e-hwhpn-daemon-set-57bff874cd"
  STEP: Patching ControllerRevision "e2e-hwhpn-daemon-set-57bff874cd" @ 04/28/24 16:47:26.63
  Apr 28 16:47:26.633: INFO: e2e-hwhpn-daemon-set-57bff874cd has been patched
  STEP: Create a new ControllerRevision @ 04/28/24 16:47:26.633
  Apr 28 16:47:26.637: INFO: Created ControllerRevision: e2e-hwhpn-daemon-set-6c58976cd4
  STEP: Confirm that there are two ControllerRevisions @ 04/28/24 16:47:26.637
  Apr 28 16:47:26.637: INFO: Requesting list of ControllerRevisions to confirm quantity
  Apr 28 16:47:26.639: INFO: Found 2 ControllerRevisions
  STEP: Deleting ControllerRevision "e2e-hwhpn-daemon-set-57bff874cd" @ 04/28/24 16:47:26.639
  STEP: Confirm that there is only one ControllerRevision @ 04/28/24 16:47:26.641
  Apr 28 16:47:26.641: INFO: Requesting list of ControllerRevisions to confirm quantity
  Apr 28 16:47:26.643: INFO: Found 1 ControllerRevisions
  STEP: Updating ControllerRevision "e2e-hwhpn-daemon-set-6c58976cd4" @ 04/28/24 16:47:26.644
  Apr 28 16:47:26.648: INFO: e2e-hwhpn-daemon-set-6c58976cd4 has been updated
  STEP: Generate another ControllerRevision by patching the Daemonset @ 04/28/24 16:47:26.648
  W0428 16:47:26.653503      22 warnings.go:70] unknown field "updateStrategy"
  STEP: Confirm that there are two ControllerRevisions @ 04/28/24 16:47:26.653
  Apr 28 16:47:26.653: INFO: Requesting list of ControllerRevisions to confirm quantity
  E0428 16:47:27.338048      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:47:27.655: INFO: Requesting list of ControllerRevisions to confirm quantity
  Apr 28 16:47:27.657: INFO: Found 2 ControllerRevisions
  STEP: Removing a ControllerRevision via 'DeleteCollection' with labelSelector: "e2e-hwhpn-daemon-set-6c58976cd4=updated" @ 04/28/24 16:47:27.657
  STEP: Confirm that there is only one ControllerRevision @ 04/28/24 16:47:27.66
  Apr 28 16:47:27.660: INFO: Requesting list of ControllerRevisions to confirm quantity
  Apr 28 16:47:27.662: INFO: Found 1 ControllerRevisions
  Apr 28 16:47:27.663: INFO: ControllerRevision "e2e-hwhpn-daemon-set-5f6b556777" has revision 3
  STEP: Deleting DaemonSet "e2e-hwhpn-daemon-set" @ 04/28/24 16:47:27.665
  STEP: deleting DaemonSet.extensions e2e-hwhpn-daemon-set in namespace controllerrevisions-8852, will wait for the garbage collector to delete the pods @ 04/28/24 16:47:27.665
  Apr 28 16:47:27.721: INFO: Deleting DaemonSet.extensions e2e-hwhpn-daemon-set took: 3.965483ms
  Apr 28 16:47:27.822: INFO: Terminating DaemonSet.extensions e2e-hwhpn-daemon-set pods took: 100.991079ms
  E0428 16:47:28.338792      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:29.339389      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:47:29.425: INFO: Number of nodes with available pods controlled by daemonset e2e-hwhpn-daemon-set: 0
  Apr 28 16:47:29.425: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset e2e-hwhpn-daemon-set
  Apr 28 16:47:29.426: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"20485"},"items":null}

  Apr 28 16:47:29.428: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"20485"},"items":null}

  Apr 28 16:47:29.433: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "controllerrevisions-8852" for this suite. @ 04/28/24 16:47:29.434
â€¢ [3.849 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/garbage_collector.go:817
  STEP: Creating a kubernetes client @ 04/28/24 16:47:29.439
  Apr 28 16:47:29.439: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename gc @ 04/28/24 16:47:29.44
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:29.446
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:29.448
  Apr 28 16:47:29.468: INFO: pod1.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod3", UID:"7b421820-b9f6-4b49-ae2d-bd44157e2236", Controller:(*bool)(0xc004ba57ce), BlockOwnerDeletion:(*bool)(0xc004ba57cf)}}
  Apr 28 16:47:29.473: INFO: pod2.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod1", UID:"ce9032bb-352c-4d30-bc7d-e2498f37d0e5", Controller:(*bool)(0xc0031e4dee), BlockOwnerDeletion:(*bool)(0xc0031e4def)}}
  Apr 28 16:47:29.476: INFO: pod3.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod2", UID:"7304c5bc-e842-4f8c-b209-d716fd3c688a", Controller:(*bool)(0xc0034a9d8e), BlockOwnerDeletion:(*bool)(0xc0034a9d8f)}}
  E0428 16:47:30.339854      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:31.340888      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:32.341097      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:33.341568      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:34.342321      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:47:34.483: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-8351" for this suite. @ 04/28/24 16:47:34.485
â€¢ [5.049 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:315
  STEP: Creating a kubernetes client @ 04/28/24 16:47:34.49
  Apr 28 16:47:34.490: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 16:47:34.491
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:34.499
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:34.501
  STEP: Setting up server cert @ 04/28/24 16:47:34.512
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 16:47:34.89
  STEP: Deploying the webhook pod @ 04/28/24 16:47:34.896
  STEP: Wait for the deployment to be ready @ 04/28/24 16:47:34.903
  Apr 28 16:47:34.908: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  E0428 16:47:35.342714      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:36.343061      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 04/28/24 16:47:36.914
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 16:47:36.921
  E0428 16:47:37.343430      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:47:37.922: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Apr 28 16:47:37.926: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  E0428 16:47:38.344283      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-1948-crds.webhook.example.com via the AdmissionRegistration API @ 04/28/24 16:47:38.433
  STEP: Creating a custom resource while v1 is storage version @ 04/28/24 16:47:38.444
  E0428 16:47:39.344397      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:40.345442      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Patching Custom Resource Definition to set v2 as storage @ 04/28/24 16:47:40.475
  STEP: Patching the custom resource while v2 is storage version @ 04/28/24 16:47:40.509
  Apr 28 16:47:40.564: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-4719" for this suite. @ 04/28/24 16:47:41.096
  STEP: Destroying namespace "webhook-markers-9641" for this suite. @ 04/28/24 16:47:41.1
â€¢ [6.615 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/lifecycle_hook.go:213
  STEP: Creating a kubernetes client @ 04/28/24 16:47:41.105
  Apr 28 16:47:41.105: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 04/28/24 16:47:41.106
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:41.114
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:41.116
  STEP: create the container to handle the HTTPGet hook request. @ 04/28/24 16:47:41.12
  E0428 16:47:41.346145      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:42.346677      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: create the pod with lifecycle hook @ 04/28/24 16:47:43.132
  E0428 16:47:43.347257      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:44.348314      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the pod with lifecycle hook @ 04/28/24 16:47:45.142
  E0428 16:47:45.349155      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:46.350066      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: check prestop hook @ 04/28/24 16:47:47.15
  Apr 28 16:47:47.159: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-1713" for this suite. @ 04/28/24 16:47:47.162
â€¢ [6.062 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance]
k8s.io/kubernetes/test/e2e/apps/rc.go:424
  STEP: Creating a kubernetes client @ 04/28/24 16:47:47.168
  Apr 28 16:47:47.168: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename replication-controller @ 04/28/24 16:47:47.169
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:47.176
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:47.177
  STEP: Creating ReplicationController "e2e-rc-c6nh7" @ 04/28/24 16:47:47.179
  Apr 28 16:47:47.183: INFO: Get Replication Controller "e2e-rc-c6nh7" to confirm replicas
  E0428 16:47:47.350567      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:47:48.186: INFO: Get Replication Controller "e2e-rc-c6nh7" to confirm replicas
  Apr 28 16:47:48.188: INFO: Found 1 replicas for "e2e-rc-c6nh7" replication controller
  STEP: Getting scale subresource for ReplicationController "e2e-rc-c6nh7" @ 04/28/24 16:47:48.188
  STEP: Updating a scale subresource @ 04/28/24 16:47:48.19
  STEP: Verifying replicas where modified for replication controller "e2e-rc-c6nh7" @ 04/28/24 16:47:48.195
  Apr 28 16:47:48.195: INFO: Get Replication Controller "e2e-rc-c6nh7" to confirm replicas
  E0428 16:47:48.350955      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:47:49.197: INFO: Get Replication Controller "e2e-rc-c6nh7" to confirm replicas
  Apr 28 16:47:49.199: INFO: Found 2 replicas for "e2e-rc-c6nh7" replication controller
  Apr 28 16:47:49.199: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-1766" for this suite. @ 04/28/24 16:47:49.201
â€¢ [2.039 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:572
  STEP: Creating a kubernetes client @ 04/28/24 16:47:49.207
  Apr 28 16:47:49.207: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 16:47:49.208
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:49.214
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:49.216
  STEP: Setting up server cert @ 04/28/24 16:47:49.228
  E0428 16:47:49.351818      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 16:47:49.497
  STEP: Deploying the webhook pod @ 04/28/24 16:47:49.502
  STEP: Wait for the deployment to be ready @ 04/28/24 16:47:49.509
  Apr 28 16:47:49.513: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  E0428 16:47:50.352302      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:51.352744      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 04/28/24 16:47:51.519
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 16:47:51.528
  E0428 16:47:52.352857      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:47:52.529: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Listing all of the created validation webhooks @ 04/28/24 16:47:52.576
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 04/28/24 16:47:52.598
  STEP: Deleting the collection of validation webhooks @ 04/28/24 16:47:52.613
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 04/28/24 16:47:52.636
  Apr 28 16:47:52.642: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-6419" for this suite. @ 04/28/24 16:47:52.663
  STEP: Destroying namespace "webhook-markers-318" for this suite. @ 04/28/24 16:47:52.667
â€¢ [3.464 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/watch.go:334
  STEP: Creating a kubernetes client @ 04/28/24 16:47:52.671
  Apr 28 16:47:52.671: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename watch @ 04/28/24 16:47:52.672
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:52.68
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:52.682
  STEP: getting a starting resourceVersion @ 04/28/24 16:47:52.683
  STEP: starting a background goroutine to produce watch events @ 04/28/24 16:47:52.685
  STEP: creating watches starting from each resource version of the events produced and verifying they all receive resource versions in the same order @ 04/28/24 16:47:52.685
  E0428 16:47:53.353388      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:54.354518      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:55.354721      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:47:55.476: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-1769" for this suite. @ 04/28/24 16:47:55.526
â€¢ [2.906 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-network] DNS should support configurable pod DNS nameservers [Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:407
  STEP: Creating a kubernetes client @ 04/28/24 16:47:55.578
  Apr 28 16:47:55.578: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename dns @ 04/28/24 16:47:55.578
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:55.586
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:55.588
  STEP: Creating a pod with dnsPolicy=None and customized dnsConfig... @ 04/28/24 16:47:55.596
  Apr 28 16:47:55.610: INFO: Created pod &Pod{ObjectMeta:{test-dns-nameservers  dns-6985  c8882c5b-8398-4831-befe-0f4f0705556a 20937 0 2024-04-28 16:47:55 +0000 UTC <nil> <nil> map[] map[] [] [] [{e2e.test Update v1 2024-04-28 16:47:55 +0000 UTC FieldsV1 {"f:spec":{"f:containers":{"k:{\"name\":\"agnhost-container\"}":{".":{},"f:args":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsConfig":{".":{},"f:nameservers":{},"f:searches":{}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}} }]},Spec:PodSpec{Volumes:[]Volume{Volume{Name:kube-api-access-4g7gj,VolumeSource:VolumeSource{HostPath:nil,EmptyDir:nil,GCEPersistentDisk:nil,AWSElasticBlockStore:nil,GitRepo:nil,Secret:nil,NFS:nil,ISCSI:nil,Glusterfs:nil,PersistentVolumeClaim:nil,RBD:nil,FlexVolume:nil,Cinder:nil,CephFS:nil,Flocker:nil,DownwardAPI:nil,FC:nil,AzureFile:nil,ConfigMap:nil,VsphereVolume:nil,Quobyte:nil,AzureDisk:nil,PhotonPersistentDisk:nil,PortworxVolume:nil,ScaleIO:nil,Projected:&ProjectedVolumeSource{Sources:[]VolumeProjection{VolumeProjection{Secret:nil,DownwardAPI:nil,ConfigMap:nil,ServiceAccountToken:&ServiceAccountTokenProjection{Audience:,ExpirationSeconds:*3607,Path:token,},},VolumeProjection{Secret:nil,DownwardAPI:nil,ConfigMap:&ConfigMapProjection{LocalObjectReference:LocalObjectReference{Name:kube-root-ca.crt,},Items:[]KeyToPath{KeyToPath{Key:ca.crt,Path:ca.crt,Mode:nil,},},Optional:nil,},ServiceAccountToken:nil,},VolumeProjection{Secret:nil,DownwardAPI:&DownwardAPIProjection{Items:[]DownwardAPIVolumeFile{DownwardAPIVolumeFile{Path:namespace,FieldRef:&ObjectFieldSelector{APIVersion:v1,FieldPath:metadata.namespace,},ResourceFieldRef:nil,Mode:nil,},},},ConfigMap:nil,ServiceAccountToken:nil,},},DefaultMode:*420,},StorageOS:nil,CSI:nil,Ephemeral:nil,},},},Containers:[]Container{Container{Name:agnhost-container,Image:registry.k8s.io/e2e-test-images/agnhost:2.47,Command:[],Args:[pause],WorkingDir:,Ports:[]ContainerPort{},Env:[]EnvVar{},Resources:ResourceRequirements{Limits:ResourceList{},Requests:ResourceList{},Claims:[]ResourceClaim{},},VolumeMounts:[]VolumeMount{VolumeMount{Name:kube-api-access-4g7gj,ReadOnly:true,MountPath:/var/run/secrets/kubernetes.io/serviceaccount,SubPath:,MountPropagation:nil,SubPathExpr:,},},LivenessProbe:nil,ReadinessProbe:nil,Lifecycle:nil,TerminationMessagePath:/dev/termination-log,ImagePullPolicy:IfNotPresent,SecurityContext:&SecurityContext{Capabilities:nil,Privileged:nil,SELinuxOptions:nil,RunAsUser:nil,RunAsNonRoot:nil,ReadOnlyRootFilesystem:nil,AllowPrivilegeEscalation:nil,RunAsGroup:nil,ProcMount:nil,WindowsOptions:nil,SeccompProfile:nil,},Stdin:false,StdinOnce:false,TTY:false,EnvFrom:[]EnvFromSource{},TerminationMessagePolicy:File,VolumeDevices:[]VolumeDevice{},StartupProbe:nil,ResizePolicy:[]ContainerResizePolicy{},RestartPolicy:nil,},},RestartPolicy:Always,TerminationGracePeriodSeconds:*0,ActiveDeadlineSeconds:nil,DNSPolicy:None,NodeSelector:map[string]string{},ServiceAccountName:default,DeprecatedServiceAccount:default,NodeName:,HostNetwork:false,HostPID:false,HostIPC:false,SecurityContext:&PodSecurityContext{SELinuxOptions:nil,RunAsUser:nil,RunAsNonRoot:nil,SupplementalGroups:[],FSGroup:nil,RunAsGroup:nil,Sysctls:[]Sysctl{},WindowsOptions:nil,FSGroupChangePolicy:nil,SeccompProfile:nil,},ImagePullSecrets:[]LocalObjectReference{},Hostname:,Subdomain:,Affinity:nil,SchedulerName:default-scheduler,InitContainers:[]Container{},AutomountServiceAccountToken:nil,Tolerations:[]Toleration{Toleration{Key:node.kubernetes.io/not-ready,Operator:Exists,Value:,Effect:NoExecute,TolerationSeconds:*300,},Toleration{Key:node.kubernetes.io/unreachable,Operator:Exists,Value:,Effect:NoExecute,TolerationSeconds:*300,},},HostAliases:[]HostAlias{},PriorityClassName:,Priority:*0,DNSConfig:&PodDNSConfig{Nameservers:[1.1.1.1],Searches:[resolv.conf.local],Options:[]PodDNSConfigOption{},},ShareProcessNamespace:nil,ReadinessGates:[]PodReadinessGate{},RuntimeClassName:nil,EnableServiceLinks:*true,PreemptionPolicy:*PreemptLowerPriority,Overhead:ResourceList{},TopologySpreadConstraints:[]TopologySpreadConstraint{},EphemeralContainers:[]EphemeralContainer{},SetHostnameAsFQDN:nil,OS:nil,HostUsers:nil,SchedulingGates:[]PodSchedulingGate{},ResourceClaims:[]PodResourceClaim{},},Status:PodStatus{Phase:Pending,Conditions:[]PodCondition{},Message:,Reason:,HostIP:,PodIP:,StartTime:<nil>,ContainerStatuses:[]ContainerStatus{},QOSClass:BestEffort,InitContainerStatuses:[]ContainerStatus{},NominatedNodeName:,PodIPs:[]PodIP{},EphemeralContainerStatuses:[]ContainerStatus{},Resize:,ResourceClaimStatuses:[]PodResourceClaimStatus{},HostIPs:[]HostIP{},},}
  E0428 16:47:56.354843      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:57.355050      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Verifying customized DNS suffix list is configured on pod... @ 04/28/24 16:47:57.616
  Apr 28 16:47:57.616: INFO: ExecWithOptions {Command:[/agnhost dns-suffix] Namespace:dns-6985 PodName:test-dns-nameservers ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:47:57.616: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:47:57.616: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:47:57.616: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/dns-6985/pods/test-dns-nameservers/exec?command=%2Fagnhost&command=dns-suffix&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  STEP: Verifying customized DNS server is configured on pod... @ 04/28/24 16:47:57.672
  Apr 28 16:47:57.672: INFO: ExecWithOptions {Command:[/agnhost dns-server-list] Namespace:dns-6985 PodName:test-dns-nameservers ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:47:57.672: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:47:57.673: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:47:57.673: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/dns-6985/pods/test-dns-nameservers/exec?command=%2Fagnhost&command=dns-server-list&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Apr 28 16:47:57.742: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Apr 28 16:47:57.745: INFO: Deleting pod test-dns-nameservers...
  STEP: Destroying namespace "dns-6985" for this suite. @ 04/28/24 16:47:57.753
â€¢ [2.180 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-apps] Deployment deployment should delete old replica sets [Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:122
  STEP: Creating a kubernetes client @ 04/28/24 16:47:57.758
  Apr 28 16:47:57.758: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename deployment @ 04/28/24 16:47:57.759
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:47:57.767
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:47:57.772
  Apr 28 16:47:57.780: INFO: Pod name cleanup-pod: Found 0 pods out of 1
  E0428 16:47:58.355236      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:47:59.355433      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:00.356405      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:01.357142      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:02.357555      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:48:02.782: INFO: Pod name cleanup-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 04/28/24 16:48:02.782
  Apr 28 16:48:02.783: INFO: Creating deployment test-cleanup-deployment
  STEP: Waiting for deployment test-cleanup-deployment history to be cleaned up @ 04/28/24 16:48:02.789
  Apr 28 16:48:02.794: INFO: Deployment "test-cleanup-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=23) "test-cleanup-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-6594",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "72a53ac6-0c45-4141-a237-09f137be10f3",
      ResourceVersion: (string) (len=5) "21008",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849919682,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919682,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=637) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 61  67 6e 68 6f 73 74 5c 22  |me\":\"agnhost\"|
              00000160  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000170  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000180  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000190  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              000001a0  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              000001b0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001c0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              000001d0  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              000001e0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001f0  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000200  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              00000210  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              00000220  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              00000230  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000270  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(0),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 0,
      Replicas: (int32) 0,
      UpdatedReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) <nil>,
      CollisionCount: (*int32)(<nil>)
    }
  }


  Apr 28 16:48:02.796: INFO: New ReplicaSet of Deployment "test-cleanup-deployment" is nil.
  Apr 28 16:48:02.796: INFO: All old ReplicaSets of Deployment "test-cleanup-deployment":
  Apr 28 16:48:02.796: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=23) "test-cleanup-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-6594",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "1e427f37-4e9e-41d3-a891-dc9b32bec89e",
      ResourceVersion: (string) (len=5) "21009",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849919677,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=23) "test-cleanup-deployment",
          UID: (types.UID) (len=36) "72a53ac6-0c45-4141-a237-09f137be10f3",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919677,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=483) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              00000030  3a 70 6f 64 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |:pod":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  72 65 70 6c 69 63 61 73  |ec":{"f:replicas|
              00000050  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000060  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000070  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000080  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              00000090  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              000000a0  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              000000b0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              000000c0  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              000000d0  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              000000e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              000000f0  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000100  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000110  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000120  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |rces":{},"f:term|
              00000130  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000140  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000160  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000170  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              00000180  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              00000190  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              000001a0  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000001b0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              000001c0  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              000001d0  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              000001e0  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919678,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919682,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=103) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6f 77 6e 65 72 52  65 66 65 72 65 6e 63 65  |f:ownerReference|
              00000020  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 6b 3a 7b 5c  |s":{".":{},"k:{\|
              00000030  22 75 69 64 5c 22 3a 5c  22 37 32 61 35 33 61 63  |"uid\":\"72a53ac|
              00000040  36 2d 30 63 34 35 2d 34  31 34 31 2d 61 32 33 37  |6-0c45-4141-a237|
              00000050  2d 30 39 66 31 33 37 62  65 31 30 66 33 5c 22 7d  |-09f137be10f3\"}|
              00000060  22 3a 7b 7d 7d 7d 7d                              |":{}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 28 16:48:02.800: INFO: Pod "test-cleanup-controller-2xwqh" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=29) "test-cleanup-controller-2xwqh",
      GenerateName: (string) (len=24) "test-cleanup-controller-",
      Namespace: (string) (len=15) "deployment-6594",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "02c344e6-9f40-46c3-b1f4-88259f10f94b",
      ResourceVersion: (string) (len=5) "20979",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849919677,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=23) "test-cleanup-controller",
          UID: (types.UID) (len=36) "1e427f37-4e9e-41d3-a891-dc9b32bec89e",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919677,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=500) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  22 3a 7b 7d 7d 2c 22 66  |},"f:pod":{}},"f|
              00000050  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000060  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000070  75 69 64 5c 22 3a 5c 22  31 65 34 32 37 66 33 37  |uid\":\"1e427f37|
              00000080  2d 34 65 39 65 2d 34 31  64 33 2d 61 38 39 31 2d  |-4e9e-41d3-a891-|
              00000090  64 63 39 62 33 32 62 65  63 38 39 65 5c 22 7d 22  |dc9b32bec89e\"}"|
              000000a0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000b0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000c0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 68  |"k:{\"name\":\"h|
              000000d0  74 74 70 64 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |ttpd\"}":{".":{}|
              000000e0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              000000f0  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000100  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000110  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000120  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000130  4d 65 73 73 61 67 65 50  61 74 68 22 3a 7b 7d 2c  |MessagePath":{},|
              00000140  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000150  73 73 61 67 65 50 6f 6c  69 63 79 22 3a 7b 7d 7d  |ssagePolicy":{}}|
              00000160  7d 2c 22 66 3a 64 6e 73  50 6f 6c 69 63 79 22 3a  |},"f:dnsPolicy":|
              00000170  7b 7d 2c 22 66 3a 65 6e  61 62 6c 65 53 65 72 76  |{},"f:enableServ|
              00000180  69 63 65 4c 69 6e 6b 73  22 3a 7b 7d 2c 22 66 3a  |iceLinks":{},"f:|
              00000190  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000001a0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000001b0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000001c0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              000001d0  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              000001e0  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              000001f0  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919678,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 32 34 34 2e 31  2e 37 31 5c 22 7d 22 3a  |10.244.1.71\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-q27zr",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-q27zr",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)(<nil>),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919677,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919678,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919678,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849919677,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.244.1.71",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.244.1.71"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849919677,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63849919678,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=127) "docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=73) "docker://f66f3e4c248cca9756e7b61c4a44c8e32559e4e605aaa38c53fa64dc32051e18",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 16:48:02.801: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-6594" for this suite. @ 04/28/24 16:48:02.805
â€¢ [5.052 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should get a host IP [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:205
  STEP: Creating a kubernetes client @ 04/28/24 16:48:02.812
  Apr 28 16:48:02.812: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename pods @ 04/28/24 16:48:02.813
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:48:02.824
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:48:02.826
  STEP: creating pod @ 04/28/24 16:48:02.828
  E0428 16:48:03.358352      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:04.359060      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:48:04.840: INFO: Pod pod-hostip-24da008e-fa17-46c2-831f-fa9a2ee278d7 has hostIP: 192.168.49.3
  Apr 28 16:48:04.840: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-5415" for this suite. @ 04/28/24 16:48:04.842
â€¢ [2.035 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:693
  STEP: Creating a kubernetes client @ 04/28/24 16:48:04.848
  Apr 28 16:48:04.848: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename resourcequota @ 04/28/24 16:48:04.848
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:48:04.855
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:48:04.857
  STEP: Creating a ResourceQuota with terminating scope @ 04/28/24 16:48:04.858
  STEP: Ensuring ResourceQuota status is calculated @ 04/28/24 16:48:04.862
  E0428 16:48:05.359563      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:06.360294      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota with not terminating scope @ 04/28/24 16:48:06.865
  STEP: Ensuring ResourceQuota status is calculated @ 04/28/24 16:48:06.869
  E0428 16:48:07.361335      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:08.361475      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a long running pod @ 04/28/24 16:48:08.872
  STEP: Ensuring resource quota with not terminating scope captures the pod usage @ 04/28/24 16:48:08.883
  E0428 16:48:09.361982      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:10.362430      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring resource quota with terminating scope ignored the pod usage @ 04/28/24 16:48:10.885
  E0428 16:48:11.363377      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:12.363518      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting the pod @ 04/28/24 16:48:12.888
  STEP: Ensuring resource quota status released the pod usage @ 04/28/24 16:48:12.899
  E0428 16:48:13.363585      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:14.364305      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a terminating pod @ 04/28/24 16:48:14.902
  STEP: Ensuring resource quota with terminating scope captures the pod usage @ 04/28/24 16:48:14.91
  E0428 16:48:15.364506      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:16.364905      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring resource quota with not terminating scope ignored the pod usage @ 04/28/24 16:48:16.912
  E0428 16:48:17.364994      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:18.365210      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting the pod @ 04/28/24 16:48:18.915
  STEP: Ensuring resource quota status released the pod usage @ 04/28/24 16:48:18.923
  E0428 16:48:19.365765      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:20.365990      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:48:20.925: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-4868" for this suite. @ 04/28/24 16:48:20.928
â€¢ [16.083 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/garbage_collector.go:713
  STEP: Creating a kubernetes client @ 04/28/24 16:48:20.932
  Apr 28 16:48:20.932: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename gc @ 04/28/24 16:48:20.932
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:48:20.939
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:48:20.941
  STEP: create the rc1 @ 04/28/24 16:48:20.945
  STEP: create the rc2 @ 04/28/24 16:48:20.948
  E0428 16:48:21.366123      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:22.367067      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:23.367838      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:24.368363      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:25.368535      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:26.368987      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: set half of pods created by rc simpletest-rc-to-be-deleted to have rc simpletest-rc-to-stay as owner as well @ 04/28/24 16:48:26.955
  E0428 16:48:27.369345      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the rc simpletest-rc-to-be-deleted @ 04/28/24 16:48:27.866
  STEP: wait for the rc to be deleted @ 04/28/24 16:48:27.871
  E0428 16:48:28.370413      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:29.370546      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:30.371015      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:31.371389      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:32.372443      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:48:32.952: INFO: 67 pods remaining
  Apr 28 16:48:32.952: INFO: 67 pods has nil DeletionTimestamp
  Apr 28 16:48:32.952: INFO: 
  E0428 16:48:33.373480      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:34.374002      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:35.374263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:36.374620      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:37.374849      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Gathering metrics @ 04/28/24 16:48:37.949
  Apr 28 16:48:38.296: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Apr 28 16:48:38.296: INFO: Deleting pod "simpletest-rc-to-be-deleted-22x62" in namespace "gc-9190"
  Apr 28 16:48:38.349: INFO: Deleting pod "simpletest-rc-to-be-deleted-259qm" in namespace "gc-9190"
  Apr 28 16:48:38.361: INFO: Deleting pod "simpletest-rc-to-be-deleted-2khlk" in namespace "gc-9190"
  E0428 16:48:38.375978      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:48:38.381: INFO: Deleting pod "simpletest-rc-to-be-deleted-2ncdf" in namespace "gc-9190"
  Apr 28 16:48:38.440: INFO: Deleting pod "simpletest-rc-to-be-deleted-4dbkz" in namespace "gc-9190"
  Apr 28 16:48:38.453: INFO: Deleting pod "simpletest-rc-to-be-deleted-4xczz" in namespace "gc-9190"
  Apr 28 16:48:38.468: INFO: Deleting pod "simpletest-rc-to-be-deleted-52qll" in namespace "gc-9190"
  Apr 28 16:48:38.480: INFO: Deleting pod "simpletest-rc-to-be-deleted-58cdn" in namespace "gc-9190"
  Apr 28 16:48:38.545: INFO: Deleting pod "simpletest-rc-to-be-deleted-6s96b" in namespace "gc-9190"
  Apr 28 16:48:38.558: INFO: Deleting pod "simpletest-rc-to-be-deleted-762ql" in namespace "gc-9190"
  Apr 28 16:48:38.580: INFO: Deleting pod "simpletest-rc-to-be-deleted-79wpf" in namespace "gc-9190"
  Apr 28 16:48:38.650: INFO: Deleting pod "simpletest-rc-to-be-deleted-79xdj" in namespace "gc-9190"
  Apr 28 16:48:38.666: INFO: Deleting pod "simpletest-rc-to-be-deleted-7twt4" in namespace "gc-9190"
  Apr 28 16:48:38.675: INFO: Deleting pod "simpletest-rc-to-be-deleted-8kn5z" in namespace "gc-9190"
  Apr 28 16:48:38.742: INFO: Deleting pod "simpletest-rc-to-be-deleted-8wsph" in namespace "gc-9190"
  Apr 28 16:48:38.759: INFO: Deleting pod "simpletest-rc-to-be-deleted-9545g" in namespace "gc-9190"
  Apr 28 16:48:38.842: INFO: Deleting pod "simpletest-rc-to-be-deleted-9jkc2" in namespace "gc-9190"
  Apr 28 16:48:38.864: INFO: Deleting pod "simpletest-rc-to-be-deleted-9r6l5" in namespace "gc-9190"
  Apr 28 16:48:38.878: INFO: Deleting pod "simpletest-rc-to-be-deleted-9rc7l" in namespace "gc-9190"
  Apr 28 16:48:38.946: INFO: Deleting pod "simpletest-rc-to-be-deleted-9xrl5" in namespace "gc-9190"
  Apr 28 16:48:38.962: INFO: Deleting pod "simpletest-rc-to-be-deleted-b4cxb" in namespace "gc-9190"
  Apr 28 16:48:38.975: INFO: Deleting pod "simpletest-rc-to-be-deleted-b8wkz" in namespace "gc-9190"
  Apr 28 16:48:39.045: INFO: Deleting pod "simpletest-rc-to-be-deleted-bp7zc" in namespace "gc-9190"
  Apr 28 16:48:39.056: INFO: Deleting pod "simpletest-rc-to-be-deleted-cq8c2" in namespace "gc-9190"
  Apr 28 16:48:39.074: INFO: Deleting pod "simpletest-rc-to-be-deleted-cxwnl" in namespace "gc-9190"
  Apr 28 16:48:39.148: INFO: Deleting pod "simpletest-rc-to-be-deleted-d59nk" in namespace "gc-9190"
  Apr 28 16:48:39.156: INFO: Deleting pod "simpletest-rc-to-be-deleted-d6q8d" in namespace "gc-9190"
  Apr 28 16:48:39.162: INFO: Deleting pod "simpletest-rc-to-be-deleted-ddjsv" in namespace "gc-9190"
  Apr 28 16:48:39.170: INFO: Deleting pod "simpletest-rc-to-be-deleted-f5s8n" in namespace "gc-9190"
  Apr 28 16:48:39.181: INFO: Deleting pod "simpletest-rc-to-be-deleted-f5wzq" in namespace "gc-9190"
  Apr 28 16:48:39.243: INFO: Deleting pod "simpletest-rc-to-be-deleted-f7bhq" in namespace "gc-9190"
  Apr 28 16:48:39.257: INFO: Deleting pod "simpletest-rc-to-be-deleted-f9ddh" in namespace "gc-9190"
  Apr 28 16:48:39.270: INFO: Deleting pod "simpletest-rc-to-be-deleted-fdpvp" in namespace "gc-9190"
  Apr 28 16:48:39.280: INFO: Deleting pod "simpletest-rc-to-be-deleted-flgbg" in namespace "gc-9190"
  Apr 28 16:48:39.344: INFO: Deleting pod "simpletest-rc-to-be-deleted-fmrkp" in namespace "gc-9190"
  Apr 28 16:48:39.356: INFO: Deleting pod "simpletest-rc-to-be-deleted-fqpgx" in namespace "gc-9190"
  Apr 28 16:48:39.367: INFO: Deleting pod "simpletest-rc-to-be-deleted-ft2j2" in namespace "gc-9190"
  Apr 28 16:48:39.376: INFO: Deleting pod "simpletest-rc-to-be-deleted-g62sg" in namespace "gc-9190"
  E0428 16:48:39.376701      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:48:39.389: INFO: Deleting pod "simpletest-rc-to-be-deleted-g6zrv" in namespace "gc-9190"
  Apr 28 16:48:39.443: INFO: Deleting pod "simpletest-rc-to-be-deleted-gcfkl" in namespace "gc-9190"
  Apr 28 16:48:39.456: INFO: Deleting pod "simpletest-rc-to-be-deleted-hpv4w" in namespace "gc-9190"
  Apr 28 16:48:39.466: INFO: Deleting pod "simpletest-rc-to-be-deleted-hzs82" in namespace "gc-9190"
  Apr 28 16:48:39.490: INFO: Deleting pod "simpletest-rc-to-be-deleted-j6qnl" in namespace "gc-9190"
  Apr 28 16:48:39.539: INFO: Deleting pod "simpletest-rc-to-be-deleted-jbc27" in namespace "gc-9190"
  Apr 28 16:48:39.552: INFO: Deleting pod "simpletest-rc-to-be-deleted-jcc99" in namespace "gc-9190"
  Apr 28 16:48:39.565: INFO: Deleting pod "simpletest-rc-to-be-deleted-jggtb" in namespace "gc-9190"
  Apr 28 16:48:39.578: INFO: Deleting pod "simpletest-rc-to-be-deleted-kbfzt" in namespace "gc-9190"
  Apr 28 16:48:39.639: INFO: Deleting pod "simpletest-rc-to-be-deleted-kc9nc" in namespace "gc-9190"
  Apr 28 16:48:39.654: INFO: Deleting pod "simpletest-rc-to-be-deleted-kfcgs" in namespace "gc-9190"
  Apr 28 16:48:39.666: INFO: Deleting pod "simpletest-rc-to-be-deleted-kmmkj" in namespace "gc-9190"
  Apr 28 16:48:39.678: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-9190" for this suite. @ 04/28/24 16:48:39.681
â€¢ [18.812 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_downwardapi.go:222
  STEP: Creating a kubernetes client @ 04/28/24 16:48:39.745
  Apr 28 16:48:39.745: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:48:39.745
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:48:39.761
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:48:39.765
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 16:48:39.768
  E0428 16:48:40.377971      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:41.378076      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:42.379225      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:43.380146      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:48:43.848
  Apr 28 16:48:43.850: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-6aac6e8d-11b5-4a8b-bf81-cb53948e99a8 container client-container: <nil>
  STEP: delete the pod @ 04/28/24 16:48:43.855
  Apr 28 16:48:43.866: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-1309" for this suite. @ 04/28/24 16:48:43.868
â€¢ [4.127 seconds]
------------------------------
SSS
------------------------------
[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]
k8s.io/kubernetes/test/e2e/common/node/ephemeral_containers.go:98
  STEP: Creating a kubernetes client @ 04/28/24 16:48:43.871
  Apr 28 16:48:43.871: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename ephemeral-containers-test @ 04/28/24 16:48:43.872
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:48:43.88
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:48:43.881
  STEP: creating a target pod @ 04/28/24 16:48:43.884
  E0428 16:48:44.380869      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:45.381381      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: adding an ephemeral container @ 04/28/24 16:48:45.895
  E0428 16:48:46.381795      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:47.382023      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking pod container endpoints @ 04/28/24 16:48:47.906
  Apr 28 16:48:47.906: INFO: ExecWithOptions {Command:[/bin/echo marco] Namespace:ephemeral-containers-test-5100 PodName:ephemeral-containers-target-pod ContainerName:debugger Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:48:47.906: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:48:47.907: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:48:47.907: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/ephemeral-containers-test-5100/pods/ephemeral-containers-target-pod/exec?command=%2Fbin%2Fecho&command=marco&container=debugger&container=debugger&stderr=true&stdout=true)
  Apr 28 16:48:47.951: INFO: Exec stderr: ""
  STEP: checking pod "ephemeral-containers-target-pod" has only one ephemeralcontainer @ 04/28/24 16:48:47.957
  STEP: adding another ephemeralcontainer to pod "ephemeral-containers-target-pod" @ 04/28/24 16:48:47.96
  STEP: checking pod "ephemeral-containers-target-pod" has only two ephemeralcontainers @ 04/28/24 16:48:47.967
  Apr 28 16:48:47.970: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ephemeral-containers-test-5100" for this suite. @ 04/28/24 16:48:47.973
â€¢ [4.109 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/network/networking.go:124
  STEP: Creating a kubernetes client @ 04/28/24 16:48:47.981
  Apr 28 16:48:47.981: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename pod-network-test @ 04/28/24 16:48:47.982
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:48:47.99
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:48:47.992
  STEP: Performing setup for networking test in namespace pod-network-test-1477 @ 04/28/24 16:48:47.994
  STEP: creating a selector @ 04/28/24 16:48:47.994
  STEP: Creating the service pods in kubernetes @ 04/28/24 16:48:47.994
  Apr 28 16:48:47.994: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  E0428 16:48:48.382775      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:49.383018      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:50.383652      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:51.384253      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:52.385286      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:53.386299      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:54.387159      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:55.387286      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:56.388332      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:57.388471      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:58.388855      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:48:59.389507      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating test pods @ 04/28/24 16:49:00.033
  E0428 16:49:00.390293      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:01.391329      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:49:02.051: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Apr 28 16:49:02.051: INFO: Going to poll 10.244.0.143 on port 8081 at least 0 times, with a maximum of 34 tries before failing
  Apr 28 16:49:02.053: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 10.244.0.143 8081 | grep -v '^\s*$'] Namespace:pod-network-test-1477 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:49:02.053: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:49:02.053: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:49:02.053: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-1477/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+10.244.0.143+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  E0428 16:49:02.392301      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:49:03.098: INFO: Found all 1 expected endpoints: [netserver-0]
  Apr 28 16:49:03.098: INFO: Going to poll 10.244.1.126 on port 8081 at least 0 times, with a maximum of 34 tries before failing
  Apr 28 16:49:03.100: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 10.244.1.126 8081 | grep -v '^\s*$'] Namespace:pod-network-test-1477 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:49:03.100: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:49:03.101: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:49:03.101: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-1477/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+10.244.1.126+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  E0428 16:49:03.393155      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:49:04.151: INFO: Found all 1 expected endpoints: [netserver-1]
  Apr 28 16:49:04.151: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-1477" for this suite. @ 04/28/24 16:49:04.154
â€¢ [16.176 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:95
  STEP: Creating a kubernetes client @ 04/28/24 16:49:04.159
  Apr 28 16:49:04.159: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename var-expansion @ 04/28/24 16:49:04.16
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:49:04.169
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:49:04.171
  STEP: Creating a pod to test substitution in container's args @ 04/28/24 16:49:04.173
  E0428 16:49:04.393144      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:05.394148      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:06.394862      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:07.395192      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:49:08.186
  Apr 28 16:49:08.188: INFO: Trying to get logs from node k8sconformance-m02 pod var-expansion-ca17be0b-4cf4-4d9c-b8c9-7714fe1b5f22 container dapi-container: <nil>
  STEP: delete the pod @ 04/28/24 16:49:08.193
  Apr 28 16:49:08.204: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-9259" for this suite. @ 04/28/24 16:49:08.206
â€¢ [4.050 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:47
  STEP: Creating a kubernetes client @ 04/28/24 16:49:08.21
  Apr 28 16:49:08.210: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:49:08.211
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:49:08.219
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:49:08.221
  STEP: Creating configMap with name projected-configmap-test-volume-f838b6b1-4cff-4c86-9d96-b245f8ff843b @ 04/28/24 16:49:08.222
  STEP: Creating a pod to test consume configMaps @ 04/28/24 16:49:08.225
  E0428 16:49:08.395288      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:09.396019      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:10.396701      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:11.397325      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:49:12.243
  Apr 28 16:49:12.245: INFO: Trying to get logs from node k8sconformance-m02 pod pod-projected-configmaps-541222a6-5d9e-4b16-8b89-c6a1a79e1dec container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 16:49:12.25
  Apr 28 16:49:12.258: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9845" for this suite. @ 04/28/24 16:49:12.26
â€¢ [4.054 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/namespace.go:252
  STEP: Creating a kubernetes client @ 04/28/24 16:49:12.264
  Apr 28 16:49:12.264: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename namespaces @ 04/28/24 16:49:12.264
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:49:12.271
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:49:12.273
  STEP: Creating a test namespace @ 04/28/24 16:49:12.275
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:49:12.282
  STEP: Creating a service in the namespace @ 04/28/24 16:49:12.284
  STEP: Deleting the namespace @ 04/28/24 16:49:12.292
  STEP: Waiting for the namespace to be removed. @ 04/28/24 16:49:12.296
  E0428 16:49:12.398305      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:13.399171      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:14.399741      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:15.400095      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:16.400571      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:17.401016      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Recreating the namespace @ 04/28/24 16:49:18.299
  STEP: Verifying there is no service in the namespace @ 04/28/24 16:49:18.308
  Apr 28 16:49:18.310: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-8523" for this suite. @ 04/28/24 16:49:18.311
  STEP: Destroying namespace "nsdeletetest-7107" for this suite. @ 04/28/24 16:49:18.315
  Apr 28 16:49:18.316: INFO: Namespace nsdeletetest-7107 was already deleted
  STEP: Destroying namespace "nsdeletetest-5695" for this suite. @ 04/28/24 16:49:18.316
â€¢ [6.055 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should succeed in writing subpaths in container [Slow] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:300
  STEP: Creating a kubernetes client @ 04/28/24 16:49:18.32
  Apr 28 16:49:18.320: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename var-expansion @ 04/28/24 16:49:18.321
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:49:18.331
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:49:18.332
  STEP: creating the pod @ 04/28/24 16:49:18.335
  STEP: waiting for pod running @ 04/28/24 16:49:18.341
  E0428 16:49:18.401390      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:19.401609      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: creating a file in subpath @ 04/28/24 16:49:20.346
  Apr 28 16:49:20.348: INFO: ExecWithOptions {Command:[/bin/sh -c touch /volume_mount/mypath/foo/test.log] Namespace:var-expansion-1740 PodName:var-expansion-91c8677d-cfb9-45bb-a28e-6267a3d26b3e ContainerName:dapi-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:49:20.348: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:49:20.348: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:49:20.348: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/var-expansion-1740/pods/var-expansion-91c8677d-cfb9-45bb-a28e-6267a3d26b3e/exec?command=%2Fbin%2Fsh&command=-c&command=touch+%2Fvolume_mount%2Fmypath%2Ffoo%2Ftest.log&container=dapi-container&container=dapi-container&stderr=true&stdout=true)
  STEP: test for file in mounted path @ 04/28/24 16:49:20.391
  Apr 28 16:49:20.393: INFO: ExecWithOptions {Command:[/bin/sh -c test -f /subpath_mount/test.log] Namespace:var-expansion-1740 PodName:var-expansion-91c8677d-cfb9-45bb-a28e-6267a3d26b3e ContainerName:dapi-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:49:20.393: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:49:20.394: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:49:20.394: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/var-expansion-1740/pods/var-expansion-91c8677d-cfb9-45bb-a28e-6267a3d26b3e/exec?command=%2Fbin%2Fsh&command=-c&command=test+-f+%2Fsubpath_mount%2Ftest.log&container=dapi-container&container=dapi-container&stderr=true&stdout=true)
  E0428 16:49:20.401793      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: updating the annotation value @ 04/28/24 16:49:20.434
  Apr 28 16:49:20.942: INFO: Successfully updated pod "var-expansion-91c8677d-cfb9-45bb-a28e-6267a3d26b3e"
  STEP: waiting for annotated pod running @ 04/28/24 16:49:20.942
  STEP: deleting the pod gracefully @ 04/28/24 16:49:20.945
  Apr 28 16:49:20.945: INFO: Deleting pod "var-expansion-91c8677d-cfb9-45bb-a28e-6267a3d26b3e" in namespace "var-expansion-1740"
  Apr 28 16:49:20.950: INFO: Wait up to 5m0s for pod "var-expansion-91c8677d-cfb9-45bb-a28e-6267a3d26b3e" to be fully deleted
  E0428 16:49:21.402904      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:22.403261      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:23.404108      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:24.404263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:25.405166      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:26.405276      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:27.405908      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:28.406012      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:29.406613      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:30.406827      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:31.407501      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:32.408064      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:33.408107      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:34.408325      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:35.408601      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:36.409049      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:37.409339      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:38.410403      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:39.410733      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:40.410939      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:41.411393      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:42.412351      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:43.412907      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:44.413117      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:45.413847      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:46.414129      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:47.414210      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:48.414763      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:49.415240      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:50.415892      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:51.416310      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:52.416540      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:49:53.000: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-1740" for this suite. @ 04/28/24 16:49:53.002
â€¢ [34.687 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should find a service from listing all namespaces [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:3117
  STEP: Creating a kubernetes client @ 04/28/24 16:49:53.009
  Apr 28 16:49:53.009: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 16:49:53.01
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:49:53.017
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:49:53.019
  STEP: fetching services @ 04/28/24 16:49:53.021
  Apr 28 16:49:53.022: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-8759" for this suite. @ 04/28/24 16:49:53.024
â€¢ [0.019 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:107
  STEP: Creating a kubernetes client @ 04/28/24 16:49:53.029
  Apr 28 16:49:53.029: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-probe @ 04/28/24 16:49:53.03
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:49:53.037
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:49:53.038
  E0428 16:49:53.417571      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:54.418664      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:55.419290      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:56.420353      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:57.420922      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:58.421985      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:49:59.422611      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:00.423063      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:01.423902      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:02.424328      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:03.425014      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:04.425673      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:05.426046      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:06.426620      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:07.427032      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:08.428096      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:09.428598      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:10.428855      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:11.429446      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:12.429785      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:13.430428      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:14.431173      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:15.431848      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:16.432205      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:17.432571      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:18.433124      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:19.433792      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:20.434853      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:21.435453      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:22.436080      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:23.437101      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:24.437519      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:25.437618      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:26.438267      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:27.438833      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:28.439333      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:29.439851      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:30.440369      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:31.441218      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:32.441930      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:33.442923      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:34.443199      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:35.443659      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:36.444304      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:37.444743      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:38.445195      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:39.445936      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:40.446330      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:41.446863      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:42.447194      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:43.448073      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:44.448603      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:45.449340      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:46.449948      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:47.449979      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:48.450841      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:49.451670      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:50.452193      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:51.452886      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:52.453432      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:50:53.049: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-8715" for this suite. @ 04/28/24 16:50:53.052
â€¢ [60.027 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_secret.go:67
  STEP: Creating a kubernetes client @ 04/28/24 16:50:53.058
  Apr 28 16:50:53.058: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:50:53.058
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:50:53.066
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:50:53.068
  STEP: Creating projection with secret that has name projected-secret-test-70bc0164-62a2-4ee7-bbbd-b9837e51cfcf @ 04/28/24 16:50:53.07
  STEP: Creating a pod to test consume secrets @ 04/28/24 16:50:53.073
  E0428 16:50:53.454283      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:54.455145      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:50:55.081
  Apr 28 16:50:55.083: INFO: Trying to get logs from node k8sconformance-m02 pod pod-projected-secrets-6931afc4-5ff4-4b6e-af02-7aae3d9c6901 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 16:50:55.093
  Apr 28 16:50:55.103: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4672" for this suite. @ 04/28/24 16:50:55.105
â€¢ [2.050 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]
k8s.io/kubernetes/test/e2e/apps/replica_set.go:176
  STEP: Creating a kubernetes client @ 04/28/24 16:50:55.109
  Apr 28 16:50:55.109: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename replicaset @ 04/28/24 16:50:55.11
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:50:55.117
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:50:55.119
  STEP: Create a Replicaset @ 04/28/24 16:50:55.123
  STEP: Verify that the required pods have come up. @ 04/28/24 16:50:55.126
  Apr 28 16:50:55.128: INFO: Pod name sample-pod: Found 0 pods out of 1
  E0428 16:50:55.455885      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:56.456068      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:57.456265      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:58.456521      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:50:59.456737      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:51:00.130: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 04/28/24 16:51:00.13
  STEP: Getting /status @ 04/28/24 16:51:00.13
  Apr 28 16:51:00.132: INFO: Replicaset test-rs has Conditions: []
  STEP: updating the Replicaset Status @ 04/28/24 16:51:00.132
  Apr 28 16:51:00.138: INFO: updatedStatus.Conditions: []v1.ReplicaSetCondition{v1.ReplicaSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the ReplicaSet status to be updated @ 04/28/24 16:51:00.138
  Apr 28 16:51:00.139: INFO: Observed &ReplicaSet event: ADDED
  Apr 28 16:51:00.139: INFO: Observed &ReplicaSet event: MODIFIED
  Apr 28 16:51:00.139: INFO: Observed &ReplicaSet event: MODIFIED
  Apr 28 16:51:00.140: INFO: Observed &ReplicaSet event: MODIFIED
  Apr 28 16:51:00.140: INFO: Found replicaset test-rs in namespace replicaset-6747 with labels: map[name:sample-pod pod:httpd] annotations: map[] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Apr 28 16:51:00.140: INFO: Replicaset test-rs has an updated status
  STEP: patching the Replicaset Status @ 04/28/24 16:51:00.14
  Apr 28 16:51:00.140: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Apr 28 16:51:00.144: INFO: Patched status conditions: []v1.ReplicaSetCondition{v1.ReplicaSetCondition{Type:"StatusPatched", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Replicaset status to be patched @ 04/28/24 16:51:00.144
  Apr 28 16:51:00.145: INFO: Observed &ReplicaSet event: ADDED
  Apr 28 16:51:00.145: INFO: Observed &ReplicaSet event: MODIFIED
  Apr 28 16:51:00.146: INFO: Observed &ReplicaSet event: MODIFIED
  Apr 28 16:51:00.146: INFO: Observed &ReplicaSet event: MODIFIED
  Apr 28 16:51:00.146: INFO: Observed replicaset test-rs in namespace replicaset-6747 with annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Apr 28 16:51:00.146: INFO: Observed &ReplicaSet event: MODIFIED
  Apr 28 16:51:00.146: INFO: Found replicaset test-rs in namespace replicaset-6747 with labels: map[name:sample-pod pod:httpd] annotations: map[] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC  }
  Apr 28 16:51:00.146: INFO: Replicaset test-rs has a patched status
  Apr 28 16:51:00.146: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-6747" for this suite. @ 04/28/24 16:51:00.148
â€¢ [5.043 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:537
  STEP: Creating a kubernetes client @ 04/28/24 16:51:00.152
  Apr 28 16:51:00.152: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename pods @ 04/28/24 16:51:00.153
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:00.161
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:00.163
  Apr 28 16:51:00.165: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: creating the pod @ 04/28/24 16:51:00.166
  STEP: submitting the pod to kubernetes @ 04/28/24 16:51:00.166
  E0428 16:51:00.457506      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:01.458075      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:51:02.230: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-1928" for this suite. @ 04/28/24 16:51:02.232
â€¢ [2.083 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance]
k8s.io/kubernetes/test/e2e/apps/replica_set.go:143
  STEP: Creating a kubernetes client @ 04/28/24 16:51:02.237
  Apr 28 16:51:02.237: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename replicaset @ 04/28/24 16:51:02.238
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:02.246
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:02.248
  STEP: Creating replica set "test-rs" that asks for more than the allowed pod quota @ 04/28/24 16:51:02.25
  Apr 28 16:51:02.255: INFO: Pod name sample-pod: Found 0 pods out of 1
  E0428 16:51:02.458534      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:03.459264      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:04.459778      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:05.460595      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:06.460940      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:51:07.258: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 04/28/24 16:51:07.258
  STEP: getting scale subresource @ 04/28/24 16:51:07.258
  STEP: updating a scale subresource @ 04/28/24 16:51:07.259
  STEP: verifying the replicaset Spec.Replicas was modified @ 04/28/24 16:51:07.263
  STEP: Patch a scale subresource @ 04/28/24 16:51:07.264
  Apr 28 16:51:07.272: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-1053" for this suite. @ 04/28/24 16:51:07.274
â€¢ [5.041 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should manage the lifecycle of a job [Conformance]
k8s.io/kubernetes/test/e2e/apps/job.go:713
  STEP: Creating a kubernetes client @ 04/28/24 16:51:07.279
  Apr 28 16:51:07.279: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename job @ 04/28/24 16:51:07.28
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:07.291
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:07.293
  STEP: Creating a suspended job @ 04/28/24 16:51:07.296
  STEP: Patching the Job @ 04/28/24 16:51:07.3
  STEP: Watching for Job to be patched @ 04/28/24 16:51:07.345
  Apr 28 16:51:07.346: INFO: Event ADDED observed for Job e2e-p4mwg in namespace job-9388 with labels: map[e2e-job-label:e2e-p4mwg] and annotations: map[]
  Apr 28 16:51:07.346: INFO: Event MODIFIED observed for Job e2e-p4mwg in namespace job-9388 with labels: map[e2e-job-label:e2e-p4mwg] and annotations: map[]
  Apr 28 16:51:07.346: INFO: Event MODIFIED found for Job e2e-p4mwg in namespace job-9388 with labels: map[e2e-job-label:e2e-p4mwg e2e-p4mwg:patched] and annotations: map[]
  STEP: Updating the job @ 04/28/24 16:51:07.346
  STEP: Watching for Job to be updated @ 04/28/24 16:51:07.353
  Apr 28 16:51:07.354: INFO: Event MODIFIED found for Job e2e-p4mwg in namespace job-9388 with labels: map[e2e-job-label:e2e-p4mwg e2e-p4mwg:patched] and annotations: map[updated:true]
  Apr 28 16:51:07.354: INFO: Found Job annotations: map[string]string{"updated":"true"}
  STEP: Listing all Jobs with LabelSelector @ 04/28/24 16:51:07.355
  Apr 28 16:51:07.356: INFO: Job: e2e-p4mwg as labels: map[e2e-job-label:e2e-p4mwg e2e-p4mwg:patched]
  STEP: Waiting for job to complete @ 04/28/24 16:51:07.356
  E0428 16:51:07.462011      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:08.462457      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:09.462776      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:10.462993      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:11.463132      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:12.463245      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Delete a job collection with a labelselector @ 04/28/24 16:51:13.359
  STEP: Watching for Job to be deleted @ 04/28/24 16:51:13.363
  Apr 28 16:51:13.365: INFO: Event MODIFIED observed for Job e2e-p4mwg in namespace job-9388 with labels: map[e2e-job-label:e2e-p4mwg e2e-p4mwg:patched] and annotations: map[updated:true]
  Apr 28 16:51:13.365: INFO: Event MODIFIED observed for Job e2e-p4mwg in namespace job-9388 with labels: map[e2e-job-label:e2e-p4mwg e2e-p4mwg:patched] and annotations: map[updated:true]
  Apr 28 16:51:13.365: INFO: Event MODIFIED observed for Job e2e-p4mwg in namespace job-9388 with labels: map[e2e-job-label:e2e-p4mwg e2e-p4mwg:patched] and annotations: map[updated:true]
  Apr 28 16:51:13.365: INFO: Event MODIFIED observed for Job e2e-p4mwg in namespace job-9388 with labels: map[e2e-job-label:e2e-p4mwg e2e-p4mwg:patched] and annotations: map[updated:true]
  Apr 28 16:51:13.365: INFO: Event MODIFIED observed for Job e2e-p4mwg in namespace job-9388 with labels: map[e2e-job-label:e2e-p4mwg e2e-p4mwg:patched] and annotations: map[updated:true]
  Apr 28 16:51:13.365: INFO: Event DELETED found for Job e2e-p4mwg in namespace job-9388 with labels: map[e2e-job-label:e2e-p4mwg e2e-p4mwg:patched] and annotations: map[updated:true]
  STEP: Relist jobs to confirm deletion @ 04/28/24 16:51:13.365
  Apr 28 16:51:13.368: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-9388" for this suite. @ 04/28/24 16:51:13.372
â€¢ [6.098 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] Pods should be updated [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:345
  STEP: Creating a kubernetes client @ 04/28/24 16:51:13.377
  Apr 28 16:51:13.377: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename pods @ 04/28/24 16:51:13.378
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:13.385
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:13.387
  STEP: creating the pod @ 04/28/24 16:51:13.388
  STEP: submitting the pod to kubernetes @ 04/28/24 16:51:13.388
  E0428 16:51:13.464074      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:14.464430      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: verifying the pod is in kubernetes @ 04/28/24 16:51:15.4
  STEP: updating the pod @ 04/28/24 16:51:15.402
  E0428 16:51:15.465162      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:51:15.912: INFO: Successfully updated pod "pod-update-1f1b69d5-f701-4834-9f49-196c7bd31c61"
  STEP: verifying the updated pod is in kubernetes @ 04/28/24 16:51:15.914
  Apr 28 16:51:15.915: INFO: Pod update OK
  Apr 28 16:51:15.915: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-5757" for this suite. @ 04/28/24 16:51:15.918
â€¢ [2.543 seconds]
------------------------------
SSS
------------------------------
[sig-apps] ReplicaSet Replace and Patch tests [Conformance]
k8s.io/kubernetes/test/e2e/apps/replica_set.go:154
  STEP: Creating a kubernetes client @ 04/28/24 16:51:15.921
  Apr 28 16:51:15.921: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename replicaset @ 04/28/24 16:51:15.922
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:15.929
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:15.93
  Apr 28 16:51:15.937: INFO: Pod name sample-pod: Found 0 pods out of 1
  E0428 16:51:16.465325      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:17.465577      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:18.465947      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:19.465966      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:20.466180      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:51:20.941: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 04/28/24 16:51:20.941
  STEP: Scaling up "test-rs" replicaset  @ 04/28/24 16:51:20.941
  Apr 28 16:51:20.947: INFO: Updating replica set "test-rs"
  STEP: patching the ReplicaSet @ 04/28/24 16:51:20.947
  Apr 28 16:51:20.953: INFO: observed ReplicaSet test-rs in namespace replicaset-9553 with ReadyReplicas 1, AvailableReplicas 1
  Apr 28 16:51:20.962: INFO: observed ReplicaSet test-rs in namespace replicaset-9553 with ReadyReplicas 1, AvailableReplicas 1
  Apr 28 16:51:20.970: INFO: observed ReplicaSet test-rs in namespace replicaset-9553 with ReadyReplicas 1, AvailableReplicas 1
  Apr 28 16:51:20.975: INFO: observed ReplicaSet test-rs in namespace replicaset-9553 with ReadyReplicas 1, AvailableReplicas 1
  E0428 16:51:21.466692      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:51:21.750: INFO: observed ReplicaSet test-rs in namespace replicaset-9553 with ReadyReplicas 2, AvailableReplicas 2
  Apr 28 16:51:22.269: INFO: observed Replicaset test-rs in namespace replicaset-9553 with ReadyReplicas 3 found true
  Apr 28 16:51:22.269: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-9553" for this suite. @ 04/28/24 16:51:22.271
â€¢ [6.355 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/network/networking.go:84
  STEP: Creating a kubernetes client @ 04/28/24 16:51:22.277
  Apr 28 16:51:22.277: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename pod-network-test @ 04/28/24 16:51:22.278
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:22.285
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:22.287
  STEP: Performing setup for networking test in namespace pod-network-test-3473 @ 04/28/24 16:51:22.288
  STEP: creating a selector @ 04/28/24 16:51:22.288
  STEP: Creating the service pods in kubernetes @ 04/28/24 16:51:22.288
  Apr 28 16:51:22.288: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  E0428 16:51:22.467713      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:23.467961      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:24.468513      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:25.469280      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:26.470048      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:27.470255      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:28.470286      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:29.470482      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:30.470593      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:31.470736      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:32.471186      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:33.471423      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating test pods @ 04/28/24 16:51:34.328
  E0428 16:51:34.472315      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:35.472519      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:51:36.338: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Apr 28 16:51:36.338: INFO: Breadth first check of 10.244.0.145 on host 192.168.49.2...
  Apr 28 16:51:36.340: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.244.1.144:9080/dial?request=hostname&protocol=http&host=10.244.0.145&port=8083&tries=1'] Namespace:pod-network-test-3473 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:51:36.340: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:51:36.340: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:51:36.340: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-3473/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.244.1.144%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D10.244.0.145%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Apr 28 16:51:36.391: INFO: Waiting for responses: map[]
  Apr 28 16:51:36.391: INFO: reached 10.244.0.145 after 0/1 tries
  Apr 28 16:51:36.391: INFO: Breadth first check of 10.244.1.143 on host 192.168.49.3...
  Apr 28 16:51:36.393: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.244.1.144:9080/dial?request=hostname&protocol=http&host=10.244.1.143&port=8083&tries=1'] Namespace:pod-network-test-3473 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Apr 28 16:51:36.393: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  Apr 28 16:51:36.394: INFO: ExecWithOptions: Clientset creation
  Apr 28 16:51:36.394: INFO: ExecWithOptions: execute(POST https://10.96.0.1:443/api/v1/namespaces/pod-network-test-3473/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.244.1.144%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D10.244.1.143%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Apr 28 16:51:36.437: INFO: Waiting for responses: map[]
  Apr 28 16:51:36.437: INFO: reached 10.244.1.143 after 0/1 tries
  Apr 28 16:51:36.437: INFO: Going to retry 0 out of 2 pods....
  Apr 28 16:51:36.437: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-3473" for this suite. @ 04/28/24 16:51:36.44
â€¢ [14.168 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:99
  STEP: Creating a kubernetes client @ 04/28/24 16:51:36.447
  Apr 28 16:51:36.447: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:51:36.447
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:36.455
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:36.457
  STEP: Creating configMap with name projected-configmap-test-volume-map-e7c9f9d4-b80d-4c25-ba11-dc8f5e731c01 @ 04/28/24 16:51:36.459
  STEP: Creating a pod to test consume configMaps @ 04/28/24 16:51:36.462
  E0428 16:51:36.472835      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:37.473681      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:38.474527      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:39.474899      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:51:40.474
  E0428 16:51:40.475585      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:51:40.476: INFO: Trying to get logs from node k8sconformance-m02 pod pod-projected-configmaps-cecc0505-38ad-4ffa-90da-86e59a08e851 container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 16:51:40.482
  Apr 28 16:51:40.491: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7214" for this suite. @ 04/28/24 16:51:40.493
â€¢ [4.049 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:47
  STEP: Creating a kubernetes client @ 04/28/24 16:51:40.496
  Apr 28 16:51:40.496: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename configmap @ 04/28/24 16:51:40.497
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:40.503
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:40.505
  STEP: Creating configMap with name configmap-test-volume-e1a34b7b-bf70-4908-a57a-1ee9766ecd5a @ 04/28/24 16:51:40.507
  STEP: Creating a pod to test consume configMaps @ 04/28/24 16:51:40.509
  E0428 16:51:41.476278      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:42.477093      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:43.477139      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:44.477429      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:51:44.52
  Apr 28 16:51:44.522: INFO: Trying to get logs from node k8sconformance-m02 pod pod-configmaps-d70d244e-25fe-4fca-9fd7-707ea87fcead container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 16:51:44.528
  Apr 28 16:51:44.537: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-1693" for this suite. @ 04/28/24 16:51:44.539
â€¢ [4.045 seconds]
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/secrets_volume.go:89
  STEP: Creating a kubernetes client @ 04/28/24 16:51:44.542
  Apr 28 16:51:44.542: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename secrets @ 04/28/24 16:51:44.543
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:44.55
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:44.552
  STEP: Creating secret with name secret-test-map-e8c5a661-554c-4ab4-b245-04679e57a16a @ 04/28/24 16:51:44.554
  STEP: Creating a pod to test consume secrets @ 04/28/24 16:51:44.557
  E0428 16:51:45.478239      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:46.478339      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:47.479281      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:48.479503      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:51:48.569
  Apr 28 16:51:48.571: INFO: Trying to get logs from node k8sconformance-m02 pod pod-secrets-6f92cd84-ff30-44fe-a4fa-bd21833c8585 container secret-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 16:51:48.577
  Apr 28 16:51:48.584: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-4530" for this suite. @ 04/28/24 16:51:48.586
â€¢ [4.047 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:504
  STEP: Creating a kubernetes client @ 04/28/24 16:51:48.59
  Apr 28 16:51:48.590: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename configmap @ 04/28/24 16:51:48.59
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:48.598
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:48.6
  Apr 28 16:51:48.618: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-3796" for this suite. @ 04/28/24 16:51:48.62
â€¢ [0.034 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info  [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1316
  STEP: Creating a kubernetes client @ 04/28/24 16:51:48.624
  Apr 28 16:51:48.624: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 16:51:48.625
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:48.631
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:48.633
  STEP: validating cluster-info @ 04/28/24 16:51:48.634
  Apr 28 16:51:48.634: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-317 cluster-info'
  Apr 28 16:51:48.689: INFO: stderr: ""
  Apr 28 16:51:48.689: INFO: stdout: "\x1b[0;32mKubernetes control plane\x1b[0m is running at \x1b[0;33mhttps://10.96.0.1:443\x1b[0m\n\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n"
  Apr 28 16:51:48.690: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-317" for this suite. @ 04/28/24 16:51:48.692
â€¢ [0.071 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]
k8s.io/kubernetes/test/e2e/common/node/configmap.go:138
  STEP: Creating a kubernetes client @ 04/28/24 16:51:48.696
  Apr 28 16:51:48.696: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename configmap @ 04/28/24 16:51:48.696
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:48.703
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:48.705
  STEP: Creating configMap that has name configmap-test-emptyKey-9147acc0-0f16-4555-a487-5b33e66778ea @ 04/28/24 16:51:48.706
  Apr 28 16:51:48.708: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-5158" for this suite. @ 04/28/24 16:51:48.71
â€¢ [0.017 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]
k8s.io/kubernetes/test/e2e/apps/daemon_set.go:836
  STEP: Creating a kubernetes client @ 04/28/24 16:51:48.713
  Apr 28 16:51:48.713: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename daemonsets @ 04/28/24 16:51:48.714
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:48.721
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:48.723
  STEP: Creating simple DaemonSet "daemon-set" @ 04/28/24 16:51:48.733
  STEP: Check that daemon pods launch on every node of the cluster. @ 04/28/24 16:51:48.736
  Apr 28 16:51:48.740: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Apr 28 16:51:48.740: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  E0428 16:51:49.479651      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:51:49.745: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Apr 28 16:51:49.745: INFO: Node k8sconformance is running 0 daemon pod, expected 1
  E0428 16:51:50.480177      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:51:50.745: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Apr 28 16:51:50.745: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: listing all DaemonSets @ 04/28/24 16:51:50.747
  STEP: DeleteCollection of the DaemonSets @ 04/28/24 16:51:50.749
  STEP: Verify that ReplicaSets have been deleted @ 04/28/24 16:51:50.752
  Apr 28 16:51:50.757: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"23792"},"items":null}

  Apr 28 16:51:50.759: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"23792"},"items":[{"metadata":{"name":"daemon-set-fbpbb","generateName":"daemon-set-","namespace":"daemonsets-7575","uid":"f37cdc00-39c1-448f-8adb-eecfcf79350e","resourceVersion":"23790","creationTimestamp":"2024-04-28T16:51:48Z","labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"d14e80a4-3061-45a2-a3fa-57e6acd943b1","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2024-04-28T16:51:48Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"d14e80a4-3061-45a2-a3fa-57e6acd943b1\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2024-04-28T16:51:49Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.0.146\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-k574c","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-k574c","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"k8sconformance","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["k8sconformance"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-28T16:51:48Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-28T16:51:49Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-28T16:51:49Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-28T16:51:48Z"}],"hostIP":"192.168.49.2","podIP":"10.244.0.146","podIPs":[{"ip":"10.244.0.146"}],"startTime":"2024-04-28T16:51:48Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2024-04-28T16:51:49Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"docker://63b2583d459d9a6bc6f63a3cb3849d711586c6b56f19eb69156641b83a5190be","started":true}],"qosClass":"BestEffort"}},{"metadata":{"name":"daemon-set-m999h","generateName":"daemon-set-","namespace":"daemonsets-7575","uid":"dd8920c3-74f3-4668-ab95-4f9fa0e4d682","resourceVersion":"23778","creationTimestamp":"2024-04-28T16:51:48Z","labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"d14e80a4-3061-45a2-a3fa-57e6acd943b1","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2024-04-28T16:51:48Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"d14e80a4-3061-45a2-a3fa-57e6acd943b1\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2024-04-28T16:51:49Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.1.148\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-w44hb","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-w44hb","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"k8sconformance-m02","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["k8sconformance-m02"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-28T16:51:48Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-28T16:51:49Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-28T16:51:49Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-04-28T16:51:48Z"}],"hostIP":"192.168.49.3","podIP":"10.244.1.148","podIPs":[{"ip":"10.244.1.148"}],"startTime":"2024-04-28T16:51:48Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2024-04-28T16:51:49Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"docker-pullable://registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"docker://31712d787276a6c984f315018562f0cbddd1da69faef1b4b83180a85a4fad05e","started":true}],"qosClass":"BestEffort"}}]}

  Apr 28 16:51:50.768: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-7575" for this suite. @ 04/28/24 16:51:50.77
â€¢ [2.060 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:236
  STEP: Creating a kubernetes client @ 04/28/24 16:51:50.774
  Apr 28 16:51:50.774: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/28/24 16:51:50.774
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:50.782
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:50.784
  Apr 28 16:51:50.786: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  E0428 16:51:51.480640      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 04/28/24 16:51:51.99
  Apr 28 16:51:51.990: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-6646 --namespace=crd-publish-openapi-6646 create -f -'
  Apr 28 16:51:52.372: INFO: stderr: ""
  Apr 28 16:51:52.372: INFO: stdout: "e2e-test-crd-publish-openapi-1957-crd.crd-publish-openapi-test-unknown-in-nested.example.com/test-cr created\n"
  Apr 28 16:51:52.372: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-6646 --namespace=crd-publish-openapi-6646 delete e2e-test-crd-publish-openapi-1957-crds test-cr'
  Apr 28 16:51:52.429: INFO: stderr: ""
  Apr 28 16:51:52.429: INFO: stdout: "e2e-test-crd-publish-openapi-1957-crd.crd-publish-openapi-test-unknown-in-nested.example.com \"test-cr\" deleted\n"
  Apr 28 16:51:52.429: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-6646 --namespace=crd-publish-openapi-6646 apply -f -'
  E0428 16:51:52.481490      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:51:52.547: INFO: stderr: ""
  Apr 28 16:51:52.547: INFO: stdout: "e2e-test-crd-publish-openapi-1957-crd.crd-publish-openapi-test-unknown-in-nested.example.com/test-cr created\n"
  Apr 28 16:51:52.548: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-6646 --namespace=crd-publish-openapi-6646 delete e2e-test-crd-publish-openapi-1957-crds test-cr'
  Apr 28 16:51:52.606: INFO: stderr: ""
  Apr 28 16:51:52.606: INFO: stdout: "e2e-test-crd-publish-openapi-1957-crd.crd-publish-openapi-test-unknown-in-nested.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR @ 04/28/24 16:51:52.606
  Apr 28 16:51:52.606: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-6646 explain e2e-test-crd-publish-openapi-1957-crds'
  Apr 28 16:51:52.716: INFO: stderr: ""
  Apr 28 16:51:52.716: INFO: stdout: "GROUP:      crd-publish-openapi-test-unknown-in-nested.example.com\nKIND:       e2e-test-crd-publish-openapi-1957-crd\nVERSION:    v1\n\nDESCRIPTION:\n    preserve-unknown-properties in nested field for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Waldo\n\n  status\t<Object>\n    Status of Waldo\n\n\n"
  E0428 16:51:53.482230      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:51:54.036: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-6646" for this suite. @ 04/28/24 16:51:54.041
â€¢ [3.272 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]
k8s.io/kubernetes/test/e2e/apps/replica_set.go:131
  STEP: Creating a kubernetes client @ 04/28/24 16:51:54.048
  Apr 28 16:51:54.048: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename replicaset @ 04/28/24 16:51:54.048
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:54.056
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:54.057
  STEP: Given a Pod with a 'name' label pod-adoption-release is created @ 04/28/24 16:51:54.059
  E0428 16:51:54.482765      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:55.482990      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: When a replicaset with a matching selector is created @ 04/28/24 16:51:56.071
  STEP: Then the orphan pod is adopted @ 04/28/24 16:51:56.075
  E0428 16:51:56.483307      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: When the matched label of one of its pods change @ 04/28/24 16:51:57.079
  Apr 28 16:51:57.081: INFO: Pod name pod-adoption-release: Found 1 pods out of 1
  STEP: Then the pod is released @ 04/28/24 16:51:57.088
  E0428 16:51:57.484235      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:51:58.093: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-2254" for this suite. @ 04/28/24 16:51:58.096
â€¢ [4.052 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:89
  STEP: Creating a kubernetes client @ 04/28/24 16:51:58.1
  Apr 28 16:51:58.100: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename configmap @ 04/28/24 16:51:58.101
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:51:58.109
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:51:58.111
  STEP: Creating configMap with name configmap-test-volume-map-3eaa41a3-bfb8-4039-98ce-3552b9d9709a @ 04/28/24 16:51:58.113
  STEP: Creating a pod to test consume configMaps @ 04/28/24 16:51:58.115
  E0428 16:51:58.484515      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:51:59.485001      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:00.485932      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:01.486422      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:52:02.127
  Apr 28 16:52:02.129: INFO: Trying to get logs from node k8sconformance-m02 pod pod-configmaps-e1569693-9839-417a-864d-39e3bd0c2db7 container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 16:52:02.134
  Apr 28 16:52:02.142: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-6819" for this suite. @ 04/28/24 16:52:02.144
â€¢ [4.047 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/pods.go:445
  STEP: Creating a kubernetes client @ 04/28/24 16:52:02.148
  Apr 28 16:52:02.148: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename pods @ 04/28/24 16:52:02.148
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:52:02.157
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:52:02.159
  E0428 16:52:02.487369      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:03.487537      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:04.488102      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:05.488316      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:52:06.19
  Apr 28 16:52:06.192: INFO: Trying to get logs from node k8sconformance-m02 pod client-envvars-fcd7fa28-4a2d-4b38-bc8e-c7f6d166f1d9 container env3cont: <nil>
  STEP: delete the pod @ 04/28/24 16:52:06.199
  Apr 28 16:52:06.208: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-6636" for this suite. @ 04/28/24 16:52:06.21
â€¢ [4.066 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]
k8s.io/kubernetes/test/e2e/apps/rc.go:85
  STEP: Creating a kubernetes client @ 04/28/24 16:52:06.214
  Apr 28 16:52:06.214: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename replication-controller @ 04/28/24 16:52:06.215
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:52:06.222
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:52:06.224
  Apr 28 16:52:06.226: INFO: Creating quota "condition-test" that allows only two pods to run in the current namespace
  E0428 16:52:06.489264      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating rc "condition-test" that asks for more than the allowed pod quota @ 04/28/24 16:52:07.233
  STEP: Checking rc "condition-test" has the desired failure condition set @ 04/28/24 16:52:07.236
  E0428 16:52:07.490290      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Scaling down rc "condition-test" to satisfy pod quota @ 04/28/24 16:52:08.24
  Apr 28 16:52:08.245: INFO: Updating replication controller "condition-test"
  STEP: Checking rc "condition-test" has no failure condition set @ 04/28/24 16:52:08.245
  E0428 16:52:08.490758      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:52:09.250: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-6641" for this suite. @ 04/28/24 16:52:09.252
â€¢ [3.042 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl label should update the label on a resource  [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:1575
  STEP: Creating a kubernetes client @ 04/28/24 16:52:09.256
  Apr 28 16:52:09.256: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 16:52:09.257
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:52:09.263
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:52:09.265
  STEP: creating the pod @ 04/28/24 16:52:09.267
  Apr 28 16:52:09.267: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-7775 create -f -'
  E0428 16:52:09.491262      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:52:09.620: INFO: stderr: ""
  Apr 28 16:52:09.620: INFO: stdout: "pod/pause created\n"
  E0428 16:52:10.492094      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:11.492681      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: adding the label testing-label with value testing-label-value to a pod @ 04/28/24 16:52:11.626
  Apr 28 16:52:11.626: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-7775 label pods pause testing-label=testing-label-value'
  Apr 28 16:52:11.684: INFO: stderr: ""
  Apr 28 16:52:11.684: INFO: stdout: "pod/pause labeled\n"
  STEP: verifying the pod has the label testing-label with the value testing-label-value @ 04/28/24 16:52:11.684
  Apr 28 16:52:11.684: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-7775 get pod pause -L testing-label'
  Apr 28 16:52:11.738: INFO: stderr: ""
  Apr 28 16:52:11.738: INFO: stdout: "NAME    READY   STATUS    RESTARTS   AGE   TESTING-LABEL\npause   1/1     Running   0          2s    testing-label-value\n"
  STEP: removing the label testing-label of a pod @ 04/28/24 16:52:11.738
  Apr 28 16:52:11.738: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-7775 label pods pause testing-label-'
  Apr 28 16:52:11.797: INFO: stderr: ""
  Apr 28 16:52:11.797: INFO: stdout: "pod/pause unlabeled\n"
  STEP: verifying the pod doesn't have the label testing-label @ 04/28/24 16:52:11.797
  Apr 28 16:52:11.797: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-7775 get pod pause -L testing-label'
  Apr 28 16:52:11.849: INFO: stderr: ""
  Apr 28 16:52:11.849: INFO: stdout: "NAME    READY   STATUS    RESTARTS   AGE   TESTING-LABEL\npause   1/1     Running   0          2s    \n"
  STEP: using delete to clean up resources @ 04/28/24 16:52:11.849
  Apr 28 16:52:11.849: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-7775 delete --grace-period=0 --force -f -'
  Apr 28 16:52:11.915: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 28 16:52:11.915: INFO: stdout: "pod \"pause\" force deleted\n"
  Apr 28 16:52:11.915: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-7775 get rc,svc -l name=pause --no-headers'
  Apr 28 16:52:11.970: INFO: stderr: "No resources found in kubectl-7775 namespace.\n"
  Apr 28 16:52:11.970: INFO: stdout: ""
  Apr 28 16:52:11.970: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-7775 get pods -l name=pause -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Apr 28 16:52:12.022: INFO: stderr: ""
  Apr 28 16:52:12.022: INFO: stdout: ""
  Apr 28 16:52:12.022: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-7775" for this suite. @ 04/28/24 16:52:12.024
â€¢ [2.772 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_secret.go:88
  STEP: Creating a kubernetes client @ 04/28/24 16:52:12.029
  Apr 28 16:52:12.029: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:52:12.03
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:52:12.037
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:52:12.039
  STEP: Creating projection with secret that has name projected-secret-test-map-6b9c5f77-a4fc-48c1-86aa-0cc8d6185f54 @ 04/28/24 16:52:12.041
  STEP: Creating a pod to test consume secrets @ 04/28/24 16:52:12.043
  E0428 16:52:12.493398      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:13.493913      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:52:14.053
  Apr 28 16:52:14.054: INFO: Trying to get logs from node k8sconformance-m02 pod pod-projected-secrets-d45fa720-ed4e-4df0-b61c-a421ee16cd84 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 16:52:14.061
  Apr 28 16:52:14.070: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-1136" for this suite. @ 04/28/24 16:52:14.072
â€¢ [2.046 seconds]
------------------------------
SSSS
------------------------------
[sig-network] DNS should provide DNS for services  [Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:137
  STEP: Creating a kubernetes client @ 04/28/24 16:52:14.075
  Apr 28 16:52:14.075: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename dns @ 04/28/24 16:52:14.076
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:52:14.083
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:52:14.085
  STEP: Creating a test headless service @ 04/28/24 16:52:14.086
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service.dns-7928.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-7928.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-7928.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-7928.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-7928.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-7928.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-7928.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.test-service-2.dns-7928.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-7928.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.test-service-2.dns-7928.svc.cluster.local;check="$$(dig +notcp +noall +answer +search 249.29.99.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.99.29.249_udp@PTR;check="$$(dig +tcp +noall +answer +search 249.29.99.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.99.29.249_tcp@PTR;sleep 1; done
   @ 04/28/24 16:52:14.096
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service.dns-7928.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-7928.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-7928.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-7928.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-7928.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-7928.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-7928.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.test-service-2.dns-7928.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-7928.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.test-service-2.dns-7928.svc.cluster.local;check="$$(dig +notcp +noall +answer +search 249.29.99.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.99.29.249_udp@PTR;check="$$(dig +tcp +noall +answer +search 249.29.99.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.99.29.249_tcp@PTR;sleep 1; done
   @ 04/28/24 16:52:14.096
  STEP: creating a pod to probe DNS @ 04/28/24 16:52:14.096
  STEP: submitting the pod to kubernetes @ 04/28/24 16:52:14.096
  E0428 16:52:14.494453      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:15.494573      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: retrieving the pod @ 04/28/24 16:52:16.109
  STEP: looking for the results for each expected name from probers @ 04/28/24 16:52:16.111
  Apr 28 16:52:16.113: INFO: Unable to read wheezy_udp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:16.115: INFO: Unable to read wheezy_tcp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:16.117: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:16.118: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:16.127: INFO: Unable to read jessie_udp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:16.129: INFO: Unable to read jessie_tcp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:16.130: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:16.132: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:16.138: INFO: Lookups using dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649 failed for: [wheezy_udp@dns-test-service.dns-7928.svc.cluster.local wheezy_tcp@dns-test-service.dns-7928.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local jessie_udp@dns-test-service.dns-7928.svc.cluster.local jessie_tcp@dns-test-service.dns-7928.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local]

  Apr 28 16:52:16.143: INFO: Pod client logs for webserver: 
  Apr 28 16:52:16.148: INFO: Pod client logs for querier: 
  Apr 28 16:52:16.153: INFO: Pod client logs for jessie-querier: 
  E0428 16:52:16.495654      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:17.496297      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:18.496744      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:19.496975      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:20.497445      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:52:21.155: INFO: Unable to read wheezy_udp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:21.157: INFO: Unable to read wheezy_tcp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:21.159: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:21.161: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:21.170: INFO: Unable to read jessie_udp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:21.172: INFO: Unable to read jessie_tcp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:21.173: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:21.175: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:21.181: INFO: Lookups using dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649 failed for: [wheezy_udp@dns-test-service.dns-7928.svc.cluster.local wheezy_tcp@dns-test-service.dns-7928.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local jessie_udp@dns-test-service.dns-7928.svc.cluster.local jessie_tcp@dns-test-service.dns-7928.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local]

  Apr 28 16:52:21.187: INFO: Pod client logs for webserver: 
  Apr 28 16:52:21.192: INFO: Pod client logs for querier: 
  Apr 28 16:52:21.197: INFO: Pod client logs for jessie-querier: 
  E0428 16:52:21.498041      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:22.498459      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:23.498662      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:24.499033      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:25.499259      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:52:26.156: INFO: Unable to read wheezy_udp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:26.158: INFO: Unable to read wheezy_tcp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:26.160: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:26.162: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:26.170: INFO: Unable to read jessie_udp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:26.172: INFO: Unable to read jessie_tcp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:26.173: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:26.175: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:26.181: INFO: Lookups using dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649 failed for: [wheezy_udp@dns-test-service.dns-7928.svc.cluster.local wheezy_tcp@dns-test-service.dns-7928.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local jessie_udp@dns-test-service.dns-7928.svc.cluster.local jessie_tcp@dns-test-service.dns-7928.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local]

  Apr 28 16:52:26.187: INFO: Pod client logs for webserver: 
  Apr 28 16:52:26.192: INFO: Pod client logs for querier: 
  Apr 28 16:52:26.197: INFO: Pod client logs for jessie-querier: 
  E0428 16:52:26.499398      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:27.499612      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:28.499761      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:29.500369      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:30.500603      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:52:31.156: INFO: Unable to read wheezy_udp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:31.159: INFO: Unable to read wheezy_tcp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:31.161: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:31.163: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:31.172: INFO: Unable to read jessie_udp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:31.173: INFO: Unable to read jessie_tcp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:31.175: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:31.177: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:31.183: INFO: Lookups using dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649 failed for: [wheezy_udp@dns-test-service.dns-7928.svc.cluster.local wheezy_tcp@dns-test-service.dns-7928.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local jessie_udp@dns-test-service.dns-7928.svc.cluster.local jessie_tcp@dns-test-service.dns-7928.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local]

  Apr 28 16:52:31.189: INFO: Pod client logs for webserver: 
  Apr 28 16:52:31.195: INFO: Pod client logs for querier: 
  Apr 28 16:52:31.200: INFO: Pod client logs for jessie-querier: 
  E0428 16:52:31.500656      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:32.500887      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:33.500996      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:34.501967      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:35.502183      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:52:36.156: INFO: Unable to read wheezy_udp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:36.158: INFO: Unable to read wheezy_tcp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:36.160: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:36.162: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:36.171: INFO: Unable to read jessie_udp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:36.172: INFO: Unable to read jessie_tcp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:36.174: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:36.175: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:36.181: INFO: Lookups using dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649 failed for: [wheezy_udp@dns-test-service.dns-7928.svc.cluster.local wheezy_tcp@dns-test-service.dns-7928.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local jessie_udp@dns-test-service.dns-7928.svc.cluster.local jessie_tcp@dns-test-service.dns-7928.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local]

  Apr 28 16:52:36.186: INFO: Pod client logs for webserver: 
  Apr 28 16:52:36.191: INFO: Pod client logs for querier: 
  Apr 28 16:52:36.196: INFO: Pod client logs for jessie-querier: 
  E0428 16:52:36.502907      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:37.503150      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:38.503375      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:39.503609      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:40.504313      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:52:41.156: INFO: Unable to read wheezy_udp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:41.158: INFO: Unable to read wheezy_tcp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:41.160: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:41.162: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:41.169: INFO: Unable to read jessie_udp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:41.171: INFO: Unable to read jessie_tcp@dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:41.173: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:41.174: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local from pod dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649: the server could not find the requested resource (get pods dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649)
  Apr 28 16:52:41.180: INFO: Lookups using dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649 failed for: [wheezy_udp@dns-test-service.dns-7928.svc.cluster.local wheezy_tcp@dns-test-service.dns-7928.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local jessie_udp@dns-test-service.dns-7928.svc.cluster.local jessie_tcp@dns-test-service.dns-7928.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-7928.svc.cluster.local]

  Apr 28 16:52:41.185: INFO: Pod client logs for webserver: 
  Apr 28 16:52:41.190: INFO: Pod client logs for querier: 
  Apr 28 16:52:41.195: INFO: Pod client logs for jessie-querier: 
  E0428 16:52:41.504564      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:42.504778      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:43.505053      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:44.505269      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:45.505451      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:52:46.181: INFO: DNS probes using dns-7928/dns-test-b50b931c-5230-4a7a-a337-2f7c56faa649 succeeded

  Apr 28 16:52:46.181: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 04/28/24 16:52:46.183
  STEP: deleting the test service @ 04/28/24 16:52:46.193
  STEP: deleting the test headless service @ 04/28/24 16:52:46.212
  STEP: Destroying namespace "dns-7928" for this suite. @ 04/28/24 16:52:46.217
â€¢ [32.149 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/downwardapi.go:167
  STEP: Creating a kubernetes client @ 04/28/24 16:52:46.225
  Apr 28 16:52:46.225: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 16:52:46.226
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:52:46.236
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:52:46.238
  STEP: Creating a pod to test downward api env vars @ 04/28/24 16:52:46.24
  E0428 16:52:46.505959      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:47.506263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:48.506422      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:49.506620      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:52:50.254
  Apr 28 16:52:50.256: INFO: Trying to get logs from node k8sconformance-m02 pod downward-api-95a2f54b-a9db-4e91-a356-199314311ef8 container dapi-container: <nil>
  STEP: delete the pod @ 04/28/24 16:52:50.262
  Apr 28 16:52:50.272: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-4725" for this suite. @ 04/28/24 16:52:50.274
â€¢ [4.051 seconds]
------------------------------
SS
------------------------------
[sig-node] PodTemplates should replace a pod template [Conformance]
k8s.io/kubernetes/test/e2e/common/node/podtemplates.go:176
  STEP: Creating a kubernetes client @ 04/28/24 16:52:50.277
  Apr 28 16:52:50.277: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename podtemplate @ 04/28/24 16:52:50.278
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:52:50.284
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:52:50.286
  STEP: Create a pod template @ 04/28/24 16:52:50.288
  STEP: Replace a pod template @ 04/28/24 16:52:50.291
  Apr 28 16:52:50.295: INFO: Found updated podtemplate annotation: "true"

  Apr 28 16:52:50.295: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-5627" for this suite. @ 04/28/24 16:52:50.297
â€¢ [0.023 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_secret.go:56
  STEP: Creating a kubernetes client @ 04/28/24 16:52:50.301
  Apr 28 16:52:50.301: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:52:50.302
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:52:50.309
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:52:50.31
  STEP: Creating projection with secret that has name projected-secret-test-d3627dd5-2e9d-47f8-8d2e-05effcd71c56 @ 04/28/24 16:52:50.312
  STEP: Creating a pod to test consume secrets @ 04/28/24 16:52:50.315
  E0428 16:52:50.506716      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:51.507428      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:52.508293      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:53.508514      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:52:54.328
  Apr 28 16:52:54.330: INFO: Trying to get logs from node k8sconformance-m02 pod pod-projected-secrets-6e3eb55c-b5b1-4c64-a108-579d38161b56 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 16:52:54.336
  Apr 28 16:52:54.345: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2294" for this suite. @ 04/28/24 16:52:54.347
â€¢ [4.049 seconds]
------------------------------
S
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]
k8s.io/kubernetes/test/e2e/storage/subpath.go:105
  STEP: Creating a kubernetes client @ 04/28/24 16:52:54.35
  Apr 28 16:52:54.350: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename subpath @ 04/28/24 16:52:54.351
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:52:54.36
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:52:54.362
  STEP: Setting up data @ 04/28/24 16:52:54.364
  STEP: Creating pod pod-subpath-test-projected-gjrm @ 04/28/24 16:52:54.369
  STEP: Creating a pod to test atomic-volume-subpath @ 04/28/24 16:52:54.369
  E0428 16:52:54.508961      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:55.509161      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:56.510188      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:57.510442      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:58.511254      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:52:59.511472      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:00.512117      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:01.512671      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:02.514033      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:03.514379      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:04.514882      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:05.515103      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:06.515670      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:07.516511      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:08.516924      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:09.517128      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:10.517840      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:11.518408      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:12.519136      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:13.519246      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:14.519727      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:15.519980      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:16.520648      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:17.520859      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:53:18.411
  Apr 28 16:53:18.413: INFO: Trying to get logs from node k8sconformance-m02 pod pod-subpath-test-projected-gjrm container test-container-subpath-projected-gjrm: <nil>
  STEP: delete the pod @ 04/28/24 16:53:18.419
  STEP: Deleting pod pod-subpath-test-projected-gjrm @ 04/28/24 16:53:18.429
  Apr 28 16:53:18.429: INFO: Deleting pod "pod-subpath-test-projected-gjrm" in namespace "subpath-8481"
  Apr 28 16:53:18.431: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-8481" for this suite. @ 04/28/24 16:53:18.433
â€¢ [24.086 seconds]
------------------------------
SSSSSS
------------------------------
[sig-cli] Kubectl client Update Demo should scale a replication controller  [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:354
  STEP: Creating a kubernetes client @ 04/28/24 16:53:18.436
  Apr 28 16:53:18.436: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 16:53:18.437
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:53:18.445
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:53:18.447
  STEP: creating a replication controller @ 04/28/24 16:53:18.449
  Apr 28 16:53:18.449: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 create -f -'
  E0428 16:53:18.521486      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:53:18.611: INFO: stderr: ""
  Apr 28 16:53:18.611: INFO: stdout: "replicationcontroller/update-demo-nautilus created\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 04/28/24 16:53:18.611
  Apr 28 16:53:18.611: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 28 16:53:18.673: INFO: stderr: ""
  Apr 28 16:53:18.673: INFO: stdout: "update-demo-nautilus-9njj9 update-demo-nautilus-zj7lf "
  Apr 28 16:53:18.673: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods update-demo-nautilus-9njj9 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 28 16:53:18.725: INFO: stderr: ""
  Apr 28 16:53:18.725: INFO: stdout: ""
  Apr 28 16:53:18.725: INFO: update-demo-nautilus-9njj9 is created but not running
  E0428 16:53:19.521699      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:20.521937      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:21.522284      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:22.522489      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:23.522746      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:53:23.726: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 28 16:53:23.784: INFO: stderr: ""
  Apr 28 16:53:23.784: INFO: stdout: "update-demo-nautilus-9njj9 update-demo-nautilus-zj7lf "
  Apr 28 16:53:23.784: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods update-demo-nautilus-9njj9 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 28 16:53:23.838: INFO: stderr: ""
  Apr 28 16:53:23.838: INFO: stdout: "true"
  Apr 28 16:53:23.838: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods update-demo-nautilus-9njj9 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Apr 28 16:53:23.893: INFO: stderr: ""
  Apr 28 16:53:23.893: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Apr 28 16:53:23.893: INFO: validating pod update-demo-nautilus-9njj9
  Apr 28 16:53:23.896: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Apr 28 16:53:23.896: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Apr 28 16:53:23.896: INFO: update-demo-nautilus-9njj9 is verified up and running
  Apr 28 16:53:23.896: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods update-demo-nautilus-zj7lf -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 28 16:53:23.951: INFO: stderr: ""
  Apr 28 16:53:23.951: INFO: stdout: "true"
  Apr 28 16:53:23.951: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods update-demo-nautilus-zj7lf -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Apr 28 16:53:24.005: INFO: stderr: ""
  Apr 28 16:53:24.005: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Apr 28 16:53:24.005: INFO: validating pod update-demo-nautilus-zj7lf
  Apr 28 16:53:24.008: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Apr 28 16:53:24.008: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Apr 28 16:53:24.008: INFO: update-demo-nautilus-zj7lf is verified up and running
  STEP: scaling down the replication controller @ 04/28/24 16:53:24.008
  Apr 28 16:53:24.009: INFO: scanned /root for discovery docs: <nil>
  Apr 28 16:53:24.009: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 scale rc update-demo-nautilus --replicas=1 --timeout=5m'
  E0428 16:53:24.523475      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:53:25.076: INFO: stderr: ""
  Apr 28 16:53:25.076: INFO: stdout: "replicationcontroller/update-demo-nautilus scaled\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 04/28/24 16:53:25.076
  Apr 28 16:53:25.076: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 28 16:53:25.131: INFO: stderr: ""
  Apr 28 16:53:25.131: INFO: stdout: "update-demo-nautilus-9njj9 update-demo-nautilus-zj7lf "
  STEP: Replicas for name=update-demo: expected=1 actual=2 @ 04/28/24 16:53:25.131
  E0428 16:53:25.523931      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:26.524169      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:27.524395      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:28.524607      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:29.525701      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:53:30.132: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 28 16:53:30.185: INFO: stderr: ""
  Apr 28 16:53:30.185: INFO: stdout: "update-demo-nautilus-9njj9 "
  Apr 28 16:53:30.185: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods update-demo-nautilus-9njj9 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 28 16:53:30.236: INFO: stderr: ""
  Apr 28 16:53:30.236: INFO: stdout: "true"
  Apr 28 16:53:30.236: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods update-demo-nautilus-9njj9 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Apr 28 16:53:30.287: INFO: stderr: ""
  Apr 28 16:53:30.287: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Apr 28 16:53:30.287: INFO: validating pod update-demo-nautilus-9njj9
  Apr 28 16:53:30.289: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Apr 28 16:53:30.289: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Apr 28 16:53:30.289: INFO: update-demo-nautilus-9njj9 is verified up and running
  STEP: scaling up the replication controller @ 04/28/24 16:53:30.289
  Apr 28 16:53:30.290: INFO: scanned /root for discovery docs: <nil>
  Apr 28 16:53:30.290: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 scale rc update-demo-nautilus --replicas=2 --timeout=5m'
  E0428 16:53:30.526202      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:53:31.354: INFO: stderr: ""
  Apr 28 16:53:31.354: INFO: stdout: "replicationcontroller/update-demo-nautilus scaled\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 04/28/24 16:53:31.354
  Apr 28 16:53:31.354: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 28 16:53:31.409: INFO: stderr: ""
  Apr 28 16:53:31.409: INFO: stdout: "update-demo-nautilus-9njj9 update-demo-nautilus-mqfcl "
  Apr 28 16:53:31.409: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods update-demo-nautilus-9njj9 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 28 16:53:31.461: INFO: stderr: ""
  Apr 28 16:53:31.461: INFO: stdout: "true"
  Apr 28 16:53:31.461: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods update-demo-nautilus-9njj9 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Apr 28 16:53:31.513: INFO: stderr: ""
  Apr 28 16:53:31.513: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Apr 28 16:53:31.513: INFO: validating pod update-demo-nautilus-9njj9
  Apr 28 16:53:31.515: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Apr 28 16:53:31.516: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Apr 28 16:53:31.516: INFO: update-demo-nautilus-9njj9 is verified up and running
  Apr 28 16:53:31.516: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods update-demo-nautilus-mqfcl -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  E0428 16:53:31.526376      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:53:31.568: INFO: stderr: ""
  Apr 28 16:53:31.568: INFO: stdout: ""
  Apr 28 16:53:31.568: INFO: update-demo-nautilus-mqfcl is created but not running
  E0428 16:53:32.526538      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:33.526681      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:34.527654      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:35.528312      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:36.528588      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:53:36.568: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 28 16:53:36.622: INFO: stderr: ""
  Apr 28 16:53:36.622: INFO: stdout: "update-demo-nautilus-9njj9 update-demo-nautilus-mqfcl "
  Apr 28 16:53:36.622: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods update-demo-nautilus-9njj9 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 28 16:53:36.675: INFO: stderr: ""
  Apr 28 16:53:36.675: INFO: stdout: "true"
  Apr 28 16:53:36.675: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods update-demo-nautilus-9njj9 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Apr 28 16:53:36.728: INFO: stderr: ""
  Apr 28 16:53:36.728: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Apr 28 16:53:36.728: INFO: validating pod update-demo-nautilus-9njj9
  Apr 28 16:53:36.731: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Apr 28 16:53:36.731: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Apr 28 16:53:36.731: INFO: update-demo-nautilus-9njj9 is verified up and running
  Apr 28 16:53:36.731: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods update-demo-nautilus-mqfcl -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 28 16:53:36.783: INFO: stderr: ""
  Apr 28 16:53:36.783: INFO: stdout: "true"
  Apr 28 16:53:36.783: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods update-demo-nautilus-mqfcl -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Apr 28 16:53:36.835: INFO: stderr: ""
  Apr 28 16:53:36.835: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Apr 28 16:53:36.835: INFO: validating pod update-demo-nautilus-mqfcl
  Apr 28 16:53:36.837: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Apr 28 16:53:36.837: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Apr 28 16:53:36.837: INFO: update-demo-nautilus-mqfcl is verified up and running
  STEP: using delete to clean up resources @ 04/28/24 16:53:36.837
  Apr 28 16:53:36.837: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 delete --grace-period=0 --force -f -'
  Apr 28 16:53:36.893: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 28 16:53:36.893: INFO: stdout: "replicationcontroller \"update-demo-nautilus\" force deleted\n"
  Apr 28 16:53:36.893: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get rc,svc -l name=update-demo --no-headers'
  Apr 28 16:53:36.967: INFO: stderr: "No resources found in kubectl-3916 namespace.\n"
  Apr 28 16:53:36.967: INFO: stdout: ""
  Apr 28 16:53:36.967: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3916 get pods -l name=update-demo -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Apr 28 16:53:37.027: INFO: stderr: ""
  Apr 28 16:53:37.027: INFO: stdout: ""
  Apr 28 16:53:37.027: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-3916" for this suite. @ 04/28/24 16:53:37.03
â€¢ [18.598 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/garbage_collector.go:379
  STEP: Creating a kubernetes client @ 04/28/24 16:53:37.035
  Apr 28 16:53:37.035: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename gc @ 04/28/24 16:53:37.036
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:53:37.048
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:53:37.049
  STEP: create the rc @ 04/28/24 16:53:37.055
  W0428 16:53:37.058897      22 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  E0428 16:53:37.529535      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:38.529666      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:39.530303      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:40.540713      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:41.540889      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:42.542066      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the rc @ 04/28/24 16:53:43.066
  STEP: wait for the rc to be deleted @ 04/28/24 16:53:43.075
  E0428 16:53:43.545284      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:44.545382      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:45.547056      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:46.547234      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:47.547507      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: wait for 30 seconds to see if the garbage collector mistakenly deletes the pods @ 04/28/24 16:53:48.078
  E0428 16:53:48.548207      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:49.548677      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:50.548731      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:51.549424      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:52.549616      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:53.549894      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:54.550305      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:55.550774      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:56.551161      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:57.551269      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:58.552316      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:53:59.552987      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:00.553446      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:01.554191      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:02.555023      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:03.555240      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:04.556280      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:05.556517      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:06.556953      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:07.557077      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:08.557349      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:09.557526      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:10.557747      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:11.558811      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:12.559131      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:13.559232      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:14.559478      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:15.559749      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:16.560175      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:17.560323      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Gathering metrics @ 04/28/24 16:54:18.087
  Apr 28 16:54:18.177: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Apr 28 16:54:18.177: INFO: Deleting pod "simpletest.rc-249wk" in namespace "gc-6852"
  Apr 28 16:54:18.185: INFO: Deleting pod "simpletest.rc-24fjm" in namespace "gc-6852"
  Apr 28 16:54:18.194: INFO: Deleting pod "simpletest.rc-2gqj4" in namespace "gc-6852"
  Apr 28 16:54:18.201: INFO: Deleting pod "simpletest.rc-2vp59" in namespace "gc-6852"
  Apr 28 16:54:18.210: INFO: Deleting pod "simpletest.rc-2wk8b" in namespace "gc-6852"
  Apr 28 16:54:18.219: INFO: Deleting pod "simpletest.rc-44zhf" in namespace "gc-6852"
  Apr 28 16:54:18.227: INFO: Deleting pod "simpletest.rc-482bs" in namespace "gc-6852"
  Apr 28 16:54:18.235: INFO: Deleting pod "simpletest.rc-4nkp9" in namespace "gc-6852"
  Apr 28 16:54:18.251: INFO: Deleting pod "simpletest.rc-4q22s" in namespace "gc-6852"
  Apr 28 16:54:18.260: INFO: Deleting pod "simpletest.rc-4zwtf" in namespace "gc-6852"
  Apr 28 16:54:18.269: INFO: Deleting pod "simpletest.rc-54c2d" in namespace "gc-6852"
  Apr 28 16:54:18.283: INFO: Deleting pod "simpletest.rc-5dv4k" in namespace "gc-6852"
  Apr 28 16:54:18.298: INFO: Deleting pod "simpletest.rc-5mdpd" in namespace "gc-6852"
  Apr 28 16:54:18.353: INFO: Deleting pod "simpletest.rc-65qsq" in namespace "gc-6852"
  Apr 28 16:54:18.371: INFO: Deleting pod "simpletest.rc-66pd6" in namespace "gc-6852"
  Apr 28 16:54:18.390: INFO: Deleting pod "simpletest.rc-6bbbd" in namespace "gc-6852"
  Apr 28 16:54:18.448: INFO: Deleting pod "simpletest.rc-6gt2w" in namespace "gc-6852"
  Apr 28 16:54:18.458: INFO: Deleting pod "simpletest.rc-6n4vg" in namespace "gc-6852"
  Apr 28 16:54:18.472: INFO: Deleting pod "simpletest.rc-7fp5j" in namespace "gc-6852"
  Apr 28 16:54:18.544: INFO: Deleting pod "simpletest.rc-84dpl" in namespace "gc-6852"
  Apr 28 16:54:18.555: INFO: Deleting pod "simpletest.rc-8858p" in namespace "gc-6852"
  E0428 16:54:18.560400      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:54:18.569: INFO: Deleting pod "simpletest.rc-888jb" in namespace "gc-6852"
  Apr 28 16:54:18.649: INFO: Deleting pod "simpletest.rc-8tqr7" in namespace "gc-6852"
  Apr 28 16:54:18.670: INFO: Deleting pod "simpletest.rc-9cgpf" in namespace "gc-6852"
  Apr 28 16:54:18.742: INFO: Deleting pod "simpletest.rc-9sqxw" in namespace "gc-6852"
  Apr 28 16:54:18.763: INFO: Deleting pod "simpletest.rc-9ss64" in namespace "gc-6852"
  Apr 28 16:54:18.842: INFO: Deleting pod "simpletest.rc-9xsk8" in namespace "gc-6852"
  Apr 28 16:54:18.857: INFO: Deleting pod "simpletest.rc-b5khn" in namespace "gc-6852"
  Apr 28 16:54:18.882: INFO: Deleting pod "simpletest.rc-c6mdn" in namespace "gc-6852"
  Apr 28 16:54:18.951: INFO: Deleting pod "simpletest.rc-cpk8k" in namespace "gc-6852"
  Apr 28 16:54:18.968: INFO: Deleting pod "simpletest.rc-cr2gf" in namespace "gc-6852"
  Apr 28 16:54:18.981: INFO: Deleting pod "simpletest.rc-cvtdj" in namespace "gc-6852"
  Apr 28 16:54:19.059: INFO: Deleting pod "simpletest.rc-cxg7x" in namespace "gc-6852"
  Apr 28 16:54:19.073: INFO: Deleting pod "simpletest.rc-db688" in namespace "gc-6852"
  Apr 28 16:54:19.085: INFO: Deleting pod "simpletest.rc-f8mnp" in namespace "gc-6852"
  Apr 28 16:54:19.155: INFO: Deleting pod "simpletest.rc-fb2c7" in namespace "gc-6852"
  Apr 28 16:54:19.173: INFO: Deleting pod "simpletest.rc-fnn28" in namespace "gc-6852"
  Apr 28 16:54:19.185: INFO: Deleting pod "simpletest.rc-fr2vm" in namespace "gc-6852"
  Apr 28 16:54:19.256: INFO: Deleting pod "simpletest.rc-g5fbn" in namespace "gc-6852"
  Apr 28 16:54:19.280: INFO: Deleting pod "simpletest.rc-gkzv8" in namespace "gc-6852"
  Apr 28 16:54:19.351: INFO: Deleting pod "simpletest.rc-grgn9" in namespace "gc-6852"
  Apr 28 16:54:19.384: INFO: Deleting pod "simpletest.rc-gtfgf" in namespace "gc-6852"
  Apr 28 16:54:19.447: INFO: Deleting pod "simpletest.rc-gvxdq" in namespace "gc-6852"
  Apr 28 16:54:19.464: INFO: Deleting pod "simpletest.rc-gxk49" in namespace "gc-6852"
  Apr 28 16:54:19.477: INFO: Deleting pod "simpletest.rc-h5m2f" in namespace "gc-6852"
  Apr 28 16:54:19.540: INFO: Deleting pod "simpletest.rc-hdhrj" in namespace "gc-6852"
  Apr 28 16:54:19.555: INFO: Deleting pod "simpletest.rc-jcsl2" in namespace "gc-6852"
  E0428 16:54:19.561238      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:54:19.565: INFO: Deleting pod "simpletest.rc-jdxtw" in namespace "gc-6852"
  Apr 28 16:54:19.575: INFO: Deleting pod "simpletest.rc-jkbwr" in namespace "gc-6852"
  Apr 28 16:54:19.587: INFO: Deleting pod "simpletest.rc-jsr86" in namespace "gc-6852"
  Apr 28 16:54:19.651: INFO: Deleting pod "simpletest.rc-k2cj2" in namespace "gc-6852"
  Apr 28 16:54:19.666: INFO: Deleting pod "simpletest.rc-kmhq6" in namespace "gc-6852"
  Apr 28 16:54:19.681: INFO: Deleting pod "simpletest.rc-kp75w" in namespace "gc-6852"
  Apr 28 16:54:19.700: INFO: Deleting pod "simpletest.rc-kqgv7" in namespace "gc-6852"
  Apr 28 16:54:19.754: INFO: Deleting pod "simpletest.rc-kvnwz" in namespace "gc-6852"
  Apr 28 16:54:19.770: INFO: Deleting pod "simpletest.rc-l67gl" in namespace "gc-6852"
  Apr 28 16:54:19.840: INFO: Deleting pod "simpletest.rc-l7fbc" in namespace "gc-6852"
  Apr 28 16:54:19.853: INFO: Deleting pod "simpletest.rc-lzn54" in namespace "gc-6852"
  Apr 28 16:54:19.864: INFO: Deleting pod "simpletest.rc-m2clg" in namespace "gc-6852"
  Apr 28 16:54:19.874: INFO: Deleting pod "simpletest.rc-m7v9b" in namespace "gc-6852"
  Apr 28 16:54:19.884: INFO: Deleting pod "simpletest.rc-mcfnp" in namespace "gc-6852"
  Apr 28 16:54:19.948: INFO: Deleting pod "simpletest.rc-mlzg7" in namespace "gc-6852"
  Apr 28 16:54:19.957: INFO: Deleting pod "simpletest.rc-mnp8v" in namespace "gc-6852"
  Apr 28 16:54:19.966: INFO: Deleting pod "simpletest.rc-n27kb" in namespace "gc-6852"
  Apr 28 16:54:19.973: INFO: Deleting pod "simpletest.rc-nhp4q" in namespace "gc-6852"
  Apr 28 16:54:19.985: INFO: Deleting pod "simpletest.rc-njvvt" in namespace "gc-6852"
  Apr 28 16:54:20.061: INFO: Deleting pod "simpletest.rc-nnmcg" in namespace "gc-6852"
  Apr 28 16:54:20.145: INFO: Deleting pod "simpletest.rc-nq9jc" in namespace "gc-6852"
  Apr 28 16:54:20.162: INFO: Deleting pod "simpletest.rc-p97v9" in namespace "gc-6852"
  Apr 28 16:54:20.243: INFO: Deleting pod "simpletest.rc-pg2lh" in namespace "gc-6852"
  Apr 28 16:54:20.256: INFO: Deleting pod "simpletest.rc-pl86l" in namespace "gc-6852"
  Apr 28 16:54:20.268: INFO: Deleting pod "simpletest.rc-q2sd6" in namespace "gc-6852"
  Apr 28 16:54:20.345: INFO: Deleting pod "simpletest.rc-q6kzf" in namespace "gc-6852"
  Apr 28 16:54:20.357: INFO: Deleting pod "simpletest.rc-qd2d8" in namespace "gc-6852"
  Apr 28 16:54:20.365: INFO: Deleting pod "simpletest.rc-qwvps" in namespace "gc-6852"
  Apr 28 16:54:20.444: INFO: Deleting pod "simpletest.rc-rf24v" in namespace "gc-6852"
  Apr 28 16:54:20.459: INFO: Deleting pod "simpletest.rc-rgl8r" in namespace "gc-6852"
  Apr 28 16:54:20.474: INFO: Deleting pod "simpletest.rc-rmtct" in namespace "gc-6852"
  Apr 28 16:54:20.551: INFO: Deleting pod "simpletest.rc-rtmqs" in namespace "gc-6852"
  E0428 16:54:20.561954      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:54:20.567: INFO: Deleting pod "simpletest.rc-s4ktq" in namespace "gc-6852"
  Apr 28 16:54:20.644: INFO: Deleting pod "simpletest.rc-sbjdh" in namespace "gc-6852"
  Apr 28 16:54:20.656: INFO: Deleting pod "simpletest.rc-sghzx" in namespace "gc-6852"
  Apr 28 16:54:20.669: INFO: Deleting pod "simpletest.rc-sl597" in namespace "gc-6852"
  Apr 28 16:54:20.744: INFO: Deleting pod "simpletest.rc-sp2r4" in namespace "gc-6852"
  Apr 28 16:54:20.757: INFO: Deleting pod "simpletest.rc-t2vn4" in namespace "gc-6852"
  Apr 28 16:54:20.768: INFO: Deleting pod "simpletest.rc-tng2x" in namespace "gc-6852"
  Apr 28 16:54:20.786: INFO: Deleting pod "simpletest.rc-txpkp" in namespace "gc-6852"
  Apr 28 16:54:20.852: INFO: Deleting pod "simpletest.rc-vc25b" in namespace "gc-6852"
  Apr 28 16:54:20.870: INFO: Deleting pod "simpletest.rc-vjftw" in namespace "gc-6852"
  Apr 28 16:54:20.889: INFO: Deleting pod "simpletest.rc-vlxkh" in namespace "gc-6852"
  Apr 28 16:54:20.951: INFO: Deleting pod "simpletest.rc-vv7z6" in namespace "gc-6852"
  Apr 28 16:54:20.964: INFO: Deleting pod "simpletest.rc-w65dq" in namespace "gc-6852"
  Apr 28 16:54:20.983: INFO: Deleting pod "simpletest.rc-wdqk7" in namespace "gc-6852"
  Apr 28 16:54:20.992: INFO: Deleting pod "simpletest.rc-wf4pk" in namespace "gc-6852"
  Apr 28 16:54:21.049: INFO: Deleting pod "simpletest.rc-wj4xt" in namespace "gc-6852"
  Apr 28 16:54:21.061: INFO: Deleting pod "simpletest.rc-xddxg" in namespace "gc-6852"
  Apr 28 16:54:21.071: INFO: Deleting pod "simpletest.rc-xj7rm" in namespace "gc-6852"
  Apr 28 16:54:21.091: INFO: Deleting pod "simpletest.rc-xnd8x" in namespace "gc-6852"
  Apr 28 16:54:21.140: INFO: Deleting pod "simpletest.rc-xwfcf" in namespace "gc-6852"
  Apr 28 16:54:21.157: INFO: Deleting pod "simpletest.rc-zksd9" in namespace "gc-6852"
  Apr 28 16:54:21.171: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-6852" for this suite. @ 04/28/24 16:54:21.175
â€¢ [44.145 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:69
  STEP: Creating a kubernetes client @ 04/28/24 16:54:21.184
  Apr 28 16:54:21.184: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/28/24 16:54:21.185
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:54:21.244
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:54:21.246
  Apr 28 16:54:21.250: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  E0428 16:54:21.562291      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:22.562980      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: kubectl validation (kubectl create and apply) allows request with known and required properties @ 04/28/24 16:54:22.873
  Apr 28 16:54:22.873: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-1982 --namespace=crd-publish-openapi-1982 create -f -'
  E0428 16:54:23.563911      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:54:24.083: INFO: stderr: ""
  Apr 28 16:54:24.083: INFO: stdout: "e2e-test-crd-publish-openapi-925-crd.crd-publish-openapi-test-foo.example.com/test-foo created\n"
  Apr 28 16:54:24.083: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-1982 --namespace=crd-publish-openapi-1982 delete e2e-test-crd-publish-openapi-925-crds test-foo'
  Apr 28 16:54:24.154: INFO: stderr: ""
  Apr 28 16:54:24.154: INFO: stdout: "e2e-test-crd-publish-openapi-925-crd.crd-publish-openapi-test-foo.example.com \"test-foo\" deleted\n"
  Apr 28 16:54:24.154: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-1982 --namespace=crd-publish-openapi-1982 apply -f -'
  Apr 28 16:54:24.362: INFO: stderr: ""
  Apr 28 16:54:24.362: INFO: stdout: "e2e-test-crd-publish-openapi-925-crd.crd-publish-openapi-test-foo.example.com/test-foo created\n"
  Apr 28 16:54:24.362: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-1982 --namespace=crd-publish-openapi-1982 delete e2e-test-crd-publish-openapi-925-crds test-foo'
  Apr 28 16:54:24.455: INFO: stderr: ""
  Apr 28 16:54:24.455: INFO: stdout: "e2e-test-crd-publish-openapi-925-crd.crd-publish-openapi-test-foo.example.com \"test-foo\" deleted\n"
  STEP: kubectl validation (kubectl create and apply) rejects request with value outside defined enum values @ 04/28/24 16:54:24.455
  Apr 28 16:54:24.455: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-1982 --namespace=crd-publish-openapi-1982 create -f -'
  E0428 16:54:24.564890      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:54:24.657: INFO: rc: 1
  STEP: kubectl validation (kubectl create and apply) rejects request with unknown properties when disallowed by the schema @ 04/28/24 16:54:24.657
  Apr 28 16:54:24.657: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-1982 --namespace=crd-publish-openapi-1982 create -f -'
  Apr 28 16:54:24.863: INFO: rc: 1
  Apr 28 16:54:24.863: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-1982 --namespace=crd-publish-openapi-1982 apply -f -'
  Apr 28 16:54:25.073: INFO: rc: 1
  STEP: kubectl validation (kubectl create and apply) rejects request without required properties @ 04/28/24 16:54:25.074
  Apr 28 16:54:25.074: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-1982 --namespace=crd-publish-openapi-1982 create -f -'
  Apr 28 16:54:25.263: INFO: rc: 1
  Apr 28 16:54:25.263: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-1982 --namespace=crd-publish-openapi-1982 apply -f -'
  Apr 28 16:54:25.426: INFO: rc: 1
  STEP: kubectl explain works to explain CR properties @ 04/28/24 16:54:25.426
  Apr 28 16:54:25.426: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-1982 explain e2e-test-crd-publish-openapi-925-crds'
  Apr 28 16:54:25.551: INFO: stderr: ""
  Apr 28 16:54:25.552: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-925-crd\nVERSION:    v1\n\nDESCRIPTION:\n    Foo CRD for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Foo\n\n  status\t<Object>\n    Status of Foo\n\n\n"
  STEP: kubectl explain works to explain CR properties recursively @ 04/28/24 16:54:25.552
  Apr 28 16:54:25.552: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-1982 explain e2e-test-crd-publish-openapi-925-crds.metadata'
  E0428 16:54:25.565717      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:54:25.664: INFO: stderr: ""
  Apr 28 16:54:25.664: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-925-crd\nVERSION:    v1\n\nFIELD: metadata <ObjectMeta>\n\nDESCRIPTION:\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n    ObjectMeta is metadata that all persisted resources must have, which\n    includes all objects users must create.\n    \nFIELDS:\n  annotations\t<map[string]string>\n    Annotations is an unstructured key value map stored with a resource that may\n    be set by external tools to store and retrieve arbitrary metadata. They are\n    not queryable and should be preserved when modifying objects. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n\n  creationTimestamp\t<string>\n    CreationTimestamp is a timestamp representing the server time when this\n    object was created. It is not guaranteed to be set in happens-before order\n    across separate operations. Clients may not set this value. It is\n    represented in RFC3339 form and is in UTC.\n    \n    Populated by the system. Read-only. Null for lists. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  deletionGracePeriodSeconds\t<integer>\n    Number of seconds allowed for this object to gracefully terminate before it\n    will be removed from the system. Only set when deletionTimestamp is also\n    set. May only be shortened. Read-only.\n\n  deletionTimestamp\t<string>\n    DeletionTimestamp is RFC 3339 date and time at which this resource will be\n    deleted. This field is set by the server when a graceful deletion is\n    requested by the user, and is not directly settable by a client. The\n    resource is expected to be deleted (no longer visible from resource lists,\n    and not reachable by name) after the time in this field, once the finalizers\n    list is empty. As long as the finalizers list contains items, deletion is\n    blocked. Once the deletionTimestamp is set, this value may not be unset or\n    be set further into the future, although it may be shortened or the resource\n    may be deleted prior to this time. For example, a user may request that a\n    pod is deleted in 30 seconds. The Kubelet will react by sending a graceful\n    termination signal to the containers in the pod. After that 30 seconds, the\n    Kubelet will send a hard termination signal (SIGKILL) to the container and\n    after cleanup, remove the pod from the API. In the presence of network\n    partitions, this object may still exist after this timestamp, until an\n    administrator or automated process can determine the resource is fully\n    terminated. If not set, graceful deletion of the object has not been\n    requested.\n    \n    Populated by the system when a graceful deletion is requested. Read-only.\n    More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  finalizers\t<[]string>\n    Must be empty before the object is deleted from the registry. Each entry is\n    an identifier for the responsible component that will remove the entry from\n    the list. If the deletionTimestamp of the object is non-nil, entries in this\n    list can only be removed. Finalizers may be processed and removed in any\n    order.  Order is NOT enforced because it introduces significant risk of\n    stuck finalizers. finalizers is a shared field, any actor with permission\n    can reorder it. If the finalizer list is processed in order, then this can\n    lead to a situation in which the component responsible for the first\n    finalizer in the list is waiting for a signal (field value, external system,\n    or other) produced by a component responsible for a finalizer later in the\n    list, resulting in a deadlock. Without enforced ordering finalizers are free\n    to order amongst themselves and are not vulnerable to ordering changes in\n    the list.\n\n  generateName\t<string>\n    GenerateName is an optional prefix, used by the server, to generate a unique\n    name ONLY IF the Name field has not been provided. If this field is used,\n    the name returned to the client will be different than the name passed. This\n    value will also be combined with a unique suffix. The provided value has the\n    same validation rules as the Name field, and may be truncated by the length\n    of the suffix required to make the value unique on the server.\n    \n    If this field is specified and the generated name exists, the server will\n    return a 409.\n    \n    Applied only if Name is not specified. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n\n  generation\t<integer>\n    A sequence number representing a specific generation of the desired state.\n    Populated by the system. Read-only.\n\n  labels\t<map[string]string>\n    Map of string keys and values that can be used to organize and categorize\n    (scope and select) objects. May match selectors of replication controllers\n    and services. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n\n  managedFields\t<[]ManagedFieldsEntry>\n    ManagedFields maps workflow-id and version to the set of fields that are\n    managed by that workflow. This is mostly for internal housekeeping, and\n    users typically shouldn't need to set or understand this field. A workflow\n    can be the user's name, a controller's name, or the name of a specific apply\n    path like \"ci-cd\". The set of fields is always in the version that the\n    workflow used when modifying the object.\n\n  name\t<string>\n    Name must be unique within a namespace. Is required when creating resources,\n    although some resources may allow a client to request the generation of an\n    appropriate name automatically. Name is primarily intended for creation\n    idempotence and configuration definition. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n\n  namespace\t<string>\n    Namespace defines the space within which each name must be unique. An empty\n    namespace is equivalent to the \"default\" namespace, but \"default\" is the\n    canonical representation. Not all objects are required to be scoped to a\n    namespace - the value of this field for those objects will be empty.\n    \n    Must be a DNS_LABEL. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n\n  ownerReferences\t<[]OwnerReference>\n    List of objects depended by this object. If ALL objects in the list have\n    been deleted, this object will be garbage collected. If this object is\n    managed by a controller, then an entry in this list will point to this\n    controller, with the controller field set to true. There cannot be more than\n    one managing controller.\n\n  resourceVersion\t<string>\n    An opaque value that represents the internal version of this object that can\n    be used by clients to determine when objects have changed. May be used for\n    optimistic concurrency, change detection, and the watch operation on a\n    resource or set of resources. Clients must treat these values as opaque and\n    passed unmodified back to the server. They may only be valid for a\n    particular resource or set of resources.\n    \n    Populated by the system. Read-only. Value must be treated as opaque by\n    clients and . More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n\n  selfLink\t<string>\n    Deprecated: selfLink is a legacy read-only field that is no longer populated\n    by the system.\n\n  uid\t<string>\n    UID is the unique in time and space value for this object. It is typically\n    generated by the server on successful creation of a resource and is not\n    allowed to change on PUT operations.\n    \n    Populated by the system. Read-only. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n\n\n"
  Apr 28 16:54:25.664: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-1982 explain e2e-test-crd-publish-openapi-925-crds.spec'
  Apr 28 16:54:25.782: INFO: stderr: ""
  Apr 28 16:54:25.782: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-925-crd\nVERSION:    v1\n\nFIELD: spec <Object>\n\nDESCRIPTION:\n    Specification of Foo\n    \nFIELDS:\n  bars\t<[]Object>\n    List of Bars and their specs.\n\n\n"
  Apr 28 16:54:25.782: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-1982 explain e2e-test-crd-publish-openapi-925-crds.spec.bars'
  Apr 28 16:54:25.960: INFO: stderr: ""
  Apr 28 16:54:25.960: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-925-crd\nVERSION:    v1\n\nFIELD: bars <[]Object>\n\nDESCRIPTION:\n    List of Bars and their specs.\n    \nFIELDS:\n  age\t<string>\n    Age of Bar.\n\n  bazs\t<[]string>\n    List of Bazs.\n\n  feeling\t<string>\n    Whether Bar is feeling great.\n\n  name\t<string> -required-\n    Name of Bar.\n\n\n"
  STEP: kubectl explain works to return error when explain is called on property that doesn't exist @ 04/28/24 16:54:25.96
  Apr 28 16:54:25.960: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-1982 explain e2e-test-crd-publish-openapi-925-crds.spec.bars2'
  Apr 28 16:54:26.106: INFO: rc: 1
  E0428 16:54:26.566319      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:54:27.383: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-1982" for this suite. @ 04/28/24 16:54:27.389
â€¢ [6.209 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Conformance]
k8s.io/kubernetes/test/e2e/apps/job.go:370
  STEP: Creating a kubernetes client @ 04/28/24 16:54:27.393
  Apr 28 16:54:27.394: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename job @ 04/28/24 16:54:27.394
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:54:27.403
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:54:27.405
  STEP: Creating Indexed job @ 04/28/24 16:54:27.407
  STEP: Ensuring job reaches completions @ 04/28/24 16:54:27.41
  E0428 16:54:27.566656      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:28.567707      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:29.567987      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:30.568313      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:31.569112      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:32.569509      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:33.569993      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:34.570219      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring pods with index for job exist @ 04/28/24 16:54:35.413
  Apr 28 16:54:35.416: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-8194" for this suite. @ 04/28/24 16:54:35.418
â€¢ [8.028 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]
k8s.io/kubernetes/test/e2e/apps/deployment.go:113
  STEP: Creating a kubernetes client @ 04/28/24 16:54:35.422
  Apr 28 16:54:35.422: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename deployment @ 04/28/24 16:54:35.422
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:54:35.431
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:54:35.433
  Apr 28 16:54:35.434: INFO: Creating deployment "test-recreate-deployment"
  Apr 28 16:54:35.438: INFO: Waiting deployment "test-recreate-deployment" to be updated to revision 1
  Apr 28 16:54:35.442: INFO: deployment "test-recreate-deployment" doesn't have the required revision set
  E0428 16:54:35.570971      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:36.571327      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:54:37.447: INFO: Waiting deployment "test-recreate-deployment" to complete
  Apr 28 16:54:37.449: INFO: Triggering a new rollout for deployment "test-recreate-deployment"
  Apr 28 16:54:37.454: INFO: Updating deployment test-recreate-deployment
  Apr 28 16:54:37.454: INFO: Watching deployment "test-recreate-deployment" to verify that new pods will not run with olds pods
  Apr 28 16:54:37.510: INFO: Deployment "test-recreate-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-recreate-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-4967",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "37ddf120-df75-4500-924f-b6f101d0f354",
      ResourceVersion: (string) (len=5) "26415",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849920075,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920077,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=570) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |":{"f:type":{}},|
              000000b0  22 66 3a 74 65 6d 70 6c  61 74 65 22 3a 7b 22 66  |"f:template":{"f|
              000000c0  3a 6d 65 74 61 64 61 74  61 22 3a 7b 22 66 3a 6c  |:metadata":{"f:l|
              000000d0  61 62 65 6c 73 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |abels":{".":{},"|
              000000e0  66 3a 6e 61 6d 65 22 3a  7b 7d 7d 7d 2c 22 66 3a  |f:name":{}}},"f:|
              000000f0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              00000100  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              00000110  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              00000120  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              00000130  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000140  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000150  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000160  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 73 65 63 75  |rces":{},"f:secu|
              00000170  72 69 74 79 43 6f 6e 74  65 78 74 22 3a 7b 7d 2c  |rityContext":{},|
              00000180  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000190  73 73 61 67 65 50 61 74  68 22 3a 7b 7d 2c 22 66  |ssagePath":{},"f|
              000001a0  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 4d 65 73 73  |:terminationMess|
              000001b0  61 67 65 50 6f 6c 69 63  79 22 3a 7b 7d 7d 7d 2c  |agePolicy":{}}},|
              000001c0  22 66 3a 64 6e 73 50 6f  6c 69 63 79 22 3a 7b 7d  |"f:dnsPolicy":{}|
              000001d0  2c 22 66 3a 72 65 73 74  61 72 74 50 6f 6c 69 63  |,"f:restartPolic|
              000001e0  79 22 3a 7b 7d 2c 22 66  3a 73 63 68 65 64 75 6c  |y":{},"f:schedul|
              000001f0  65 72 4e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 73 65  |erName":{},"f:se|
              00000200  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000210  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000220  47 72 61 63 65 50 65 72  69 6f 64 53 65 63 6f 6e  |GracePeriodSecon|
              00000230  64 73 22 3a 7b 7d 7d 7d  7d 7d                    |ds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920077,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=495) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 63 6f 6e 64 69 74 69  6f 6e 73 22 3a 7b 22 2e  |:conditions":{".|
              00000070  22 3a 7b 7d 2c 22 6b 3a  7b 5c 22 74 79 70 65 5c  |":{},"k:{\"type\|
              00000080  22 3a 5c 22 41 76 61 69  6c 61 62 6c 65 5c 22 7d  |":\"Available\"}|
              00000090  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |":{".":{},"f:las|
              000000a0  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              000000b0  3a 7b 7d 2c 22 66 3a 6c  61 73 74 55 70 64 61 74  |:{},"f:lastUpdat|
              000000c0  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6d 65 73  |eTime":{},"f:mes|
              000000d0  73 61 67 65 22 3a 7b 7d  2c 22 66 3a 72 65 61 73  |sage":{},"f:reas|
              000000e0  6f 6e 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |on":{},"f:status|
              000000f0  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000100  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000110  22 50 72 6f 67 72 65 73  73 69 6e 67 5c 22 7d 22  |"Progressing\"}"|
              00000120  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              00000130  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000140  7b 7d 2c 22 66 3a 6c 61  73 74 55 70 64 61 74 65  |{},"f:lastUpdate|
              00000150  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6d 65 73 73  |Time":{},"f:mess|
              00000160  61 67 65 22 3a 7b 7d 2c  22 66 3a 72 65 61 73 6f  |age":{},"f:reaso|
              00000170  6e 22 3a 7b 7d 2c 22 66  3a 73 74 61 74 75 73 22  |n":{},"f:status"|
              00000180  3a 7b 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |:{},"f:type":{}}|
              00000190  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              000001a0  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              000001b0  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 75  |eplicas":{},"f:u|
              000001c0  6e 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |navailableReplic|
              000001d0  61 73 22 3a 7b 7d 2c 22  66 3a 75 70 64 61 74 65  |as":{},"f:update|
              000001e0  64 52 65 70 6c 69 63 61  73 22 3a 7b 7d 7d 7d     |dReplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=8) "Recreate",
        RollingUpdate: (*v1.RollingUpdateDeployment)(<nil>)
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 2,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      UnavailableReplicas: (int32) 1,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920077,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920077,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=26) "MinimumReplicasUnavailable",
          Message: (string) (len=46) "Deployment does not have minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920077,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920075,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=17) "ReplicaSetUpdated",
          Message: (string) (len=63) "ReplicaSet \"test-recreate-deployment-76fb77d45\" is progressing."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Apr 28 16:54:37.514: INFO: New ReplicaSet "test-recreate-deployment-76fb77d45" of Deployment "test-recreate-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=34) "test-recreate-deployment-76fb77d45",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-4967",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "2c9dbcb4-08a4-4c16-8616-bd693a929d75",
      ResourceVersion: (string) (len=5) "26412",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849920077,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45",
        (string) (len=4) "name": (string) (len=12) "sample-pod-3"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "1",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-recreate-deployment",
          UID: (types.UID) (len=36) "37ddf120-df75-4500-924f-b6f101d0f354",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920077,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 33 37 64 64 66 31  32 30 2d 64 66 37 35 2d  |\"37ddf120-df75-|
              00000120  34 35 30 30 2d 39 32 34  66 2d 62 36 66 31 30 31  |4500-924f-b6f101|
              00000130  64 30 66 33 35 34 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |d0f354\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920077,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=84) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  66 75 6c 6c 79 4c 61 62  65 6c 65 64 52 65 70 6c  |fullyLabeledRepl|
              00000020  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |icas":{},"f:obse|
              00000030  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              00000040  7b 7d 2c 22 66 3a 72 65  70 6c 69 63 61 73 22 3a  |{},"f:replicas":|
              00000050  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3",
          (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3",
            (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 28 16:54:37.515: INFO: All old ReplicaSets of Deployment "test-recreate-deployment":
  Apr 28 16:54:37.515: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-recreate-deployment-5cf87b5b86",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-4967",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "c68f2d2b-d960-4730-b6d8-42d5566a9f44",
      ResourceVersion: (string) (len=5) "26403",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849920075,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5cf87b5b86"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "1",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-recreate-deployment",
          UID: (types.UID) (len=36) "37ddf120-df75-4500-924f-b6f101d0f354",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920077,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 33 37 64 64 66 31  32 30 2d 64 66 37 35 2d  |\"37ddf120-df75-|
              00000120  34 35 30 30 2d 39 32 34  66 2d 62 36 66 31 30 31  |4500-924f-b6f101|
              00000130  64 30 66 33 35 34 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |d0f354\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920077,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3",
          (string) (len=17) "pod-template-hash": (string) (len=10) "5cf87b5b86"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3",
            (string) (len=17) "pod-template-hash": (string) (len=10) "5cf87b5b86"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.47",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Apr 28 16:54:37.519: INFO: Pod "test-recreate-deployment-76fb77d45-r6zgn" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=40) "test-recreate-deployment-76fb77d45-r6zgn",
      GenerateName: (string) (len=35) "test-recreate-deployment-76fb77d45-",
      Namespace: (string) (len=15) "deployment-4967",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "c01f0d9f-c05c-4f27-b7e2-63fb5164b9a8",
      ResourceVersion: (string) (len=5) "26414",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849920077,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=34) "test-recreate-deployment-76fb77d45",
          UID: (types.UID) (len=36) "2c9dbcb4-08a4-4c16-8616-bd693a929d75",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920077,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 32 63  39 64 62 63 62 34 2d 30  |d\":\"2c9dbcb4-0|
              00000090  38 61 34 2d 34 63 31 36  2d 38 36 31 36 2d 62 64  |8a4-4c16-8616-bd|
              000000a0  36 39 33 61 39 32 39 64  37 35 5c 22 7d 22 3a 7b  |693a929d75\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920077,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-hxrk4",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-hxrk4",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=18) "k8sconformance-m02",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920077,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920077,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920077,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63849920077,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "192.168.49.3",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63849920077,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Apr 28 16:54:37.521: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-4967" for this suite. @ 04/28/24 16:54:37.523
â€¢ [2.105 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtimeclass.go:156
  STEP: Creating a kubernetes client @ 04/28/24 16:54:37.527
  Apr 28 16:54:37.527: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename runtimeclass @ 04/28/24 16:54:37.528
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:54:37.537
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:54:37.539
  STEP: Deleting RuntimeClass runtimeclass-5514-delete-me @ 04/28/24 16:54:37.543
  STEP: Waiting for the RuntimeClass to disappear @ 04/28/24 16:54:37.546
  Apr 28 16:54:37.552: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-5514" for this suite. @ 04/28/24 16:54:37.554
â€¢ [0.038 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/resource_quota.go:1013
  STEP: Creating a kubernetes client @ 04/28/24 16:54:37.566
  Apr 28 16:54:37.566: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename resourcequota @ 04/28/24 16:54:37.567
  E0428 16:54:37.571484      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:54:37.641
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:54:37.644
  STEP: Creating resourceQuota "e2e-rq-status-6xklc" @ 04/28/24 16:54:37.647
  Apr 28 16:54:37.651: INFO: Resource quota "e2e-rq-status-6xklc" reports spec: hard cpu limit of 500m
  Apr 28 16:54:37.651: INFO: Resource quota "e2e-rq-status-6xklc" reports spec: hard memory limit of 500Mi
  STEP: Updating resourceQuota "e2e-rq-status-6xklc" /status @ 04/28/24 16:54:37.651
  STEP: Confirm /status for "e2e-rq-status-6xklc" resourceQuota via watch @ 04/28/24 16:54:37.657
  Apr 28 16:54:37.658: INFO: observed resourceQuota "e2e-rq-status-6xklc" in namespace "resourcequota-132" with hard status: v1.ResourceList(nil)
  Apr 28 16:54:37.658: INFO: Found resourceQuota "e2e-rq-status-6xklc" in namespace "resourcequota-132" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:500, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500m", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:524288000, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500Mi", Format:"BinarySI"}}
  Apr 28 16:54:37.658: INFO: ResourceQuota "e2e-rq-status-6xklc" /status was updated
  STEP: Patching hard spec values for cpu & memory @ 04/28/24 16:54:37.66
  Apr 28 16:54:37.663: INFO: Resource quota "e2e-rq-status-6xklc" reports spec: hard cpu limit of 1
  Apr 28 16:54:37.663: INFO: Resource quota "e2e-rq-status-6xklc" reports spec: hard memory limit of 1Gi
  STEP: Patching "e2e-rq-status-6xklc" /status @ 04/28/24 16:54:37.663
  STEP: Confirm /status for "e2e-rq-status-6xklc" resourceQuota via watch @ 04/28/24 16:54:37.667
  Apr 28 16:54:37.668: INFO: observed resourceQuota "e2e-rq-status-6xklc" in namespace "resourcequota-132" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:500, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500m", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:524288000, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500Mi", Format:"BinarySI"}}
  Apr 28 16:54:37.668: INFO: Found resourceQuota "e2e-rq-status-6xklc" in namespace "resourcequota-132" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}
  Apr 28 16:54:37.668: INFO: ResourceQuota "e2e-rq-status-6xklc" /status was patched
  STEP: Get "e2e-rq-status-6xklc" /status @ 04/28/24 16:54:37.668
  Apr 28 16:54:37.670: INFO: Resourcequota "e2e-rq-status-6xklc" reports status: hard cpu of 1
  Apr 28 16:54:37.670: INFO: Resourcequota "e2e-rq-status-6xklc" reports status: hard memory of 1Gi
  STEP: Repatching "e2e-rq-status-6xklc" /status before checking Spec is unchanged @ 04/28/24 16:54:37.671
  Apr 28 16:54:37.675: INFO: Resourcequota "e2e-rq-status-6xklc" reports status: hard cpu of 2
  Apr 28 16:54:37.675: INFO: Resourcequota "e2e-rq-status-6xklc" reports status: hard memory of 2Gi
  Apr 28 16:54:37.676: INFO: Found resourceQuota "e2e-rq-status-6xklc" in namespace "resourcequota-132" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}
  E0428 16:54:38.572234      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:39.572773      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:40.573526      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:41.574543      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:42.574854      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:43.575695      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:44.576470      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:45.576673      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:46.577045      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:47.577198      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:48.578051      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:49.578428      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:50.578638      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:51.579179      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:52.579546      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:53.579706      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:54.579898      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:55.580280      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:56.580588      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:57.580715      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:58.581503      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:54:59.581806      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:00.581916      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:01.582170      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:02.582527      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:03.582733      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:04.583354      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:05.583489      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:06.584141      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:07.584211      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:08.584370      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:09.585445      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:10.585673      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:11.586249      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:12.586509      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:13.586660      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:14.587622      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:15.587822      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:16.588623      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:17.589400      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:18.589595      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:19.589809      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:20.590059      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:21.590616      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:22.590840      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:23.591606      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:24.592479      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:25.592524      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:26.592931      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:27.593159      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:28.593525      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:29.593732      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:30.593952      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:31.594339      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:32.594580      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:33.595608      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:34.596676      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:35.596880      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:36.597247      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:37.597466      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:38.598296      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:39.598515      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:40.598740      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:41.599264      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:42.600314      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:43.600570      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:44.600786      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:45.601021      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:46.601439      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:47.601726      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:48.602057      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:49.602333      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:50.602631      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:51.603192      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:52.603248      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:53.603591      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:54.603833      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:55.604337      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:56.604573      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:57.604794      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:58.605451      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:55:59.605683      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:00.606702      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:01.607227      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:02.607518      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:03.608130      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:04.608329      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:05.609034      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:06.609567      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:07.609784      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:08.610237      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:09.610403      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:10.610613      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:11.610971      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:12.611219      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:13.611771      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:14.612327      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:15.612510      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:16.613083      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:17.613276      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:18.614299      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:19.615166      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:20.615254      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:21.615797      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:22.616050      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:23.616558      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:24.617584      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:25.618162      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:26.618449      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:27.618700      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:28.619185      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:29.619251      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:30.619342      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:31.620288      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:32.620522      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:33.621020      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:34.621500      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:35.621768      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:36.621878      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:37.622060      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:38.622149      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:39.622343      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:40.622657      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:41.623221      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:42.624290      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:43.624715      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:44.625025      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:45.625290      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:46.625613      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:47.625793      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:48.626497      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:49.626705      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:50.626913      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:51.627228      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:52.628306      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:53.628431      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:54.628737      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:55.628933      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:56.629293      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:57.629477      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:56:57.680: INFO: ResourceQuota "e2e-rq-status-6xklc" Spec was unchanged and /status reset
  Apr 28 16:56:57.680: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-132" for this suite. @ 04/28/24 16:56:57.684
â€¢ [140.121 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/watch.go:191
  STEP: Creating a kubernetes client @ 04/28/24 16:56:57.687
  Apr 28 16:56:57.687: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename watch @ 04/28/24 16:56:57.688
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:56:57.696
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:56:57.698
  STEP: creating a watch on configmaps @ 04/28/24 16:56:57.7
  STEP: creating a new configmap @ 04/28/24 16:56:57.701
  STEP: modifying the configmap once @ 04/28/24 16:56:57.703
  STEP: closing the watch once it receives two notifications @ 04/28/24 16:56:57.707
  Apr 28 16:56:57.707: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-7509  e1cd4570-a310-4e2d-af63-3a83dd872999 26624 0 2024-04-28 16:56:57 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-04-28 16:56:57 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:56:57.707: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-7509  e1cd4570-a310-4e2d-af63-3a83dd872999 26625 0 2024-04-28 16:56:57 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-04-28 16:56:57 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying the configmap a second time, while the watch is closed @ 04/28/24 16:56:57.707
  STEP: creating a new watch on configmaps from the last resource version observed by the first watch @ 04/28/24 16:56:57.713
  STEP: deleting the configmap @ 04/28/24 16:56:57.714
  STEP: Expecting to observe notifications for all changes to the configmap since the first watch closed @ 04/28/24 16:56:57.716
  Apr 28 16:56:57.716: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-7509  e1cd4570-a310-4e2d-af63-3a83dd872999 26626 0 2024-04-28 16:56:57 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-04-28 16:56:57 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:56:57.717: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-7509  e1cd4570-a310-4e2d-af63-3a83dd872999 26627 0 2024-04-28 16:56:57 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-04-28 16:56:57 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:56:57.717: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-7509" for this suite. @ 04/28/24 16:56:57.719
â€¢ [0.034 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Update Demo should create and stop a replication controller  [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:341
  STEP: Creating a kubernetes client @ 04/28/24 16:56:57.722
  Apr 28 16:56:57.722: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 16:56:57.723
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:56:57.73
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:56:57.732
  STEP: creating a replication controller @ 04/28/24 16:56:57.734
  Apr 28 16:56:57.734: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3083 create -f -'
  Apr 28 16:56:58.096: INFO: stderr: ""
  Apr 28 16:56:58.096: INFO: stdout: "replicationcontroller/update-demo-nautilus created\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 04/28/24 16:56:58.096
  Apr 28 16:56:58.096: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3083 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 28 16:56:58.157: INFO: stderr: ""
  Apr 28 16:56:58.157: INFO: stdout: "update-demo-nautilus-6sgtv update-demo-nautilus-c8cl6 "
  Apr 28 16:56:58.157: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3083 get pods update-demo-nautilus-6sgtv -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 28 16:56:58.210: INFO: stderr: ""
  Apr 28 16:56:58.210: INFO: stdout: ""
  Apr 28 16:56:58.210: INFO: update-demo-nautilus-6sgtv is created but not running
  E0428 16:56:58.629972      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:56:59.630236      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:00.630472      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:01.631115      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:02.631501      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:57:03.211: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3083 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Apr 28 16:57:03.268: INFO: stderr: ""
  Apr 28 16:57:03.268: INFO: stdout: "update-demo-nautilus-6sgtv update-demo-nautilus-c8cl6 "
  Apr 28 16:57:03.268: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3083 get pods update-demo-nautilus-6sgtv -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 28 16:57:03.319: INFO: stderr: ""
  Apr 28 16:57:03.319: INFO: stdout: "true"
  Apr 28 16:57:03.319: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3083 get pods update-demo-nautilus-6sgtv -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Apr 28 16:57:03.372: INFO: stderr: ""
  Apr 28 16:57:03.372: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Apr 28 16:57:03.372: INFO: validating pod update-demo-nautilus-6sgtv
  Apr 28 16:57:03.375: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Apr 28 16:57:03.375: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Apr 28 16:57:03.375: INFO: update-demo-nautilus-6sgtv is verified up and running
  Apr 28 16:57:03.375: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3083 get pods update-demo-nautilus-c8cl6 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Apr 28 16:57:03.429: INFO: stderr: ""
  Apr 28 16:57:03.429: INFO: stdout: "true"
  Apr 28 16:57:03.429: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3083 get pods update-demo-nautilus-c8cl6 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Apr 28 16:57:03.481: INFO: stderr: ""
  Apr 28 16:57:03.481: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Apr 28 16:57:03.481: INFO: validating pod update-demo-nautilus-c8cl6
  Apr 28 16:57:03.484: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Apr 28 16:57:03.484: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Apr 28 16:57:03.484: INFO: update-demo-nautilus-c8cl6 is verified up and running
  STEP: using delete to clean up resources @ 04/28/24 16:57:03.484
  Apr 28 16:57:03.484: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3083 delete --grace-period=0 --force -f -'
  Apr 28 16:57:03.539: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Apr 28 16:57:03.539: INFO: stdout: "replicationcontroller \"update-demo-nautilus\" force deleted\n"
  Apr 28 16:57:03.539: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3083 get rc,svc -l name=update-demo --no-headers'
  Apr 28 16:57:03.611: INFO: stderr: "No resources found in kubectl-3083 namespace.\n"
  Apr 28 16:57:03.611: INFO: stdout: ""
  Apr 28 16:57:03.611: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-3083 get pods -l name=update-demo -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  E0428 16:57:03.632601      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:57:03.671: INFO: stderr: ""
  Apr 28 16:57:03.671: INFO: stdout: ""
  Apr 28 16:57:03.671: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-3083" for this suite. @ 04/28/24 16:57:03.674
â€¢ [5.955 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/downwardapi_volume.go:69
  STEP: Creating a kubernetes client @ 04/28/24 16:57:03.679
  Apr 28 16:57:03.679: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename downward-api @ 04/28/24 16:57:03.68
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:57:03.697
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:57:03.699
  STEP: Creating a pod to test downward API volume plugin @ 04/28/24 16:57:03.702
  E0428 16:57:04.633331      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:05.633602      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:06.634413      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:07.634626      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:57:07.715
  Apr 28 16:57:07.717: INFO: Trying to get logs from node k8sconformance-m02 pod downwardapi-volume-402fd23b-0198-47e9-aaa4-779cc1ce7ce0 container client-container: <nil>
  STEP: delete the pod @ 04/28/24 16:57:07.729
  Apr 28 16:57:07.738: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-7598" for this suite. @ 04/28/24 16:57:07.74
â€¢ [4.065 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance]
k8s.io/kubernetes/test/e2e/network/endpointslicemirroring.go:55
  STEP: Creating a kubernetes client @ 04/28/24 16:57:07.745
  Apr 28 16:57:07.745: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename endpointslicemirroring @ 04/28/24 16:57:07.745
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:57:07.754
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:57:07.756
  STEP: mirroring a new custom Endpoint @ 04/28/24 16:57:07.765
  Apr 28 16:57:07.771: INFO: Waiting for at least 1 EndpointSlice to exist, got 0
  E0428 16:57:08.635001      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:09.635394      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: mirroring an update to a custom Endpoint @ 04/28/24 16:57:09.774
  Apr 28 16:57:09.779: INFO: Expected EndpointSlice to have 10.2.3.4 as address, got 10.1.2.3
  E0428 16:57:10.636350      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:11.636863      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: mirroring deletion of a custom Endpoint @ 04/28/24 16:57:11.782
  Apr 28 16:57:11.788: INFO: Waiting for 0 EndpointSlices to exist, got 1
  E0428 16:57:12.637029      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:13.637167      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:57:13.790: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslicemirroring-3092" for this suite. @ 04/28/24 16:57:13.793
â€¢ [6.051 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/watch.go:257
  STEP: Creating a kubernetes client @ 04/28/24 16:57:13.796
  Apr 28 16:57:13.796: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename watch @ 04/28/24 16:57:13.797
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:57:13.805
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:57:13.807
  STEP: creating a watch on configmaps with a certain label @ 04/28/24 16:57:13.808
  STEP: creating a new configmap @ 04/28/24 16:57:13.809
  STEP: modifying the configmap once @ 04/28/24 16:57:13.812
  STEP: changing the label value of the configmap @ 04/28/24 16:57:13.816
  STEP: Expecting to observe a delete notification for the watched object @ 04/28/24 16:57:13.82
  Apr 28 16:57:13.820: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2915  1fddf62d-3643-4c2e-8246-c502273d3039 26748 0 2024-04-28 16:57:13 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-04-28 16:57:13 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:57:13.820: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2915  1fddf62d-3643-4c2e-8246-c502273d3039 26749 0 2024-04-28 16:57:13 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-04-28 16:57:13 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:57:13.821: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2915  1fddf62d-3643-4c2e-8246-c502273d3039 26750 0 2024-04-28 16:57:13 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-04-28 16:57:13 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying the configmap a second time @ 04/28/24 16:57:13.821
  STEP: Expecting not to observe a notification because the object no longer meets the selector's requirements @ 04/28/24 16:57:13.825
  E0428 16:57:14.637908      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:15.638220      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:16.638550      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:17.638793      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:18.639001      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:19.639243      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:20.640286      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:21.640743      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:22.640900      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:23.641107      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: changing the label value of the configmap back @ 04/28/24 16:57:23.825
  STEP: modifying the configmap a third time @ 04/28/24 16:57:23.83
  STEP: deleting the configmap @ 04/28/24 16:57:23.834
  STEP: Expecting to observe an add notification for the watched object when the label value was restored @ 04/28/24 16:57:23.837
  Apr 28 16:57:23.837: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2915  1fddf62d-3643-4c2e-8246-c502273d3039 26767 0 2024-04-28 16:57:13 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-04-28 16:57:23 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:57:23.838: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2915  1fddf62d-3643-4c2e-8246-c502273d3039 26768 0 2024-04-28 16:57:13 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-04-28 16:57:23 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 3,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:57:23.838: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2915  1fddf62d-3643-4c2e-8246-c502273d3039 26769 0 2024-04-28 16:57:13 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-04-28 16:57:23 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 3,},BinaryData:map[string][]byte{},Immutable:nil,}
  Apr 28 16:57:23.838: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-2915" for this suite. @ 04/28/24 16:57:23.84
â€¢ [10.047 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/configmap_volume.go:175
  STEP: Creating a kubernetes client @ 04/28/24 16:57:23.843
  Apr 28 16:57:23.843: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename configmap @ 04/28/24 16:57:23.844
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:57:23.853
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:57:23.855
  STEP: Creating configMap with name configmap-test-upd-9dc6f2ee-4e9a-4337-9d17-99f08900aa5b @ 04/28/24 16:57:23.859
  STEP: Creating the pod @ 04/28/24 16:57:23.861
  E0428 16:57:24.641666      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:25.641983      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for pod with text data @ 04/28/24 16:57:25.871
  STEP: Waiting for pod with binary data @ 04/28/24 16:57:25.877
  Apr 28 16:57:25.882: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-7914" for this suite. @ 04/28/24 16:57:25.884
â€¢ [2.044 seconds]
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_secret.go:78
  STEP: Creating a kubernetes client @ 04/28/24 16:57:25.887
  Apr 28 16:57:25.887: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:57:25.888
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:57:25.897
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:57:25.899
  STEP: Creating projection with secret that has name projected-secret-test-map-471a10ac-0d6e-47b5-bad6-9f12286eaade @ 04/28/24 16:57:25.901
  STEP: Creating a pod to test consume secrets @ 04/28/24 16:57:25.903
  E0428 16:57:26.642308      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:27.642541      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:28.643244      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:29.643234      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:57:29.915
  Apr 28 16:57:29.917: INFO: Trying to get logs from node k8sconformance-m02 pod pod-projected-secrets-3fca8b7a-5180-4469-a29a-d413d8f700ae container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 04/28/24 16:57:29.923
  Apr 28 16:57:29.934: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6047" for this suite. @ 04/28/24 16:57:29.936
â€¢ [4.052 seconds]
------------------------------
SSS
------------------------------
[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]
k8s.io/kubernetes/test/e2e/network/dns.go:286
  STEP: Creating a kubernetes client @ 04/28/24 16:57:29.939
  Apr 28 16:57:29.939: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename dns @ 04/28/24 16:57:29.94
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:57:29.946
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:57:29.948
  STEP: Creating a test headless service @ 04/28/24 16:57:29.95
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local;check="$$(dig +notcp +noall +answer +search dns-test-service-2.dns-8876.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service-2.dns-8876.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service-2.dns-8876.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service-2.dns-8876.svc.cluster.local;sleep 1; done
   @ 04/28/24 16:57:29.953
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local;check="$$(dig +notcp +noall +answer +search dns-test-service-2.dns-8876.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service-2.dns-8876.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service-2.dns-8876.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service-2.dns-8876.svc.cluster.local;sleep 1; done
   @ 04/28/24 16:57:29.953
  STEP: creating a pod to probe DNS @ 04/28/24 16:57:29.953
  STEP: submitting the pod to kubernetes @ 04/28/24 16:57:29.953
  E0428 16:57:30.644283      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:31.644416      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: retrieving the pod @ 04/28/24 16:57:31.964
  STEP: looking for the results for each expected name from probers @ 04/28/24 16:57:31.966
  Apr 28 16:57:31.968: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:31.970: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:31.972: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:31.974: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:31.976: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:31.977: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:31.979: INFO: Unable to read jessie_udp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:31.980: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:31.980: INFO: Lookups using dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local wheezy_udp@dns-test-service-2.dns-8876.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-8876.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local jessie_udp@dns-test-service-2.dns-8876.svc.cluster.local jessie_tcp@dns-test-service-2.dns-8876.svc.cluster.local]

  Apr 28 16:57:31.985: INFO: Pod client logs for webserver: 
  Apr 28 16:57:31.990: INFO: Pod client logs for querier: 
  Apr 28 16:57:31.994: INFO: Pod client logs for jessie-querier: 
  E0428 16:57:32.644819      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:33.645052      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:34.645303      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:35.645591      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:36.646321      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:57:36.998: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:37.000: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:37.002: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:37.004: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:37.005: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:37.007: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:37.009: INFO: Unable to read jessie_udp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:37.010: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:37.010: INFO: Lookups using dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local wheezy_udp@dns-test-service-2.dns-8876.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-8876.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local jessie_udp@dns-test-service-2.dns-8876.svc.cluster.local jessie_tcp@dns-test-service-2.dns-8876.svc.cluster.local]

  Apr 28 16:57:37.016: INFO: Pod client logs for webserver: 
  Apr 28 16:57:37.021: INFO: Pod client logs for querier: 
  Apr 28 16:57:37.026: INFO: Pod client logs for jessie-querier: 
  E0428 16:57:37.647228      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:38.647450      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:39.647662      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:40.648319      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:41.648669      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:57:41.998: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:42.000: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:42.002: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:42.004: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:42.005: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:42.007: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:42.008: INFO: Unable to read jessie_udp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:42.010: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:42.010: INFO: Lookups using dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local wheezy_udp@dns-test-service-2.dns-8876.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-8876.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local jessie_udp@dns-test-service-2.dns-8876.svc.cluster.local jessie_tcp@dns-test-service-2.dns-8876.svc.cluster.local]

  Apr 28 16:57:42.015: INFO: Pod client logs for webserver: 
  Apr 28 16:57:42.020: INFO: Pod client logs for querier: 
  Apr 28 16:57:42.025: INFO: Pod client logs for jessie-querier: 
  E0428 16:57:42.648804      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:43.649043      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:44.649235      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:45.649488      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:46.650173      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:57:46.998: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:47.000: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:47.002: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:47.003: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:47.005: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:47.007: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:47.008: INFO: Unable to read jessie_udp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:47.010: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:47.010: INFO: Lookups using dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local wheezy_udp@dns-test-service-2.dns-8876.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-8876.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local jessie_udp@dns-test-service-2.dns-8876.svc.cluster.local jessie_tcp@dns-test-service-2.dns-8876.svc.cluster.local]

  Apr 28 16:57:47.015: INFO: Pod client logs for webserver: 
  Apr 28 16:57:47.021: INFO: Pod client logs for querier: 
  Apr 28 16:57:47.026: INFO: Pod client logs for jessie-querier: 
  E0428 16:57:47.650837      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:48.651278      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:49.651508      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:50.651786      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:51.652278      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:57:51.998: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:52.000: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:52.002: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:52.004: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:52.005: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:52.007: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:52.009: INFO: Unable to read jessie_udp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:52.010: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:52.010: INFO: Lookups using dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local wheezy_udp@dns-test-service-2.dns-8876.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-8876.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local jessie_udp@dns-test-service-2.dns-8876.svc.cluster.local jessie_tcp@dns-test-service-2.dns-8876.svc.cluster.local]

  Apr 28 16:57:52.015: INFO: Pod client logs for webserver: 
  Apr 28 16:57:52.020: INFO: Pod client logs for querier: 
  Apr 28 16:57:52.025: INFO: Pod client logs for jessie-querier: 
  E0428 16:57:52.652923      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:53.653173      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:54.654148      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:55.654459      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:56.654687      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:57:56.997: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:56.999: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:57.001: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:57.002: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:57.004: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:57.005: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:57.007: INFO: Unable to read jessie_udp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:57.009: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-8876.svc.cluster.local from pod dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c: the server could not find the requested resource (get pods dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c)
  Apr 28 16:57:57.009: INFO: Lookups using dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local wheezy_udp@dns-test-service-2.dns-8876.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-8876.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-8876.svc.cluster.local jessie_udp@dns-test-service-2.dns-8876.svc.cluster.local jessie_tcp@dns-test-service-2.dns-8876.svc.cluster.local]

  Apr 28 16:57:57.014: INFO: Pod client logs for webserver: 
  Apr 28 16:57:57.019: INFO: Pod client logs for querier: 
  Apr 28 16:57:57.024: INFO: Pod client logs for jessie-querier: 
  E0428 16:57:57.655151      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:58.655251      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:57:59.656318      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:00.656529      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:01.657043      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:02.010: INFO: DNS probes using dns-8876/dns-test-54cfb8ea-6289-4510-862c-d3b9a9fb624c succeeded

  Apr 28 16:58:02.010: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 04/28/24 16:58:02.012
  STEP: deleting the test headless service @ 04/28/24 16:58:02.019
  STEP: Destroying namespace "dns-8876" for this suite. @ 04/28/24 16:58:02.028
â€¢ [32.092 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/garbage_collector.go:638
  STEP: Creating a kubernetes client @ 04/28/24 16:58:02.032
  Apr 28 16:58:02.032: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename gc @ 04/28/24 16:58:02.033
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:58:02.041
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:58:02.043
  STEP: create the rc @ 04/28/24 16:58:02.047
  W0428 16:58:02.050722      22 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  E0428 16:58:02.657379      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:03.657415      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:04.657559      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:05.657615      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:06.657718      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:07.657925      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the rc @ 04/28/24 16:58:08.053
  STEP: wait for the rc to be deleted @ 04/28/24 16:58:08.059
  E0428 16:58:08.658141      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:09.074: INFO: 80 pods remaining
  Apr 28 16:58:09.075: INFO: 80 pods has nil DeletionTimestamp
  Apr 28 16:58:09.075: INFO: 
  E0428 16:58:09.658878      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:10.086: INFO: 71 pods remaining
  Apr 28 16:58:10.086: INFO: 70 pods has nil DeletionTimestamp
  Apr 28 16:58:10.086: INFO: 
  E0428 16:58:10.659288      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:11.076: INFO: 60 pods remaining
  Apr 28 16:58:11.076: INFO: 60 pods has nil DeletionTimestamp
  Apr 28 16:58:11.076: INFO: 
  E0428 16:58:11.659392      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:12.070: INFO: 40 pods remaining
  Apr 28 16:58:12.070: INFO: 40 pods has nil DeletionTimestamp
  Apr 28 16:58:12.070: INFO: 
  E0428 16:58:12.659645      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:13.069: INFO: 31 pods remaining
  Apr 28 16:58:13.069: INFO: 30 pods has nil DeletionTimestamp
  Apr 28 16:58:13.069: INFO: 
  E0428 16:58:13.659721      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:14.075: INFO: 20 pods remaining
  Apr 28 16:58:14.076: INFO: 20 pods has nil DeletionTimestamp
  Apr 28 16:58:14.076: INFO: 
  E0428 16:58:14.660699      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Gathering metrics @ 04/28/24 16:58:15.066
  Apr 28 16:58:15.482: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Apr 28 16:58:15.482: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-7059" for this suite. @ 04/28/24 16:58:15.542
â€¢ [13.520 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/storage/projected_configmap.go:74
  STEP: Creating a kubernetes client @ 04/28/24 16:58:15.552
  Apr 28 16:58:15.552: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename projected @ 04/28/24 16:58:15.553
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:58:15.574
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:58:15.577
  STEP: Creating configMap with name projected-configmap-test-volume-a78c1305-e264-4e32-9f34-9320e0ed878d @ 04/28/24 16:58:15.579
  STEP: Creating a pod to test consume configMaps @ 04/28/24 16:58:15.582
  E0428 16:58:15.661170      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:16.661281      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:17.661919      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:18.661905      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:19.662856      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:20.663858      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:21.664799      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:22.665149      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:23.665708      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:24.665972      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 16:58:25.651
  Apr 28 16:58:25.653: INFO: Trying to get logs from node k8sconformance-m02 pod pod-projected-configmaps-56a74b41-3d0c-4f60-8f52-3ec92a87d2e5 container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 16:58:25.659
  E0428 16:58:25.666385      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:25.669: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3740" for this suite. @ 04/28/24 16:58:25.671
â€¢ [10.123 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/webhook.go:498
  STEP: Creating a kubernetes client @ 04/28/24 16:58:25.676
  Apr 28 16:58:25.676: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename webhook @ 04/28/24 16:58:25.676
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:58:25.684
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:58:25.686
  STEP: Setting up server cert @ 04/28/24 16:58:25.699
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 04/28/24 16:58:26.243
  STEP: Deploying the webhook pod @ 04/28/24 16:58:26.25
  STEP: Wait for the deployment to be ready @ 04/28/24 16:58:26.257
  Apr 28 16:58:26.260: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  E0428 16:58:26.667051      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:27.667313      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 04/28/24 16:58:28.266
  STEP: Verifying the service has paired with the endpoint @ 04/28/24 16:58:28.274
  E0428 16:58:28.668290      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:29.275: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Creating a mutating webhook configuration @ 04/28/24 16:58:29.279
  STEP: Updating a mutating webhook configuration's rules to not include the create operation @ 04/28/24 16:58:29.291
  STEP: Creating a configMap that should not be mutated @ 04/28/24 16:58:29.296
  STEP: Patching a mutating webhook configuration's rules to include the create operation @ 04/28/24 16:58:29.301
  STEP: Creating a configMap that should be mutated @ 04/28/24 16:58:29.306
  Apr 28 16:58:29.320: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-4007" for this suite. @ 04/28/24 16:58:29.341
  STEP: Destroying namespace "webhook-markers-2793" for this suite. @ 04/28/24 16:58:29.344
â€¢ [3.671 seconds]
------------------------------
[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/namespace.go:272
  STEP: Creating a kubernetes client @ 04/28/24 16:58:29.347
  Apr 28 16:58:29.347: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename namespaces @ 04/28/24 16:58:29.348
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:58:29.356
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:58:29.357
  STEP: creating a Namespace @ 04/28/24 16:58:29.359
  STEP: patching the Namespace @ 04/28/24 16:58:29.367
  STEP: get the Namespace and ensuring it has the label @ 04/28/24 16:58:29.369
  Apr 28 16:58:29.371: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-3964" for this suite. @ 04/28/24 16:58:29.372
  STEP: Destroying namespace "nspatchtest-98838281-eff8-42ef-80fe-335f1ac747da-7507" for this suite. @ 04/28/24 16:58:29.376
â€¢ [0.032 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance]
k8s.io/kubernetes/test/e2e/apps/disruption.go:108
  STEP: Creating a kubernetes client @ 04/28/24 16:58:29.38
  Apr 28 16:58:29.380: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename disruption @ 04/28/24 16:58:29.38
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:58:29.387
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:58:29.389
  STEP: creating the pdb @ 04/28/24 16:58:29.391
  STEP: Waiting for the pdb to be processed @ 04/28/24 16:58:29.393
  E0428 16:58:29.668557      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:30.669658      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: updating the pdb @ 04/28/24 16:58:31.398
  STEP: Waiting for the pdb to be processed @ 04/28/24 16:58:31.406
  E0428 16:58:31.669735      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:32.669862      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: patching the pdb @ 04/28/24 16:58:33.411
  STEP: Waiting for the pdb to be processed @ 04/28/24 16:58:33.417
  E0428 16:58:33.670621      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:34.670857      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for the pdb to be deleted @ 04/28/24 16:58:35.425
  Apr 28 16:58:35.427: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-2420" for this suite. @ 04/28/24 16:58:35.429
â€¢ [6.052 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]
k8s.io/kubernetes/test/e2e/network/endpointslice.go:355
  STEP: Creating a kubernetes client @ 04/28/24 16:58:35.433
  Apr 28 16:58:35.433: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename endpointslice @ 04/28/24 16:58:35.434
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:58:35.441
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:58:35.442
  STEP: getting /apis @ 04/28/24 16:58:35.444
  STEP: getting /apis/discovery.k8s.io @ 04/28/24 16:58:35.447
  STEP: getting /apis/discovery.k8s.iov1 @ 04/28/24 16:58:35.448
  STEP: creating @ 04/28/24 16:58:35.448
  STEP: getting @ 04/28/24 16:58:35.459
  STEP: listing @ 04/28/24 16:58:35.46
  STEP: watching @ 04/28/24 16:58:35.462
  Apr 28 16:58:35.462: INFO: starting watch
  STEP: cluster-wide listing @ 04/28/24 16:58:35.463
  STEP: cluster-wide watching @ 04/28/24 16:58:35.464
  Apr 28 16:58:35.464: INFO: starting watch
  STEP: patching @ 04/28/24 16:58:35.465
  STEP: updating @ 04/28/24 16:58:35.468
  Apr 28 16:58:35.473: INFO: waiting for watch events with expected annotations
  Apr 28 16:58:35.473: INFO: saw patched and updated annotations
  STEP: deleting @ 04/28/24 16:58:35.473
  STEP: deleting a collection @ 04/28/24 16:58:35.479
  Apr 28 16:58:35.485: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-2214" for this suite. @ 04/28/24 16:58:35.487
â€¢ [0.057 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/table_conversion.go:154
  STEP: Creating a kubernetes client @ 04/28/24 16:58:35.501
  Apr 28 16:58:35.501: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename tables @ 04/28/24 16:58:35.501
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:58:35.509
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:58:35.511
  Apr 28 16:58:35.514: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "tables-5635" for this suite. @ 04/28/24 16:58:35.516
â€¢ [0.018 seconds]
------------------------------
S
------------------------------
[sig-node] Probing container should *not* be restarted with a GRPC liveness probe [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/container_probe.go:527
  STEP: Creating a kubernetes client @ 04/28/24 16:58:35.519
  Apr 28 16:58:35.519: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-probe @ 04/28/24 16:58:35.52
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 16:58:35.526
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 16:58:35.528
  STEP: Creating pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537 @ 04/28/24 16:58:35.53
  E0428 16:58:35.671151      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:36.671229      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking the pod's current state and verifying that restartCount is present @ 04/28/24 16:58:37.538
  Apr 28 16:58:37.540: INFO: Initial restart count of pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 is 0
  Apr 28 16:58:37.542: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:58:37.671402      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:38.671444      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:39.545: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:58:39.671784      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:40.672779      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:41.548: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:58:41.673005      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:42.673225      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:43.551: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:58:43.673849      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:44.674052      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:45.554: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:58:45.674764      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:46.675210      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:47.557: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:58:47.675665      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:48.675768      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:49.560: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:58:49.676517      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:50.676616      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:51.565: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:58:51.676671      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:52.676876      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:53.568: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:58:53.677493      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:54.677693      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:55.571: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:58:55.678228      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:56.679192      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:57.573: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:58:57.679615      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:58:58.680335      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:58:59.576: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:58:59.680951      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:00.682037      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:01.579: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:01.682030      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:02.682292      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:03.583: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:03.683240      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:04.684301      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:05.586: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:05.684931      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:06.685316      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:07.589: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:07.685632      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:08.685912      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:09.592: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:09.686665      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:10.687541      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:11.595: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:11.687608      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:12.688518      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:13.598: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:13.688674      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:14.688891      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:15.601: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:15.689694      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:16.690089      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:17.604: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:17.690869      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:18.691728      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:19.607: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:19.692305      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:20.693413      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:21.609: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:21.693480      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:22.694019      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:23.612: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:23.694658      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:24.694870      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:25.615: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:25.695411      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:26.696318      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:27.618: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:27.696834      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:28.697071      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:29.621: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:29.697626      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:30.697753      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:31.624: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:31.698619      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:32.698858      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:33.627: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:33.699496      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:34.700364      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:35.631: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:35.701184      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:36.701542      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:37.633: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:37.701620      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:38.701757      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:39.636: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:39.702262      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:40.703287      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:41.638: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:41.703966      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:42.704180      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:43.641: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:43.705001      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:44.705328      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:45.645: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:45.705378      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:46.705946      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:47.648: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:47.706698      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:48.706925      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:49.651: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:49.707511      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:50.707831      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:51.654: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:51.708667      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:52.708885      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:53.657: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:53.709267      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:54.709503      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:55.660: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:55.709852      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:56.710298      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:57.663: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:57.711038      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 16:59:58.711285      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 16:59:59.666: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 16:59:59.711758      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:00.712334      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:01.669: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:01.713397      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:02.713624      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:03.672: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:03.714542      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:04.714782      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:05.675: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:05.715759      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:06.716331      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:07.678: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:07.716935      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:08.717269      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:09.681: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:09.717659      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:10.717879      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:11.684: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:11.718916      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:12.719181      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:13.687: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:13.720008      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:14.720344      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:15.691: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:15.720577      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:16.721039      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:17.694: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:17.721636      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:18.721853      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:19.697: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:19.722502      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:20.722762      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:21.700: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:21.723865      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:22.724391      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:23.703: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:23.725054      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:24.725158      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:25.707: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:25.726156      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:26.726767      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:27.710: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:27.727362      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:28.727598      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:29.712: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:29.728079      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:30.728775      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:31.715: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:31.728867      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:32.729092      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:33.718: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:33.729703      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:34.730398      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:35.722: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:35.731182      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:36.731283      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:37.724: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:37.732141      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:38.732323      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:39.727: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:39.732885      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:40.733086      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:41.730: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:41.733904      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:42.734100      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:43.733: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:43.734246      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:44.734431      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:45.734858      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:45.736: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:46.735171      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:47.735229      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:47.738: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:48.735255      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:49.736317      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:49.740: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:50.736437      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:51.737023      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:51.743: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:52.737766      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:53.737954      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:53.746: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:54.738355      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:55.738604      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:55.749: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:56.738713      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:57.738916      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:57.752: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:00:58.739230      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:00:59.739259      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:00:59.755: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:00.739503      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:01.739760      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:01.758: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:02.740360      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:03.740581      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:03.761: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:04.741212      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:05.741653      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:05.764: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:06.741974      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:07.742489      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:07.768: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:08.743235      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:09.744306      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:09.770: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:10.744330      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:11.744659      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:11.774: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:12.745127      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:13.745259      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:13.776: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:14.745705      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:15.745941      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:15.779: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:16.746766      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:17.747538      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:17.782: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:18.748324      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:19.749020      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:19.784: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:20.749692      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:21.749963      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:21.787: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:22.750836      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:23.751744      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:23.790: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:24.752066      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:25.752424      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:25.793: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:26.752581      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:27.752794      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:27.796: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:28.753573      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:29.753770      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:29.799: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:30.754484      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:31.755292      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:31.802: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:32.755943      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:33.756808      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:33.805: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:34.757089      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:35.757518      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:35.808: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:36.757672      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:37.757903      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:37.811: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:38.758355      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:39.758579      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:39.814: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:40.759563      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:41.760293      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:41.816: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:42.760915      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:43.761165      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:43.819: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:44.761711      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:45.761934      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:45.822: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:46.762196      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:47.762432      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:47.825: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:48.762953      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:49.763709      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:49.828: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:50.763787      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:51.764307      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:51.831: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:52.764927      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:53.765127      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:53.834: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:54.765645      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:55.765889      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:55.837: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:56.766753      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:57.766975      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:57.840: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:01:58.767498      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:01:59.767717      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:01:59.843: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:00.767966      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:01.768585      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:01.846: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:02.769051      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:03.769378      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:03.848: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:04.769922      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:05.770315      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:05.852: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:06.771261      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:07.771285      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:07.854: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:08.772299      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:09.772588      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:09.857: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:10.773591      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:11.774305      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:11.860: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:12.775040      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:13.775397      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:13.862: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:14.775949      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:15.776177      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:15.866: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:16.776218      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:17.776445      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:17.869: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:18.776965      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:19.777162      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:19.871: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:20.777521      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:21.777955      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:21.874: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:22.778324      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:23.778682      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:23.877: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:24.779284      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:25.780312      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:25.880: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:26.780488      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:27.780699      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:27.883: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:28.781232      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:29.781457      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:29.886: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:30.782533      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:31.782980      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:31.888: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:32.783365      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:33.783602      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:33.891: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:34.783748      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:35.784020      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:35.895: INFO: Get pod test-grpc-cc07dd26-35e8-4a2a-8d13-2178f36ae2f6 in namespace container-probe-5537
  E0428 17:02:36.784164      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:37.784385      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:37.895: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 04/28/24 17:02:37.898
  STEP: Destroying namespace "container-probe-5537" for this suite. @ 04/28/24 17:02:37.906
â€¢ [242.391 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/containers.go:61
  STEP: Creating a kubernetes client @ 04/28/24 17:02:37.91
  Apr 28 17:02:37.910: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename containers @ 04/28/24 17:02:37.911
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 17:02:37.92
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 17:02:37.922
  STEP: Creating a pod to test override arguments @ 04/28/24 17:02:37.924
  E0428 17:02:38.784739      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:39.785076      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:40.785562      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:41.785890      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 04/28/24 17:02:41.936
  Apr 28 17:02:41.938: INFO: Trying to get logs from node k8sconformance-m02 pod client-containers-54911ad1-4227-4e0d-9062-df597e420b44 container agnhost-container: <nil>
  STEP: delete the pod @ 04/28/24 17:02:41.949
  Apr 28 17:02:41.959: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-6271" for this suite. @ 04/28/24 17:02:41.962
â€¢ [4.055 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions  [Conformance]
k8s.io/kubernetes/test/e2e/kubectl/kubectl.go:830
  STEP: Creating a kubernetes client @ 04/28/24 17:02:41.966
  Apr 28 17:02:41.966: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename kubectl @ 04/28/24 17:02:41.967
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 17:02:41.973
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 17:02:41.975
  STEP: validating api versions @ 04/28/24 17:02:41.976
  Apr 28 17:02:41.976: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=kubectl-9032 api-versions'
  Apr 28 17:02:42.031: INFO: stderr: ""
  Apr 28 17:02:42.031: INFO: stdout: "admissionregistration.k8s.io/v1\napiextensions.k8s.io/v1\napiregistration.k8s.io/v1\napps/v1\nauthentication.k8s.io/v1\nauthorization.k8s.io/v1\nautoscaling/v1\nautoscaling/v2\nbatch/v1\ncertificates.k8s.io/v1\ncoordination.k8s.io/v1\ndiscovery.k8s.io/v1\nevents.k8s.io/v1\nflowcontrol.apiserver.k8s.io/v1beta2\nflowcontrol.apiserver.k8s.io/v1beta3\nnetworking.k8s.io/v1\nnode.k8s.io/v1\npolicy/v1\nrbac.authorization.k8s.io/v1\nscheduling.k8s.io/v1\nstorage.k8s.io/v1\nv1\n"
  Apr 28 17:02:42.031: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-9032" for this suite. @ 04/28/24 17:02:42.033
â€¢ [0.072 seconds]
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/runtime.go:195
  STEP: Creating a kubernetes client @ 04/28/24 17:02:42.038
  Apr 28 17:02:42.038: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename container-runtime @ 04/28/24 17:02:42.039
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 17:02:42.045
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 17:02:42.047
  STEP: create the container @ 04/28/24 17:02:42.049
  W0428 17:02:42.054741      22 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 04/28/24 17:02:42.054
  E0428 17:02:42.786285      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:43.786305      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:44.786750      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: get the container status @ 04/28/24 17:02:45.064
  STEP: the container should be terminated @ 04/28/24 17:02:45.065
  STEP: the termination message should be set @ 04/28/24 17:02:45.065
  Apr 28 17:02:45.065: INFO: Expected: &{DONE} to match Container's Termination Message: DONE --
  STEP: delete the container @ 04/28/24 17:02:45.066
  Apr 28 17:02:45.073: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-5548" for this suite. @ 04/28/24 17:02:45.076
â€¢ [3.041 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/discovery.go:169
  STEP: Creating a kubernetes client @ 04/28/24 17:02:45.08
  Apr 28 17:02:45.080: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename discovery @ 04/28/24 17:02:45.081
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 17:02:45.089
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 17:02:45.09
  STEP: Setting up server cert @ 04/28/24 17:02:45.093
  STEP: Requesting APIResourceList from "/api/v1" @ 04/28/24 17:02:45.627
  STEP: Requesting APIResourceList from "/apis/admissionregistration.k8s.io/v1" @ 04/28/24 17:02:45.628
  STEP: Requesting APIResourceList from "/apis/apiextensions.k8s.io/v1" @ 04/28/24 17:02:45.629
  STEP: Requesting APIResourceList from "/apis/apiregistration.k8s.io/v1" @ 04/28/24 17:02:45.63
  STEP: Requesting APIResourceList from "/apis/apps/v1" @ 04/28/24 17:02:45.63
  STEP: Requesting APIResourceList from "/apis/authentication.k8s.io/v1" @ 04/28/24 17:02:45.631
  STEP: Requesting APIResourceList from "/apis/authorization.k8s.io/v1" @ 04/28/24 17:02:45.632
  STEP: Requesting APIResourceList from "/apis/autoscaling/v1" @ 04/28/24 17:02:45.632
  STEP: Requesting APIResourceList from "/apis/autoscaling/v2" @ 04/28/24 17:02:45.633
  STEP: Requesting APIResourceList from "/apis/batch/v1" @ 04/28/24 17:02:45.634
  STEP: Requesting APIResourceList from "/apis/certificates.k8s.io/v1" @ 04/28/24 17:02:45.634
  STEP: Requesting APIResourceList from "/apis/coordination.k8s.io/v1" @ 04/28/24 17:02:45.635
  STEP: Requesting APIResourceList from "/apis/discovery.k8s.io/v1" @ 04/28/24 17:02:45.636
  STEP: Requesting APIResourceList from "/apis/events.k8s.io/v1" @ 04/28/24 17:02:45.636
  STEP: Requesting APIResourceList from "/apis/networking.k8s.io/v1" @ 04/28/24 17:02:45.637
  STEP: Requesting APIResourceList from "/apis/node.k8s.io/v1" @ 04/28/24 17:02:45.638
  STEP: Requesting APIResourceList from "/apis/policy/v1" @ 04/28/24 17:02:45.639
  STEP: Requesting APIResourceList from "/apis/scheduling.k8s.io/v1" @ 04/28/24 17:02:45.639
  STEP: Requesting APIResourceList from "/apis/storage.k8s.io/v1" @ 04/28/24 17:02:45.64
  Apr 28 17:02:45.641: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "discovery-3761" for this suite. @ 04/28/24 17:02:45.643
â€¢ [0.566 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]
k8s.io/kubernetes/test/e2e/apimachinery/crd_publish_openapi.go:194
  STEP: Creating a kubernetes client @ 04/28/24 17:02:45.646
  Apr 28 17:02:45.646: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename crd-publish-openapi @ 04/28/24 17:02:45.647
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 17:02:45.655
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 17:02:45.657
  Apr 28 17:02:45.658: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  E0428 17:02:45.786972      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:46.787157      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 04/28/24 17:02:46.878
  Apr 28 17:02:46.878: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-2894 --namespace=crd-publish-openapi-2894 create -f -'
  Apr 28 17:02:47.416: INFO: stderr: ""
  Apr 28 17:02:47.416: INFO: stdout: "e2e-test-crd-publish-openapi-5239-crd.crd-publish-openapi-test-unknown-at-root.example.com/test-cr created\n"
  Apr 28 17:02:47.416: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-2894 --namespace=crd-publish-openapi-2894 delete e2e-test-crd-publish-openapi-5239-crds test-cr'
  Apr 28 17:02:47.474: INFO: stderr: ""
  Apr 28 17:02:47.474: INFO: stdout: "e2e-test-crd-publish-openapi-5239-crd.crd-publish-openapi-test-unknown-at-root.example.com \"test-cr\" deleted\n"
  Apr 28 17:02:47.474: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-2894 --namespace=crd-publish-openapi-2894 apply -f -'
  Apr 28 17:02:47.595: INFO: stderr: ""
  Apr 28 17:02:47.595: INFO: stdout: "e2e-test-crd-publish-openapi-5239-crd.crd-publish-openapi-test-unknown-at-root.example.com/test-cr created\n"
  Apr 28 17:02:47.595: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-2894 --namespace=crd-publish-openapi-2894 delete e2e-test-crd-publish-openapi-5239-crds test-cr'
  Apr 28 17:02:47.655: INFO: stderr: ""
  Apr 28 17:02:47.655: INFO: stdout: "e2e-test-crd-publish-openapi-5239-crd.crd-publish-openapi-test-unknown-at-root.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR @ 04/28/24 17:02:47.655
  Apr 28 17:02:47.655: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1150850803 --namespace=crd-publish-openapi-2894 explain e2e-test-crd-publish-openapi-5239-crds'
  Apr 28 17:02:47.770: INFO: stderr: ""
  Apr 28 17:02:47.770: INFO: stdout: "GROUP:      crd-publish-openapi-test-unknown-at-root.example.com\nKIND:       e2e-test-crd-publish-openapi-5239-crd\nVERSION:    v1\n\nDESCRIPTION:\n    preserve-unknown-properties at root for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Waldo\n\n  status\t<Object>\n    Status of Waldo\n\n\n"
  E0428 17:02:47.787984      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:48.788414      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:02:48.967: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-2894" for this suite. @ 04/28/24 17:02:48.972
â€¢ [3.329 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-network] Services should complete a service status lifecycle [Conformance]
k8s.io/kubernetes/test/e2e/network/service.go:3326
  STEP: Creating a kubernetes client @ 04/28/24 17:02:48.976
  Apr 28 17:02:48.976: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename services @ 04/28/24 17:02:48.977
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 17:02:48.985
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 17:02:48.986
  STEP: creating a Service @ 04/28/24 17:02:48.99
  STEP: watching for the Service to be added @ 04/28/24 17:02:48.997
  Apr 28 17:02:48.998: INFO: Found Service test-service-pt67p in namespace services-8552 with labels: map[test-service-static:true] & ports [{http TCP <nil> 80 {0 80 } 0}]
  Apr 28 17:02:48.998: INFO: Service test-service-pt67p created
  STEP: Getting /status @ 04/28/24 17:02:48.998
  Apr 28 17:02:49.001: INFO: Service test-service-pt67p has LoadBalancer: {[]}
  STEP: patching the ServiceStatus @ 04/28/24 17:02:49.001
  STEP: watching for the Service to be patched @ 04/28/24 17:02:49.004
  Apr 28 17:02:49.005: INFO: observed Service test-service-pt67p in namespace services-8552 with annotations: map[] & LoadBalancer: {[]}
  Apr 28 17:02:49.005: INFO: Found Service test-service-pt67p in namespace services-8552 with annotations: map[patchedstatus:true] & LoadBalancer: {[{203.0.113.1  []}]}
  Apr 28 17:02:49.005: INFO: Service test-service-pt67p has service status patched
  STEP: updating the ServiceStatus @ 04/28/24 17:02:49.006
  Apr 28 17:02:49.012: INFO: updatedStatus.Conditions: []v1.Condition{v1.Condition{Type:"StatusUpdate", Status:"True", ObservedGeneration:0, LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the Service to be updated @ 04/28/24 17:02:49.012
  Apr 28 17:02:49.013: INFO: Observed Service test-service-pt67p in namespace services-8552 with annotations: map[] & Conditions: {[]}
  Apr 28 17:02:49.013: INFO: Observed event: &Service{ObjectMeta:{test-service-pt67p  services-8552  84e3e5d8-8a78-4abe-891d-dbca25f8ddf7 28738 0 2024-04-28 17:02:48 +0000 UTC <nil> <nil> map[test-service-static:true] map[patchedstatus:true] [] [] [{e2e.test Update v1 2024-04-28 17:02:48 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:test-service-static":{}}},"f:spec":{"f:internalTrafficPolicy":{},"f:ports":{".":{},"k:{\"port\":80,\"protocol\":\"TCP\"}":{".":{},"f:name":{},"f:port":{},"f:protocol":{},"f:targetPort":{}}},"f:sessionAffinity":{},"f:type":{}}} } {e2e.test Update v1 2024-04-28 17:02:49 +0000 UTC FieldsV1 {"f:metadata":{"f:annotations":{".":{},"f:patchedstatus":{}}},"f:status":{"f:loadBalancer":{"f:ingress":{}}}} status}]},Spec:ServiceSpec{Ports:[]ServicePort{ServicePort{Name:http,Protocol:TCP,Port:80,TargetPort:{0 80 },NodePort:0,AppProtocol:nil,},},Selector:map[string]string{},ClusterIP:10.103.69.115,Type:ClusterIP,ExternalIPs:[],SessionAffinity:None,LoadBalancerIP:,LoadBalancerSourceRanges:[],ExternalName:,ExternalTrafficPolicy:,HealthCheckNodePort:0,PublishNotReadyAddresses:false,SessionAffinityConfig:nil,IPFamilyPolicy:*SingleStack,ClusterIPs:[10.103.69.115],IPFamilies:[IPv4],AllocateLoadBalancerNodePorts:nil,LoadBalancerClass:nil,InternalTrafficPolicy:*Cluster,},Status:ServiceStatus{LoadBalancer:LoadBalancerStatus{Ingress:[]LoadBalancerIngress{LoadBalancerIngress{IP:203.0.113.1,Hostname:,Ports:[]PortStatus{},},},},Conditions:[]Condition{},},}
  Apr 28 17:02:49.013: INFO: Found Service test-service-pt67p in namespace services-8552 with annotations: map[patchedstatus:true] & Conditions: [{StatusUpdate True 0 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Apr 28 17:02:49.013: INFO: Service test-service-pt67p has service status updated
  STEP: patching the service @ 04/28/24 17:02:49.013
  STEP: watching for the Service to be patched @ 04/28/24 17:02:49.026
  Apr 28 17:02:49.027: INFO: observed Service test-service-pt67p in namespace services-8552 with labels: map[test-service-static:true]
  Apr 28 17:02:49.027: INFO: observed Service test-service-pt67p in namespace services-8552 with labels: map[test-service-static:true]
  Apr 28 17:02:49.027: INFO: observed Service test-service-pt67p in namespace services-8552 with labels: map[test-service-static:true]
  Apr 28 17:02:49.027: INFO: Found Service test-service-pt67p in namespace services-8552 with labels: map[test-service:patched test-service-static:true]
  Apr 28 17:02:49.027: INFO: Service test-service-pt67p patched
  STEP: deleting the service @ 04/28/24 17:02:49.027
  STEP: watching for the Service to be deleted @ 04/28/24 17:02:49.036
  Apr 28 17:02:49.037: INFO: Observed event: ADDED
  Apr 28 17:02:49.037: INFO: Observed event: MODIFIED
  Apr 28 17:02:49.037: INFO: Observed event: MODIFIED
  Apr 28 17:02:49.037: INFO: Observed event: MODIFIED
  Apr 28 17:02:49.037: INFO: Found Service test-service-pt67p in namespace services-8552 with labels: map[test-service:patched test-service-static:true] & annotations: map[patchedstatus:true]
  Apr 28 17:02:49.037: INFO: Service test-service-pt67p deleted
  Apr 28 17:02:49.037: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-8552" for this suite. @ 04/28/24 17:02:49.039
â€¢ [0.066 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance]
k8s.io/kubernetes/test/e2e/common/node/expansion.go:228
  STEP: Creating a kubernetes client @ 04/28/24 17:02:49.043
  Apr 28 17:02:49.043: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename var-expansion @ 04/28/24 17:02:49.044
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 17:02:49.052
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 17:02:49.054
  STEP: creating the pod with failed condition @ 04/28/24 17:02:49.056
  E0428 17:02:49.789364      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:50.789450      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:51.790074      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:52.790338      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:53.790684      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:54.790874      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:55.791219      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:56.791625      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:57.792647      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:58.792905      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:02:59.793376      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:00.793637      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:01.794395      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:02.794648      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:03.795181      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:04.795241      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:05.795517      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:06.796300      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:07.797329      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:08.797547      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:09.798518      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:10.798766      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:11.799286      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:12.800360      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:13.800914      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:14.801154      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:15.801177      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:16.801437      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:17.802089      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:18.802306      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:19.802508      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:20.802774      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:21.803185      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:22.803224      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:23.804302      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:24.804525      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:25.805133      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:26.805367      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:27.805393      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:28.805588      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:29.805908      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:30.806391      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:31.807047      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:32.807326      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:33.808326      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:34.808512      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:35.809306      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:36.809533      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:37.810281      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:38.810508      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:39.811456      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:40.811741      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:41.812230      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:42.812574      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:43.813651      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:44.813902      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:45.814583      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:46.814816      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:47.815671      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:48.816335      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:49.817031      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:50.817678      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:51.818429      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:52.818628      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:53.819119      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:54.819374      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:55.820050      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:56.820252      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:57.820929      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:58.821814      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:03:59.822567      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:00.822644      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:01.823259      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:02.824324      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:03.824692      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:04.824912      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:05.825770      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:06.826006      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:07.826937      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:08.827063      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:09.827231      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:10.828032      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:11.828563      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:12.828797      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:13.829296      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:14.829516      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:15.829691      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:16.829939      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:17.830779      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:18.831018      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:19.831229      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:20.831741      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:21.832168      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:22.832346      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:23.833132      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:24.833349      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:25.833557      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:26.833761      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:27.834595      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:28.834806      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:29.835360      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:30.835930      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:31.836854      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:32.837050      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:33.837727      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:34.838213      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:35.838990      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:36.839224      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:37.840164      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:38.840310      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:39.840879      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:40.841577      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:41.842118      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:42.842326      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:43.843165      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:44.843228      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:45.843519      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:46.843966      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:47.844708      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:48.844935      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: updating the pod @ 04/28/24 17:04:49.062
  Apr 28 17:04:49.571: INFO: Successfully updated pod "var-expansion-0936b956-4520-48da-a60d-2ed1ad4c4780"
  STEP: waiting for pod running @ 04/28/24 17:04:49.571
  E0428 17:04:49.845957      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:50.846565      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: deleting the pod gracefully @ 04/28/24 17:04:51.576
  Apr 28 17:04:51.576: INFO: Deleting pod "var-expansion-0936b956-4520-48da-a60d-2ed1ad4c4780" in namespace "var-expansion-8102"
  Apr 28 17:04:51.581: INFO: Wait up to 5m0s for pod "var-expansion-0936b956-4520-48da-a60d-2ed1ad4c4780" to be fully deleted
  E0428 17:04:51.846666      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:52.846735      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:53.846935      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:54.847180      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:55.847377      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:56.847644      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:57.848469      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:58.848769      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:04:59.849439      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:00.849759      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:01.850231      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:02.850493      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:03.851016      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:04.851231      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:05.851513      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:06.852309      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:07.853185      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:08.853426      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:09.853635      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:10.853746      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:11.854365      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:12.854613      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:13.855154      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:14.855252      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:15.856107      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:16.856311      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:17.856765      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:18.857016      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:19.858031      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:20.858633      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:21.858849      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:22.859142      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Apr 28 17:05:23.631: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-8102" for this suite. @ 04/28/24 17:05:23.633
â€¢ [154.593 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]
k8s.io/kubernetes/test/e2e/apps/disruption.go:164
  STEP: Creating a kubernetes client @ 04/28/24 17:05:23.637
  Apr 28 17:05:23.637: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename disruption @ 04/28/24 17:05:23.637
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 17:05:23.645
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 17:05:23.647
  STEP: Waiting for the pdb to be processed @ 04/28/24 17:05:23.652
  E0428 17:05:23.859916      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:24.860299      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Updating PodDisruptionBudget status @ 04/28/24 17:05:25.656
  STEP: Waiting for all pods to be running @ 04/28/24 17:05:25.66
  Apr 28 17:05:25.662: INFO: running pods: 0 < 1
  E0428 17:05:25.860413      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0428 17:05:26.860630      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: locating a running pod @ 04/28/24 17:05:27.665
  STEP: Waiting for the pdb to be processed @ 04/28/24 17:05:27.671
  STEP: Patching PodDisruptionBudget status @ 04/28/24 17:05:27.675
  STEP: Waiting for the pdb to be processed @ 04/28/24 17:05:27.682
  Apr 28 17:05:27.683: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-2797" for this suite. @ 04/28/24 17:05:27.686
â€¢ [4.052 seconds]
------------------------------
SSS
------------------------------
[sig-node] PodTemplates should delete a collection of pod templates [Conformance]
k8s.io/kubernetes/test/e2e/common/node/podtemplates.go:122
  STEP: Creating a kubernetes client @ 04/28/24 17:05:27.689
  Apr 28 17:05:27.689: INFO: >>> kubeConfig: /tmp/kubeconfig-1150850803
  STEP: Building a namespace api object, basename podtemplate @ 04/28/24 17:05:27.69
  STEP: Waiting for a default service account to be provisioned in namespace @ 04/28/24 17:05:27.698
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 04/28/24 17:05:27.7
  STEP: Create set of pod templates @ 04/28/24 17:05:27.701
  Apr 28 17:05:27.704: INFO: created test-podtemplate-1
  Apr 28 17:05:27.707: INFO: created test-podtemplate-2
  Apr 28 17:05:27.709: INFO: created test-podtemplate-3
  STEP: get a list of pod templates with a label in the current namespace @ 04/28/24 17:05:27.709
  STEP: delete collection of pod templates @ 04/28/24 17:05:27.711
  Apr 28 17:05:27.711: INFO: requesting DeleteCollection of pod templates
  STEP: check that the list of pod templates matches the requested quantity @ 04/28/24 17:05:27.719
  Apr 28 17:05:27.719: INFO: requesting list of pod templates to confirm quantity
  Apr 28 17:05:27.720: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-3571" for this suite. @ 04/28/24 17:05:27.722
â€¢ [0.036 seconds]
------------------------------
SSSS
------------------------------
[SynchronizedAfterSuite] 
k8s.io/kubernetes/test/e2e/e2e.go:88
  Apr 28 17:05:27.726: INFO: Running AfterSuite actions on node 1
  Apr 28 17:05:27.726: INFO: Skipping dumping logs from cluster
[SynchronizedAfterSuite] PASSED [0.000 seconds]
------------------------------
[ReportAfterSuite] Kubernetes e2e suite report
k8s.io/kubernetes/test/e2e/e2e_test.go:157
[ReportAfterSuite] PASSED [0.000 seconds]
------------------------------
[ReportAfterSuite] Kubernetes e2e JUnit report
k8s.io/kubernetes/test/e2e/framework/test_context.go:585
[ReportAfterSuite] PASSED [0.047 seconds]
------------------------------

Ran 380 of 7389 Specs in 5856.726 seconds
SUCCESS! -- 380 Passed | 0 Failed | 0 Pending | 7009 Skipped
PASS

Ginkgo ran 1 suite in 1h37m37.075110043s
Test Suite Passed
