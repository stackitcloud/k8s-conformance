  I0307 21:55:25.771508      20 e2e.go:117] Starting e2e run "85e55832-d5ed-4ed6-bb52-ff889579ebc0" on Ginkgo node 1
Running Suite: Kubernetes e2e suite - /usr/local/bin
====================================================
Random Seed: 1709848525 - will randomize all specs

Will run 388 of 7407 specs
------------------------------
[ReportBeforeSuite] 
test/e2e/e2e_test.go:157
[ReportBeforeSuite] PASSED [0.000 seconds]
------------------------------
[SynchronizedBeforeSuite] 
test/e2e/e2e.go:77
  Mar  7 21:55:25.923: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 21:55:25.924: INFO: Waiting up to 30m0s for all (but 0) nodes to be schedulable
  Mar  7 21:55:25.944: INFO: Waiting up to 5m0s for all daemonsets in namespace 'kube-system' to start
  Mar  7 21:55:25.947: INFO: 2 / 2 pods ready in namespace 'kube-system' in daemonset 'calico-node' (0 seconds elapsed)
  Mar  7 21:55:25.947: INFO: e2e test version: v1.29.0
  Mar  7 21:55:25.948: INFO: kube-apiserver version: v1.29.2
  Mar  7 21:55:25.948: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 21:55:25.950: INFO: Cluster IP family: ipv4
[SynchronizedBeforeSuite] PASSED [0.028 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:100
  STEP: Creating a kubernetes client @ 03/07/24 21:55:26.042
  Mar  7 21:55:26.043: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir @ 03/07/24 21:55:26.043
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 21:55:26.059
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 21:55:26.061
  STEP: Creating a pod to test emptydir 0644 on tmpfs @ 03/07/24 21:55:26.063
  STEP: Saw pod success @ 03/07/24 21:55:30.095
  Mar  7 21:55:30.104: INFO: Trying to get logs from node whiskas-1 pod pod-3fd98950-fc89-4c56-b302-5256f9626d41 container test-container: <nil>
  STEP: delete the pod @ 03/07/24 21:55:30.14
  Mar  7 21:55:30.199: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-1206" for this suite. @ 03/07/24 21:55:30.208
• [4.177 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should support CronJob API operations [Conformance] [sig-apps, Conformance]
test/e2e/apps/cronjob.go:324
  STEP: Creating a kubernetes client @ 03/07/24 21:55:30.221
  Mar  7 21:55:30.221: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename cronjob @ 03/07/24 21:55:30.222
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 21:55:30.24
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 21:55:30.243
  STEP: Creating a cronjob @ 03/07/24 21:55:30.245
  STEP: creating @ 03/07/24 21:55:30.245
  STEP: getting @ 03/07/24 21:55:30.253
  STEP: listing @ 03/07/24 21:55:30.26
  STEP: watching @ 03/07/24 21:55:30.263
  Mar  7 21:55:30.263: INFO: starting watch
  STEP: cluster-wide listing @ 03/07/24 21:55:30.264
  STEP: cluster-wide watching @ 03/07/24 21:55:30.266
  Mar  7 21:55:30.266: INFO: starting watch
  STEP: patching @ 03/07/24 21:55:30.267
  STEP: updating @ 03/07/24 21:55:30.275
  Mar  7 21:55:30.284: INFO: waiting for watch events with expected annotations
  Mar  7 21:55:30.284: INFO: saw patched and updated annotations
  STEP: patching /status @ 03/07/24 21:55:30.285
  STEP: updating /status @ 03/07/24 21:55:30.291
  STEP: get /status @ 03/07/24 21:55:30.296
  STEP: deleting @ 03/07/24 21:55:30.298
  STEP: deleting a collection @ 03/07/24 21:55:30.313
  Mar  7 21:55:30.324: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-9535" for this suite. @ 03/07/24 21:55:30.327
• [0.115 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should serve endpoints on same port and different protocols [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:3649
  STEP: Creating a kubernetes client @ 03/07/24 21:55:30.336
  Mar  7 21:55:30.336: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 21:55:30.336
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 21:55:30.356
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 21:55:30.357
  STEP: creating service multiprotocol-test in namespace services-6832 @ 03/07/24 21:55:30.359
  STEP: creating pod pod1 in namespace services-6832 @ 03/07/24 21:55:30.372
  STEP: Creating pod pod1 in namespace services-6832 @ 03/07/24 21:55:30.372
  STEP: waiting up to 3m0s for service multiprotocol-test in namespace services-6832 to expose endpoints map[pod1:[{tcp-port 0 80 TCP } {udp-port 0 80 UDP }]] @ 03/07/24 21:55:32.392
  Mar  7 21:55:32.400: INFO: successfully validated that service multiprotocol-test in namespace services-6832 exposes endpoints map[pod1:[{tcp-port 0 80 TCP } {udp-port 0 80 UDP }]]
  STEP: Checking if the Service forwards traffic to the TCP and UDP port @ 03/07/24 21:55:32.4
  Mar  7 21:55:32.400: INFO: Creating new exec pod
  Mar  7 21:55:34.420: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-6832 exec execpodxmvqn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.95 80'
  Mar  7 21:55:34.555: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.95 80\nConnection to 10.152.183.95 80 port [tcp/http] succeeded!\n"
  Mar  7 21:55:34.555: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 21:55:34.556: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-6832 exec execpodxmvqn -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.152.183.95 80'
  Mar  7 21:55:38.688: INFO: stderr: "+ echo hostName\n+ nc -v -u -w 2 10.152.183.95 80\nConnection to 10.152.183.95 80 port [udp/*] succeeded!\n"
  Mar  7 21:55:38.688: INFO: stdout: "pod1"
  STEP: Checking if the Service forwards traffic to TCP only @ 03/07/24 21:55:38.688
  Mar  7 21:55:38.724: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-6832 exec execpodxmvqn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.95 80'
  Mar  7 21:55:38.831: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.95 80\nConnection to 10.152.183.95 80 port [tcp/http] succeeded!\n"
  Mar  7 21:55:38.831: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 21:55:38.831: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-6832 exec execpodxmvqn -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.152.183.95 80'
  Mar  7 21:55:42.912: INFO: stderr: "+ echo hostName\n+ nc -v -u -w 2 10.152.183.95 80\nConnection to 10.152.183.95 80 port [udp/*] succeeded!\n"
  Mar  7 21:55:42.912: INFO: stdout: ""
  Mar  7 21:55:42.912: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-6832 exec execpodxmvqn -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.152.183.95 80'
  Mar  7 21:55:47.028: INFO: stderr: "+ echo hostName\n+ nc -v -u -w 2 10.152.183.95 80\nConnection to 10.152.183.95 80 port [udp/*] succeeded!\n"
  Mar  7 21:55:47.028: INFO: stdout: ""
  STEP: Checking if the Service forwards traffic to UDP only @ 03/07/24 21:55:47.028
  Mar  7 21:55:47.062: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-6832 exec execpodxmvqn -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.152.183.95 80'
  Mar  7 21:55:51.172: INFO: stderr: "+ echo hostName\n+ nc -v -u -w 2 10.152.183.95 80\nConnection to 10.152.183.95 80 port [udp/*] succeeded!\n"
  Mar  7 21:55:51.172: INFO: stdout: "pod1"
  Mar  7 21:55:51.172: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-6832 exec execpodxmvqn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.95 80'
  Mar  7 21:55:53.336: INFO: rc: 1
  Mar  7 21:55:53.336: INFO: Service reachability failing with error: error running /usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-6832 exec execpodxmvqn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.95 80:
  Command stdout:

  stderr:
  + echo hostName
  + nc -v -t -w 2 10.152.183.95 80
  nc: connect to 10.152.183.95 port 80 (tcp) timed out: Operation in progress
  command terminated with exit code 1

  error:
  exit status 1
  Retrying...
  Mar  7 21:55:53.336: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-6832 exec execpodxmvqn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.95 80'
  Mar  7 21:55:55.488: INFO: rc: 1
  Mar  7 21:55:55.488: INFO: Service reachability failing with error: error running /usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-6832 exec execpodxmvqn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.95 80:
  Command stdout:

  stderr:
  + echo hostName
  + nc -v -t -w 2 10.152.183.95 80
  nc: connect to 10.152.183.95 port 80 (tcp) timed out: Operation in progress
  command terminated with exit code 1

  error:
  exit status 1
  Retrying...
  Mar  7 21:55:55.488: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-6832 exec execpodxmvqn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.95 80'
  Mar  7 21:55:57.602: INFO: rc: 1
  Mar  7 21:55:57.602: INFO: Service reachability failing with error: error running /usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-6832 exec execpodxmvqn -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.95 80:
  Command stdout:

  stderr:
  + echo hostName
  + nc -v -t -w 2 10.152.183.95 80
  nc: connect to 10.152.183.95 port 80 (tcp) timed out: Operation in progress
  command terminated with exit code 1

  error:
  exit status 1
  Retrying...
  Mar  7 21:55:57.603: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-6832" for this suite. @ 03/07/24 21:55:57.614
• [27.304 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/aggregator.go:98
  STEP: Creating a kubernetes client @ 03/07/24 21:55:57.64
  Mar  7 21:55:57.640: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename aggregator @ 03/07/24 21:55:57.642
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 21:55:57.685
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 21:55:57.69
  Mar  7 21:55:57.695: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Registering the sample API server. @ 03/07/24 21:55:57.696
  Mar  7 21:55:58.172: INFO: Found ClusterRoles; assuming RBAC is enabled.
  Mar  7 21:55:58.205: INFO: deployment "sample-apiserver-deployment" doesn't have the required revision set
  Mar  7 21:56:00.302: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Mar  7 21:56:02.312: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Mar  7 21:56:04.312: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Mar  7 21:56:06.313: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Mar  7 21:56:08.313: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Mar  7 21:56:10.317: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Mar  7 21:56:12.313: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Mar  7 21:56:14.314: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Mar  7 21:56:16.312: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Mar  7 21:56:18.307: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 21, 55, 58, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Mar  7 21:56:20.462: INFO: Waited 122.535644ms for the sample-apiserver to be ready to handle requests.
  STEP: Read Status for v1alpha1.wardle.example.com @ 03/07/24 21:56:20.54
  STEP: kubectl patch apiservice v1alpha1.wardle.example.com -p '{"spec":{"versionPriority": 400}}' @ 03/07/24 21:56:20.543
  STEP: List APIServices @ 03/07/24 21:56:20.556
  Mar  7 21:56:20.566: INFO: Found v1alpha1.wardle.example.com in APIServiceList
  STEP: Adding a label to the APIService @ 03/07/24 21:56:20.566
  Mar  7 21:56:20.582: INFO: APIService labels: map[e2e-apiservice:patched]
  STEP: Updating APIService Status @ 03/07/24 21:56:20.582
  Mar  7 21:56:20.597: INFO: updatedStatus.Conditions: []v1.APIServiceCondition{v1.APIServiceCondition{Type:"Available", Status:"True", LastTransitionTime:time.Date(2024, time.March, 7, 21, 56, 20, 0, time.Local), Reason:"Passed", Message:"all checks passed"}, v1.APIServiceCondition{Type:"StatusUpdated", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: Confirm that v1alpha1.wardle.example.com /status was updated @ 03/07/24 21:56:20.597
  Mar  7 21:56:20.601: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[e2e-apiservice:patched] & Condition: {Available True 2024-03-07 21:56:20 +0000 UTC Passed all checks passed}
  Mar  7 21:56:20.601: INFO: Found APIService v1alpha1.wardle.example.com with Labels: map[e2e-apiservice:patched] & Condition: {StatusUpdated True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Mar  7 21:56:20.601: INFO: Found updated status condition for v1alpha1.wardle.example.com
  STEP: Replace APIService v1alpha1.wardle.example.com @ 03/07/24 21:56:20.601
  Mar  7 21:56:20.617: INFO: Found updated apiService label for "v1alpha1.wardle.example.com"
  STEP: Delete flunders resource "dynamic-flunder-592893849" @ 03/07/24 21:56:20.617
  STEP: Recreating test-flunder before removing endpoint via deleteCollection @ 03/07/24 21:56:20.629
  STEP: Read v1alpha1.wardle.example.com /status before patching it @ 03/07/24 21:56:20.638
  STEP: Patch APIService Status @ 03/07/24 21:56:20.642
  STEP: Confirm that v1alpha1.wardle.example.com /status was patched @ 03/07/24 21:56:20.655
  Mar  7 21:56:20.659: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {Available True 2024-03-07 21:56:20 +0000 UTC Passed all checks passed}
  Mar  7 21:56:20.659: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {StatusUpdated True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Mar  7 21:56:20.659: INFO: Found APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC E2E Set by e2e test}
  Mar  7 21:56:20.659: INFO: Found patched status condition for v1alpha1.wardle.example.com
  STEP: APIService deleteCollection with labelSelector: "v1alpha1.wardle.example.com=updated" @ 03/07/24 21:56:20.659
  STEP: Confirm that the generated APIService has been deleted @ 03/07/24 21:56:20.673
  Mar  7 21:56:20.673: INFO: Requesting list of APIServices to confirm quantity
  Mar  7 21:56:20.678: INFO: Found 0 APIService with label "v1alpha1.wardle.example.com=updated"
  Mar  7 21:56:20.678: INFO: APIService v1alpha1.wardle.example.com has been deleted.
  Mar  7 21:56:20.840: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "aggregator-5815" for this suite. @ 03/07/24 21:56:20.845
• [23.214 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtime.go:232
  STEP: Creating a kubernetes client @ 03/07/24 21:56:20.854
  Mar  7 21:56:20.854: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-runtime @ 03/07/24 21:56:20.855
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 21:56:20.873
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 21:56:20.876
  STEP: create the container @ 03/07/24 21:56:20.879
  W0307 21:56:20.888994      20 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 03/07/24 21:56:20.889
  STEP: get the container status @ 03/07/24 21:56:23.921
  STEP: the container should be terminated @ 03/07/24 21:56:23.929
  STEP: the termination message should be set @ 03/07/24 21:56:23.929
  Mar  7 21:56:23.929: INFO: Expected: &{} to match Container's Termination Message:  --
  STEP: delete the container @ 03/07/24 21:56:23.929
  Mar  7 21:56:24.013: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-7659" for this suite. @ 03/07/24 21:56:24.02
• [3.174 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should patch a pod status [Conformance] [sig-node, Conformance]
test/e2e/common/node/pods.go:1084
  STEP: Creating a kubernetes client @ 03/07/24 21:56:24.029
  Mar  7 21:56:24.029: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pods @ 03/07/24 21:56:24.029
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 21:56:24.049
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 21:56:24.051
  STEP: Create a pod @ 03/07/24 21:56:24.052
  STEP: patching /status @ 03/07/24 21:56:26.093
  Mar  7 21:56:26.104: INFO: Status Message: "Patched by e2e test" and Reason: "E2E"
  Mar  7 21:56:26.104: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-9680" for this suite. @ 03/07/24 21:56:26.11
• [2.096 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods Extended Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance] [sig-node, Conformance]
test/e2e/node/pods.go:163
  STEP: Creating a kubernetes client @ 03/07/24 21:56:26.125
  Mar  7 21:56:26.125: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pods @ 03/07/24 21:56:26.126
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 21:56:26.156
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 21:56:26.158
  STEP: creating the pod @ 03/07/24 21:56:26.161
  STEP: submitting the pod to kubernetes @ 03/07/24 21:56:26.161
  STEP: verifying QOS class is set on the pod @ 03/07/24 21:56:26.17
  Mar  7 21:56:26.173: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-566" for this suite. @ 03/07/24 21:56:26.175
• [0.059 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance] [sig-node, Slow, Conformance]
test/e2e/common/node/expansion.go:228
  STEP: Creating a kubernetes client @ 03/07/24 21:56:26.184
  Mar  7 21:56:26.184: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename var-expansion @ 03/07/24 21:56:26.185
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 21:56:26.204
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 21:56:26.206
  STEP: creating the pod with failed condition @ 03/07/24 21:56:26.208
  STEP: updating the pod @ 03/07/24 21:58:26.218
  Mar  7 21:58:26.759: INFO: Successfully updated pod "var-expansion-4a6d7342-df67-4d79-bf42-f688e0b14aff"
  STEP: waiting for pod running @ 03/07/24 21:58:26.759
  STEP: deleting the pod gracefully @ 03/07/24 21:58:28.788
  Mar  7 21:58:28.788: INFO: Deleting pod "var-expansion-4a6d7342-df67-4d79-bf42-f688e0b14aff" in namespace "var-expansion-5278"
  Mar  7 21:58:28.813: INFO: Wait up to 5m0s for pod "var-expansion-4a6d7342-df67-4d79-bf42-f688e0b14aff" to be fully deleted
  Mar  7 21:59:00.981: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-5278" for this suite. @ 03/07/24 21:59:00.997
• [154.832 seconds]
------------------------------
S
------------------------------
[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:237
  STEP: Creating a kubernetes client @ 03/07/24 21:59:01.016
  Mar  7 21:59:01.017: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 21:59:01.018
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 21:59:01.05
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 21:59:01.053
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 21:59:01.055
  STEP: Saw pod success @ 03/07/24 21:59:05.081
  Mar  7 21:59:05.090: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-9e1debd4-6f9a-4506-9a7f-dea8f731a63e container client-container: <nil>
  STEP: delete the pod @ 03/07/24 21:59:05.123
  Mar  7 21:59:05.151: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-9223" for this suite. @ 03/07/24 21:59:05.154
• [4.144 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_secret.go:215
  STEP: Creating a kubernetes client @ 03/07/24 21:59:05.16
  Mar  7 21:59:05.160: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 21:59:05.161
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 21:59:05.183
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 21:59:05.184
  STEP: Creating secret with name s-test-opt-del-18c23081-fa80-4753-bf85-dbcd92174b44 @ 03/07/24 21:59:05.189
  STEP: Creating secret with name s-test-opt-upd-368add9d-cfcc-4e6a-bbf5-2d3014c6c848 @ 03/07/24 21:59:05.194
  STEP: Creating the pod @ 03/07/24 21:59:05.201
  STEP: Deleting secret s-test-opt-del-18c23081-fa80-4753-bf85-dbcd92174b44 @ 03/07/24 21:59:07.246
  STEP: Updating secret s-test-opt-upd-368add9d-cfcc-4e6a-bbf5-2d3014c6c848 @ 03/07/24 21:59:07.257
  STEP: Creating secret with name s-test-opt-create-ec090195-c48c-4c1a-9821-d933fad3c405 @ 03/07/24 21:59:07.264
  STEP: waiting to observe update in volume @ 03/07/24 21:59:07.27
  Mar  7 22:00:32.105: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8063" for this suite. @ 03/07/24 22:00:32.113
• [86.974 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:47
  STEP: Creating a kubernetes client @ 03/07/24 22:00:32.135
  Mar  7 22:00:32.135: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename secrets @ 03/07/24 22:00:32.135
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:00:32.155
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:00:32.157
  STEP: Creating secret with name secret-test-9fa21d56-8502-44f2-a1de-eb43279ebab0 @ 03/07/24 22:00:32.159
  STEP: Creating a pod to test consume secrets @ 03/07/24 22:00:32.164
  STEP: Saw pod success @ 03/07/24 22:00:36.191
  Mar  7 22:00:36.200: INFO: Trying to get logs from node whiskas-2 pod pod-secrets-c764a04d-60b9-4244-a2d9-71afe3dc0046 container secret-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 22:00:36.234
  Mar  7 22:00:36.277: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-8790" for this suite. @ 03/07/24 22:00:36.285
• [4.166 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:285
  STEP: Creating a kubernetes client @ 03/07/24 22:00:36.302
  Mar  7 22:00:36.302: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 22:00:36.303
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:00:36.344
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:00:36.35
  STEP: Setting up server cert @ 03/07/24 22:00:36.398
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 22:00:36.714
  STEP: Deploying the webhook pod @ 03/07/24 22:00:36.723
  STEP: Wait for the deployment to be ready @ 03/07/24 22:00:36.737
  Mar  7 22:00:36.742: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 03/07/24 22:00:38.77
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:00:38.804
  Mar  7 22:00:39.805: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Mar  7 22:00:39.821: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-2344-crds.webhook.example.com via the AdmissionRegistration API @ 03/07/24 22:00:40.353
  STEP: Creating a custom resource that should be mutated by the webhook @ 03/07/24 22:00:40.4
  Mar  7 22:00:43.071: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-2351" for this suite. @ 03/07/24 22:00:43.082
  STEP: Destroying namespace "webhook-markers-3537" for this suite. @ 03/07/24 22:00:43.101
• [6.816 seconds]
------------------------------
SSS
------------------------------
[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:1416
  STEP: Creating a kubernetes client @ 03/07/24 22:00:43.118
  Mar  7 22:00:43.118: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 22:00:43.12
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:00:43.151
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:00:43.156
  STEP: creating a service externalname-service with the type=ExternalName in namespace services-1526 @ 03/07/24 22:00:43.159
  STEP: changing the ExternalName service to type=ClusterIP @ 03/07/24 22:00:43.167
  STEP: creating replication controller externalname-service in namespace services-1526 @ 03/07/24 22:00:43.181
  I0307 22:00:43.196788      20 runners.go:197] Created replication controller with name: externalname-service, namespace: services-1526, replica count: 2
  I0307 22:00:46.248223      20 runners.go:197] externalname-service Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Mar  7 22:00:46.248: INFO: Creating new exec pod
  Mar  7 22:00:49.285: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-1526 exec execpodpghxj -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Mar  7 22:00:49.367: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Mar  7 22:00:49.367: INFO: stdout: "externalname-service-6l6x2"
  Mar  7 22:00:49.367: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-1526 exec execpodpghxj -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.243 80'
  Mar  7 22:00:49.438: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.243 80\nConnection to 10.152.183.243 80 port [tcp/http] succeeded!\n"
  Mar  7 22:00:49.438: INFO: stdout: "externalname-service-6l6x2"
  Mar  7 22:00:49.438: INFO: Cleaning up the ExternalName to ClusterIP test service
  Mar  7 22:00:49.518: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-1526" for this suite. @ 03/07/24 22:00:49.527
• [6.420 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance] [sig-storage, Conformance]
test/e2e/storage/empty_dir_wrapper.go:67
  STEP: Creating a kubernetes client @ 03/07/24 22:00:49.539
  Mar  7 22:00:49.539: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir-wrapper @ 03/07/24 22:00:49.54
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:00:49.566
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:00:49.569
  STEP: Cleaning up the secret @ 03/07/24 22:00:51.622
  STEP: Cleaning up the configmap @ 03/07/24 22:00:51.643
  STEP: Cleaning up the pod @ 03/07/24 22:00:51.663
  Mar  7 22:00:51.704: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-wrapper-2958" for this suite. @ 03/07/24 22:00:51.711
• [2.186 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/garbage_collector.go:480
  STEP: Creating a kubernetes client @ 03/07/24 22:00:51.724
  Mar  7 22:00:51.724: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename gc @ 03/07/24 22:00:51.725
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:00:51.739
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:00:51.741
  STEP: create the deployment @ 03/07/24 22:00:51.744
  W0307 22:00:51.749823      20 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: Wait for the Deployment to create new ReplicaSet @ 03/07/24 22:00:51.749
  STEP: delete the deployment @ 03/07/24 22:00:52.254
  STEP: wait for all rs to be garbage collected @ 03/07/24 22:00:52.271
  STEP: expected 0 rs, got 1 rs @ 03/07/24 22:00:52.28
  STEP: expected 0 pods, got 2 pods @ 03/07/24 22:00:52.284
  STEP: Gathering metrics @ 03/07/24 22:00:52.779
  W0307 22:00:52.783291      20 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Mar  7 22:00:52.783: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Mar  7 22:00:52.783: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-3683" for this suite. @ 03/07/24 22:00:52.785
• [1.068 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] Projected combined should project all components that make up the projection API [Projection] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_combined.go:44
  STEP: Creating a kubernetes client @ 03/07/24 22:00:52.792
  Mar  7 22:00:52.792: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 22:00:52.793
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:00:52.808
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:00:52.811
  STEP: Creating configMap with name configmap-projected-all-test-volume-5bfd6b15-c246-4851-b2ee-fbc8a214435f @ 03/07/24 22:00:52.813
  STEP: Creating secret with name secret-projected-all-test-volume-7fd1b32a-8e74-4250-974b-63c4f08f7136 @ 03/07/24 22:00:52.818
  STEP: Creating a pod to test Check all projections for projected volume plugin @ 03/07/24 22:00:52.826
  STEP: Saw pod success @ 03/07/24 22:00:56.855
  Mar  7 22:00:56.865: INFO: Trying to get logs from node whiskas-1 pod projected-volume-2cfb5059-491e-4268-9d63-45e8c9ab09cf container projected-all-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 22:00:56.885
  Mar  7 22:00:56.935: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5850" for this suite. @ 03/07/24 22:00:56.939
• [4.162 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/pods.go:619
  STEP: Creating a kubernetes client @ 03/07/24 22:00:56.955
  Mar  7 22:00:56.955: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pods @ 03/07/24 22:00:56.955
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:00:56.978
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:00:56.981
  Mar  7 22:00:56.985: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: creating the pod @ 03/07/24 22:00:56.988
  STEP: submitting the pod to kubernetes @ 03/07/24 22:00:56.988
  Mar  7 22:00:59.067: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-6075" for this suite. @ 03/07/24 22:00:59.073
• [2.134 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:57
  STEP: Creating a kubernetes client @ 03/07/24 22:00:59.089
  Mar  7 22:00:59.089: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename secrets @ 03/07/24 22:00:59.09
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:00:59.113
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:00:59.117
  STEP: Creating secret with name secret-test-c35958f2-9bc0-4e9a-b9a4-420c351a797d @ 03/07/24 22:00:59.121
  STEP: Creating a pod to test consume secrets @ 03/07/24 22:00:59.129
  STEP: Saw pod success @ 03/07/24 22:01:03.172
  Mar  7 22:01:03.181: INFO: Trying to get logs from node whiskas-1 pod pod-secrets-af5c1ce5-4bd1-4539-9bc8-2b150ef5ed12 container secret-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 22:01:03.198
  Mar  7 22:01:03.253: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-7516" for this suite. @ 03/07/24 22:01:03.264
• [4.194 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/custom_resource_definition.go:59
  STEP: Creating a kubernetes client @ 03/07/24 22:01:03.284
  Mar  7 22:01:03.284: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename custom-resource-definition @ 03/07/24 22:01:03.286
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:01:03.317
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:01:03.321
  Mar  7 22:01:03.324: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:01:04.370: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-3425" for this suite. @ 03/07/24 22:01:04.373
• [1.097 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-instrumentation] Events should delete a collection of events [Conformance] [sig-instrumentation, Conformance]
test/e2e/instrumentation/core_events.go:176
  STEP: Creating a kubernetes client @ 03/07/24 22:01:04.381
  Mar  7 22:01:04.382: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename events @ 03/07/24 22:01:04.382
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:01:04.396
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:01:04.398
  STEP: Create set of events @ 03/07/24 22:01:04.4
  Mar  7 22:01:04.405: INFO: created test-event-1
  Mar  7 22:01:04.410: INFO: created test-event-2
  Mar  7 22:01:04.415: INFO: created test-event-3
  STEP: get a list of Events with a label in the current namespace @ 03/07/24 22:01:04.415
  STEP: delete collection of events @ 03/07/24 22:01:04.417
  Mar  7 22:01:04.417: INFO: requesting DeleteCollection of events
  STEP: check that the list of events matches the requested quantity @ 03/07/24 22:01:04.436
  Mar  7 22:01:04.436: INFO: requesting list of events to confirm quantity
  Mar  7 22:01:04.439: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-2794" for this suite. @ 03/07/24 22:01:04.441
• [0.067 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/discovery.go:126
  STEP: Creating a kubernetes client @ 03/07/24 22:01:04.449
  Mar  7 22:01:04.449: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename discovery @ 03/07/24 22:01:04.45
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:01:04.472
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:01:04.479
  STEP: Setting up server cert @ 03/07/24 22:01:04.492
  Mar  7 22:01:04.791: INFO: Checking APIGroup: apiregistration.k8s.io
  Mar  7 22:01:04.792: INFO: PreferredVersion.GroupVersion: apiregistration.k8s.io/v1
  Mar  7 22:01:04.792: INFO: Versions found [{apiregistration.k8s.io/v1 v1}]
  Mar  7 22:01:04.792: INFO: apiregistration.k8s.io/v1 matches apiregistration.k8s.io/v1
  Mar  7 22:01:04.792: INFO: Checking APIGroup: apps
  Mar  7 22:01:04.793: INFO: PreferredVersion.GroupVersion: apps/v1
  Mar  7 22:01:04.793: INFO: Versions found [{apps/v1 v1}]
  Mar  7 22:01:04.793: INFO: apps/v1 matches apps/v1
  Mar  7 22:01:04.793: INFO: Checking APIGroup: events.k8s.io
  Mar  7 22:01:04.794: INFO: PreferredVersion.GroupVersion: events.k8s.io/v1
  Mar  7 22:01:04.794: INFO: Versions found [{events.k8s.io/v1 v1}]
  Mar  7 22:01:04.794: INFO: events.k8s.io/v1 matches events.k8s.io/v1
  Mar  7 22:01:04.794: INFO: Checking APIGroup: authentication.k8s.io
  Mar  7 22:01:04.795: INFO: PreferredVersion.GroupVersion: authentication.k8s.io/v1
  Mar  7 22:01:04.795: INFO: Versions found [{authentication.k8s.io/v1 v1}]
  Mar  7 22:01:04.795: INFO: authentication.k8s.io/v1 matches authentication.k8s.io/v1
  Mar  7 22:01:04.795: INFO: Checking APIGroup: authorization.k8s.io
  Mar  7 22:01:04.796: INFO: PreferredVersion.GroupVersion: authorization.k8s.io/v1
  Mar  7 22:01:04.796: INFO: Versions found [{authorization.k8s.io/v1 v1}]
  Mar  7 22:01:04.796: INFO: authorization.k8s.io/v1 matches authorization.k8s.io/v1
  Mar  7 22:01:04.796: INFO: Checking APIGroup: autoscaling
  Mar  7 22:01:04.796: INFO: PreferredVersion.GroupVersion: autoscaling/v2
  Mar  7 22:01:04.796: INFO: Versions found [{autoscaling/v2 v2} {autoscaling/v1 v1}]
  Mar  7 22:01:04.796: INFO: autoscaling/v2 matches autoscaling/v2
  Mar  7 22:01:04.796: INFO: Checking APIGroup: batch
  Mar  7 22:01:04.797: INFO: PreferredVersion.GroupVersion: batch/v1
  Mar  7 22:01:04.797: INFO: Versions found [{batch/v1 v1}]
  Mar  7 22:01:04.797: INFO: batch/v1 matches batch/v1
  Mar  7 22:01:04.797: INFO: Checking APIGroup: certificates.k8s.io
  Mar  7 22:01:04.798: INFO: PreferredVersion.GroupVersion: certificates.k8s.io/v1
  Mar  7 22:01:04.798: INFO: Versions found [{certificates.k8s.io/v1 v1}]
  Mar  7 22:01:04.798: INFO: certificates.k8s.io/v1 matches certificates.k8s.io/v1
  Mar  7 22:01:04.798: INFO: Checking APIGroup: networking.k8s.io
  Mar  7 22:01:04.798: INFO: PreferredVersion.GroupVersion: networking.k8s.io/v1
  Mar  7 22:01:04.798: INFO: Versions found [{networking.k8s.io/v1 v1}]
  Mar  7 22:01:04.798: INFO: networking.k8s.io/v1 matches networking.k8s.io/v1
  Mar  7 22:01:04.798: INFO: Checking APIGroup: policy
  Mar  7 22:01:04.799: INFO: PreferredVersion.GroupVersion: policy/v1
  Mar  7 22:01:04.799: INFO: Versions found [{policy/v1 v1}]
  Mar  7 22:01:04.799: INFO: policy/v1 matches policy/v1
  Mar  7 22:01:04.799: INFO: Checking APIGroup: rbac.authorization.k8s.io
  Mar  7 22:01:04.800: INFO: PreferredVersion.GroupVersion: rbac.authorization.k8s.io/v1
  Mar  7 22:01:04.800: INFO: Versions found [{rbac.authorization.k8s.io/v1 v1}]
  Mar  7 22:01:04.800: INFO: rbac.authorization.k8s.io/v1 matches rbac.authorization.k8s.io/v1
  Mar  7 22:01:04.800: INFO: Checking APIGroup: storage.k8s.io
  Mar  7 22:01:04.800: INFO: PreferredVersion.GroupVersion: storage.k8s.io/v1
  Mar  7 22:01:04.800: INFO: Versions found [{storage.k8s.io/v1 v1}]
  Mar  7 22:01:04.800: INFO: storage.k8s.io/v1 matches storage.k8s.io/v1
  Mar  7 22:01:04.800: INFO: Checking APIGroup: admissionregistration.k8s.io
  Mar  7 22:01:04.801: INFO: PreferredVersion.GroupVersion: admissionregistration.k8s.io/v1
  Mar  7 22:01:04.801: INFO: Versions found [{admissionregistration.k8s.io/v1 v1}]
  Mar  7 22:01:04.801: INFO: admissionregistration.k8s.io/v1 matches admissionregistration.k8s.io/v1
  Mar  7 22:01:04.801: INFO: Checking APIGroup: apiextensions.k8s.io
  Mar  7 22:01:04.802: INFO: PreferredVersion.GroupVersion: apiextensions.k8s.io/v1
  Mar  7 22:01:04.802: INFO: Versions found [{apiextensions.k8s.io/v1 v1}]
  Mar  7 22:01:04.802: INFO: apiextensions.k8s.io/v1 matches apiextensions.k8s.io/v1
  Mar  7 22:01:04.802: INFO: Checking APIGroup: scheduling.k8s.io
  Mar  7 22:01:04.802: INFO: PreferredVersion.GroupVersion: scheduling.k8s.io/v1
  Mar  7 22:01:04.802: INFO: Versions found [{scheduling.k8s.io/v1 v1}]
  Mar  7 22:01:04.802: INFO: scheduling.k8s.io/v1 matches scheduling.k8s.io/v1
  Mar  7 22:01:04.802: INFO: Checking APIGroup: coordination.k8s.io
  Mar  7 22:01:04.803: INFO: PreferredVersion.GroupVersion: coordination.k8s.io/v1
  Mar  7 22:01:04.803: INFO: Versions found [{coordination.k8s.io/v1 v1}]
  Mar  7 22:01:04.803: INFO: coordination.k8s.io/v1 matches coordination.k8s.io/v1
  Mar  7 22:01:04.803: INFO: Checking APIGroup: node.k8s.io
  Mar  7 22:01:04.804: INFO: PreferredVersion.GroupVersion: node.k8s.io/v1
  Mar  7 22:01:04.804: INFO: Versions found [{node.k8s.io/v1 v1}]
  Mar  7 22:01:04.804: INFO: node.k8s.io/v1 matches node.k8s.io/v1
  Mar  7 22:01:04.804: INFO: Checking APIGroup: discovery.k8s.io
  Mar  7 22:01:04.804: INFO: PreferredVersion.GroupVersion: discovery.k8s.io/v1
  Mar  7 22:01:04.804: INFO: Versions found [{discovery.k8s.io/v1 v1}]
  Mar  7 22:01:04.804: INFO: discovery.k8s.io/v1 matches discovery.k8s.io/v1
  Mar  7 22:01:04.804: INFO: Checking APIGroup: flowcontrol.apiserver.k8s.io
  Mar  7 22:01:04.805: INFO: PreferredVersion.GroupVersion: flowcontrol.apiserver.k8s.io/v1
  Mar  7 22:01:04.805: INFO: Versions found [{flowcontrol.apiserver.k8s.io/v1 v1} {flowcontrol.apiserver.k8s.io/v1beta3 v1beta3}]
  Mar  7 22:01:04.805: INFO: flowcontrol.apiserver.k8s.io/v1 matches flowcontrol.apiserver.k8s.io/v1
  Mar  7 22:01:04.805: INFO: Checking APIGroup: crd.projectcalico.org
  Mar  7 22:01:04.806: INFO: PreferredVersion.GroupVersion: crd.projectcalico.org/v1
  Mar  7 22:01:04.806: INFO: Versions found [{crd.projectcalico.org/v1 v1}]
  Mar  7 22:01:04.806: INFO: crd.projectcalico.org/v1 matches crd.projectcalico.org/v1
  Mar  7 22:01:04.806: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "discovery-221" for this suite. @ 03/07/24 22:01:04.809
• [0.368 seconds]
------------------------------
SS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/expansion.go:76
  STEP: Creating a kubernetes client @ 03/07/24 22:01:04.818
  Mar  7 22:01:04.818: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename var-expansion @ 03/07/24 22:01:04.819
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:01:04.836
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:01:04.839
  STEP: Creating a pod to test substitution in container's command @ 03/07/24 22:01:04.841
  STEP: Saw pod success @ 03/07/24 22:01:08.877
  Mar  7 22:01:08.893: INFO: Trying to get logs from node whiskas-1 pod var-expansion-86ad842e-48d7-4615-aa82-26bb1a36733e container dapi-container: <nil>
  STEP: delete the pod @ 03/07/24 22:01:08.904
  Mar  7 22:01:08.943: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-5896" for this suite. @ 03/07/24 22:01:08.95
• [4.148 seconds]
------------------------------
SSSSSS
------------------------------
[sig-auth] ServiceAccounts should allow opting out of API token automount [Conformance] [sig-auth, Conformance]
test/e2e/auth/service_accounts.go:163
  STEP: Creating a kubernetes client @ 03/07/24 22:01:08.967
  Mar  7 22:01:08.967: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename svcaccounts @ 03/07/24 22:01:08.969
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:01:09.003
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:01:09.008
  Mar  7 22:01:09.043: INFO: created pod pod-service-account-defaultsa
  Mar  7 22:01:09.043: INFO: pod pod-service-account-defaultsa service account token volume mount: true
  Mar  7 22:01:09.059: INFO: created pod pod-service-account-mountsa
  Mar  7 22:01:09.059: INFO: pod pod-service-account-mountsa service account token volume mount: true
  Mar  7 22:01:09.077: INFO: created pod pod-service-account-nomountsa
  Mar  7 22:01:09.077: INFO: pod pod-service-account-nomountsa service account token volume mount: false
  Mar  7 22:01:09.091: INFO: created pod pod-service-account-defaultsa-mountspec
  Mar  7 22:01:09.091: INFO: pod pod-service-account-defaultsa-mountspec service account token volume mount: true
  Mar  7 22:01:09.105: INFO: created pod pod-service-account-mountsa-mountspec
  Mar  7 22:01:09.105: INFO: pod pod-service-account-mountsa-mountspec service account token volume mount: true
  Mar  7 22:01:09.118: INFO: created pod pod-service-account-nomountsa-mountspec
  Mar  7 22:01:09.118: INFO: pod pod-service-account-nomountsa-mountspec service account token volume mount: true
  Mar  7 22:01:09.136: INFO: created pod pod-service-account-defaultsa-nomountspec
  Mar  7 22:01:09.136: INFO: pod pod-service-account-defaultsa-nomountspec service account token volume mount: false
  Mar  7 22:01:09.150: INFO: created pod pod-service-account-mountsa-nomountspec
  Mar  7 22:01:09.150: INFO: pod pod-service-account-mountsa-nomountspec service account token volume mount: false
  Mar  7 22:01:09.172: INFO: created pod pod-service-account-nomountsa-nomountspec
  Mar  7 22:01:09.172: INFO: pod pod-service-account-nomountsa-nomountspec service account token volume mount: false
  Mar  7 22:01:09.172: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-5494" for this suite. @ 03/07/24 22:01:09.179
• [0.255 seconds]
------------------------------
S
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:220
  STEP: Creating a kubernetes client @ 03/07/24 22:01:09.222
  Mar  7 22:01:09.222: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir @ 03/07/24 22:01:09.223
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:01:09.257
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:01:09.26
  STEP: Creating a pod to test emptydir 0777 on node default medium @ 03/07/24 22:01:09.262
  STEP: Saw pod success @ 03/07/24 22:01:13.298
  Mar  7 22:01:13.307: INFO: Trying to get logs from node whiskas-2 pod pod-5ec02730-a985-4db4-a4a7-1ebe69ca7889 container test-container: <nil>
  STEP: delete the pod @ 03/07/24 22:01:13.325
  Mar  7 22:01:13.379: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-8900" for this suite. @ 03/07/24 22:01:13.389
• [4.181 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/predicates.go:707
  STEP: Creating a kubernetes client @ 03/07/24 22:01:13.404
  Mar  7 22:01:13.404: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename sched-pred @ 03/07/24 22:01:13.405
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:01:13.426
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:01:13.429
  Mar  7 22:01:13.432: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Mar  7 22:01:13.439: INFO: Waiting for terminating namespaces to be deleted...
  Mar  7 22:01:13.442: INFO: 
  Logging pods the apiserver thinks is on node whiskas-1 before test
  Mar  7 22:01:13.452: INFO: calico-kube-controllers-77bd7c5b-dqhl2 from kube-system started at 2024-03-07 21:05:03 +0000 UTC (1 container statuses recorded)
  Mar  7 22:01:13.452: INFO: 	Container calico-kube-controllers ready: true, restart count 0
  Mar  7 22:01:13.452: INFO: calico-node-qn97s from kube-system started at 2024-03-07 16:43:41 +0000 UTC (1 container statuses recorded)
  Mar  7 22:01:13.452: INFO: 	Container calico-node ready: true, restart count 0
  Mar  7 22:01:13.452: INFO: coredns-864597b5fd-pg2nw from kube-system started at 2024-03-07 20:12:34 +0000 UTC (1 container statuses recorded)
  Mar  7 22:01:13.452: INFO: 	Container coredns ready: true, restart count 0
  Mar  7 22:01:13.452: INFO: pod-logs-websocket-3f99b568-a14d-431b-b276-ea03d4d0a3ab from pods-6075 started at 2024-03-07 22:00:57 +0000 UTC (1 container statuses recorded)
  Mar  7 22:01:13.452: INFO: 	Container main ready: true, restart count 0
  Mar  7 22:01:13.452: INFO: sonobuoy-systemd-logs-daemon-set-e0190a7af8074a44-5wrn6 from sonobuoy started at 2024-03-07 21:55:24 +0000 UTC (2 container statuses recorded)
  Mar  7 22:01:13.452: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Mar  7 22:01:13.452: INFO: 	Container systemd-logs ready: true, restart count 0
  Mar  7 22:01:13.452: INFO: pod-service-account-defaultsa from svcaccounts-5494 started at 2024-03-07 22:01:09 +0000 UTC (1 container statuses recorded)
  Mar  7 22:01:13.452: INFO: 	Container token-test ready: false, restart count 0
  Mar  7 22:01:13.452: INFO: pod-service-account-defaultsa-nomountspec from svcaccounts-5494 started at 2024-03-07 22:01:09 +0000 UTC (1 container statuses recorded)
  Mar  7 22:01:13.452: INFO: 	Container token-test ready: true, restart count 0
  Mar  7 22:01:13.452: INFO: pod-service-account-mountsa-mountspec from svcaccounts-5494 started at 2024-03-07 22:01:09 +0000 UTC (1 container statuses recorded)
  Mar  7 22:01:13.452: INFO: 	Container token-test ready: false, restart count 0
  Mar  7 22:01:13.452: INFO: pod-service-account-nomountsa from svcaccounts-5494 started at 2024-03-07 22:01:09 +0000 UTC (1 container statuses recorded)
  Mar  7 22:01:13.452: INFO: 	Container token-test ready: true, restart count 0
  Mar  7 22:01:13.452: INFO: pod-service-account-nomountsa-nomountspec from svcaccounts-5494 started at 2024-03-07 22:01:09 +0000 UTC (1 container statuses recorded)
  Mar  7 22:01:13.452: INFO: 	Container token-test ready: true, restart count 0
  Mar  7 22:01:13.452: INFO: 
  Logging pods the apiserver thinks is on node whiskas-2 before test
  Mar  7 22:01:13.459: INFO: calico-node-dqm6m from kube-system started at 2024-03-07 16:43:45 +0000 UTC (1 container statuses recorded)
  Mar  7 22:01:13.459: INFO: 	Container calico-node ready: true, restart count 0
  Mar  7 22:01:13.459: INFO: sonobuoy from sonobuoy started at 2024-03-07 21:55:23 +0000 UTC (1 container statuses recorded)
  Mar  7 22:01:13.459: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Mar  7 22:01:13.459: INFO: sonobuoy-e2e-job-2fc5b94cf9844ccc from sonobuoy started at 2024-03-07 21:55:24 +0000 UTC (2 container statuses recorded)
  Mar  7 22:01:13.459: INFO: 	Container e2e ready: true, restart count 0
  Mar  7 22:01:13.459: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Mar  7 22:01:13.459: INFO: sonobuoy-systemd-logs-daemon-set-e0190a7af8074a44-fx8dw from sonobuoy started at 2024-03-07 21:55:24 +0000 UTC (2 container statuses recorded)
  Mar  7 22:01:13.459: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Mar  7 22:01:13.459: INFO: 	Container systemd-logs ready: true, restart count 0
  Mar  7 22:01:13.459: INFO: pod-service-account-defaultsa-mountspec from svcaccounts-5494 started at 2024-03-07 22:01:09 +0000 UTC (1 container statuses recorded)
  Mar  7 22:01:13.459: INFO: 	Container token-test ready: false, restart count 0
  Mar  7 22:01:13.459: INFO: pod-service-account-mountsa from svcaccounts-5494 started at 2024-03-07 22:01:09 +0000 UTC (1 container statuses recorded)
  Mar  7 22:01:13.459: INFO: 	Container token-test ready: false, restart count 0
  Mar  7 22:01:13.459: INFO: pod-service-account-mountsa-nomountspec from svcaccounts-5494 started at 2024-03-07 22:01:09 +0000 UTC (1 container statuses recorded)
  Mar  7 22:01:13.459: INFO: 	Container token-test ready: true, restart count 0
  Mar  7 22:01:13.459: INFO: pod-service-account-nomountsa-mountspec from svcaccounts-5494 started at 2024-03-07 22:01:09 +0000 UTC (1 container statuses recorded)
  Mar  7 22:01:13.459: INFO: 	Container token-test ready: false, restart count 0
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 03/07/24 22:01:13.459
  STEP: Explicitly delete pod here to free the resource it takes. @ 03/07/24 22:01:15.49
  STEP: Trying to apply a random label on the found node. @ 03/07/24 22:01:15.545
  STEP: verifying the node has the label kubernetes.io/e2e-9c6aaee8-74ba-4119-b226-bb3d1f728c18 95 @ 03/07/24 22:01:15.566
  STEP: Trying to create a pod(pod4) with hostport 54322 and hostIP 0.0.0.0(empty string here) and expect scheduled @ 03/07/24 22:01:15.573
  STEP: Trying to create another pod(pod5) with hostport 54322 but hostIP 10.100.138.2 on the node which pod4 resides and expect not scheduled @ 03/07/24 22:01:17.599
  STEP: removing the label kubernetes.io/e2e-9c6aaee8-74ba-4119-b226-bb3d1f728c18 off the node whiskas-2 @ 03/07/24 22:06:17.627
  STEP: verifying the node doesn't have the label kubernetes.io/e2e-9c6aaee8-74ba-4119-b226-bb3d1f728c18 @ 03/07/24 22:06:17.661
  Mar  7 22:06:17.680: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-3749" for this suite. @ 03/07/24 22:06:17.687
• [304.294 seconds]
------------------------------
S
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance] [sig-apps, Slow, Conformance]
test/e2e/apps/statefulset.go:751
  STEP: Creating a kubernetes client @ 03/07/24 22:06:17.699
  Mar  7 22:06:17.699: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename statefulset @ 03/07/24 22:06:17.699
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:06:17.722
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:06:17.724
  STEP: Creating service test in namespace statefulset-2290 @ 03/07/24 22:06:17.726
  STEP: Creating stateful set ss in namespace statefulset-2290 @ 03/07/24 22:06:17.732
  STEP: Waiting until all stateful set ss replicas will be running in namespace statefulset-2290 @ 03/07/24 22:06:17.742
  Mar  7 22:06:17.747: INFO: Found 0 stateful pods, waiting for 1
  Mar  7 22:06:27.752: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Confirming that stateful set scale up will not halt with unhealthy stateful pod @ 03/07/24 22:06:27.752
  Mar  7 22:06:27.761: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-2290 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Mar  7 22:06:27.914: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Mar  7 22:06:27.914: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Mar  7 22:06:27.914: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Mar  7 22:06:27.917: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=true
  Mar  7 22:06:37.925: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Mar  7 22:06:37.925: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Mar  7 22:06:37.974: INFO: POD   NODE       PHASE    GRACE  CONDITIONS
  Mar  7 22:06:37.974: INFO: ss-0  whiskas-1  Running         [{PodReadyToStartContainers True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:18 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:17 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:28 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:28 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:17 +0000 UTC  }]
  Mar  7 22:06:37.974: INFO: 
  Mar  7 22:06:37.974: INFO: StatefulSet ss has not reached scale 3, at 1
  Mar  7 22:06:38.986: INFO: Verifying statefulset ss doesn't scale past 3 for another 8.989887181s
  Mar  7 22:06:39.999: INFO: Verifying statefulset ss doesn't scale past 3 for another 7.97822871s
  Mar  7 22:06:41.011: INFO: Verifying statefulset ss doesn't scale past 3 for another 6.964274158s
  Mar  7 22:06:42.022: INFO: Verifying statefulset ss doesn't scale past 3 for another 5.953113394s
  Mar  7 22:06:43.033: INFO: Verifying statefulset ss doesn't scale past 3 for another 4.942068947s
  Mar  7 22:06:44.036: INFO: Verifying statefulset ss doesn't scale past 3 for another 3.931366464s
  Mar  7 22:06:45.048: INFO: Verifying statefulset ss doesn't scale past 3 for another 2.927747814s
  Mar  7 22:06:46.060: INFO: Verifying statefulset ss doesn't scale past 3 for another 1.916483073s
  Mar  7 22:06:47.071: INFO: Verifying statefulset ss doesn't scale past 3 for another 904.359902ms
  STEP: Scaling up stateful set ss to 3 replicas and waiting until all of them will be running in namespace statefulset-2290 @ 03/07/24 22:06:48.071
  Mar  7 22:06:48.083: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-2290 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Mar  7 22:06:48.158: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Mar  7 22:06:48.158: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Mar  7 22:06:48.158: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Mar  7 22:06:48.158: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-2290 exec ss-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Mar  7 22:06:48.234: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\nmv: can't rename '/tmp/index.html': No such file or directory\n+ true\n"
  Mar  7 22:06:48.234: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Mar  7 22:06:48.234: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Mar  7 22:06:48.234: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-2290 exec ss-2 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Mar  7 22:06:48.304: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\nmv: can't rename '/tmp/index.html': No such file or directory\n+ true\n"
  Mar  7 22:06:48.304: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Mar  7 22:06:48.304: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-2: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Mar  7 22:06:48.307: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=false
  Mar  7 22:06:58.318: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Mar  7 22:06:58.318: INFO: Waiting for pod ss-1 to enter Running - Ready=true, currently Running - Ready=true
  Mar  7 22:06:58.318: INFO: Waiting for pod ss-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Scale down will not halt with unhealthy stateful pod @ 03/07/24 22:06:58.318
  Mar  7 22:06:58.330: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-2290 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Mar  7 22:06:58.436: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Mar  7 22:06:58.436: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Mar  7 22:06:58.436: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Mar  7 22:06:58.436: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-2290 exec ss-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Mar  7 22:06:58.516: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Mar  7 22:06:58.516: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Mar  7 22:06:58.516: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Mar  7 22:06:58.516: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-2290 exec ss-2 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Mar  7 22:06:58.600: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Mar  7 22:06:58.600: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Mar  7 22:06:58.600: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-2: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Mar  7 22:06:58.600: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Mar  7 22:06:58.602: INFO: Waiting for statefulset status.readyReplicas to become 0, currently 3
  Mar  7 22:07:08.607: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Mar  7 22:07:08.607: INFO: Waiting for pod ss-1 to enter Running - Ready=false, currently Running - Ready=false
  Mar  7 22:07:08.607: INFO: Waiting for pod ss-2 to enter Running - Ready=false, currently Running - Ready=false
  Mar  7 22:07:08.618: INFO: POD   NODE       PHASE    GRACE  CONDITIONS
  Mar  7 22:07:08.618: INFO: ss-0  whiskas-1  Running         [{PodReadyToStartContainers True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:18 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:17 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:59 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:59 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:17 +0000 UTC  }]
  Mar  7 22:07:08.618: INFO: ss-1  whiskas-1  Running         [{PodReadyToStartContainers True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:39 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:38 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:59 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:59 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:37 +0000 UTC  }]
  Mar  7 22:07:08.618: INFO: ss-2  whiskas-2  Running         [{PodReadyToStartContainers True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:39 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:38 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:59 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:59 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:37 +0000 UTC  }]
  Mar  7 22:07:08.618: INFO: 
  Mar  7 22:07:08.618: INFO: StatefulSet ss has not reached scale 0, at 3
  Mar  7 22:07:09.623: INFO: POD   NODE       PHASE      GRACE  CONDITIONS
  Mar  7 22:07:09.623: INFO: ss-0  whiskas-1  Succeeded  30s    [{PodReadyToStartContainers False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:07:08 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:17 +0000 UTC PodCompleted } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:59 +0000 UTC PodCompleted } {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:59 +0000 UTC PodCompleted } {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:17 +0000 UTC  }]
  Mar  7 22:07:09.623: INFO: ss-1  whiskas-1  Succeeded  30s    [{PodReadyToStartContainers False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:07:09 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:38 +0000 UTC PodCompleted } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:59 +0000 UTC PodCompleted } {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:59 +0000 UTC PodCompleted } {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 22:06:37 +0000 UTC  }]
  Mar  7 22:07:09.623: INFO: 
  Mar  7 22:07:09.623: INFO: StatefulSet ss has not reached scale 0, at 2
  Mar  7 22:07:10.634: INFO: Verifying statefulset ss doesn't scale past 0 for another 7.992636718s
  Mar  7 22:07:11.643: INFO: Verifying statefulset ss doesn't scale past 0 for another 6.980834909s
  Mar  7 22:07:12.656: INFO: Verifying statefulset ss doesn't scale past 0 for another 5.972031468s
  Mar  7 22:07:13.672: INFO: Verifying statefulset ss doesn't scale past 0 for another 4.959337316s
  Mar  7 22:07:14.686: INFO: Verifying statefulset ss doesn't scale past 0 for another 3.942552833s
  Mar  7 22:07:15.700: INFO: Verifying statefulset ss doesn't scale past 0 for another 2.929496551s
  Mar  7 22:07:16.713: INFO: Verifying statefulset ss doesn't scale past 0 for another 1.915375995s
  Mar  7 22:07:17.727: INFO: Verifying statefulset ss doesn't scale past 0 for another 902.294839ms
  STEP: Scaling down stateful set ss to 0 replicas and waiting until none of pods will run in namespacestatefulset-2290 @ 03/07/24 22:07:18.727
  Mar  7 22:07:18.741: INFO: Scaling statefulset ss to 0
  Mar  7 22:07:18.774: INFO: Waiting for statefulset status.replicas updated to 0
  Mar  7 22:07:18.783: INFO: Deleting all statefulset in ns statefulset-2290
  Mar  7 22:07:18.790: INFO: Scaling statefulset ss to 0
  Mar  7 22:07:18.822: INFO: Waiting for statefulset status.replicas updated to 0
  Mar  7 22:07:18.830: INFO: Deleting statefulset ss
  Mar  7 22:07:18.872: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-2290" for this suite. @ 03/07/24 22:07:18.877
• [61.188 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance] [sig-node, Serial, Disruptive, Conformance]
test/e2e/node/taints.go:450
  STEP: Creating a kubernetes client @ 03/07/24 22:07:18.887
  Mar  7 22:07:18.887: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename taint-multiple-pods @ 03/07/24 22:07:18.888
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:07:18.904
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:07:18.906
  Mar  7 22:07:18.909: INFO: Waiting up to 1m0s for all nodes to be ready
  Mar  7 22:08:18.911: INFO: Waiting for terminating namespaces to be deleted...
  Mar  7 22:08:18.921: INFO: Starting informer...
  STEP: Starting pods... @ 03/07/24 22:08:18.921
  Mar  7 22:08:19.181: INFO: Pod1 is running on whiskas-1. Tainting Node
  Mar  7 22:08:21.432: INFO: Pod2 is running on whiskas-1. Tainting Node
  STEP: Trying to apply a taint on the Node @ 03/07/24 22:08:21.432
  STEP: verifying the node has the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 03/07/24 22:08:21.47
  STEP: Waiting for Pod1 and Pod2 to be deleted @ 03/07/24 22:08:21.485
  Mar  7 22:08:27.013: INFO: Noticed Pod "taint-eviction-b1" gets evicted.
  Mar  7 22:08:47.447: INFO: Noticed Pod "taint-eviction-b2" gets evicted.
  STEP: verifying the node doesn't have the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 03/07/24 22:08:47.49
  Mar  7 22:08:47.504: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "taint-multiple-pods-9159" for this suite. @ 03/07/24 22:08:47.516
• [88.647 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:332
  STEP: Creating a kubernetes client @ 03/07/24 22:08:47.535
  Mar  7 22:08:47.535: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 22:08:47.536
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:08:47.577
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:08:47.583
  STEP: Setting up server cert @ 03/07/24 22:08:47.637
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 22:08:47.855
  STEP: Deploying the webhook pod @ 03/07/24 22:08:47.868
  STEP: Wait for the deployment to be ready @ 03/07/24 22:08:47.888
  Mar  7 22:08:47.894: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 03/07/24 22:08:49.91
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:08:49.942
  Mar  7 22:08:50.942: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Mar  7 22:08:50.960: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-7179-crds.webhook.example.com via the AdmissionRegistration API @ 03/07/24 22:08:51.489
  STEP: Creating a custom resource that should be mutated by the webhook @ 03/07/24 22:08:51.544
  Mar  7 22:08:54.245: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-6310" for this suite. @ 03/07/24 22:08:54.256
  STEP: Destroying namespace "webhook-markers-3498" for this suite. @ 03/07/24 22:08:54.278
• [6.766 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:223
  STEP: Creating a kubernetes client @ 03/07/24 22:08:54.303
  Mar  7 22:08:54.303: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 22:08:54.305
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:08:54.354
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:08:54.361
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 22:08:54.367
  STEP: Saw pod success @ 03/07/24 22:08:56.402
  Mar  7 22:08:56.411: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-66710bd6-531a-4aad-a39d-2fbc9b537c05 container client-container: <nil>
  STEP: delete the pod @ 03/07/24 22:08:56.448
  Mar  7 22:08:56.489: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-9644" for this suite. @ 03/07/24 22:08:56.494
• [2.201 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Update Demo should scale a replication controller [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:357
  STEP: Creating a kubernetes client @ 03/07/24 22:08:56.506
  Mar  7 22:08:56.506: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 22:08:56.507
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:08:56.541
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:08:56.544
  STEP: creating a replication controller @ 03/07/24 22:08:56.548
  Mar  7 22:08:56.548: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 create -f -'
  Mar  7 22:08:56.654: INFO: stderr: ""
  Mar  7 22:08:56.654: INFO: stdout: "replicationcontroller/update-demo-nautilus created\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 03/07/24 22:08:56.654
  Mar  7 22:08:56.654: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Mar  7 22:08:56.707: INFO: stderr: ""
  Mar  7 22:08:56.707: INFO: stdout: "update-demo-nautilus-dsk2x update-demo-nautilus-sc2c8 "
  Mar  7 22:08:56.707: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods update-demo-nautilus-dsk2x -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Mar  7 22:08:56.747: INFO: stderr: ""
  Mar  7 22:08:56.747: INFO: stdout: ""
  Mar  7 22:08:56.747: INFO: update-demo-nautilus-dsk2x is created but not running
  Mar  7 22:09:01.747: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Mar  7 22:09:01.817: INFO: stderr: ""
  Mar  7 22:09:01.817: INFO: stdout: "update-demo-nautilus-dsk2x update-demo-nautilus-sc2c8 "
  Mar  7 22:09:01.817: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods update-demo-nautilus-dsk2x -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Mar  7 22:09:01.862: INFO: stderr: ""
  Mar  7 22:09:01.862: INFO: stdout: "true"
  Mar  7 22:09:01.862: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods update-demo-nautilus-dsk2x -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Mar  7 22:09:01.903: INFO: stderr: ""
  Mar  7 22:09:01.903: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Mar  7 22:09:01.903: INFO: validating pod update-demo-nautilus-dsk2x
  Mar  7 22:09:01.907: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Mar  7 22:09:01.907: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Mar  7 22:09:01.907: INFO: update-demo-nautilus-dsk2x is verified up and running
  Mar  7 22:09:01.907: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods update-demo-nautilus-sc2c8 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Mar  7 22:09:01.948: INFO: stderr: ""
  Mar  7 22:09:01.948: INFO: stdout: "true"
  Mar  7 22:09:01.948: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods update-demo-nautilus-sc2c8 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Mar  7 22:09:01.990: INFO: stderr: ""
  Mar  7 22:09:01.990: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Mar  7 22:09:01.990: INFO: validating pod update-demo-nautilus-sc2c8
  Mar  7 22:09:01.993: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Mar  7 22:09:01.993: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Mar  7 22:09:01.993: INFO: update-demo-nautilus-sc2c8 is verified up and running
  STEP: scaling down the replication controller @ 03/07/24 22:09:01.993
  Mar  7 22:09:01.993: INFO: scanned /root for discovery docs: <nil>
  Mar  7 22:09:01.994: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 scale rc update-demo-nautilus --replicas=1 --timeout=5m'
  Mar  7 22:09:03.059: INFO: stderr: ""
  Mar  7 22:09:03.060: INFO: stdout: "replicationcontroller/update-demo-nautilus scaled\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 03/07/24 22:09:03.06
  Mar  7 22:09:03.060: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Mar  7 22:09:03.132: INFO: stderr: ""
  Mar  7 22:09:03.132: INFO: stdout: "update-demo-nautilus-dsk2x update-demo-nautilus-sc2c8 "
  STEP: Replicas for name=update-demo: expected=1 actual=2 @ 03/07/24 22:09:03.132
  Mar  7 22:09:08.134: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Mar  7 22:09:08.239: INFO: stderr: ""
  Mar  7 22:09:08.239: INFO: stdout: "update-demo-nautilus-dsk2x "
  Mar  7 22:09:08.239: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods update-demo-nautilus-dsk2x -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Mar  7 22:09:08.281: INFO: stderr: ""
  Mar  7 22:09:08.281: INFO: stdout: "true"
  Mar  7 22:09:08.281: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods update-demo-nautilus-dsk2x -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Mar  7 22:09:08.322: INFO: stderr: ""
  Mar  7 22:09:08.322: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Mar  7 22:09:08.322: INFO: validating pod update-demo-nautilus-dsk2x
  Mar  7 22:09:08.325: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Mar  7 22:09:08.325: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Mar  7 22:09:08.325: INFO: update-demo-nautilus-dsk2x is verified up and running
  STEP: scaling up the replication controller @ 03/07/24 22:09:08.325
  Mar  7 22:09:08.326: INFO: scanned /root for discovery docs: <nil>
  Mar  7 22:09:08.326: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 scale rc update-demo-nautilus --replicas=2 --timeout=5m'
  Mar  7 22:09:09.394: INFO: stderr: ""
  Mar  7 22:09:09.394: INFO: stdout: "replicationcontroller/update-demo-nautilus scaled\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 03/07/24 22:09:09.394
  Mar  7 22:09:09.394: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Mar  7 22:09:09.503: INFO: stderr: ""
  Mar  7 22:09:09.503: INFO: stdout: "update-demo-nautilus-dsk2x update-demo-nautilus-m6842 "
  Mar  7 22:09:09.503: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods update-demo-nautilus-dsk2x -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Mar  7 22:09:09.567: INFO: stderr: ""
  Mar  7 22:09:09.567: INFO: stdout: "true"
  Mar  7 22:09:09.567: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods update-demo-nautilus-dsk2x -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Mar  7 22:09:09.608: INFO: stderr: ""
  Mar  7 22:09:09.608: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Mar  7 22:09:09.608: INFO: validating pod update-demo-nautilus-dsk2x
  Mar  7 22:09:09.610: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Mar  7 22:09:09.610: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Mar  7 22:09:09.610: INFO: update-demo-nautilus-dsk2x is verified up and running
  Mar  7 22:09:09.610: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods update-demo-nautilus-m6842 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Mar  7 22:09:09.652: INFO: stderr: ""
  Mar  7 22:09:09.652: INFO: stdout: "true"
  Mar  7 22:09:09.652: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods update-demo-nautilus-m6842 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Mar  7 22:09:09.693: INFO: stderr: ""
  Mar  7 22:09:09.693: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Mar  7 22:09:09.693: INFO: validating pod update-demo-nautilus-m6842
  Mar  7 22:09:09.696: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Mar  7 22:09:09.696: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Mar  7 22:09:09.696: INFO: update-demo-nautilus-m6842 is verified up and running
  STEP: using delete to clean up resources @ 03/07/24 22:09:09.696
  Mar  7 22:09:09.696: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 delete --grace-period=0 --force -f -'
  Mar  7 22:09:09.743: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Mar  7 22:09:09.743: INFO: stdout: "replicationcontroller \"update-demo-nautilus\" force deleted\n"
  Mar  7 22:09:09.743: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get rc,svc -l name=update-demo --no-headers'
  Mar  7 22:09:09.795: INFO: stderr: "No resources found in kubectl-5845 namespace.\n"
  Mar  7 22:09:09.795: INFO: stdout: ""
  Mar  7 22:09:09.795: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5845 get pods -l name=update-demo -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Mar  7 22:09:09.842: INFO: stderr: ""
  Mar  7 22:09:09.842: INFO: stdout: ""
  Mar  7 22:09:09.842: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-5845" for this suite. @ 03/07/24 22:09:09.846
• [13.347 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-apps] Job should manage the lifecycle of a job [Conformance] [sig-apps, Conformance]
test/e2e/apps/job.go:855
  STEP: Creating a kubernetes client @ 03/07/24 22:09:09.853
  Mar  7 22:09:09.853: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename job @ 03/07/24 22:09:09.853
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:09:09.87
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:09:09.874
  STEP: Creating a suspended job @ 03/07/24 22:09:09.879
  STEP: Patching the Job @ 03/07/24 22:09:09.885
  STEP: Watching for Job to be patched @ 03/07/24 22:09:09.896
  Mar  7 22:09:09.900: INFO: Event ADDED observed for Job e2e-z4wzx in namespace job-9750 with labels: map[e2e-job-label:e2e-z4wzx] and annotations: map[]
  Mar  7 22:09:09.900: INFO: Event MODIFIED found for Job e2e-z4wzx in namespace job-9750 with labels: map[e2e-job-label:e2e-z4wzx e2e-z4wzx:patched] and annotations: map[]
  STEP: Updating the job @ 03/07/24 22:09:09.9
  STEP: Watching for Job to be updated @ 03/07/24 22:09:09.909
  Mar  7 22:09:09.910: INFO: Event MODIFIED found for Job e2e-z4wzx in namespace job-9750 with labels: map[e2e-job-label:e2e-z4wzx e2e-z4wzx:patched] and annotations: map[updated:true]
  Mar  7 22:09:09.910: INFO: Found Job annotations: map[string]string{"updated":"true"}
  STEP: Listing all Jobs with LabelSelector @ 03/07/24 22:09:09.91
  Mar  7 22:09:09.913: INFO: Job: e2e-z4wzx as labels: map[e2e-job-label:e2e-z4wzx e2e-z4wzx:patched]
  STEP: Waiting for job to complete @ 03/07/24 22:09:09.913
  STEP: Delete a job collection with a labelselector @ 03/07/24 22:09:17.924
  STEP: Watching for Job to be deleted @ 03/07/24 22:09:17.959
  Mar  7 22:09:17.964: INFO: Event MODIFIED observed for Job e2e-z4wzx in namespace job-9750 with labels: map[e2e-job-label:e2e-z4wzx e2e-z4wzx:patched] and annotations: map[updated:true]
  Mar  7 22:09:17.964: INFO: Event MODIFIED observed for Job e2e-z4wzx in namespace job-9750 with labels: map[e2e-job-label:e2e-z4wzx e2e-z4wzx:patched] and annotations: map[updated:true]
  Mar  7 22:09:17.966: INFO: Event MODIFIED observed for Job e2e-z4wzx in namespace job-9750 with labels: map[e2e-job-label:e2e-z4wzx e2e-z4wzx:patched] and annotations: map[updated:true]
  Mar  7 22:09:17.966: INFO: Event MODIFIED observed for Job e2e-z4wzx in namespace job-9750 with labels: map[e2e-job-label:e2e-z4wzx e2e-z4wzx:patched] and annotations: map[updated:true]
  Mar  7 22:09:17.966: INFO: Event MODIFIED observed for Job e2e-z4wzx in namespace job-9750 with labels: map[e2e-job-label:e2e-z4wzx e2e-z4wzx:patched] and annotations: map[updated:true]
  Mar  7 22:09:17.966: INFO: Event DELETED found for Job e2e-z4wzx in namespace job-9750 with labels: map[e2e-job-label:e2e-z4wzx e2e-z4wzx:patched] and annotations: map[updated:true]
  STEP: Relist jobs to confirm deletion @ 03/07/24 22:09:17.966
  Mar  7 22:09:17.979: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-9750" for this suite. @ 03/07/24 22:09:17.987
• [8.155 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1764
  STEP: Creating a kubernetes client @ 03/07/24 22:09:18.008
  Mar  7 22:09:18.008: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 22:09:18.009
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:09:18.036
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:09:18.038
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 03/07/24 22:09:18.04
  Mar  7 22:09:18.040: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7683 run e2e-test-httpd-pod --restart=Never --pod-running-timeout=2m0s --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4'
  Mar  7 22:09:18.086: INFO: stderr: ""
  Mar  7 22:09:18.086: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: verifying the pod e2e-test-httpd-pod was created @ 03/07/24 22:09:18.086
  Mar  7 22:09:18.089: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7683 delete pods e2e-test-httpd-pod'
  Mar  7 22:09:19.297: INFO: stderr: ""
  Mar  7 22:09:19.297: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Mar  7 22:09:19.297: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-7683" for this suite. @ 03/07/24 22:09:19.3
• [1.298 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance] [sig-apps, Conformance]
test/e2e/apps/replica_set.go:132
  STEP: Creating a kubernetes client @ 03/07/24 22:09:19.306
  Mar  7 22:09:19.306: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename replicaset @ 03/07/24 22:09:19.307
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:09:19.325
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:09:19.327
  STEP: Given a Pod with a 'name' label pod-adoption-release is created @ 03/07/24 22:09:19.329
  STEP: When a replicaset with a matching selector is created @ 03/07/24 22:09:21.348
  STEP: Then the orphan pod is adopted @ 03/07/24 22:09:21.356
  STEP: When the matched label of one of its pods change @ 03/07/24 22:09:22.362
  Mar  7 22:09:22.382: INFO: Pod name pod-adoption-release: Found 1 pods out of 1
  STEP: Then the pod is released @ 03/07/24 22:09:22.393
  Mar  7 22:09:23.400: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-5070" for this suite. @ 03/07/24 22:09:23.403
• [4.103 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:498
  STEP: Creating a kubernetes client @ 03/07/24 22:09:23.409
  Mar  7 22:09:23.409: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 22:09:23.41
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:09:23.425
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:09:23.427
  STEP: Setting up server cert @ 03/07/24 22:09:23.499
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 22:09:23.874
  STEP: Deploying the webhook pod @ 03/07/24 22:09:23.888
  STEP: Wait for the deployment to be ready @ 03/07/24 22:09:23.902
  Mar  7 22:09:23.911: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 03/07/24 22:09:25.938
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:09:25.977
  Mar  7 22:09:26.979: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Creating a mutating webhook configuration @ 03/07/24 22:09:26.995
  STEP: Updating a mutating webhook configuration's rules to not include the create operation @ 03/07/24 22:09:27.048
  STEP: Creating a configMap that should not be mutated @ 03/07/24 22:09:27.069
  STEP: Patching a mutating webhook configuration's rules to include the create operation @ 03/07/24 22:09:27.107
  STEP: Creating a configMap that should be mutated @ 03/07/24 22:09:27.125
  Mar  7 22:09:27.233: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-7944" for this suite. @ 03/07/24 22:09:27.243
  STEP: Destroying namespace "webhook-markers-2917" for this suite. @ 03/07/24 22:09:27.255
• [3.858 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Secrets should patch a secret [Conformance] [sig-node, Conformance]
test/e2e/common/node/secrets.go:155
  STEP: Creating a kubernetes client @ 03/07/24 22:09:27.268
  Mar  7 22:09:27.268: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename secrets @ 03/07/24 22:09:27.268
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:09:27.324
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:09:27.327
  STEP: creating a secret @ 03/07/24 22:09:27.329
  STEP: listing secrets in all namespaces to ensure that there are more than zero @ 03/07/24 22:09:27.339
  STEP: patching the secret @ 03/07/24 22:09:27.341
  STEP: deleting the secret using a LabelSelector @ 03/07/24 22:09:27.349
  STEP: listing secrets in all namespaces, searching for label name and value in patch @ 03/07/24 22:09:27.356
  Mar  7 22:09:27.358: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-5667" for this suite. @ 03/07/24 22:09:27.361
• [0.099 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:58
  STEP: Creating a kubernetes client @ 03/07/24 22:09:27.367
  Mar  7 22:09:27.367: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename configmap @ 03/07/24 22:09:27.368
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:09:27.381
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:09:27.383
  STEP: Creating configMap with name configmap-test-volume-1bd1d069-104e-43fa-b416-dcf8b962944c @ 03/07/24 22:09:27.385
  STEP: Creating a pod to test consume configMaps @ 03/07/24 22:09:27.39
  STEP: Saw pod success @ 03/07/24 22:09:31.421
  Mar  7 22:09:31.430: INFO: Trying to get logs from node whiskas-1 pod pod-configmaps-f2bdd802-ae43-4985-8e17-aa4ad2979804 container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 22:09:31.45
  Mar  7 22:09:31.498: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-8958" for this suite. @ 03/07/24 22:09:31.506
• [4.152 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:89
  STEP: Creating a kubernetes client @ 03/07/24 22:09:31.52
  Mar  7 22:09:31.520: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename secrets @ 03/07/24 22:09:31.521
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:09:31.547
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:09:31.552
  STEP: Creating secret with name secret-test-map-9c50b992-22f2-4902-9bf0-9f741e9c5a46 @ 03/07/24 22:09:31.554
  STEP: Creating a pod to test consume secrets @ 03/07/24 22:09:31.561
  STEP: Saw pod success @ 03/07/24 22:09:33.577
  Mar  7 22:09:33.580: INFO: Trying to get logs from node whiskas-1 pod pod-secrets-89fb3668-4a66-4e07-a01a-7a40674e426a container secret-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 22:09:33.586
  Mar  7 22:09:33.608: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-7839" for this suite. @ 03/07/24 22:09:33.613
• [2.104 seconds]
------------------------------
[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance] [sig-auth, Conformance]
test/e2e/auth/certificates.go:200
  STEP: Creating a kubernetes client @ 03/07/24 22:09:33.625
  Mar  7 22:09:33.625: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename certificates @ 03/07/24 22:09:33.626
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:09:33.654
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:09:33.657
  STEP: getting /apis @ 03/07/24 22:09:34.17
  STEP: getting /apis/certificates.k8s.io @ 03/07/24 22:09:34.173
  STEP: getting /apis/certificates.k8s.io/v1 @ 03/07/24 22:09:34.173
  STEP: creating @ 03/07/24 22:09:34.174
  STEP: getting @ 03/07/24 22:09:34.195
  STEP: listing @ 03/07/24 22:09:34.196
  STEP: watching @ 03/07/24 22:09:34.198
  Mar  7 22:09:34.198: INFO: starting watch
  STEP: patching @ 03/07/24 22:09:34.199
  STEP: updating @ 03/07/24 22:09:34.205
  Mar  7 22:09:34.214: INFO: waiting for watch events with expected annotations
  Mar  7 22:09:34.214: INFO: saw patched and updated annotations
  STEP: getting /approval @ 03/07/24 22:09:34.214
  STEP: patching /approval @ 03/07/24 22:09:34.217
  STEP: updating /approval @ 03/07/24 22:09:34.223
  STEP: getting /status @ 03/07/24 22:09:34.23
  STEP: patching /status @ 03/07/24 22:09:34.233
  STEP: updating /status @ 03/07/24 22:09:34.241
  STEP: deleting @ 03/07/24 22:09:34.249
  STEP: deleting a collection @ 03/07/24 22:09:34.26
  Mar  7 22:09:34.299: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "certificates-709" for this suite. @ 03/07/24 22:09:34.309
• [0.695 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Proxy server should support proxy with --port 0 [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1838
  STEP: Creating a kubernetes client @ 03/07/24 22:09:34.321
  Mar  7 22:09:34.321: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 22:09:34.321
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:09:34.341
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:09:34.346
  STEP: starting the proxy server @ 03/07/24 22:09:34.348
  Mar  7 22:09:34.348: INFO: Asynchronously running '/usr/local/bin/kubectl kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-2110 proxy -p 0 --disable-filter'
  STEP: curling proxy /api/ output @ 03/07/24 22:09:34.381
  Mar  7 22:09:34.388: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-2110" for this suite. @ 03/07/24 22:09:34.391
• [0.077 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:119
  STEP: Creating a kubernetes client @ 03/07/24 22:09:34.398
  Mar  7 22:09:34.398: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 22:09:34.399
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:09:34.412
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:09:34.414
  STEP: Setting up server cert @ 03/07/24 22:09:34.477
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 22:09:34.806
  STEP: Deploying the webhook pod @ 03/07/24 22:09:34.813
  STEP: Wait for the deployment to be ready @ 03/07/24 22:09:34.83
  Mar  7 22:09:34.834: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 03/07/24 22:09:36.843
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:09:36.857
  Mar  7 22:09:37.858: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: fetching the /apis discovery document @ 03/07/24 22:09:37.874
  STEP: finding the admissionregistration.k8s.io API group in the /apis discovery document @ 03/07/24 22:09:37.878
  STEP: finding the admissionregistration.k8s.io/v1 API group/version in the /apis discovery document @ 03/07/24 22:09:37.878
  STEP: fetching the /apis/admissionregistration.k8s.io discovery document @ 03/07/24 22:09:37.878
  STEP: finding the admissionregistration.k8s.io/v1 API group/version in the /apis/admissionregistration.k8s.io discovery document @ 03/07/24 22:09:37.881
  STEP: fetching the /apis/admissionregistration.k8s.io/v1 discovery document @ 03/07/24 22:09:37.881
  STEP: finding mutatingwebhookconfigurations and validatingwebhookconfigurations resources in the /apis/admissionregistration.k8s.io/v1 discovery document @ 03/07/24 22:09:37.884
  Mar  7 22:09:37.967: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-1224" for this suite. @ 03/07/24 22:09:37.97
  STEP: Destroying namespace "webhook-markers-3707" for this suite. @ 03/07/24 22:09:37.981
• [3.591 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Conformance] [sig-apps, Conformance]
test/e2e/apps/job.go:408
  STEP: Creating a kubernetes client @ 03/07/24 22:09:37.989
  Mar  7 22:09:37.989: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename job @ 03/07/24 22:09:37.99
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:09:38.01
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:09:38.012
  STEP: Creating Indexed job @ 03/07/24 22:09:38.014
  STEP: Ensuring job reaches completions @ 03/07/24 22:09:38.02
  STEP: Ensuring pods with index for job exist @ 03/07/24 22:09:46.029
  Mar  7 22:09:46.041: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-5809" for this suite. @ 03/07/24 22:09:46.051
• [8.087 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/garbage_collector.go:714
  STEP: Creating a kubernetes client @ 03/07/24 22:09:46.077
  Mar  7 22:09:46.078: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename gc @ 03/07/24 22:09:46.08
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:09:46.125
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:09:46.13
  STEP: create the rc1 @ 03/07/24 22:09:46.139
  STEP: create the rc2 @ 03/07/24 22:09:46.149
  STEP: set half of pods created by rc simpletest-rc-to-be-deleted to have rc simpletest-rc-to-stay as owner as well @ 03/07/24 22:09:52.176
  STEP: delete the rc simpletest-rc-to-be-deleted @ 03/07/24 22:09:54.14
  STEP: wait for the rc to be deleted @ 03/07/24 22:09:54.172
  Mar  7 22:09:59.198: INFO: 73 pods remaining
  Mar  7 22:09:59.198: INFO: 73 pods has nil DeletionTimestamp
  Mar  7 22:09:59.198: INFO: 
  STEP: Gathering metrics @ 03/07/24 22:10:04.219
  W0307 22:10:04.230350      20 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Mar  7 22:10:04.230: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Mar  7 22:10:04.230: INFO: Deleting pod "simpletest-rc-to-be-deleted-268x5" in namespace "gc-2840"
  Mar  7 22:10:04.254: INFO: Deleting pod "simpletest-rc-to-be-deleted-2jlf8" in namespace "gc-2840"
  Mar  7 22:10:04.274: INFO: Deleting pod "simpletest-rc-to-be-deleted-2kdfb" in namespace "gc-2840"
  Mar  7 22:10:04.300: INFO: Deleting pod "simpletest-rc-to-be-deleted-2xzhr" in namespace "gc-2840"
  Mar  7 22:10:04.347: INFO: Deleting pod "simpletest-rc-to-be-deleted-2zxw9" in namespace "gc-2840"
  Mar  7 22:10:04.378: INFO: Deleting pod "simpletest-rc-to-be-deleted-4b9qp" in namespace "gc-2840"
  Mar  7 22:10:04.425: INFO: Deleting pod "simpletest-rc-to-be-deleted-4prwm" in namespace "gc-2840"
  Mar  7 22:10:04.451: INFO: Deleting pod "simpletest-rc-to-be-deleted-4t246" in namespace "gc-2840"
  Mar  7 22:10:04.472: INFO: Deleting pod "simpletest-rc-to-be-deleted-4zn67" in namespace "gc-2840"
  Mar  7 22:10:04.517: INFO: Deleting pod "simpletest-rc-to-be-deleted-55kqn" in namespace "gc-2840"
  Mar  7 22:10:04.560: INFO: Deleting pod "simpletest-rc-to-be-deleted-56jgf" in namespace "gc-2840"
  Mar  7 22:10:04.584: INFO: Deleting pod "simpletest-rc-to-be-deleted-5dgwb" in namespace "gc-2840"
  Mar  7 22:10:04.624: INFO: Deleting pod "simpletest-rc-to-be-deleted-5tqr6" in namespace "gc-2840"
  Mar  7 22:10:04.679: INFO: Deleting pod "simpletest-rc-to-be-deleted-5vtx6" in namespace "gc-2840"
  Mar  7 22:10:04.715: INFO: Deleting pod "simpletest-rc-to-be-deleted-5z2sz" in namespace "gc-2840"
  Mar  7 22:10:04.773: INFO: Deleting pod "simpletest-rc-to-be-deleted-6kgjk" in namespace "gc-2840"
  Mar  7 22:10:04.810: INFO: Deleting pod "simpletest-rc-to-be-deleted-6nzzl" in namespace "gc-2840"
  Mar  7 22:10:04.880: INFO: Deleting pod "simpletest-rc-to-be-deleted-6qbfd" in namespace "gc-2840"
  Mar  7 22:10:04.960: INFO: Deleting pod "simpletest-rc-to-be-deleted-7f542" in namespace "gc-2840"
  Mar  7 22:10:05.018: INFO: Deleting pod "simpletest-rc-to-be-deleted-7ftpx" in namespace "gc-2840"
  Mar  7 22:10:05.097: INFO: Deleting pod "simpletest-rc-to-be-deleted-8bd2g" in namespace "gc-2840"
  Mar  7 22:10:05.131: INFO: Deleting pod "simpletest-rc-to-be-deleted-8pw6x" in namespace "gc-2840"
  Mar  7 22:10:05.169: INFO: Deleting pod "simpletest-rc-to-be-deleted-8vnnw" in namespace "gc-2840"
  Mar  7 22:10:05.247: INFO: Deleting pod "simpletest-rc-to-be-deleted-8zrx2" in namespace "gc-2840"
  Mar  7 22:10:05.298: INFO: Deleting pod "simpletest-rc-to-be-deleted-972lm" in namespace "gc-2840"
  Mar  7 22:10:05.362: INFO: Deleting pod "simpletest-rc-to-be-deleted-9jps9" in namespace "gc-2840"
  Mar  7 22:10:05.411: INFO: Deleting pod "simpletest-rc-to-be-deleted-9lvlg" in namespace "gc-2840"
  Mar  7 22:10:05.493: INFO: Deleting pod "simpletest-rc-to-be-deleted-9qvhq" in namespace "gc-2840"
  Mar  7 22:10:05.547: INFO: Deleting pod "simpletest-rc-to-be-deleted-bds7t" in namespace "gc-2840"
  Mar  7 22:10:05.610: INFO: Deleting pod "simpletest-rc-to-be-deleted-cknzq" in namespace "gc-2840"
  Mar  7 22:10:05.672: INFO: Deleting pod "simpletest-rc-to-be-deleted-cll25" in namespace "gc-2840"
  Mar  7 22:10:05.743: INFO: Deleting pod "simpletest-rc-to-be-deleted-d5p8c" in namespace "gc-2840"
  Mar  7 22:10:05.828: INFO: Deleting pod "simpletest-rc-to-be-deleted-dfhjf" in namespace "gc-2840"
  Mar  7 22:10:05.886: INFO: Deleting pod "simpletest-rc-to-be-deleted-dn869" in namespace "gc-2840"
  Mar  7 22:10:05.926: INFO: Deleting pod "simpletest-rc-to-be-deleted-f6hsf" in namespace "gc-2840"
  Mar  7 22:10:05.974: INFO: Deleting pod "simpletest-rc-to-be-deleted-fd67x" in namespace "gc-2840"
  Mar  7 22:10:06.034: INFO: Deleting pod "simpletest-rc-to-be-deleted-fgz5z" in namespace "gc-2840"
  Mar  7 22:10:06.057: INFO: Deleting pod "simpletest-rc-to-be-deleted-fwvr7" in namespace "gc-2840"
  Mar  7 22:10:06.088: INFO: Deleting pod "simpletest-rc-to-be-deleted-g5m22" in namespace "gc-2840"
  Mar  7 22:10:06.141: INFO: Deleting pod "simpletest-rc-to-be-deleted-gcdwk" in namespace "gc-2840"
  Mar  7 22:10:06.184: INFO: Deleting pod "simpletest-rc-to-be-deleted-gdddk" in namespace "gc-2840"
  Mar  7 22:10:06.218: INFO: Deleting pod "simpletest-rc-to-be-deleted-h7kph" in namespace "gc-2840"
  Mar  7 22:10:06.267: INFO: Deleting pod "simpletest-rc-to-be-deleted-hf4j9" in namespace "gc-2840"
  Mar  7 22:10:06.313: INFO: Deleting pod "simpletest-rc-to-be-deleted-hk4k4" in namespace "gc-2840"
  Mar  7 22:10:06.383: INFO: Deleting pod "simpletest-rc-to-be-deleted-hm2sj" in namespace "gc-2840"
  Mar  7 22:10:06.441: INFO: Deleting pod "simpletest-rc-to-be-deleted-hp7l5" in namespace "gc-2840"
  Mar  7 22:10:06.479: INFO: Deleting pod "simpletest-rc-to-be-deleted-hskjq" in namespace "gc-2840"
  Mar  7 22:10:06.539: INFO: Deleting pod "simpletest-rc-to-be-deleted-hv452" in namespace "gc-2840"
  Mar  7 22:10:06.599: INFO: Deleting pod "simpletest-rc-to-be-deleted-hvv8v" in namespace "gc-2840"
  Mar  7 22:10:06.681: INFO: Deleting pod "simpletest-rc-to-be-deleted-k2fnm" in namespace "gc-2840"
  Mar  7 22:10:06.782: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-2840" for this suite. @ 03/07/24 22:10:06.811
• [20.785 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:195
  STEP: Creating a kubernetes client @ 03/07/24 22:10:06.862
  Mar  7 22:10:06.862: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 22:10:06.863
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:10:06.972
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:10:06.977
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 22:10:06.993
  STEP: Saw pod success @ 03/07/24 22:10:11.041
  Mar  7 22:10:11.050: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-3aa22c1d-561b-4c21-8c91-7e63bc359056 container client-container: <nil>
  STEP: delete the pod @ 03/07/24 22:10:11.06
  Mar  7 22:10:11.102: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4722" for this suite. @ 03/07/24 22:10:11.108
• [4.259 seconds]
------------------------------
SSS
------------------------------
[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance] [sig-storage, Conformance]
test/e2e/storage/csi_inline.go:50
  STEP: Creating a kubernetes client @ 03/07/24 22:10:11.122
  Mar  7 22:10:11.122: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename csiinlinevolumes @ 03/07/24 22:10:11.123
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:10:11.157
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:10:11.161
  STEP: creating @ 03/07/24 22:10:11.165
  STEP: getting @ 03/07/24 22:10:11.189
  STEP: listing in namespace @ 03/07/24 22:10:11.196
  STEP: patching @ 03/07/24 22:10:11.2
  STEP: deleting @ 03/07/24 22:10:11.218
  Mar  7 22:10:11.229: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csiinlinevolumes-3723" for this suite. @ 03/07/24 22:10:11.233
• [0.120 seconds]
------------------------------
SSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:90
  STEP: Creating a kubernetes client @ 03/07/24 22:10:11.242
  Mar  7 22:10:11.242: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename configmap @ 03/07/24 22:10:11.242
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:10:11.264
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:10:11.266
  STEP: Creating configMap with name configmap-test-volume-map-6f990b3a-a61b-438f-80ad-7ba6687dcaa3 @ 03/07/24 22:10:11.269
  STEP: Creating a pod to test consume configMaps @ 03/07/24 22:10:11.275
  STEP: Saw pod success @ 03/07/24 22:10:15.305
  Mar  7 22:10:15.315: INFO: Trying to get logs from node whiskas-1 pod pod-configmaps-aaa5ce01-3d99-4780-91d7-7672bc13953b container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 22:10:15.329
  Mar  7 22:10:15.351: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-7661" for this suite. @ 03/07/24 22:10:15.354
• [4.122 seconds]
------------------------------
[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:185
  STEP: Creating a kubernetes client @ 03/07/24 22:10:15.363
  Mar  7 22:10:15.363: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename deployment @ 03/07/24 22:10:15.364
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:10:15.384
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:10:15.386
  STEP: creating a Deployment @ 03/07/24 22:10:15.391
  STEP: waiting for Deployment to be created @ 03/07/24 22:10:15.398
  STEP: waiting for all Replicas to be Ready @ 03/07/24 22:10:15.399
  Mar  7 22:10:15.403: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Mar  7 22:10:15.403: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Mar  7 22:10:15.418: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Mar  7 22:10:15.418: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Mar  7 22:10:15.438: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Mar  7 22:10:15.438: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Mar  7 22:10:15.495: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Mar  7 22:10:15.495: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Mar  7 22:10:16.664: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1 and labels map[test-deployment-static:true]
  Mar  7 22:10:16.664: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1 and labels map[test-deployment-static:true]
  Mar  7 22:10:16.823: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2 and labels map[test-deployment-static:true]
  STEP: patching the Deployment @ 03/07/24 22:10:16.823
  Mar  7 22:10:16.840: INFO: observed event type ADDED
  STEP: waiting for Replicas to scale @ 03/07/24 22:10:16.84
  Mar  7 22:10:16.842: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0
  Mar  7 22:10:16.842: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0
  Mar  7 22:10:16.842: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0
  Mar  7 22:10:16.842: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0
  Mar  7 22:10:16.842: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0
  Mar  7 22:10:16.842: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0
  Mar  7 22:10:16.842: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0
  Mar  7 22:10:16.842: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 0
  Mar  7 22:10:16.842: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1
  Mar  7 22:10:16.842: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1
  Mar  7 22:10:16.843: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2
  Mar  7 22:10:16.844: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2
  Mar  7 22:10:16.844: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2
  Mar  7 22:10:16.844: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2
  Mar  7 22:10:16.866: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2
  Mar  7 22:10:16.866: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2
  Mar  7 22:10:16.932: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2
  Mar  7 22:10:16.932: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2
  Mar  7 22:10:16.964: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1
  Mar  7 22:10:16.964: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1
  Mar  7 22:10:16.991: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1
  Mar  7 22:10:16.991: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1
  Mar  7 22:10:17.763: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2
  Mar  7 22:10:17.763: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2
  Mar  7 22:10:17.806: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1
  STEP: listing Deployments @ 03/07/24 22:10:17.806
  Mar  7 22:10:17.809: INFO: Found test-deployment with labels: map[test-deployment:patched test-deployment-static:true]
  STEP: updating the Deployment @ 03/07/24 22:10:17.809
  Mar  7 22:10:17.820: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1
  STEP: fetching the DeploymentStatus @ 03/07/24 22:10:17.82
  Mar  7 22:10:17.824: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Mar  7 22:10:17.842: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Mar  7 22:10:17.904: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Mar  7 22:10:17.923: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Mar  7 22:10:17.938: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Mar  7 22:10:18.710: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Mar  7 22:10:18.762: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Mar  7 22:10:18.780: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Mar  7 22:10:19.871: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 3 and labels map[test-deployment:updated test-deployment-static:true]
  STEP: patching the DeploymentStatus @ 03/07/24 22:10:19.91
  STEP: fetching the DeploymentStatus @ 03/07/24 22:10:19.923
  Mar  7 22:10:19.927: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1
  Mar  7 22:10:19.927: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1
  Mar  7 22:10:19.927: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1
  Mar  7 22:10:19.928: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1
  Mar  7 22:10:19.928: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 1
  Mar  7 22:10:19.928: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2
  Mar  7 22:10:19.928: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2
  Mar  7 22:10:19.928: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 2
  Mar  7 22:10:19.928: INFO: observed Deployment test-deployment in namespace deployment-5811 with ReadyReplicas 3
  STEP: deleting the Deployment @ 03/07/24 22:10:19.928
  Mar  7 22:10:19.938: INFO: observed event type MODIFIED
  Mar  7 22:10:19.938: INFO: observed event type MODIFIED
  Mar  7 22:10:19.938: INFO: observed event type MODIFIED
  Mar  7 22:10:19.938: INFO: observed event type MODIFIED
  Mar  7 22:10:19.938: INFO: observed event type MODIFIED
  Mar  7 22:10:19.939: INFO: observed event type MODIFIED
  Mar  7 22:10:19.939: INFO: observed event type MODIFIED
  Mar  7 22:10:19.939: INFO: observed event type MODIFIED
  Mar  7 22:10:19.939: INFO: observed event type MODIFIED
  Mar  7 22:10:19.939: INFO: observed event type MODIFIED
  Mar  7 22:10:19.939: INFO: observed event type MODIFIED
  Mar  7 22:10:19.939: INFO: observed event type MODIFIED
  Mar  7 22:10:19.943: INFO: Log out all the ReplicaSets if there is no deployment created
  Mar  7 22:10:19.948: INFO: ReplicaSet "test-deployment-64fd565c98":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=26) "test-deployment-64fd565c98",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5811",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "1de5f69d-1e2c-42a3-aeaa-afa51b42d445",
      ResourceVersion: (string) (len=5) "94896",
      Generation: (int64) 4,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446216,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=22) "test-deployment-static": (string) (len=4) "true",
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "9fc8475d-40d0-4092-9d48-1a493b7baa7f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446219,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 39 66 63 38  34 37 35 64 2d 34 30 64  |":\"9fc8475d-40d|
              00000130  30 2d 34 30 39 32 2d 39  64 34 38 2d 31 61 34 39  |0-4092-9d48-1a49|
              00000140  33 62 37 62 61 61 37 66  5c 22 7d 22 3a 7b 7d 7d  |3b7baa7f\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446219,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=25) "registry.k8s.io/pause:3.9",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(2),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 4,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Mar  7 22:10:19.956: INFO: pod: "test-deployment-64fd565c98-7b5lc":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-64fd565c98-7b5lc",
      GenerateName: (string) (len=27) "test-deployment-64fd565c98-",
      Namespace: (string) (len=15) "deployment-5811",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "957ca36d-ebb3-454f-83d6-46f6e66f1ad7",
      ResourceVersion: (string) (len=5) "94862",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446217,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446220,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      DeletionGracePeriodSeconds: (*int64)(2),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "14c6644fbeed2fd5fd94718f181e1b1f992fa02d9149c6b09a120cb384f62d51",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.234/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.234/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=26) "test-deployment-64fd565c98",
          UID: (types.UID) (len=36) "1de5f69d-1e2c-42a3-aeaa-afa51b42d445",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446217,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  31 64 65 35 66 36 39 64  |uid\":\"1de5f69d|
              000000a0  2d 31 65 32 63 2d 34 32  61 33 2d 61 65 61 61 2d  |-1e2c-42a3-aeaa-|
              000000b0  61 66 61 35 31 62 34 32  64 34 34 35 5c 22 7d 22  |afa51b42d445\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446218,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446218,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 36 30 2e 32 33  34 5c 22 7d 22 3a 7b 22  |.1.60.234\"}":{"|
              00000270  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              00000280  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              00000290  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-kz92l",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-kz92l",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(2),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446218,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446217,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446218,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446218,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446217,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) (len=11) "10.1.60.234",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.60.234"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446217,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845446218,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          ImageID: (string) (len=93) "registry.k8s.io/pause@sha256:7031c1b283388d2c2e09b57badb803c05ebed362dc88d84b480cc47f72a21097",
          ContainerID: (string) (len=77) "containerd://bc0992d8fc77b2d81dd6dce5359ddb68739a80f979c142ff4b9fda666f99c91c",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Mar  7 22:10:19.957: INFO: pod: "test-deployment-64fd565c98-vxmtl":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-64fd565c98-vxmtl",
      GenerateName: (string) (len=27) "test-deployment-64fd565c98-",
      Namespace: (string) (len=15) "deployment-5811",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "822f4f8a-527d-4b39-898e-b60a87e7dc50",
      ResourceVersion: (string) (len=5) "94890",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446216,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446221,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      DeletionGracePeriodSeconds: (*int64)(2),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "047d7634fd51c74b033bcb3f2a56abaee1f828e898cf4bd0dba930586059b59d",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=13) "10.1.51.96/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=13) "10.1.51.96/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=26) "test-deployment-64fd565c98",
          UID: (types.UID) (len=36) "1de5f69d-1e2c-42a3-aeaa-afa51b42d445",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446216,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  31 64 65 35 66 36 39 64  |uid\":\"1de5f69d|
              000000a0  2d 31 65 32 63 2d 34 32  61 33 2d 61 65 61 61 2d  |-1e2c-42a3-aeaa-|
              000000b0  61 66 61 35 31 62 34 32  64 34 34 35 5c 22 7d 22  |afa51b42d445\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446217,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446217,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=659) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 35 31 2e 39 36  5c 22 7d 22 3a 7b 22 2e  |.1.51.96\"}":{".|
              00000270  22 3a 7b 7d 2c 22 66 3a  69 70 22 3a 7b 7d 7d 7d  |":{},"f:ip":{}}}|
              00000280  2c 22 66 3a 73 74 61 72  74 54 69 6d 65 22 3a 7b  |,"f:startTime":{|
              00000290  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-2v27n",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-2v27n",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(2),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446217,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446216,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446217,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446217,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446216,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) (len=10) "10.1.51.96",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=10) "10.1.51.96"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446216,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845446217,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          ImageID: (string) (len=93) "registry.k8s.io/pause@sha256:7031c1b283388d2c2e09b57badb803c05ebed362dc88d84b480cc47f72a21097",
          ContainerID: (string) (len=77) "containerd://61c81063591dc7edf053e64c9334cdd0c97f16b26d4e58e9ee79b943ab3d17a1",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Mar  7 22:10:19.958: INFO: ReplicaSet "test-deployment-69d58987ff":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=26) "test-deployment-69d58987ff",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5811",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "1342d323-13df-4564-8e95-fd79379963d6",
      ResourceVersion: (string) (len=5) "94801",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446215,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "69d58987ff",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "9fc8475d-40d0-4092-9d48-1a493b7baa7f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446217,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 39 66 63 38  34 37 35 64 2d 34 30 64  |":\"9fc8475d-40d|
              00000130  30 2d 34 30 39 32 2d 39  64 34 38 2d 31 61 34 39  |0-4092-9d48-1a49|
              00000140  33 62 37 62 61 61 37 66  5c 22 7d 22 3a 7b 7d 7d  |3b7baa7f\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446217,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=10) "69d58987ff",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "69d58987ff",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(1),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Mar  7 22:10:19.962: INFO: ReplicaSet "test-deployment-79ff746c4":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=25) "test-deployment-79ff746c4",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5811",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "98d13948-59ff-4b17-8a3a-11409ac1f30c",
      ResourceVersion: (string) (len=5) "94885",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446217,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "3"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "9fc8475d-40d0-4092-9d48-1a493b7baa7f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446218,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 39 66 63 38  34 37 35 64 2d 34 30 64  |":\"9fc8475d-40d|
              00000130  30 2d 34 30 39 32 2d 39  64 34 38 2d 31 61 34 39  |0-4092-9d48-1a49|
              00000140  33 62 37 62 61 61 37 66  5c 22 7d 22 3a 7b 7d 7d  |3b7baa7f\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446219,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(2),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(1),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 2,
      FullyLabeledReplicas: (int32) 2,
      ReadyReplicas: (int32) 2,
      AvailableReplicas: (int32) 2,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Mar  7 22:10:19.966: INFO: pod: "test-deployment-79ff746c4-k5l2p":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "test-deployment-79ff746c4-k5l2p",
      GenerateName: (string) (len=26) "test-deployment-79ff746c4-",
      Namespace: (string) (len=15) "deployment-5811",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "0432b5f8-5823-4216-a763-16ca2f765f15",
      ResourceVersion: (string) (len=5) "94841",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446217,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "8929284c31548aca81ed00c6e87536ea495e542604a5fba0ad4ff7f8c2d7f9ee",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.51.112/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.51.112/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=25) "test-deployment-79ff746c4",
          UID: (types.UID) (len=36) "98d13948-59ff-4b17-8a3a-11409ac1f30c",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446217,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  39 38 64 31 33 39 34 38  |uid\":\"98d13948|
              000000a0  2d 35 39 66 66 2d 34 62  31 37 2d 38 61 33 61 2d  |-59ff-4b17-8a3a-|
              000000b0  31 31 34 30 39 61 63 31  66 33 30 63 5c 22 7d 22  |11409ac1f30c\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446218,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446218,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 35 31 2e 31 31  32 5c 22 7d 22 3a 7b 22  |.1.51.112\"}":{"|
              00000270  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              00000280  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              00000290  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-5jkkf",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-5jkkf",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(1),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446218,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446217,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446218,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446218,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446217,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) (len=11) "10.1.51.112",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.51.112"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446217,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845446218,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://8908a376931062257f4f9c0c5c19223dce4908db91929ba774e4a0e3e1d4ce15",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Mar  7 22:10:19.967: INFO: pod: "test-deployment-79ff746c4-zjrv9":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "test-deployment-79ff746c4-zjrv9",
      GenerateName: (string) (len=26) "test-deployment-79ff746c4-",
      Namespace: (string) (len=15) "deployment-5811",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "cd421e41-bce5-4c95-bce4-df2b055619a9",
      ResourceVersion: (string) (len=5) "94883",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446218,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "eea4233de4049c0bd304c8a0222d57094a6981dff6442ee316390b3f6e19bd76",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.233/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.233/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=25) "test-deployment-79ff746c4",
          UID: (types.UID) (len=36) "98d13948-59ff-4b17-8a3a-11409ac1f30c",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446218,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  39 38 64 31 33 39 34 38  |uid\":\"98d13948|
              000000a0  2d 35 39 66 66 2d 34 62  31 37 2d 38 61 33 61 2d  |-59ff-4b17-8a3a-|
              000000b0  31 31 34 30 39 61 63 31  66 33 30 63 5c 22 7d 22  |11409ac1f30c\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446219,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446219,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 36 30 2e 32 33  33 5c 22 7d 22 3a 7b 22  |.1.60.233\"}":{"|
              00000270  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              00000280  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              00000290  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-d9x84",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-d9x84",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(1),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446219,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446218,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446219,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446219,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446218,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) (len=11) "10.1.60.233",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.60.233"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446218,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845446219,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://d13d9df365946f8de960d576b8cefc85e02a4ced9fb244aaf39297f10b9e7da5",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Mar  7 22:10:19.968: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-5811" for this suite. @ 03/07/24 22:10:19.973
• [4.639 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/containers.go:75
  STEP: Creating a kubernetes client @ 03/07/24 22:10:20.003
  Mar  7 22:10:20.003: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename containers @ 03/07/24 22:10:20.003
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:10:20.021
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:10:20.027
  STEP: Creating a pod to test override command @ 03/07/24 22:10:20.029
  STEP: Saw pod success @ 03/07/24 22:10:24.054
  Mar  7 22:10:24.057: INFO: Trying to get logs from node whiskas-1 pod client-containers-3b7d98f8-adfd-4de4-8c94-94b4be8b7478 container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 22:10:24.062
  Mar  7 22:10:24.080: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-5584" for this suite. @ 03/07/24 22:10:24.084
• [4.090 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance] [sig-node, Serial, Disruptive, Conformance]
test/e2e/node/taints.go:290
  STEP: Creating a kubernetes client @ 03/07/24 22:10:24.093
  Mar  7 22:10:24.093: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename taint-single-pod @ 03/07/24 22:10:24.093
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:10:24.111
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:10:24.113
  Mar  7 22:10:24.115: INFO: Waiting up to 1m0s for all nodes to be ready
  Mar  7 22:11:24.116: INFO: Waiting for terminating namespaces to be deleted...
  Mar  7 22:11:24.127: INFO: Starting informer...
  STEP: Starting pod... @ 03/07/24 22:11:24.128
  Mar  7 22:11:24.372: INFO: Pod is running on whiskas-1. Tainting Node
  STEP: Trying to apply a taint on the Node @ 03/07/24 22:11:24.372
  STEP: verifying the node has the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 03/07/24 22:11:24.405
  STEP: Waiting short time to make sure Pod is queued for deletion @ 03/07/24 22:11:24.416
  Mar  7 22:11:24.416: INFO: Pod wasn't evicted. Proceeding
  Mar  7 22:11:24.416: INFO: Removing taint from Node
  STEP: verifying the node doesn't have the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 03/07/24 22:11:24.434
  STEP: Waiting some time to make sure that toleration time passed. @ 03/07/24 22:11:24.438
  Mar  7 22:12:39.441: INFO: Pod wasn't evicted. Test successful
  Mar  7 22:12:39.441: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "taint-single-pod-9026" for this suite. @ 03/07/24 22:12:39.453
• [135.381 seconds]
------------------------------
SSSSS
------------------------------
[sig-apps] Deployment Deployment should have a working scale subresource [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:150
  STEP: Creating a kubernetes client @ 03/07/24 22:12:39.475
  Mar  7 22:12:39.475: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename deployment @ 03/07/24 22:12:39.477
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:12:39.522
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:12:39.526
  Mar  7 22:12:39.530: INFO: Creating simple deployment test-new-deployment
  Mar  7 22:12:39.543: INFO: new replicaset for deployment "test-new-deployment" is yet to be created
  STEP: getting scale subresource @ 03/07/24 22:12:41.579
  STEP: updating a scale subresource @ 03/07/24 22:12:41.588
  STEP: verifying the deployment Spec.Replicas was modified @ 03/07/24 22:12:41.616
  STEP: Patch a scale subresource @ 03/07/24 22:12:41.625
  Mar  7 22:12:41.651: INFO: Deployment "test-new-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=19) "test-new-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5238",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a57b591c-8ffc-46a3-add3-4cbd37e00c1d",
      ResourceVersion: (string) (len=5) "95270",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446359,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)(<nil>),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=28) {
              00000000  7b 22 66 3a 73 70 65 63  22 3a 7b 22 66 3a 72 65  |{"f:spec":{"f:re|
              00000010  70 6c 69 63 61 73 22 3a  7b 7d 7d 7d              |plicas":{}}}|
            }
          }),
          Subresource: (string) (len=5) "scale"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446359,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=619) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |onds":{},"f:revi|
              00000060  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000070  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              00000090  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000a0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000b0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000c0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000d0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000e0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              000000f0  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000100  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000110  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000120  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000130  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000140  6d 65 5c 22 3a 5c 22 68  74 74 70 64 5c 22 7d 22  |me\":\"httpd\"}"|
              00000150  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000160  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000170  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000180  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000190  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              000001a0  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              000001b0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001c0  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000001d0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000001e0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000001f0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              00000200  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              00000210  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              00000220  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000230  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000240  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000250  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000260  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446361,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(4),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446361,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446361,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446361,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446359,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=72) "ReplicaSet \"test-new-deployment-557759b7c7\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Mar  7 22:12:41.659: INFO: New ReplicaSet "test-new-deployment-557759b7c7" of Deployment "test-new-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-new-deployment-557759b7c7",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5238",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ee42973b-7194-47da-bd8e-f3fe45b57104",
      ResourceVersion: (string) (len=5) "95269",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446359,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=19) "test-new-deployment",
          UID: (types.UID) (len=36) "a57b591c-8ffc-46a3-add3-4cbd37e00c1d",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446361,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 61 35 37 62 35 39  31 63 2d 38 66 66 63 2d  |\"a57b591c-8ffc-|
              00000120  34 36 61 33 2d 61 64 64  33 2d 34 63 62 64 33 37  |46a3-add3-4cbd37|
              00000130  65 30 30 63 31 64 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |e00c1d\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446361,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(2),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Mar  7 22:12:41.664: INFO: Pod "test-new-deployment-557759b7c7-95tck" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "test-new-deployment-557759b7c7-95tck",
      GenerateName: (string) (len=31) "test-new-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5238",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "fcb814fe-7475-4e33-bf82-0ba7fa80122e",
      ResourceVersion: (string) (len=5) "95273",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446361,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "test-new-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ee42973b-7194-47da-bd8e-f3fe45b57104",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446361,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 65  34 32 39 37 33 62 2d 37  |d\":\"ee42973b-7|
              00000090  31 39 34 2d 34 37 64 61  2d 62 64 38 65 2d 66 33  |194-47da-bd8e-f3|
              000000a0  66 65 34 35 62 35 37 31  30 34 5c 22 7d 22 3a 7b  |fe45b57104\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-rhmrx",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-rhmrx",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446361,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 22:12:41.665: INFO: Pod "test-new-deployment-557759b7c7-phjwf" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "test-new-deployment-557759b7c7-phjwf",
      GenerateName: (string) (len=31) "test-new-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-5238",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "477cb397-9a51-4033-9965-096142dcf222",
      ResourceVersion: (string) (len=5) "95265",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446359,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "fca3711c415f2fd4cbc793fb0b51db335c7c160a02358772d739ed61bbe03240",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=13) "10.1.51.75/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=13) "10.1.51.75/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "test-new-deployment-557759b7c7",
          UID: (types.UID) (len=36) "ee42973b-7194-47da-bd8e-f3fe45b57104",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446359,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 65 65  34 32 39 37 33 62 2d 37  |d\":\"ee42973b-7|
              00000090  31 39 34 2d 34 37 64 61  2d 62 64 38 65 2d 66 33  |194-47da-bd8e-f3|
              000000a0  66 65 34 35 62 35 37 31  30 34 5c 22 7d 22 3a 7b  |fe45b57104\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446360,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446361,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=659) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 35 31 2e 37 35  5c 22 7d 22 3a 7b 22 2e  |.1.51.75\"}":{".|
              00000270  22 3a 7b 7d 2c 22 66 3a  69 70 22 3a 7b 7d 7d 7d  |":{},"f:ip":{}}}|
              00000280  2c 22 66 3a 73 74 61 72  74 54 69 6d 65 22 3a 7b  |,"f:startTime":{|
              00000290  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-f2g2p",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-f2g2p",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446361,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446359,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446361,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446361,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845446359,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) (len=10) "10.1.51.75",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=10) "10.1.51.75"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845446359,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845446360,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://91b0f233e028238d0dac48ec39c55d9913e24ad3ee1553eac68aeac11b5955dd",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 22:12:41.666: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-5238" for this suite. @ 03/07/24 22:12:41.672
• [2.212 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtimeclass.go:158
  STEP: Creating a kubernetes client @ 03/07/24 22:12:41.686
  Mar  7 22:12:41.686: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename runtimeclass @ 03/07/24 22:12:41.687
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:12:41.709
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:12:41.711
  STEP: Deleting RuntimeClass runtimeclass-1490-delete-me @ 03/07/24 22:12:41.719
  STEP: Waiting for the RuntimeClass to disappear @ 03/07/24 22:12:41.725
  Mar  7 22:12:41.731: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-1490" for this suite. @ 03/07/24 22:12:41.734
• [0.055 seconds]
------------------------------
[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:237
  STEP: Creating a kubernetes client @ 03/07/24 22:12:41.741
  Mar  7 22:12:41.741: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 22:12:41.743
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:12:41.757
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:12:41.759
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 22:12:41.761
  STEP: Saw pod success @ 03/07/24 22:12:45.802
  Mar  7 22:12:45.809: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-5e7b49e0-9c12-4a59-9ee1-55016f71ebff container client-container: <nil>
  STEP: delete the pod @ 03/07/24 22:12:45.831
  Mar  7 22:12:45.873: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4968" for this suite. @ 03/07/24 22:12:45.876
• [4.148 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] FieldValidation should detect unknown metadata fields of a typed object [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/field_validation.go:117
  STEP: Creating a kubernetes client @ 03/07/24 22:12:45.892
  Mar  7 22:12:45.892: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename field-validation @ 03/07/24 22:12:45.894
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:12:45.931
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:12:45.934
  STEP: apply creating a deployment @ 03/07/24 22:12:45.935
  Mar  7 22:12:45.944: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-6783" for this suite. @ 03/07/24 22:12:45.948
• [0.063 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance] [sig-api-machinery, Serial, Conformance]
test/e2e/apimachinery/namespace.go:254
  STEP: Creating a kubernetes client @ 03/07/24 22:12:45.956
  Mar  7 22:12:45.956: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename namespaces @ 03/07/24 22:12:45.956
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:12:45.979
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:12:45.987
  STEP: Creating a test namespace @ 03/07/24 22:12:45.994
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:12:46.013
  STEP: Creating a service in the namespace @ 03/07/24 22:12:46.015
  STEP: Deleting the namespace @ 03/07/24 22:12:46.045
  STEP: Waiting for the namespace to be removed. @ 03/07/24 22:12:46.081
  STEP: Recreating the namespace @ 03/07/24 22:12:52.091
  STEP: Verifying there is no service in the namespace @ 03/07/24 22:12:52.159
  Mar  7 22:12:52.162: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-458" for this suite. @ 03/07/24 22:12:52.167
  STEP: Destroying namespace "nsdeletetest-9074" for this suite. @ 03/07/24 22:12:52.175
  Mar  7 22:12:52.177: INFO: Namespace nsdeletetest-9074 was already deleted
  STEP: Destroying namespace "nsdeletetest-2503" for this suite. @ 03/07/24 22:12:52.177
• [6.228 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply a finalizer to a Namespace [Conformance] [sig-api-machinery, Serial, Conformance]
test/e2e/apimachinery/namespace.go:400
  STEP: Creating a kubernetes client @ 03/07/24 22:12:52.185
  Mar  7 22:12:52.185: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename namespaces @ 03/07/24 22:12:52.185
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:12:52.201
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:12:52.203
  STEP: Creating namespace "e2e-ns-kgw7z" @ 03/07/24 22:12:52.205
  Mar  7 22:12:52.219: INFO: Namespace "e2e-ns-kgw7z-9849" has []v1.FinalizerName{"kubernetes"}
  STEP: Adding e2e finalizer to namespace "e2e-ns-kgw7z-9849" @ 03/07/24 22:12:52.219
  Mar  7 22:12:52.227: INFO: Namespace "e2e-ns-kgw7z-9849" has []v1.FinalizerName{"kubernetes", "e2e.example.com/fakeFinalizer"}
  STEP: Removing e2e finalizer from namespace "e2e-ns-kgw7z-9849" @ 03/07/24 22:12:52.227
  Mar  7 22:12:52.241: INFO: Namespace "e2e-ns-kgw7z-9849" has []v1.FinalizerName{"kubernetes"}
  Mar  7 22:12:52.241: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-263" for this suite. @ 03/07/24 22:12:52.244
  STEP: Destroying namespace "e2e-ns-kgw7z-9849" for this suite. @ 03/07/24 22:12:52.252
• [0.074 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:69
  STEP: Creating a kubernetes client @ 03/07/24 22:12:52.258
  Mar  7 22:12:52.258: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename crd-publish-openapi @ 03/07/24 22:12:52.259
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:12:52.277
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:12:52.279
  Mar  7 22:12:52.281: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: kubectl validation (kubectl create and apply) allows request with known and required properties @ 03/07/24 22:12:53.525
  Mar  7 22:12:53.525: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-6782 --namespace=crd-publish-openapi-6782 create -f -'
  Mar  7 22:12:55.604: INFO: stderr: ""
  Mar  7 22:12:55.604: INFO: stdout: "e2e-test-crd-publish-openapi-9396-crd.crd-publish-openapi-test-foo.example.com/test-foo created\n"
  Mar  7 22:12:55.604: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-6782 --namespace=crd-publish-openapi-6782 delete e2e-test-crd-publish-openapi-9396-crds test-foo'
  Mar  7 22:12:55.695: INFO: stderr: ""
  Mar  7 22:12:55.695: INFO: stdout: "e2e-test-crd-publish-openapi-9396-crd.crd-publish-openapi-test-foo.example.com \"test-foo\" deleted\n"
  Mar  7 22:12:55.695: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-6782 --namespace=crd-publish-openapi-6782 apply -f -'
  Mar  7 22:12:55.746: INFO: stderr: ""
  Mar  7 22:12:55.746: INFO: stdout: "e2e-test-crd-publish-openapi-9396-crd.crd-publish-openapi-test-foo.example.com/test-foo created\n"
  Mar  7 22:12:55.746: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-6782 --namespace=crd-publish-openapi-6782 delete e2e-test-crd-publish-openapi-9396-crds test-foo'
  Mar  7 22:12:55.795: INFO: stderr: ""
  Mar  7 22:12:55.795: INFO: stdout: "e2e-test-crd-publish-openapi-9396-crd.crd-publish-openapi-test-foo.example.com \"test-foo\" deleted\n"
  STEP: kubectl validation (kubectl create and apply) rejects request with value outside defined enum values @ 03/07/24 22:12:55.795
  Mar  7 22:12:55.795: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-6782 --namespace=crd-publish-openapi-6782 create -f -'
  Mar  7 22:12:55.838: INFO: rc: 1
  STEP: kubectl validation (kubectl create and apply) rejects request with unknown properties when disallowed by the schema @ 03/07/24 22:12:55.838
  Mar  7 22:12:55.838: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-6782 --namespace=crd-publish-openapi-6782 create -f -'
  Mar  7 22:12:55.880: INFO: rc: 1
  Mar  7 22:12:55.880: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-6782 --namespace=crd-publish-openapi-6782 apply -f -'
  Mar  7 22:12:55.926: INFO: rc: 1
  STEP: kubectl validation (kubectl create and apply) rejects request without required properties @ 03/07/24 22:12:55.926
  Mar  7 22:12:55.927: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-6782 --namespace=crd-publish-openapi-6782 create -f -'
  Mar  7 22:12:55.969: INFO: rc: 1
  Mar  7 22:12:55.969: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-6782 --namespace=crd-publish-openapi-6782 apply -f -'
  Mar  7 22:12:56.017: INFO: rc: 1
  STEP: kubectl explain works to explain CR properties @ 03/07/24 22:12:56.017
  Mar  7 22:12:56.017: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-6782 explain e2e-test-crd-publish-openapi-9396-crds'
  Mar  7 22:12:56.059: INFO: stderr: ""
  Mar  7 22:12:56.059: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-9396-crd\nVERSION:    v1\n\nDESCRIPTION:\n    Foo CRD for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Foo\n\n  status\t<Object>\n    Status of Foo\n\n\n"
  STEP: kubectl explain works to explain CR properties recursively @ 03/07/24 22:12:56.059
  Mar  7 22:12:56.060: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-6782 explain e2e-test-crd-publish-openapi-9396-crds.metadata'
  Mar  7 22:12:56.100: INFO: stderr: ""
  Mar  7 22:12:56.100: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-9396-crd\nVERSION:    v1\n\nFIELD: metadata <ObjectMeta>\n\nDESCRIPTION:\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n    ObjectMeta is metadata that all persisted resources must have, which\n    includes all objects users must create.\n    \nFIELDS:\n  annotations\t<map[string]string>\n    Annotations is an unstructured key value map stored with a resource that may\n    be set by external tools to store and retrieve arbitrary metadata. They are\n    not queryable and should be preserved when modifying objects. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n\n  creationTimestamp\t<string>\n    CreationTimestamp is a timestamp representing the server time when this\n    object was created. It is not guaranteed to be set in happens-before order\n    across separate operations. Clients may not set this value. It is\n    represented in RFC3339 form and is in UTC.\n    \n    Populated by the system. Read-only. Null for lists. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  deletionGracePeriodSeconds\t<integer>\n    Number of seconds allowed for this object to gracefully terminate before it\n    will be removed from the system. Only set when deletionTimestamp is also\n    set. May only be shortened. Read-only.\n\n  deletionTimestamp\t<string>\n    DeletionTimestamp is RFC 3339 date and time at which this resource will be\n    deleted. This field is set by the server when a graceful deletion is\n    requested by the user, and is not directly settable by a client. The\n    resource is expected to be deleted (no longer visible from resource lists,\n    and not reachable by name) after the time in this field, once the finalizers\n    list is empty. As long as the finalizers list contains items, deletion is\n    blocked. Once the deletionTimestamp is set, this value may not be unset or\n    be set further into the future, although it may be shortened or the resource\n    may be deleted prior to this time. For example, a user may request that a\n    pod is deleted in 30 seconds. The Kubelet will react by sending a graceful\n    termination signal to the containers in the pod. After that 30 seconds, the\n    Kubelet will send a hard termination signal (SIGKILL) to the container and\n    after cleanup, remove the pod from the API. In the presence of network\n    partitions, this object may still exist after this timestamp, until an\n    administrator or automated process can determine the resource is fully\n    terminated. If not set, graceful deletion of the object has not been\n    requested.\n    \n    Populated by the system when a graceful deletion is requested. Read-only.\n    More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  finalizers\t<[]string>\n    Must be empty before the object is deleted from the registry. Each entry is\n    an identifier for the responsible component that will remove the entry from\n    the list. If the deletionTimestamp of the object is non-nil, entries in this\n    list can only be removed. Finalizers may be processed and removed in any\n    order.  Order is NOT enforced because it introduces significant risk of\n    stuck finalizers. finalizers is a shared field, any actor with permission\n    can reorder it. If the finalizer list is processed in order, then this can\n    lead to a situation in which the component responsible for the first\n    finalizer in the list is waiting for a signal (field value, external system,\n    or other) produced by a component responsible for a finalizer later in the\n    list, resulting in a deadlock. Without enforced ordering finalizers are free\n    to order amongst themselves and are not vulnerable to ordering changes in\n    the list.\n\n  generateName\t<string>\n    GenerateName is an optional prefix, used by the server, to generate a unique\n    name ONLY IF the Name field has not been provided. If this field is used,\n    the name returned to the client will be different than the name passed. This\n    value will also be combined with a unique suffix. The provided value has the\n    same validation rules as the Name field, and may be truncated by the length\n    of the suffix required to make the value unique on the server.\n    \n    If this field is specified and the generated name exists, the server will\n    return a 409.\n    \n    Applied only if Name is not specified. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n\n  generation\t<integer>\n    A sequence number representing a specific generation of the desired state.\n    Populated by the system. Read-only.\n\n  labels\t<map[string]string>\n    Map of string keys and values that can be used to organize and categorize\n    (scope and select) objects. May match selectors of replication controllers\n    and services. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n\n  managedFields\t<[]ManagedFieldsEntry>\n    ManagedFields maps workflow-id and version to the set of fields that are\n    managed by that workflow. This is mostly for internal housekeeping, and\n    users typically shouldn't need to set or understand this field. A workflow\n    can be the user's name, a controller's name, or the name of a specific apply\n    path like \"ci-cd\". The set of fields is always in the version that the\n    workflow used when modifying the object.\n\n  name\t<string>\n    Name must be unique within a namespace. Is required when creating resources,\n    although some resources may allow a client to request the generation of an\n    appropriate name automatically. Name is primarily intended for creation\n    idempotence and configuration definition. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n\n  namespace\t<string>\n    Namespace defines the space within which each name must be unique. An empty\n    namespace is equivalent to the \"default\" namespace, but \"default\" is the\n    canonical representation. Not all objects are required to be scoped to a\n    namespace - the value of this field for those objects will be empty.\n    \n    Must be a DNS_LABEL. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n\n  ownerReferences\t<[]OwnerReference>\n    List of objects depended by this object. If ALL objects in the list have\n    been deleted, this object will be garbage collected. If this object is\n    managed by a controller, then an entry in this list will point to this\n    controller, with the controller field set to true. There cannot be more than\n    one managing controller.\n\n  resourceVersion\t<string>\n    An opaque value that represents the internal version of this object that can\n    be used by clients to determine when objects have changed. May be used for\n    optimistic concurrency, change detection, and the watch operation on a\n    resource or set of resources. Clients must treat these values as opaque and\n    passed unmodified back to the server. They may only be valid for a\n    particular resource or set of resources.\n    \n    Populated by the system. Read-only. Value must be treated as opaque by\n    clients and . More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n\n  selfLink\t<string>\n    Deprecated: selfLink is a legacy read-only field that is no longer populated\n    by the system.\n\n  uid\t<string>\n    UID is the unique in time and space value for this object. It is typically\n    generated by the server on successful creation of a resource and is not\n    allowed to change on PUT operations.\n    \n    Populated by the system. Read-only. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n\n\n"
  Mar  7 22:12:56.101: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-6782 explain e2e-test-crd-publish-openapi-9396-crds.spec'
  Mar  7 22:12:56.141: INFO: stderr: ""
  Mar  7 22:12:56.141: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-9396-crd\nVERSION:    v1\n\nFIELD: spec <Object>\n\nDESCRIPTION:\n    Specification of Foo\n    \nFIELDS:\n  bars\t<[]Object>\n    List of Bars and their specs.\n\n\n"
  Mar  7 22:12:56.141: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-6782 explain e2e-test-crd-publish-openapi-9396-crds.spec.bars'
  Mar  7 22:12:56.182: INFO: stderr: ""
  Mar  7 22:12:56.182: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-9396-crd\nVERSION:    v1\n\nFIELD: bars <[]Object>\n\nDESCRIPTION:\n    List of Bars and their specs.\n    \nFIELDS:\n  age\t<string>\n    Age of Bar.\n\n  bazs\t<[]string>\n    List of Bazs.\n\n  feeling\t<string>\n    Whether Bar is feeling great.\n\n  name\t<string> -required-\n    Name of Bar.\n\n\n"
  STEP: kubectl explain works to return error when explain is called on property that doesn't exist @ 03/07/24 22:12:56.182
  Mar  7 22:12:56.182: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-6782 explain e2e-test-crd-publish-openapi-9396-crds.spec.bars2'
  Mar  7 22:12:56.223: INFO: rc: 1
  Mar  7 22:12:57.553: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-6782" for this suite. @ 03/07/24 22:12:57.558
• [5.306 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Proxy server should support --unix-socket=/path [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1863
  STEP: Creating a kubernetes client @ 03/07/24 22:12:57.564
  Mar  7 22:12:57.565: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 22:12:57.566
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:12:57.58
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:12:57.582
  STEP: Starting the proxy @ 03/07/24 22:12:57.584
  Mar  7 22:12:57.584: INFO: Asynchronously running '/usr/local/bin/kubectl kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-6491 proxy --unix-socket=/tmp/kubectl-proxy-unix736724832/test'
  STEP: retrieving proxy /api/ output @ 03/07/24 22:12:57.614
  Mar  7 22:12:57.615: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-6491" for this suite. @ 03/07/24 22:12:57.617
• [0.061 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:442
  STEP: Creating a kubernetes client @ 03/07/24 22:12:57.625
  Mar  7 22:12:57.625: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename crd-publish-openapi @ 03/07/24 22:12:57.626
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:12:57.641
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:12:57.643
  STEP: set up a multi version CRD @ 03/07/24 22:12:57.645
  Mar  7 22:12:57.645: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: mark a version not serverd @ 03/07/24 22:13:00.878
  STEP: check the unserved version gets removed @ 03/07/24 22:13:00.897
  STEP: check the other version is not changed @ 03/07/24 22:13:01.634
  Mar  7 22:13:04.140: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-8861" for this suite. @ 03/07/24 22:13:04.146
• [6.536 seconds]
------------------------------
SS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance] [sig-storage, Conformance]
test/e2e/storage/subpath.go:69
  STEP: Creating a kubernetes client @ 03/07/24 22:13:04.162
  Mar  7 22:13:04.162: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename subpath @ 03/07/24 22:13:04.164
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:13:04.214
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:13:04.219
  STEP: Setting up data @ 03/07/24 22:13:04.223
  STEP: Creating pod pod-subpath-test-configmap-rtzn @ 03/07/24 22:13:04.243
  STEP: Creating a pod to test atomic-volume-subpath @ 03/07/24 22:13:04.243
  STEP: Saw pod success @ 03/07/24 22:13:28.38
  Mar  7 22:13:28.389: INFO: Trying to get logs from node whiskas-1 pod pod-subpath-test-configmap-rtzn container test-container-subpath-configmap-rtzn: <nil>
  STEP: delete the pod @ 03/07/24 22:13:28.406
  STEP: Deleting pod pod-subpath-test-configmap-rtzn @ 03/07/24 22:13:28.45
  Mar  7 22:13:28.450: INFO: Deleting pod "pod-subpath-test-configmap-rtzn" in namespace "subpath-810"
  Mar  7 22:13:28.455: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-810" for this suite. @ 03/07/24 22:13:28.463
• [24.316 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/pods.go:537
  STEP: Creating a kubernetes client @ 03/07/24 22:13:28.479
  Mar  7 22:13:28.479: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pods @ 03/07/24 22:13:28.481
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:13:28.508
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:13:28.513
  Mar  7 22:13:28.516: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: creating the pod @ 03/07/24 22:13:28.517
  STEP: submitting the pod to kubernetes @ 03/07/24 22:13:28.517
  Mar  7 22:13:30.616: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-7666" for this suite. @ 03/07/24 22:13:30.622
• [2.152 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance] [sig-network, Conformance]
test/e2e/network/endpointslice.go:69
  STEP: Creating a kubernetes client @ 03/07/24 22:13:30.631
  Mar  7 22:13:30.631: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename endpointslice @ 03/07/24 22:13:30.631
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:13:30.653
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:13:30.655
  Mar  7 22:13:30.665: INFO: Endpoints addresses: [10.100.138.205] , ports: [16443]
  Mar  7 22:13:30.665: INFO: EndpointSlices addresses: [10.100.138.205] , ports: [16443]
  Mar  7 22:13:30.665: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-3262" for this suite. @ 03/07/24 22:13:30.668
• [0.046 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/ephemeral_containers.go:98
  STEP: Creating a kubernetes client @ 03/07/24 22:13:30.677
  Mar  7 22:13:30.677: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename ephemeral-containers-test @ 03/07/24 22:13:30.678
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:13:30.696
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:13:30.7
  STEP: creating a target pod @ 03/07/24 22:13:30.703
  STEP: adding an ephemeral container @ 03/07/24 22:13:32.734
  STEP: checking pod container endpoints @ 03/07/24 22:13:34.786
  Mar  7 22:13:34.787: INFO: ExecWithOptions {Command:[/bin/echo marco] Namespace:ephemeral-containers-test-8473 PodName:ephemeral-containers-target-pod ContainerName:debugger Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:13:34.787: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:13:34.788: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:13:34.788: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/ephemeral-containers-test-8473/pods/ephemeral-containers-target-pod/exec?command=%2Fbin%2Fecho&command=marco&container=debugger&container=debugger&stderr=true&stdout=true)
  Mar  7 22:13:34.856: INFO: Exec stderr: ""
  STEP: checking pod "ephemeral-containers-target-pod" has only one ephemeralcontainer @ 03/07/24 22:13:34.86
  STEP: adding another ephemeralcontainer to pod "ephemeral-containers-target-pod" @ 03/07/24 22:13:34.863
  STEP: checking pod "ephemeral-containers-target-pod" has only two ephemeralcontainers @ 03/07/24 22:13:34.876
  Mar  7 22:13:34.880: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ephemeral-containers-test-8473" for this suite. @ 03/07/24 22:13:34.882
• [4.211 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/field_validation.go:168
  STEP: Creating a kubernetes client @ 03/07/24 22:13:34.889
  Mar  7 22:13:34.889: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename field-validation @ 03/07/24 22:13:34.89
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:13:34.902
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:13:34.905
  Mar  7 22:13:34.906: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  W0307 22:13:37.454210      20 warnings.go:70] unknown field "alpha"
  W0307 22:13:37.454252      20 warnings.go:70] unknown field "beta"
  W0307 22:13:37.454259      20 warnings.go:70] unknown field "delta"
  W0307 22:13:37.454264      20 warnings.go:70] unknown field "epsilon"
  W0307 22:13:37.454270      20 warnings.go:70] unknown field "gamma"
  Mar  7 22:13:38.024: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-6836" for this suite. @ 03/07/24 22:13:38.034
• [3.166 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_secret.go:119
  STEP: Creating a kubernetes client @ 03/07/24 22:13:38.056
  Mar  7 22:13:38.056: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 22:13:38.058
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:13:38.087
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:13:38.091
  STEP: Creating secret with name projected-secret-test-ee7c46b5-ac72-4f9e-b33c-430fa0253573 @ 03/07/24 22:13:38.094
  STEP: Creating a pod to test consume secrets @ 03/07/24 22:13:38.1
  STEP: Saw pod success @ 03/07/24 22:13:42.124
  Mar  7 22:13:42.127: INFO: Trying to get logs from node whiskas-1 pod pod-projected-secrets-cd467893-7050-410b-b986-e827c0b034b7 container secret-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 22:13:42.133
  Mar  7 22:13:42.175: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-642" for this suite. @ 03/07/24 22:13:42.178
• [4.133 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/security_context.go:611
  STEP: Creating a kubernetes client @ 03/07/24 22:13:42.189
  Mar  7 22:13:42.189: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename security-context-test @ 03/07/24 22:13:42.19
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:13:42.213
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:13:42.216
  Mar  7 22:13:46.273: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-4634" for this suite. @ 03/07/24 22:13:46.285
• [4.121 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-network] DNS should support configurable pod DNS nameservers [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:407
  STEP: Creating a kubernetes client @ 03/07/24 22:13:46.311
  Mar  7 22:13:46.311: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename dns @ 03/07/24 22:13:46.313
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:13:46.369
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:13:46.376
  STEP: Creating a pod with dnsPolicy=None and customized dnsConfig... @ 03/07/24 22:13:46.382
  Mar  7 22:13:46.401: INFO: Created pod &Pod{ObjectMeta:{test-dns-nameservers  dns-7978  cb9f1050-8fb4-451f-8968-b14a6729b1e5 95755 0 2024-03-07 22:13:46 +0000 UTC <nil> <nil> map[] map[] [] [] [{e2e.test Update v1 2024-03-07 22:13:46 +0000 UTC FieldsV1 {"f:spec":{"f:containers":{"k:{\"name\":\"agnhost-container\"}":{".":{},"f:args":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsConfig":{".":{},"f:nameservers":{},"f:searches":{}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}} }]},Spec:PodSpec{Volumes:[]Volume{Volume{Name:kube-api-access-j6cgr,VolumeSource:VolumeSource{HostPath:nil,EmptyDir:nil,GCEPersistentDisk:nil,AWSElasticBlockStore:nil,GitRepo:nil,Secret:nil,NFS:nil,ISCSI:nil,Glusterfs:nil,PersistentVolumeClaim:nil,RBD:nil,FlexVolume:nil,Cinder:nil,CephFS:nil,Flocker:nil,DownwardAPI:nil,FC:nil,AzureFile:nil,ConfigMap:nil,VsphereVolume:nil,Quobyte:nil,AzureDisk:nil,PhotonPersistentDisk:nil,PortworxVolume:nil,ScaleIO:nil,Projected:&ProjectedVolumeSource{Sources:[]VolumeProjection{VolumeProjection{Secret:nil,DownwardAPI:nil,ConfigMap:nil,ServiceAccountToken:&ServiceAccountTokenProjection{Audience:,ExpirationSeconds:*3607,Path:token,},ClusterTrustBundle:nil,},VolumeProjection{Secret:nil,DownwardAPI:nil,ConfigMap:&ConfigMapProjection{LocalObjectReference:LocalObjectReference{Name:kube-root-ca.crt,},Items:[]KeyToPath{KeyToPath{Key:ca.crt,Path:ca.crt,Mode:nil,},},Optional:nil,},ServiceAccountToken:nil,ClusterTrustBundle:nil,},VolumeProjection{Secret:nil,DownwardAPI:&DownwardAPIProjection{Items:[]DownwardAPIVolumeFile{DownwardAPIVolumeFile{Path:namespace,FieldRef:&ObjectFieldSelector{APIVersion:v1,FieldPath:metadata.namespace,},ResourceFieldRef:nil,Mode:nil,},},},ConfigMap:nil,ServiceAccountToken:nil,ClusterTrustBundle:nil,},},DefaultMode:*420,},StorageOS:nil,CSI:nil,Ephemeral:nil,},},},Containers:[]Container{Container{Name:agnhost-container,Image:registry.k8s.io/e2e-test-images/agnhost:2.45,Command:[],Args:[pause],WorkingDir:,Ports:[]ContainerPort{},Env:[]EnvVar{},Resources:ResourceRequirements{Limits:ResourceList{},Requests:ResourceList{},Claims:[]ResourceClaim{},},VolumeMounts:[]VolumeMount{VolumeMount{Name:kube-api-access-j6cgr,ReadOnly:true,MountPath:/var/run/secrets/kubernetes.io/serviceaccount,SubPath:,MountPropagation:nil,SubPathExpr:,},},LivenessProbe:nil,ReadinessProbe:nil,Lifecycle:nil,TerminationMessagePath:/dev/termination-log,ImagePullPolicy:IfNotPresent,SecurityContext:&SecurityContext{Capabilities:nil,Privileged:nil,SELinuxOptions:nil,RunAsUser:nil,RunAsNonRoot:nil,ReadOnlyRootFilesystem:nil,AllowPrivilegeEscalation:nil,RunAsGroup:nil,ProcMount:nil,WindowsOptions:nil,SeccompProfile:nil,},Stdin:false,StdinOnce:false,TTY:false,EnvFrom:[]EnvFromSource{},TerminationMessagePolicy:File,VolumeDevices:[]VolumeDevice{},StartupProbe:nil,ResizePolicy:[]ContainerResizePolicy{},RestartPolicy:nil,},},RestartPolicy:Always,TerminationGracePeriodSeconds:*0,ActiveDeadlineSeconds:nil,DNSPolicy:None,NodeSelector:map[string]string{},ServiceAccountName:default,DeprecatedServiceAccount:default,NodeName:,HostNetwork:false,HostPID:false,HostIPC:false,SecurityContext:&PodSecurityContext{SELinuxOptions:nil,RunAsUser:nil,RunAsNonRoot:nil,SupplementalGroups:[],FSGroup:nil,RunAsGroup:nil,Sysctls:[]Sysctl{},WindowsOptions:nil,FSGroupChangePolicy:nil,SeccompProfile:nil,},ImagePullSecrets:[]LocalObjectReference{},Hostname:,Subdomain:,Affinity:nil,SchedulerName:default-scheduler,InitContainers:[]Container{},AutomountServiceAccountToken:nil,Tolerations:[]Toleration{Toleration{Key:node.kubernetes.io/not-ready,Operator:Exists,Value:,Effect:NoExecute,TolerationSeconds:*300,},Toleration{Key:node.kubernetes.io/unreachable,Operator:Exists,Value:,Effect:NoExecute,TolerationSeconds:*300,},},HostAliases:[]HostAlias{},PriorityClassName:,Priority:*0,DNSConfig:&PodDNSConfig{Nameservers:[1.1.1.1],Searches:[resolv.conf.local],Options:[]PodDNSConfigOption{},},ShareProcessNamespace:nil,ReadinessGates:[]PodReadinessGate{},RuntimeClassName:nil,EnableServiceLinks:*true,PreemptionPolicy:*PreemptLowerPriority,Overhead:ResourceList{},TopologySpreadConstraints:[]TopologySpreadConstraint{},EphemeralContainers:[]EphemeralContainer{},SetHostnameAsFQDN:nil,OS:nil,HostUsers:nil,SchedulingGates:[]PodSchedulingGate{},ResourceClaims:[]PodResourceClaim{},},Status:PodStatus{Phase:Pending,Conditions:[]PodCondition{},Message:,Reason:,HostIP:,PodIP:,StartTime:<nil>,ContainerStatuses:[]ContainerStatus{},QOSClass:BestEffort,InitContainerStatuses:[]ContainerStatus{},NominatedNodeName:,PodIPs:[]PodIP{},EphemeralContainerStatuses:[]ContainerStatus{},Resize:,ResourceClaimStatuses:[]PodResourceClaimStatus{},HostIPs:[]HostIP{},},}
  STEP: Verifying customized DNS suffix list is configured on pod... @ 03/07/24 22:13:48.416
  Mar  7 22:13:48.416: INFO: ExecWithOptions {Command:[/agnhost dns-suffix] Namespace:dns-7978 PodName:test-dns-nameservers ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:13:48.416: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:13:48.417: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:13:48.417: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/dns-7978/pods/test-dns-nameservers/exec?command=%2Fagnhost&command=dns-suffix&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  STEP: Verifying customized DNS server is configured on pod... @ 03/07/24 22:13:48.518
  Mar  7 22:13:48.518: INFO: ExecWithOptions {Command:[/agnhost dns-server-list] Namespace:dns-7978 PodName:test-dns-nameservers ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:13:48.518: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:13:48.518: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:13:48.518: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/dns-7978/pods/test-dns-nameservers/exec?command=%2Fagnhost&command=dns-server-list&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Mar  7 22:13:48.556: INFO: Deleting pod test-dns-nameservers...
  Mar  7 22:13:48.572: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-7978" for this suite. @ 03/07/24 22:13:48.575
• [2.271 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:68
  STEP: Creating a kubernetes client @ 03/07/24 22:13:48.583
  Mar  7 22:13:48.583: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename secrets @ 03/07/24 22:13:48.583
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:13:48.598
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:13:48.6
  STEP: Creating secret with name secret-test-5e9d9b28-c573-43a5-9fa2-17ceec5a1a49 @ 03/07/24 22:13:48.602
  STEP: Creating a pod to test consume secrets @ 03/07/24 22:13:48.608
  STEP: Saw pod success @ 03/07/24 22:13:52.634
  Mar  7 22:13:52.643: INFO: Trying to get logs from node whiskas-1 pod pod-secrets-01d54f44-9e92-4817-b850-ab1379b8e349 container secret-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 22:13:52.66
  Mar  7 22:13:52.763: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-1978" for this suite. @ 03/07/24 22:13:52.774
• [4.212 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:176
  STEP: Creating a kubernetes client @ 03/07/24 22:13:52.797
  Mar  7 22:13:52.797: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename configmap @ 03/07/24 22:13:52.799
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:13:52.847
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:13:52.854
  STEP: Creating configMap with name configmap-test-upd-e53d0950-2cb7-414d-b784-7364c73d8e61 @ 03/07/24 22:13:52.864
  STEP: Creating the pod @ 03/07/24 22:13:52.871
  STEP: Waiting for pod with text data @ 03/07/24 22:13:54.89
  STEP: Waiting for pod with binary data @ 03/07/24 22:13:54.894
  Mar  7 22:13:54.898: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-9064" for this suite. @ 03/07/24 22:13:54.9
• [2.111 seconds]
------------------------------
[sig-network] Ingress API should support creating Ingress API operations [Conformance] [sig-network, Conformance]
test/e2e/network/ingress.go:558
  STEP: Creating a kubernetes client @ 03/07/24 22:13:54.907
  Mar  7 22:13:54.907: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename ingress @ 03/07/24 22:13:54.908
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:13:54.923
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:13:54.926
  STEP: getting /apis @ 03/07/24 22:13:54.932
  STEP: getting /apis/networking.k8s.io @ 03/07/24 22:13:54.934
  STEP: getting /apis/networking.k8s.iov1 @ 03/07/24 22:13:54.935
  STEP: creating @ 03/07/24 22:13:54.935
  STEP: getting @ 03/07/24 22:13:54.954
  STEP: listing @ 03/07/24 22:13:54.956
  STEP: watching @ 03/07/24 22:13:54.958
  Mar  7 22:13:54.958: INFO: starting watch
  STEP: cluster-wide listing @ 03/07/24 22:13:54.959
  STEP: cluster-wide watching @ 03/07/24 22:13:54.961
  Mar  7 22:13:54.961: INFO: starting watch
  STEP: patching @ 03/07/24 22:13:54.962
  STEP: updating @ 03/07/24 22:13:54.968
  Mar  7 22:13:54.976: INFO: waiting for watch events with expected annotations
  Mar  7 22:13:54.976: INFO: saw patched and updated annotations
  STEP: patching /status @ 03/07/24 22:13:54.976
  STEP: updating /status @ 03/07/24 22:13:54.984
  STEP: get /status @ 03/07/24 22:13:54.991
  STEP: deleting @ 03/07/24 22:13:54.994
  STEP: deleting a collection @ 03/07/24 22:13:55.008
  Mar  7 22:13:55.022: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ingress-7622" for this suite. @ 03/07/24 22:13:55.024
• [0.125 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:48
  STEP: Creating a kubernetes client @ 03/07/24 22:13:55.032
  Mar  7 22:13:55.032: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 22:13:55.033
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:13:55.052
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:13:55.054
  STEP: Creating configMap with name projected-configmap-test-volume-9c3bbff5-9c06-4c9d-883c-94fd6ab53d68 @ 03/07/24 22:13:55.055
  STEP: Creating a pod to test consume configMaps @ 03/07/24 22:13:55.062
  STEP: Saw pod success @ 03/07/24 22:13:59.094
  Mar  7 22:13:59.102: INFO: Trying to get logs from node whiskas-1 pod pod-projected-configmaps-3f5148f8-a21e-4109-8ca4-da23d6a91a25 container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 22:13:59.119
  Mar  7 22:13:59.181: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5441" for this suite. @ 03/07/24 22:13:59.193
• [4.175 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:2236
  STEP: Creating a kubernetes client @ 03/07/24 22:13:59.207
  Mar  7 22:13:59.207: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 22:13:59.208
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:13:59.23
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:13:59.232
  STEP: creating service in namespace services-1707 @ 03/07/24 22:13:59.235
  STEP: creating service affinity-nodeport-transition in namespace services-1707 @ 03/07/24 22:13:59.235
  STEP: creating replication controller affinity-nodeport-transition in namespace services-1707 @ 03/07/24 22:13:59.254
  I0307 22:13:59.272284      20 runners.go:197] Created replication controller with name: affinity-nodeport-transition, namespace: services-1707, replica count: 3
  I0307 22:14:02.323616      20 runners.go:197] affinity-nodeport-transition Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Mar  7 22:14:02.350: INFO: Creating new exec pod
  Mar  7 22:14:05.396: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-1707 exec execpod-affinityxp5cp -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-nodeport-transition 80'
  Mar  7 22:14:05.517: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-nodeport-transition 80\nConnection to affinity-nodeport-transition 80 port [tcp/http] succeeded!\n"
  Mar  7 22:14:05.517: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 22:14:05.517: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-1707 exec execpod-affinityxp5cp -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.170 80'
  Mar  7 22:14:05.588: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.170 80\nConnection to 10.152.183.170 80 port [tcp/http] succeeded!\n"
  Mar  7 22:14:05.588: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 22:14:05.588: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-1707 exec execpod-affinityxp5cp -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.205 30309'
  Mar  7 22:14:05.658: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.205 30309\nConnection to 10.100.138.205 30309 port [tcp/*] succeeded!\n"
  Mar  7 22:14:05.658: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 22:14:05.658: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-1707 exec execpod-affinityxp5cp -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.2 30309'
  Mar  7 22:14:05.728: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.2 30309\nConnection to 10.100.138.2 30309 port [tcp/*] succeeded!\n"
  Mar  7 22:14:05.728: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 22:14:05.737: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-1707 exec execpod-affinityxp5cp -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.100.138.205:30309/ ; done'
  Mar  7 22:14:05.849: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n"
  Mar  7 22:14:05.849: INFO: stdout: "\naffinity-nodeport-transition-mkfnv\naffinity-nodeport-transition-fx8nc\naffinity-nodeport-transition-fx8nc\naffinity-nodeport-transition-mkfnv\naffinity-nodeport-transition-fx8nc\naffinity-nodeport-transition-fx8nc\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-mkfnv\naffinity-nodeport-transition-mkfnv\naffinity-nodeport-transition-fx8nc\naffinity-nodeport-transition-fx8nc\naffinity-nodeport-transition-fx8nc\naffinity-nodeport-transition-fx8nc\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-mkfnv"
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-mkfnv
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-fx8nc
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-fx8nc
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-mkfnv
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-fx8nc
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-fx8nc
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-mkfnv
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-mkfnv
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-fx8nc
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-fx8nc
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-fx8nc
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-fx8nc
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:05.849: INFO: Received response from host: affinity-nodeport-transition-mkfnv
  Mar  7 22:14:05.863: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-1707 exec execpod-affinityxp5cp -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.100.138.205:30309/ ; done'
  Mar  7 22:14:06.021: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30309/\n"
  Mar  7 22:14:06.021: INFO: stdout: "\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9\naffinity-nodeport-transition-96gx9"
  Mar  7 22:14:06.021: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.021: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.021: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.021: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.021: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.021: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.021: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.021: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.021: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.021: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.021: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.021: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.021: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.021: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.021: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.022: INFO: Received response from host: affinity-nodeport-transition-96gx9
  Mar  7 22:14:06.022: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-nodeport-transition in namespace services-1707, will wait for the garbage collector to delete the pods @ 03/07/24 22:14:06.042
  Mar  7 22:14:06.107: INFO: Deleting ReplicationController affinity-nodeport-transition took: 9.424231ms
  Mar  7 22:14:06.208: INFO: Terminating ReplicationController affinity-nodeport-transition pods took: 100.763162ms
  Mar  7 22:14:09.079: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-1707" for this suite. @ 03/07/24 22:14:09.091
• [9.904 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:140
  STEP: Creating a kubernetes client @ 03/07/24 22:14:09.113
  Mar  7 22:14:09.113: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir @ 03/07/24 22:14:09.115
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:14:09.184
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:14:09.193
  STEP: Creating a pod to test emptydir 0666 on tmpfs @ 03/07/24 22:14:09.201
  STEP: Saw pod success @ 03/07/24 22:14:13.261
  Mar  7 22:14:13.269: INFO: Trying to get logs from node whiskas-1 pod pod-7fbed0f9-21ca-41be-9c59-981e54942525 container test-container: <nil>
  STEP: delete the pod @ 03/07/24 22:14:13.285
  Mar  7 22:14:13.343: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-490" for this suite. @ 03/07/24 22:14:13.346
• [4.240 seconds]
------------------------------
SSSSS
------------------------------
[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/daemon_set.go:177
  STEP: Creating a kubernetes client @ 03/07/24 22:14:13.354
  Mar  7 22:14:13.354: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename daemonsets @ 03/07/24 22:14:13.354
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:14:13.371
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:14:13.374
  STEP: Creating simple DaemonSet "daemon-set" @ 03/07/24 22:14:13.439
  STEP: Check that daemon pods launch on every node of the cluster. @ 03/07/24 22:14:13.444
  Mar  7 22:14:13.451: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:14:13.451: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  Mar  7 22:14:14.453: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:14:14.453: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  Mar  7 22:14:15.473: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Mar  7 22:14:15.474: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Stop a daemon pod, check that the daemon pod is revived. @ 03/07/24 22:14:15.481
  Mar  7 22:14:15.514: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Mar  7 22:14:15.514: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  Mar  7 22:14:16.526: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Mar  7 22:14:16.526: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  Mar  7 22:14:17.511: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Mar  7 22:14:17.511: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  Mar  7 22:14:18.512: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Mar  7 22:14:18.512: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  Mar  7 22:14:19.525: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Mar  7 22:14:19.528: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 03/07/24 22:14:19.536
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-4527, will wait for the garbage collector to delete the pods @ 03/07/24 22:14:19.536
  Mar  7 22:14:19.613: INFO: Deleting DaemonSet.extensions daemon-set took: 17.762473ms
  Mar  7 22:14:19.713: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.436551ms
  Mar  7 22:14:21.717: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:14:21.717: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Mar  7 22:14:21.720: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"96249"},"items":null}

  Mar  7 22:14:21.723: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"96249"},"items":null}

  Mar  7 22:14:21.731: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-4527" for this suite. @ 03/07/24 22:14:21.733
• [8.389 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply an update to a Namespace [Conformance] [sig-api-machinery, Serial, Conformance]
test/e2e/apimachinery/namespace.go:372
  STEP: Creating a kubernetes client @ 03/07/24 22:14:21.743
  Mar  7 22:14:21.743: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename namespaces @ 03/07/24 22:14:21.743
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:14:21.763
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:14:21.769
  STEP: Updating Namespace "namespaces-2279" @ 03/07/24 22:14:21.771
  Mar  7 22:14:21.779: INFO: Namespace "namespaces-2279" now has labels, map[string]string{"e2e-framework":"namespaces", "e2e-run":"85e55832-d5ed-4ed6-bb52-ff889579ebc0", "kubernetes.io/metadata.name":"namespaces-2279", "namespaces-2279":"updated", "pod-security.kubernetes.io/audit":"baseline", "pod-security.kubernetes.io/enforce":"baseline", "pod-security.kubernetes.io/warn":"baseline"}
  Mar  7 22:14:21.779: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-2279" for this suite. @ 03/07/24 22:14:21.784
• [0.049 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] PreStop should call prestop when killing a pod [Conformance] [sig-node, Conformance]
test/e2e/node/pre_stop.go:169
  STEP: Creating a kubernetes client @ 03/07/24 22:14:21.793
  Mar  7 22:14:21.793: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename prestop @ 03/07/24 22:14:21.794
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:14:21.814
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:14:21.816
  STEP: Creating server pod server in namespace prestop-4740 @ 03/07/24 22:14:21.818
  STEP: Waiting for pods to come up. @ 03/07/24 22:14:21.828
  STEP: Creating tester pod tester in namespace prestop-4740 @ 03/07/24 22:14:23.849
  STEP: Deleting pre-stop pod @ 03/07/24 22:14:25.898
  Mar  7 22:14:30.940: INFO: Saw: {
  	"Hostname": "server",
  	"Sent": null,
  	"Received": {
  		"prestop": 1
  	},
  	"Errors": null,
  	"Log": [
  		"default/nettest has 0 endpoints ([]), which is less than 8 as expected. Waiting for all endpoints to come up.",
  		"default/nettest has 0 endpoints ([]), which is less than 8 as expected. Waiting for all endpoints to come up."
  	],
  	"StillContactingPeers": true
  }
  STEP: Deleting the server pod @ 03/07/24 22:14:30.94
  Mar  7 22:14:30.999: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "prestop-4740" for this suite. @ 03/07/24 22:14:31.006
• [9.223 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance] [sig-apps, Slow, Conformance]
test/e2e/apps/cronjob.go:125
  STEP: Creating a kubernetes client @ 03/07/24 22:14:31.016
  Mar  7 22:14:31.016: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename cronjob @ 03/07/24 22:14:31.017
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:14:31.048
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:14:31.051
  STEP: Creating a ForbidConcurrent cronjob @ 03/07/24 22:14:31.054
  STEP: Ensuring a job is scheduled @ 03/07/24 22:14:31.06
  STEP: Ensuring exactly one is scheduled @ 03/07/24 22:15:01.07
  STEP: Ensuring exactly one running job exists by listing jobs explicitly @ 03/07/24 22:15:01.078
  STEP: Ensuring no more jobs are scheduled @ 03/07/24 22:15:01.086
  STEP: Removing cronjob @ 03/07/24 22:20:01.103
  Mar  7 22:20:01.125: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-9562" for this suite. @ 03/07/24 22:20:01.137
• [330.139 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:371
  STEP: Creating a kubernetes client @ 03/07/24 22:20:01.158
  Mar  7 22:20:01.158: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 22:20:01.159
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:20:01.209
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:20:01.211
  STEP: Setting up server cert @ 03/07/24 22:20:01.245
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 22:20:01.422
  STEP: Deploying the webhook pod @ 03/07/24 22:20:01.429
  STEP: Wait for the deployment to be ready @ 03/07/24 22:20:01.442
  Mar  7 22:20:01.447: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 03/07/24 22:20:03.475
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:20:03.512
  Mar  7 22:20:04.512: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Setting timeout (1s) shorter than webhook latency (5s) @ 03/07/24 22:20:04.529
  STEP: Registering slow webhook via the AdmissionRegistration API @ 03/07/24 22:20:04.529
  STEP: Request fails when timeout (1s) is shorter than slow webhook latency (5s) @ 03/07/24 22:20:04.577
  STEP: Having no error when timeout is shorter than webhook latency and failure policy is ignore @ 03/07/24 22:20:05.613
  STEP: Registering slow webhook via the AdmissionRegistration API @ 03/07/24 22:20:05.613
  STEP: Having no error when timeout is longer than webhook latency @ 03/07/24 22:20:06.703
  STEP: Registering slow webhook via the AdmissionRegistration API @ 03/07/24 22:20:06.704
  STEP: Having no error when timeout is empty (defaulted to 10s in v1) @ 03/07/24 22:20:11.806
  STEP: Registering slow webhook via the AdmissionRegistration API @ 03/07/24 22:20:11.806
  Mar  7 22:20:16.952: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-9537" for this suite. @ 03/07/24 22:20:16.956
  STEP: Destroying namespace "webhook-markers-6901" for this suite. @ 03/07/24 22:20:16.971
• [15.820 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:234
  STEP: Creating a kubernetes client @ 03/07/24 22:20:16.978
  Mar  7 22:20:16.978: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename resourcequota @ 03/07/24 22:20:16.979
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:20:16.995
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:20:17
  STEP: Counting existing ResourceQuota @ 03/07/24 22:20:17.002
  STEP: Creating a ResourceQuota @ 03/07/24 22:20:22.016
  STEP: Ensuring resource quota status is calculated @ 03/07/24 22:20:22.037
  STEP: Creating a Pod that fits quota @ 03/07/24 22:20:24.047
  STEP: Ensuring ResourceQuota status captures the pod usage @ 03/07/24 22:20:24.102
  STEP: Not allowing a pod to be created that exceeds remaining quota @ 03/07/24 22:20:26.114
  STEP: Not allowing a pod to be created that exceeds remaining quota(validation on extended resources) @ 03/07/24 22:20:26.121
  STEP: Ensuring a pod cannot update its resource requirements @ 03/07/24 22:20:26.126
  STEP: Ensuring attempts to update pod resource requirements did not change quota usage @ 03/07/24 22:20:26.138
  STEP: Deleting the pod @ 03/07/24 22:20:28.152
  STEP: Ensuring resource quota status released the pod usage @ 03/07/24 22:20:28.211
  Mar  7 22:20:30.221: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-5934" for this suite. @ 03/07/24 22:20:30.233
• [13.281 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/security_context.go:488
  STEP: Creating a kubernetes client @ 03/07/24 22:20:30.26
  Mar  7 22:20:30.260: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename security-context-test @ 03/07/24 22:20:30.262
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:20:30.319
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:20:30.325
  Mar  7 22:20:34.383: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-9868" for this suite. @ 03/07/24 22:20:34.394
• [4.162 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:199
  STEP: Creating a kubernetes client @ 03/07/24 22:20:34.423
  Mar  7 22:20:34.423: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 22:20:34.425
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:20:34.472
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:20:34.478
  STEP: Setting up server cert @ 03/07/24 22:20:34.513
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 22:20:34.859
  STEP: Deploying the webhook pod @ 03/07/24 22:20:34.869
  STEP: Wait for the deployment to be ready @ 03/07/24 22:20:34.881
  Mar  7 22:20:34.885: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 03/07/24 22:20:36.934
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:20:36.947
  Mar  7 22:20:37.947: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the webhook via the AdmissionRegistration API @ 03/07/24 22:20:37.964
  STEP: create a pod that should be denied by the webhook @ 03/07/24 22:20:38.01
  STEP: create a pod that causes the webhook to hang @ 03/07/24 22:20:38.04
  STEP: create a configmap that should be denied by the webhook @ 03/07/24 22:20:48.056
  STEP: create a configmap that should be admitted by the webhook @ 03/07/24 22:20:48.068
  STEP: update (PUT) the admitted configmap to a non-compliant one should be rejected by the webhook @ 03/07/24 22:20:48.082
  STEP: update (PATCH) the admitted configmap to a non-compliant one should be rejected by the webhook @ 03/07/24 22:20:48.087
  STEP: create a namespace that bypass the webhook @ 03/07/24 22:20:48.09
  STEP: create a configmap that violates the webhook policy but is in a whitelisted namespace @ 03/07/24 22:20:48.115
  Mar  7 22:20:48.176: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-6907" for this suite. @ 03/07/24 22:20:48.182
  STEP: Destroying namespace "webhook-markers-72" for this suite. @ 03/07/24 22:20:48.191
  STEP: Destroying namespace "exempted-namespace-1272" for this suite. @ 03/07/24 22:20:48.213
• [13.806 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Lease lease API should be available [Conformance] [sig-node, Conformance]
test/e2e/common/node/lease.go:73
  STEP: Creating a kubernetes client @ 03/07/24 22:20:48.228
  Mar  7 22:20:48.228: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename lease-test @ 03/07/24 22:20:48.229
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:20:48.248
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:20:48.25
  Mar  7 22:20:48.340: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "lease-test-1873" for this suite. @ 03/07/24 22:20:48.344
• [0.122 seconds]
------------------------------
SSSS
------------------------------
[sig-network] IngressClass API should support creating IngressClass API operations [Conformance] [sig-network, Conformance]
test/e2e/network/ingressclass.go:268
  STEP: Creating a kubernetes client @ 03/07/24 22:20:48.35
  Mar  7 22:20:48.350: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename ingressclass @ 03/07/24 22:20:48.351
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:20:48.367
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:20:48.37
  STEP: getting /apis @ 03/07/24 22:20:48.372
  STEP: getting /apis/networking.k8s.io @ 03/07/24 22:20:48.375
  STEP: getting /apis/networking.k8s.iov1 @ 03/07/24 22:20:48.376
  STEP: creating @ 03/07/24 22:20:48.376
  STEP: getting @ 03/07/24 22:20:48.406
  STEP: listing @ 03/07/24 22:20:48.409
  STEP: watching @ 03/07/24 22:20:48.411
  Mar  7 22:20:48.411: INFO: starting watch
  STEP: patching @ 03/07/24 22:20:48.412
  STEP: updating @ 03/07/24 22:20:48.418
  Mar  7 22:20:48.435: INFO: waiting for watch events with expected annotations
  Mar  7 22:20:48.435: INFO: saw patched and updated annotations
  STEP: deleting @ 03/07/24 22:20:48.436
  STEP: deleting a collection @ 03/07/24 22:20:48.461
  Mar  7 22:20:48.480: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ingressclass-6174" for this suite. @ 03/07/24 22:20:48.484
• [0.147 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:48
  STEP: Creating a kubernetes client @ 03/07/24 22:20:48.498
  Mar  7 22:20:48.498: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename configmap @ 03/07/24 22:20:48.498
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:20:48.524
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:20:48.527
  STEP: Creating configMap with name configmap-test-volume-9509b704-85c6-4e36-98e8-06038243b8b3 @ 03/07/24 22:20:48.53
  STEP: Creating a pod to test consume configMaps @ 03/07/24 22:20:48.538
  STEP: Saw pod success @ 03/07/24 22:20:52.573
  Mar  7 22:20:52.582: INFO: Trying to get logs from node whiskas-1 pod pod-configmaps-6888ae3d-dcd6-4b12-8857-3f47e3bad051 container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 22:20:52.618
  Mar  7 22:20:52.657: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-2893" for this suite. @ 03/07/24 22:20:52.663
• [4.180 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown and duplicate fields of a typed object [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/field_validation.go:64
  STEP: Creating a kubernetes client @ 03/07/24 22:20:52.678
  Mar  7 22:20:52.678: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename field-validation @ 03/07/24 22:20:52.679
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:20:52.707
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:20:52.712
  STEP: apply creating a deployment @ 03/07/24 22:20:52.716
  Mar  7 22:20:52.735: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-3913" for this suite. @ 03/07/24 22:20:52.741
• [0.076 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:190
  STEP: Creating a kubernetes client @ 03/07/24 22:20:52.755
  Mar  7 22:20:52.755: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir @ 03/07/24 22:20:52.756
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:20:52.779
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:20:52.782
  STEP: Creating a pod to test emptydir 0777 on node default medium @ 03/07/24 22:20:52.784
  STEP: Saw pod success @ 03/07/24 22:20:56.816
  Mar  7 22:20:56.825: INFO: Trying to get logs from node whiskas-1 pod pod-a913dab1-9f93-4a1b-b901-1a50bcbb1290 container test-container: <nil>
  STEP: delete the pod @ 03/07/24 22:20:56.841
  Mar  7 22:20:56.902: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-2904" for this suite. @ 03/07/24 22:20:56.908
• [4.164 seconds]
------------------------------
SS
------------------------------
[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1798
  STEP: Creating a kubernetes client @ 03/07/24 22:20:56.919
  Mar  7 22:20:56.919: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 22:20:56.92
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:20:56.942
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:20:56.946
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 03/07/24 22:20:56.949
  Mar  7 22:20:56.949: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5660 run e2e-test-httpd-pod --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4 --pod-running-timeout=2m0s --labels=run=e2e-test-httpd-pod'
  Mar  7 22:20:57.003: INFO: stderr: ""
  Mar  7 22:20:57.003: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: verifying the pod e2e-test-httpd-pod is running @ 03/07/24 22:20:57.003
  STEP: verifying the pod e2e-test-httpd-pod was created @ 03/07/24 22:21:02.054
  Mar  7 22:21:02.055: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5660 get pod e2e-test-httpd-pod -o json'
  Mar  7 22:21:02.128: INFO: stderr: ""
  Mar  7 22:21:02.128: INFO: stdout: "{\n    \"apiVersion\": \"v1\",\n    \"kind\": \"Pod\",\n    \"metadata\": {\n        \"annotations\": {\n            \"cni.projectcalico.org/containerID\": \"f4613c8d7ebec1e003e8b3a6f70cd06de34c07fb542f952df4d6965e9a274416\",\n            \"cni.projectcalico.org/podIP\": \"10.1.51.88/32\",\n            \"cni.projectcalico.org/podIPs\": \"10.1.51.88/32\"\n        },\n        \"creationTimestamp\": \"2024-03-07T22:20:56Z\",\n        \"labels\": {\n            \"run\": \"e2e-test-httpd-pod\"\n        },\n        \"name\": \"e2e-test-httpd-pod\",\n        \"namespace\": \"kubectl-5660\",\n        \"resourceVersion\": \"97260\",\n        \"uid\": \"9adde27b-d15f-46fc-8b89-44b06918a175\"\n    },\n    \"spec\": {\n        \"containers\": [\n            {\n                \"image\": \"registry.k8s.io/e2e-test-images/httpd:2.4.38-4\",\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"e2e-test-httpd-pod\",\n                \"resources\": {},\n                \"terminationMessagePath\": \"/dev/termination-log\",\n                \"terminationMessagePolicy\": \"File\",\n                \"volumeMounts\": [\n                    {\n                        \"mountPath\": \"/var/run/secrets/kubernetes.io/serviceaccount\",\n                        \"name\": \"kube-api-access-dwb5d\",\n                        \"readOnly\": true\n                    }\n                ]\n            }\n        ],\n        \"dnsPolicy\": \"ClusterFirst\",\n        \"enableServiceLinks\": true,\n        \"nodeName\": \"whiskas-1\",\n        \"preemptionPolicy\": \"PreemptLowerPriority\",\n        \"priority\": 0,\n        \"restartPolicy\": \"Always\",\n        \"schedulerName\": \"default-scheduler\",\n        \"securityContext\": {},\n        \"serviceAccount\": \"default\",\n        \"serviceAccountName\": \"default\",\n        \"terminationGracePeriodSeconds\": 30,\n        \"tolerations\": [\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/not-ready\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            },\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/unreachable\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            }\n        ],\n        \"volumes\": [\n            {\n                \"name\": \"kube-api-access-dwb5d\",\n                \"projected\": {\n                    \"defaultMode\": 420,\n                    \"sources\": [\n                        {\n                            \"serviceAccountToken\": {\n                                \"expirationSeconds\": 3607,\n                                \"path\": \"token\"\n                            }\n                        },\n                        {\n                            \"configMap\": {\n                                \"items\": [\n                                    {\n                                        \"key\": \"ca.crt\",\n                                        \"path\": \"ca.crt\"\n                                    }\n                                ],\n                                \"name\": \"kube-root-ca.crt\"\n                            }\n                        },\n                        {\n                            \"downwardAPI\": {\n                                \"items\": [\n                                    {\n                                        \"fieldRef\": {\n                                            \"apiVersion\": \"v1\",\n                                            \"fieldPath\": \"metadata.namespace\"\n                                        },\n                                        \"path\": \"namespace\"\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    \"status\": {\n        \"conditions\": [\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-03-07T22:20:57Z\",\n                \"status\": \"True\",\n                \"type\": \"PodReadyToStartContainers\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-03-07T22:20:57Z\",\n                \"status\": \"True\",\n                \"type\": \"Initialized\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-03-07T22:20:57Z\",\n                \"status\": \"True\",\n                \"type\": \"Ready\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-03-07T22:20:57Z\",\n                \"status\": \"True\",\n                \"type\": \"ContainersReady\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-03-07T22:20:56Z\",\n                \"status\": \"True\",\n                \"type\": \"PodScheduled\"\n            }\n        ],\n        \"containerStatuses\": [\n            {\n                \"containerID\": \"containerd://62937581a7cf803241aafa9c4727ec80f4d5aafc6cdd8f355daf7a9035044367\",\n                \"image\": \"registry.k8s.io/e2e-test-images/httpd:2.4.38-4\",\n                \"imageID\": \"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22\",\n                \"lastState\": {},\n                \"name\": \"e2e-test-httpd-pod\",\n                \"ready\": true,\n                \"restartCount\": 0,\n                \"started\": true,\n                \"state\": {\n                    \"running\": {\n                        \"startedAt\": \"2024-03-07T22:20:57Z\"\n                    }\n                }\n            }\n        ],\n        \"hostIP\": \"10.100.138.205\",\n        \"hostIPs\": [\n            {\n                \"ip\": \"10.100.138.205\"\n            }\n        ],\n        \"phase\": \"Running\",\n        \"podIP\": \"10.1.51.88\",\n        \"podIPs\": [\n            {\n                \"ip\": \"10.1.51.88\"\n            }\n        ],\n        \"qosClass\": \"BestEffort\",\n        \"startTime\": \"2024-03-07T22:20:57Z\"\n    }\n}\n"
  STEP: replace the image in the pod @ 03/07/24 22:21:02.128
  Mar  7 22:21:02.128: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5660 replace -f -'
  Mar  7 22:21:02.221: INFO: stderr: ""
  Mar  7 22:21:02.221: INFO: stdout: "pod/e2e-test-httpd-pod replaced\n"
  STEP: verifying the pod e2e-test-httpd-pod has the right image registry.k8s.io/e2e-test-images/busybox:1.36.1-1 @ 03/07/24 22:21:02.221
  Mar  7 22:21:02.224: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5660 delete pods e2e-test-httpd-pod'
  Mar  7 22:21:04.035: INFO: stderr: ""
  Mar  7 22:21:04.035: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Mar  7 22:21:04.035: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-5660" for this suite. @ 03/07/24 22:21:04.039
• [7.127 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:130
  STEP: Creating a kubernetes client @ 03/07/24 22:21:04.047
  Mar  7 22:21:04.047: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir @ 03/07/24 22:21:04.047
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:21:04.062
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:21:04.064
  STEP: Creating a pod to test emptydir 0644 on tmpfs @ 03/07/24 22:21:04.066
  STEP: Saw pod success @ 03/07/24 22:21:08.091
  Mar  7 22:21:08.100: INFO: Trying to get logs from node whiskas-1 pod pod-4116fd4b-6b99-46c2-8624-409fb8478c54 container test-container: <nil>
  STEP: delete the pod @ 03/07/24 22:21:08.116
  Mar  7 22:21:08.174: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-968" for this suite. @ 03/07/24 22:21:08.185
• [4.154 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:198
  STEP: Creating a kubernetes client @ 03/07/24 22:21:08.201
  Mar  7 22:21:08.201: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-probe @ 03/07/24 22:21:08.202
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:21:08.237
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:21:08.24
  STEP: Creating pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531 @ 03/07/24 22:21:08.244
  STEP: checking the pod's current state and verifying that restartCount is present @ 03/07/24 22:21:10.266
  Mar  7 22:21:10.273: INFO: Initial restart count of pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d is 0
  Mar  7 22:21:10.280: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:12.290: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:14.300: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:16.310: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:18.320: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:20.332: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:22.340: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:24.350: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:26.360: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:28.371: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:30.383: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:30.383: INFO: Restart count of pod container-probe-1531/liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d is now 1 (20.110043868s elapsed)
  Mar  7 22:21:32.387: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:34.397: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:36.408: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:38.418: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:40.429: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:42.440: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:44.451: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:46.461: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:48.471: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:50.483: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:50.483: INFO: Restart count of pod container-probe-1531/liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d is now 2 (40.210512037s elapsed)
  Mar  7 22:21:52.493: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:54.504: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:56.513: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:21:58.524: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:00.535: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:02.545: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:04.556: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:06.566: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:08.571: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:10.584: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:10.584: INFO: Restart count of pod container-probe-1531/liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d is now 3 (1m0.311246238s elapsed)
  Mar  7 22:22:12.594: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:14.605: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:16.615: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:18.618: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:20.630: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:22.640: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:24.651: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:26.661: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:28.665: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:30.676: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:30.676: INFO: Restart count of pod container-probe-1531/liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d is now 4 (1m20.40347281s elapsed)
  Mar  7 22:22:32.688: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:34.699: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:36.709: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:38.720: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:40.732: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:42.743: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:44.753: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:46.764: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:48.775: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:50.787: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:52.798: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:54.808: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:56.818: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:22:58.828: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:00.840: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:02.851: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:04.859: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:06.869: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:08.880: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:10.892: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:12.907: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:14.912: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:16.922: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:18.932: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:20.944: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:22.948: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:24.957: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:26.967: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:28.978: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:30.990: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:33.001: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:35.011: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:37.022: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:39.034: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:41.047: INFO: Get pod liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d in namespace container-probe-1531
  Mar  7 22:23:41.047: INFO: Restart count of pod container-probe-1531/liveness-a8e7f37f-67b0-4a69-bc22-bb98beada30d is now 5 (2m30.774733262s elapsed)
  STEP: deleting the pod @ 03/07/24 22:23:41.048
  Mar  7 22:23:41.100: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-1531" for this suite. @ 03/07/24 22:23:41.106
• [152.920 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance] [sig-storage, Conformance]
test/e2e/storage/subpath.go:59
  STEP: Creating a kubernetes client @ 03/07/24 22:23:41.121
  Mar  7 22:23:41.121: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename subpath @ 03/07/24 22:23:41.122
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:23:41.152
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:23:41.155
  STEP: Setting up data @ 03/07/24 22:23:41.157
  STEP: Creating pod pod-subpath-test-secret-dtzv @ 03/07/24 22:23:41.174
  STEP: Creating a pod to test atomic-volume-subpath @ 03/07/24 22:23:41.174
  STEP: Saw pod success @ 03/07/24 22:24:05.32
  Mar  7 22:24:05.329: INFO: Trying to get logs from node whiskas-1 pod pod-subpath-test-secret-dtzv container test-container-subpath-secret-dtzv: <nil>
  STEP: delete the pod @ 03/07/24 22:24:05.366
  STEP: Deleting pod pod-subpath-test-secret-dtzv @ 03/07/24 22:24:05.419
  Mar  7 22:24:05.419: INFO: Deleting pod "pod-subpath-test-secret-dtzv" in namespace "subpath-7601"
  Mar  7 22:24:05.427: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-7601" for this suite. @ 03/07/24 22:24:05.435
• [24.325 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:150
  STEP: Creating a kubernetes client @ 03/07/24 22:24:05.447
  Mar  7 22:24:05.447: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir @ 03/07/24 22:24:05.448
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:24:05.467
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:24:05.47
  STEP: Creating a pod to test emptydir 0777 on tmpfs @ 03/07/24 22:24:05.472
  STEP: Saw pod success @ 03/07/24 22:24:09.511
  Mar  7 22:24:09.520: INFO: Trying to get logs from node whiskas-1 pod pod-02e0833a-f76a-41b9-8785-6a12c1d38057 container test-container: <nil>
  STEP: delete the pod @ 03/07/24 22:24:09.537
  Mar  7 22:24:09.596: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-2122" for this suite. @ 03/07/24 22:24:09.603
• [4.167 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance] [sig-network, Conformance]
test/e2e/network/endpointslice.go:356
  STEP: Creating a kubernetes client @ 03/07/24 22:24:09.614
  Mar  7 22:24:09.614: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename endpointslice @ 03/07/24 22:24:09.615
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:24:09.639
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:24:09.642
  STEP: getting /apis @ 03/07/24 22:24:09.646
  STEP: getting /apis/discovery.k8s.io @ 03/07/24 22:24:09.65
  STEP: getting /apis/discovery.k8s.iov1 @ 03/07/24 22:24:09.652
  STEP: creating @ 03/07/24 22:24:09.653
  STEP: getting @ 03/07/24 22:24:09.677
  STEP: listing @ 03/07/24 22:24:09.68
  STEP: watching @ 03/07/24 22:24:09.683
  Mar  7 22:24:09.683: INFO: starting watch
  STEP: cluster-wide listing @ 03/07/24 22:24:09.685
  STEP: cluster-wide watching @ 03/07/24 22:24:09.688
  Mar  7 22:24:09.688: INFO: starting watch
  STEP: patching @ 03/07/24 22:24:09.689
  STEP: updating @ 03/07/24 22:24:09.697
  Mar  7 22:24:09.710: INFO: waiting for watch events with expected annotations
  Mar  7 22:24:09.710: INFO: saw patched and updated annotations
  STEP: deleting @ 03/07/24 22:24:09.71
  STEP: deleting a collection @ 03/07/24 22:24:09.724
  Mar  7 22:24:09.746: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-6518" for this suite. @ 03/07/24 22:24:09.75
• [0.146 seconds]
------------------------------
S
------------------------------
[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance] [sig-storage, Conformance]
test/e2e/storage/persistent_volumes.go:669
  STEP: Creating a kubernetes client @ 03/07/24 22:24:09.76
  Mar  7 22:24:09.760: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pv @ 03/07/24 22:24:09.761
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:24:09.782
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:24:09.786
  STEP: Creating initial PV and PVC @ 03/07/24 22:24:09.789
  Mar  7 22:24:09.789: INFO: Creating a PV followed by a PVC
  STEP: Listing all PVs with the labelSelector: "e2e-pv-pool=pv-4405" @ 03/07/24 22:24:09.807
  STEP: Listing PVCs in namespace "pv-4405" @ 03/07/24 22:24:09.833
  STEP: Reading "pvc-k7zjk" Status @ 03/07/24 22:24:09.835
  STEP: Reading "pv-4405-qgq5f" Status @ 03/07/24 22:24:09.837
  STEP: Patching "pvc-k7zjk" Status @ 03/07/24 22:24:09.841
  STEP: Patching "pv-4405-qgq5f" Status @ 03/07/24 22:24:09.847
  STEP: Updating "pvc-k7zjk" Status @ 03/07/24 22:24:09.871
  STEP: Updating "pv-4405-qgq5f" Status @ 03/07/24 22:24:09.896
  Mar  7 22:24:09.905: INFO: AfterEach: deleting 1 PVCs and 1 PVs...
  Mar  7 22:24:09.905: INFO: Deleting PersistentVolumeClaim "pvc-k7zjk"
  Mar  7 22:24:09.917: INFO: Deleting PersistentVolume "pv-4405-qgq5f"
  Mar  7 22:24:09.941: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pv-4405" for this suite. @ 03/07/24 22:24:09.946
• [0.196 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-apps] Deployment deployment should support rollover [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:132
  STEP: Creating a kubernetes client @ 03/07/24 22:24:09.956
  Mar  7 22:24:09.956: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename deployment @ 03/07/24 22:24:09.957
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:24:09.986
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:24:09.99
  Mar  7 22:24:10.004: INFO: Pod name rollover-pod: Found 0 pods out of 1
  Mar  7 22:24:15.011: INFO: Pod name rollover-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 03/07/24 22:24:15.011
  Mar  7 22:24:15.011: INFO: Waiting for pods owned by replica set "test-rollover-controller" to become ready
  Mar  7 22:24:17.020: INFO: Creating deployment "test-rollover-deployment"
  Mar  7 22:24:17.053: INFO: Make sure deployment "test-rollover-deployment" performs scaling operations
  Mar  7 22:24:19.071: INFO: Check revision of new replica set for deployment "test-rollover-deployment"
  Mar  7 22:24:19.088: INFO: Ensure that both replica sets have 1 created replica
  Mar  7 22:24:19.106: INFO: Rollover old replica sets for deployment "test-rollover-deployment" with new image update
  Mar  7 22:24:19.140: INFO: Updating deployment test-rollover-deployment
  Mar  7 22:24:19.140: INFO: Wait deployment "test-rollover-deployment" to be observed by the deployment controller
  Mar  7 22:24:21.157: INFO: Wait for revision update of deployment "test-rollover-deployment" to 2
  Mar  7 22:24:21.175: INFO: Make sure deployment "test-rollover-deployment" is complete
  Mar  7 22:24:21.196: INFO: all replica sets need to contain the pod-template-hash label
  Mar  7 22:24:21.196: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 22, 24, 17, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 22, 24, 17, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 22, 24, 20, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 22, 24, 17, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Mar  7 22:24:23.202: INFO: all replica sets need to contain the pod-template-hash label
  Mar  7 22:24:23.202: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 22, 24, 17, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 22, 24, 17, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 22, 24, 20, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 22, 24, 17, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Mar  7 22:24:25.217: INFO: all replica sets need to contain the pod-template-hash label
  Mar  7 22:24:25.217: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 22, 24, 17, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 22, 24, 17, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 22, 24, 20, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 22, 24, 17, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Mar  7 22:24:27.214: INFO: all replica sets need to contain the pod-template-hash label
  Mar  7 22:24:27.214: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 22, 24, 17, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 22, 24, 17, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 22, 24, 20, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 22, 24, 17, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Mar  7 22:24:29.215: INFO: all replica sets need to contain the pod-template-hash label
  Mar  7 22:24:29.215: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 22, 24, 17, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 22, 24, 17, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 22, 24, 20, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 22, 24, 17, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Mar  7 22:24:31.201: INFO: 
  Mar  7 22:24:31.201: INFO: Ensure that both old replica sets have no replicas
  Mar  7 22:24:31.207: INFO: Deployment "test-rollover-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-rollover-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7973",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "11baa1ce-39b2-4c7a-9b94-0ae95e169fbe",
      ResourceVersion: (string) (len=5) "97878",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845447057,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447059,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000040  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000050  2c 22 66 3a 70 72 6f 67  72 65 73 73 44 65 61 64  |,"f:progressDead|
              00000060  6c 69 6e 65 53 65 63 6f  6e 64 73 22 3a 7b 7d 2c  |lineSeconds":{},|
              00000070  22 66 3a 72 65 70 6c 69  63 61 73 22 3a 7b 7d 2c  |"f:replicas":{},|
              00000080  22 66 3a 72 65 76 69 73  69 6f 6e 48 69 73 74 6f  |"f:revisionHisto|
              00000090  72 79 4c 69 6d 69 74 22  3a 7b 7d 2c 22 66 3a 73  |ryLimit":{},"f:s|
              000000a0  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 73  |elector":{},"f:s|
              000000b0  74 72 61 74 65 67 79 22  3a 7b 22 66 3a 72 6f 6c  |trategy":{"f:rol|
              000000c0  6c 69 6e 67 55 70 64 61  74 65 22 3a 7b 22 2e 22  |lingUpdate":{"."|
              000000d0  3a 7b 7d 2c 22 66 3a 6d  61 78 53 75 72 67 65 22  |:{},"f:maxSurge"|
              000000e0  3a 7b 7d 2c 22 66 3a 6d  61 78 55 6e 61 76 61 69  |:{},"f:maxUnavai|
              000000f0  6c 61 62 6c 65 22 3a 7b  7d 7d 2c 22 66 3a 74 79  |lable":{}},"f:ty|
              00000100  70 65 22 3a 7b 7d 7d 2c  22 66 3a 74 65 6d 70 6c  |pe":{}},"f:templ|
              00000110  61 74 65 22 3a 7b 22 66  3a 6d 65 74 61 64 61 74  |ate":{"f:metadat|
              00000120  61 22 3a 7b 22 66 3a 6c  61 62 65 6c 73 22 3a 7b  |a":{"f:labels":{|
              00000130  22 2e 22 3a 7b 7d 2c 22  66 3a 6e 61 6d 65 22 3a  |".":{},"f:name":|
              00000140  7b 7d 7d 7d 2c 22 66 3a  73 70 65 63 22 3a 7b 22  |{}}},"f:spec":{"|
              00000150  66 3a 63 6f 6e 74 61 69  6e 65 72 73 22 3a 7b 22  |f:containers":{"|
              00000160  6b 3a 7b 5c 22 6e 61 6d  65 5c 22 3a 5c 22 61 67  |k:{\"name\":\"ag|
              00000170  6e 68 6f 73 74 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |nhost\"}":{".":{|
              00000180  7d 2c 22 66 3a 69 6d 61  67 65 22 3a 7b 7d 2c 22  |},"f:image":{},"|
              00000190  66 3a 69 6d 61 67 65 50  75 6c 6c 50 6f 6c 69 63  |f:imagePullPolic|
              000001a0  79 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |y":{},"f:name":{|
              000001b0  7d 2c 22 66 3a 72 65 73  6f 75 72 63 65 73 22 3a  |},"f:resources":|
              000001c0  7b 7d 2c 22 66 3a 73 65  63 75 72 69 74 79 43 6f  |{},"f:securityCo|
              000001d0  6e 74 65 78 74 22 3a 7b  7d 2c 22 66 3a 74 65 72  |ntext":{},"f:ter|
              000001e0  6d 69 6e 61 74 69 6f 6e  4d 65 73 73 61 67 65 50  |minationMessageP|
              000001f0  61 74 68 22 3a 7b 7d 2c  22 66 3a 74 65 72 6d 69  |ath":{},"f:termi|
              00000200  6e 61 74 69 6f 6e 4d 65  73 73 61 67 65 50 6f 6c  |nationMessagePol|
              00000210  69 63 79 22 3a 7b 7d 7d  7d 2c 22 66 3a 64 6e 73  |icy":{}}},"f:dns|
              00000220  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 72 65  |Policy":{},"f:re|
              00000230  73 74 61 72 74 50 6f 6c  69 63 79 22 3a 7b 7d 2c  |startPolicy":{},|
              00000240  22 66 3a 73 63 68 65 64  75 6c 65 72 4e 61 6d 65  |"f:schedulerName|
              00000250  22 3a 7b 7d 2c 22 66 3a  73 65 63 75 72 69 74 79  |":{},"f:security|
              00000260  43 6f 6e 74 65 78 74 22  3a 7b 7d 2c 22 66 3a 74  |Context":{},"f:t|
              00000270  65 72 6d 69 6e 61 74 69  6f 6e 47 72 61 63 65 50  |erminationGraceP|
              00000280  65 72 69 6f 64 53 65 63  6f 6e 64 73 22 3a 7b 7d  |eriodSeconds":{}|
              00000290  7d 7d 7d 7d                                       |}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447070,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 0,
            StrVal: (string) ""
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 1,
            StrVal: (string) ""
          })
        })
      },
      MinReadySeconds: (int32) 10,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 2,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447057,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447057,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447070,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447057,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=77) "ReplicaSet \"test-rollover-deployment-5d484bf7f9\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Mar  7 22:24:31.211: INFO: New ReplicaSet "test-rollover-deployment-5d484bf7f9" of Deployment "test-rollover-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-rollover-deployment-5d484bf7f9",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7973",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6903c0da-99a3-44ce-b124-264b9b745298",
      ResourceVersion: (string) (len=5) "97868",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845447059,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "11baa1ce-39b2-4c7a-9b94-0ae95e169fbe",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447059,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=806) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 31 31 62 61 61 31  63 65 2d 33 39 62 32 2d  |\"11baa1ce-39b2-|
              00000120  34 63 37 61 2d 39 62 39  34 2d 30 61 65 39 35 65  |4c7a-9b94-0ae95e|
              00000130  31 36 39 66 62 65 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |169fbe\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000150  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000160  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000170  2c 22 66 3a 73 65 6c 65  63 74 6f 72 22 3a 7b 7d  |,"f:selector":{}|
              00000180  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000190  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              000001a0  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              000001b0  22 66 3a 6e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 70  |"f:name":{},"f:p|
              000001c0  6f 64 2d 74 65 6d 70 6c  61 74 65 2d 68 61 73 68  |od-template-hash|
              000001d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000001e0  7b 22 66 3a 63 6f 6e 74  61 69 6e 65 72 73 22 3a  |{"f:containers":|
              000001f0  7b 22 6b 3a 7b 5c 22 6e  61 6d 65 5c 22 3a 5c 22  |{"k:{\"name\":\"|
              00000200  61 67 6e 68 6f 73 74 5c  22 7d 22 3a 7b 22 2e 22  |agnhost\"}":{"."|
              00000210  3a 7b 7d 2c 22 66 3a 69  6d 61 67 65 22 3a 7b 7d  |:{},"f:image":{}|
              00000220  2c 22 66 3a 69 6d 61 67  65 50 75 6c 6c 50 6f 6c  |,"f:imagePullPol|
              00000230  69 63 79 22 3a 7b 7d 2c  22 66 3a 6e 61 6d 65 22  |icy":{},"f:name"|
              00000240  3a 7b 7d 2c 22 66 3a 72  65 73 6f 75 72 63 65 73  |:{},"f:resources|
              00000250  22 3a 7b 7d 2c 22 66 3a  73 65 63 75 72 69 74 79  |":{},"f:security|
              00000260  43 6f 6e 74 65 78 74 22  3a 7b 7d 2c 22 66 3a 74  |Context":{},"f:t|
              00000270  65 72 6d 69 6e 61 74 69  6f 6e 4d 65 73 73 61 67  |erminationMessag|
              00000280  65 50 61 74 68 22 3a 7b  7d 2c 22 66 3a 74 65 72  |ePath":{},"f:ter|
              00000290  6d 69 6e 61 74 69 6f 6e  4d 65 73 73 61 67 65 50  |minationMessageP|
              000002a0  6f 6c 69 63 79 22 3a 7b  7d 7d 7d 2c 22 66 3a 64  |olicy":{}}},"f:d|
              000002b0  6e 73 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |nsPolicy":{},"f:|
              000002c0  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000002d0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000002e0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000002f0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              00000300  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              00000310  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              00000320  7b 7d 7d 7d 7d 7d                                 |{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447070,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 10,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Mar  7 22:24:31.211: INFO: All old ReplicaSets of Deployment "test-rollover-deployment":
  Mar  7 22:24:31.211: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-rollover-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7973",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "c8555d40-06f9-4715-bba3-116691e5ccd7",
      ResourceVersion: (string) (len=5) "97877",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845447049,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=2) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "11baa1ce-39b2-4c7a-9b94-0ae95e169fbe",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=467) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              00000030  3a 70 6f 64 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |:pod":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  73 65 6c 65 63 74 6f 72  |ec":{"f:selector|
              00000050  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000060  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000070  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              00000080  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              00000090  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              000000a0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              000000b0  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              000000c0  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              000000d0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              000000e0  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              000000f0  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000100  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000110  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |rces":{},"f:term|
              00000120  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000130  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000140  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000150  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000160  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              00000170  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              00000180  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              00000190  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000001a0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              000001b0  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              000001c0  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              000001d0  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447070,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=249) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 7d 2c 22 66  3a 6f 77 6e 65 72 52 65  |":{}},"f:ownerRe|
              00000090  66 65 72 65 6e 63 65 73  22 3a 7b 22 2e 22 3a 7b  |ferences":{".":{|
              000000a0  7d 2c 22 6b 3a 7b 5c 22  75 69 64 5c 22 3a 5c 22  |},"k:{\"uid\":\"|
              000000b0  31 31 62 61 61 31 63 65  2d 33 39 62 32 2d 34 63  |11baa1ce-39b2-4c|
              000000c0  37 61 2d 39 62 39 34 2d  30 61 65 39 35 65 31 36  |7a-9b94-0ae95e16|
              000000d0  39 66 62 65 5c 22 7d 22  3a 7b 7d 7d 7d 2c 22 66  |9fbe\"}":{}}},"f|
              000000e0  3a 73 70 65 63 22 3a 7b  22 66 3a 72 65 70 6c 69  |:spec":{"f:repli|
              000000f0  63 61 73 22 3a 7b 7d 7d  7d                       |cas":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447070,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Mar  7 22:24:31.212: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-rollover-deployment-664fc6c874",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7973",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "581de26f-e1f7-4d0b-a085-de224f04e8b4",
      ResourceVersion: (string) (len=5) "97832",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845447057,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "11baa1ce-39b2-4c7a-9b94-0ae95e169fbe",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447059,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=810) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 31 31 62 61 61 31  63 65 2d 33 39 62 32 2d  |\"11baa1ce-39b2-|
              00000120  34 63 37 61 2d 39 62 39  34 2d 30 61 65 39 35 65  |4c7a-9b94-0ae95e|
              00000130  31 36 39 66 62 65 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |169fbe\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000150  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000160  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000170  2c 22 66 3a 73 65 6c 65  63 74 6f 72 22 3a 7b 7d  |,"f:selector":{}|
              00000180  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000190  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              000001a0  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              000001b0  22 66 3a 6e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 70  |"f:name":{},"f:p|
              000001c0  6f 64 2d 74 65 6d 70 6c  61 74 65 2d 68 61 73 68  |od-template-hash|
              000001d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000001e0  7b 22 66 3a 63 6f 6e 74  61 69 6e 65 72 73 22 3a  |{"f:containers":|
              000001f0  7b 22 6b 3a 7b 5c 22 6e  61 6d 65 5c 22 3a 5c 22  |{"k:{\"name\":\"|
              00000200  72 65 64 69 73 2d 73 6c  61 76 65 5c 22 7d 22 3a  |redis-slave\"}":|
              00000210  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              00000220  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000230  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000240  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000250  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 73 65 63 75  |rces":{},"f:secu|
              00000260  72 69 74 79 43 6f 6e 74  65 78 74 22 3a 7b 7d 2c  |rityContext":{},|
              00000270  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000280  73 73 61 67 65 50 61 74  68 22 3a 7b 7d 2c 22 66  |ssagePath":{},"f|
              00000290  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 4d 65 73 73  |:terminationMess|
              000002a0  61 67 65 50 6f 6c 69 63  79 22 3a 7b 7d 7d 7d 2c  |agePolicy":{}}},|
              000002b0  22 66 3a 64 6e 73 50 6f  6c 69 63 79 22 3a 7b 7d  |"f:dnsPolicy":{}|
              000002c0  2c 22 66 3a 72 65 73 74  61 72 74 50 6f 6c 69 63  |,"f:restartPolic|
              000002d0  79 22 3a 7b 7d 2c 22 66  3a 73 63 68 65 64 75 6c  |y":{},"f:schedul|
              000002e0  65 72 4e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 73 65  |erName":{},"f:se|
              000002f0  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000300  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000310  47 72 61 63 65 50 65 72  69 6f 64 53 65 63 6f 6e  |GracePeriodSecon|
              00000320  64 73 22 3a 7b 7d 7d 7d  7d 7d                    |ds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447059,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 10,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=11) "redis-slave",
              Image: (string) (len=47) "gcr.io/google_samples/gb-redisslave:nonexistent",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Mar  7 22:24:31.215: INFO: Pod "test-rollover-deployment-5d484bf7f9-j6t49" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=41) "test-rollover-deployment-5d484bf7f9-j6t49",
      GenerateName: (string) (len=36) "test-rollover-deployment-5d484bf7f9-",
      Namespace: (string) (len=15) "deployment-7973",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "4044eeaa-f71b-4762-aaff-7815a0877bc6",
      ResourceVersion: (string) (len=5) "97848",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845447059,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "06a21175d03844624add8e4ee87efcf3d7a02d2bbc2615f90bc1f02e5cc4ebd1",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=13) "10.1.51.66/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=13) "10.1.51.66/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=35) "test-rollover-deployment-5d484bf7f9",
          UID: (types.UID) (len=36) "6903c0da-99a3-44ce-b124-264b9b745298",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447059,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447059,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 36 39  30 33 63 30 64 61 2d 39  |d\":\"6903c0da-9|
              00000090  39 61 33 2d 34 34 63 65  2d 62 31 32 34 2d 32 36  |9a3-44ce-b124-26|
              000000a0  34 62 39 62 37 34 35 32  39 38 5c 22 7d 22 3a 7b  |4b9b745298\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447060,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=659) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 35 31 2e 36 36  5c 22 7d 22 3a 7b 22 2e  |.1.51.66\"}":{".|
              00000270  22 3a 7b 7d 2c 22 66 3a  69 70 22 3a 7b 7d 7d 7d  |":{},"f:ip":{}}}|
              00000280  2c 22 66 3a 73 74 61 72  74 54 69 6d 65 22 3a 7b  |,"f:startTime":{|
              00000290  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-t9j7m",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-t9j7m",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447060,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447059,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447060,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447060,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447059,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) (len=10) "10.1.51.66",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=10) "10.1.51.66"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845447059,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=7) "agnhost",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845447059,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          ImageID: (string) (len=111) "registry.k8s.io/e2e-test-images/agnhost@sha256:2c5b5b056076334e4cf431d964d102e44cbca8f1e6b16ac1e477a0ffbe6caac4",
          ContainerID: (string) (len=77) "containerd://4ea6dee6a41f5e092c0f1f3b9f46b5069015b970160d044317572f8c611ed194",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 22:24:31.215: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-7973" for this suite. @ 03/07/24 22:24:31.218
• [21.272 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1373
  STEP: Creating a kubernetes client @ 03/07/24 22:24:31.228
  Mar  7 22:24:31.228: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 22:24:31.229
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:24:31.245
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:24:31.247
  STEP: validating cluster-info @ 03/07/24 22:24:31.25
  Mar  7 22:24:31.250: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-1640 cluster-info'
  Mar  7 22:24:31.295: INFO: stderr: ""
  Mar  7 22:24:31.295: INFO: stdout: "\x1b[0;32mKubernetes control plane\x1b[0m is running at \x1b[0;33mhttps://10.152.183.1:443\x1b[0m\n\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n"
  Mar  7 22:24:31.295: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-1640" for this suite. @ 03/07/24 22:24:31.298
• [0.076 seconds]
------------------------------
SSS
------------------------------
[sig-apps] Job should apply changes to a job status [Conformance] [sig-apps, Conformance]
test/e2e/apps/job.go:784
  STEP: Creating a kubernetes client @ 03/07/24 22:24:31.305
  Mar  7 22:24:31.305: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename job @ 03/07/24 22:24:31.305
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:24:31.326
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:24:31.334
  STEP: Creating a job @ 03/07/24 22:24:31.341
  STEP: Ensure pods equal to parallelism count is attached to the job @ 03/07/24 22:24:31.356
  STEP: patching /status @ 03/07/24 22:24:33.371
  STEP: updating /status @ 03/07/24 22:24:33.398
  STEP: get /status @ 03/07/24 22:24:33.419
  Mar  7 22:24:33.427: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-6646" for this suite. @ 03/07/24 22:24:33.434
• [2.144 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:200
  STEP: Creating a kubernetes client @ 03/07/24 22:24:33.449
  Mar  7 22:24:33.449: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir @ 03/07/24 22:24:33.449
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:24:33.472
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:24:33.474
  STEP: Creating a pod to test emptydir 0644 on node default medium @ 03/07/24 22:24:33.476
  STEP: Saw pod success @ 03/07/24 22:24:37.518
  Mar  7 22:24:37.527: INFO: Trying to get logs from node whiskas-1 pod pod-ea089349-2176-43ab-aa5a-2d6ff832a1a4 container test-container: <nil>
  STEP: delete the pod @ 03/07/24 22:24:37.543
  Mar  7 22:24:37.595: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-9560" for this suite. @ 03/07/24 22:24:37.607
• [4.183 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-architecture] Conformance Tests should have at least two untainted nodes [Conformance] [sig-architecture, Conformance]
test/e2e/architecture/conformance.go:39
  STEP: Creating a kubernetes client @ 03/07/24 22:24:37.64
  Mar  7 22:24:37.640: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename conformance-tests @ 03/07/24 22:24:37.642
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:24:37.674
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:24:37.678
  STEP: Getting node addresses @ 03/07/24 22:24:37.681
  Mar  7 22:24:37.682: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  Mar  7 22:24:37.688: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "conformance-tests-7547" for this suite. @ 03/07/24 22:24:37.692
• [0.062 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/garbage_collector.go:639
  STEP: Creating a kubernetes client @ 03/07/24 22:24:37.702
  Mar  7 22:24:37.702: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename gc @ 03/07/24 22:24:37.703
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:24:37.726
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:24:37.729
  STEP: create the rc @ 03/07/24 22:24:37.734
  W0307 22:24:37.740631      20 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: delete the rc @ 03/07/24 22:24:43.747
  STEP: wait for the rc to be deleted @ 03/07/24 22:24:43.776
  Mar  7 22:24:44.825: INFO: 86 pods remaining
  Mar  7 22:24:44.825: INFO: 81 pods has nil DeletionTimestamp
  Mar  7 22:24:44.825: INFO: 
  Mar  7 22:24:45.840: INFO: 71 pods remaining
  Mar  7 22:24:45.840: INFO: 71 pods has nil DeletionTimestamp
  Mar  7 22:24:45.840: INFO: 
  Mar  7 22:24:46.842: INFO: 58 pods remaining
  Mar  7 22:24:46.842: INFO: 57 pods has nil DeletionTimestamp
  Mar  7 22:24:46.842: INFO: 
  Mar  7 22:24:47.822: INFO: 43 pods remaining
  Mar  7 22:24:47.822: INFO: 43 pods has nil DeletionTimestamp
  Mar  7 22:24:47.822: INFO: 
  Mar  7 22:24:48.798: INFO: 33 pods remaining
  Mar  7 22:24:48.798: INFO: 32 pods has nil DeletionTimestamp
  Mar  7 22:24:48.798: INFO: 
  Mar  7 22:24:49.802: INFO: 17 pods remaining
  Mar  7 22:24:49.802: INFO: 17 pods has nil DeletionTimestamp
  Mar  7 22:24:49.802: INFO: 
  Mar  7 22:24:50.808: INFO: 0 pods remaining
  Mar  7 22:24:50.808: INFO: 0 pods has nil DeletionTimestamp
  Mar  7 22:24:50.808: INFO: 
  STEP: Gathering metrics @ 03/07/24 22:24:51.789
  W0307 22:24:51.796284      20 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Mar  7 22:24:51.796: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Mar  7 22:24:51.796: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-6647" for this suite. @ 03/07/24 22:24:51.8
• [14.111 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:572
  STEP: Creating a kubernetes client @ 03/07/24 22:24:51.813
  Mar  7 22:24:51.813: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 22:24:51.814
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:24:51.844
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:24:51.861
  STEP: Setting up server cert @ 03/07/24 22:24:51.945
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 22:24:52.279
  STEP: Deploying the webhook pod @ 03/07/24 22:24:52.299
  STEP: Wait for the deployment to be ready @ 03/07/24 22:24:52.324
  Mar  7 22:24:52.339: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  Mar  7 22:24:54.349: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.March, 7, 22, 24, 52, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 22, 24, 52, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 22, 24, 52, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 22, 24, 52, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-webhook-deployment-7646f658cc\" is progressing."}}, CollisionCount:(*int32)(nil)}
  STEP: Deploying the webhook service @ 03/07/24 22:24:56.36
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:24:56.395
  Mar  7 22:24:57.402: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Listing all of the created validation webhooks @ 03/07/24 22:24:57.527
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 03/07/24 22:24:57.552
  STEP: Deleting the collection of validation webhooks @ 03/07/24 22:24:57.569
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 03/07/24 22:24:57.65
  Mar  7 22:24:57.721: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-8978" for this suite. @ 03/07/24 22:24:57.724
  STEP: Destroying namespace "webhook-markers-7001" for this suite. @ 03/07/24 22:24:57.742
• [5.948 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:110
  STEP: Creating a kubernetes client @ 03/07/24 22:24:57.762
  Mar  7 22:24:57.762: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir @ 03/07/24 22:24:57.762
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:24:57.781
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:24:57.783
  STEP: Creating a pod to test emptydir 0666 on tmpfs @ 03/07/24 22:24:57.785
  STEP: Saw pod success @ 03/07/24 22:25:01.817
  Mar  7 22:25:01.826: INFO: Trying to get logs from node whiskas-1 pod pod-f72c887d-0cbe-4d2d-ad2c-f4e5f5c74917 container test-container: <nil>
  STEP: delete the pod @ 03/07/24 22:25:01.843
  Mar  7 22:25:01.900: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-1541" for this suite. @ 03/07/24 22:25:01.911
• [4.171 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:424
  STEP: Creating a kubernetes client @ 03/07/24 22:25:01.933
  Mar  7 22:25:01.933: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename configmap @ 03/07/24 22:25:01.934
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:25:01.961
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:25:01.963
  STEP: Creating configMap with name configmap-test-volume-f99a95a1-78d7-4acc-9554-cfda25e21937 @ 03/07/24 22:25:01.965
  STEP: Creating a pod to test consume configMaps @ 03/07/24 22:25:01.97
  STEP: Saw pod success @ 03/07/24 22:25:03.985
  Mar  7 22:25:03.988: INFO: Trying to get logs from node whiskas-1 pod pod-configmaps-32b41592-b73d-44d6-a489-b9ec6f345562 container configmap-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 22:25:03.991
  Mar  7 22:25:04.008: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-8001" for this suite. @ 03/07/24 22:25:04.011
• [2.086 seconds]
------------------------------
[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/garbage_collector.go:380
  STEP: Creating a kubernetes client @ 03/07/24 22:25:04.019
  Mar  7 22:25:04.019: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename gc @ 03/07/24 22:25:04.019
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:25:04.033
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:25:04.034
  STEP: create the rc @ 03/07/24 22:25:04.039
  W0307 22:25:04.044597      20 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: delete the rc @ 03/07/24 22:25:10.078
  STEP: wait for the rc to be deleted @ 03/07/24 22:25:10.146
  STEP: wait for 30 seconds to see if the garbage collector mistakenly deletes the pods @ 03/07/24 22:25:15.174
  STEP: Gathering metrics @ 03/07/24 22:25:45.242
  W0307 22:25:45.253490      20 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Mar  7 22:25:45.253: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Mar  7 22:25:45.253: INFO: Deleting pod "simpletest.rc-2d5cf" in namespace "gc-2853"
  Mar  7 22:25:45.277: INFO: Deleting pod "simpletest.rc-2sq9t" in namespace "gc-2853"
  Mar  7 22:25:45.310: INFO: Deleting pod "simpletest.rc-4fv7b" in namespace "gc-2853"
  Mar  7 22:25:45.325: INFO: Deleting pod "simpletest.rc-4zggn" in namespace "gc-2853"
  Mar  7 22:25:45.362: INFO: Deleting pod "simpletest.rc-55twz" in namespace "gc-2853"
  Mar  7 22:25:45.409: INFO: Deleting pod "simpletest.rc-5wl5n" in namespace "gc-2853"
  Mar  7 22:25:45.443: INFO: Deleting pod "simpletest.rc-68jzf" in namespace "gc-2853"
  Mar  7 22:25:45.473: INFO: Deleting pod "simpletest.rc-6btqz" in namespace "gc-2853"
  Mar  7 22:25:45.500: INFO: Deleting pod "simpletest.rc-6jk2l" in namespace "gc-2853"
  Mar  7 22:25:45.530: INFO: Deleting pod "simpletest.rc-6sxtm" in namespace "gc-2853"
  Mar  7 22:25:45.576: INFO: Deleting pod "simpletest.rc-6xt5p" in namespace "gc-2853"
  Mar  7 22:25:45.604: INFO: Deleting pod "simpletest.rc-6xwb7" in namespace "gc-2853"
  Mar  7 22:25:45.632: INFO: Deleting pod "simpletest.rc-7hcl9" in namespace "gc-2853"
  Mar  7 22:25:45.668: INFO: Deleting pod "simpletest.rc-7nr6j" in namespace "gc-2853"
  Mar  7 22:25:45.686: INFO: Deleting pod "simpletest.rc-82vmd" in namespace "gc-2853"
  Mar  7 22:25:45.746: INFO: Deleting pod "simpletest.rc-856lp" in namespace "gc-2853"
  Mar  7 22:25:45.781: INFO: Deleting pod "simpletest.rc-8684f" in namespace "gc-2853"
  Mar  7 22:25:45.822: INFO: Deleting pod "simpletest.rc-88gkx" in namespace "gc-2853"
  Mar  7 22:25:45.875: INFO: Deleting pod "simpletest.rc-8ldn5" in namespace "gc-2853"
  Mar  7 22:25:45.966: INFO: Deleting pod "simpletest.rc-8mzsw" in namespace "gc-2853"
  Mar  7 22:25:46.010: INFO: Deleting pod "simpletest.rc-8rlcq" in namespace "gc-2853"
  Mar  7 22:25:46.047: INFO: Deleting pod "simpletest.rc-94lmf" in namespace "gc-2853"
  Mar  7 22:25:46.107: INFO: Deleting pod "simpletest.rc-95l54" in namespace "gc-2853"
  Mar  7 22:25:46.203: INFO: Deleting pod "simpletest.rc-9d6lw" in namespace "gc-2853"
  Mar  7 22:25:46.299: INFO: Deleting pod "simpletest.rc-9whfd" in namespace "gc-2853"
  Mar  7 22:25:46.339: INFO: Deleting pod "simpletest.rc-b857w" in namespace "gc-2853"
  Mar  7 22:25:46.390: INFO: Deleting pod "simpletest.rc-bmkdh" in namespace "gc-2853"
  Mar  7 22:25:46.457: INFO: Deleting pod "simpletest.rc-c2dtg" in namespace "gc-2853"
  Mar  7 22:25:46.493: INFO: Deleting pod "simpletest.rc-cfsh6" in namespace "gc-2853"
  Mar  7 22:25:46.548: INFO: Deleting pod "simpletest.rc-cktg2" in namespace "gc-2853"
  Mar  7 22:25:46.594: INFO: Deleting pod "simpletest.rc-cqrbz" in namespace "gc-2853"
  Mar  7 22:25:46.661: INFO: Deleting pod "simpletest.rc-cvwjf" in namespace "gc-2853"
  Mar  7 22:25:46.737: INFO: Deleting pod "simpletest.rc-d9x7l" in namespace "gc-2853"
  Mar  7 22:25:46.861: INFO: Deleting pod "simpletest.rc-dbr8v" in namespace "gc-2853"
  Mar  7 22:25:46.969: INFO: Deleting pod "simpletest.rc-dk947" in namespace "gc-2853"
  Mar  7 22:25:47.044: INFO: Deleting pod "simpletest.rc-dmn5r" in namespace "gc-2853"
  Mar  7 22:25:47.120: INFO: Deleting pod "simpletest.rc-dq7bg" in namespace "gc-2853"
  Mar  7 22:25:47.180: INFO: Deleting pod "simpletest.rc-dtw6z" in namespace "gc-2853"
  Mar  7 22:25:47.203: INFO: Deleting pod "simpletest.rc-fdjjz" in namespace "gc-2853"
  Mar  7 22:25:47.286: INFO: Deleting pod "simpletest.rc-fvm2z" in namespace "gc-2853"
  Mar  7 22:25:47.339: INFO: Deleting pod "simpletest.rc-gfm9k" in namespace "gc-2853"
  Mar  7 22:25:47.460: INFO: Deleting pod "simpletest.rc-ghh6g" in namespace "gc-2853"
  Mar  7 22:25:47.518: INFO: Deleting pod "simpletest.rc-ghtp8" in namespace "gc-2853"
  Mar  7 22:25:47.585: INFO: Deleting pod "simpletest.rc-gjwrw" in namespace "gc-2853"
  Mar  7 22:25:47.650: INFO: Deleting pod "simpletest.rc-gzsps" in namespace "gc-2853"
  Mar  7 22:25:47.697: INFO: Deleting pod "simpletest.rc-h8vkl" in namespace "gc-2853"
  Mar  7 22:25:47.768: INFO: Deleting pod "simpletest.rc-hdl4n" in namespace "gc-2853"
  Mar  7 22:25:47.819: INFO: Deleting pod "simpletest.rc-hn97h" in namespace "gc-2853"
  Mar  7 22:25:47.877: INFO: Deleting pod "simpletest.rc-hqq28" in namespace "gc-2853"
  Mar  7 22:25:47.913: INFO: Deleting pod "simpletest.rc-hvhxh" in namespace "gc-2853"
  Mar  7 22:25:48.027: INFO: Deleting pod "simpletest.rc-hvtqb" in namespace "gc-2853"
  Mar  7 22:25:48.112: INFO: Deleting pod "simpletest.rc-hzwb9" in namespace "gc-2853"
  Mar  7 22:25:48.158: INFO: Deleting pod "simpletest.rc-jl7tr" in namespace "gc-2853"
  Mar  7 22:25:48.182: INFO: Deleting pod "simpletest.rc-jsb7q" in namespace "gc-2853"
  Mar  7 22:25:48.227: INFO: Deleting pod "simpletest.rc-jvgpf" in namespace "gc-2853"
  Mar  7 22:25:48.267: INFO: Deleting pod "simpletest.rc-k64dq" in namespace "gc-2853"
  Mar  7 22:25:48.341: INFO: Deleting pod "simpletest.rc-k9vdx" in namespace "gc-2853"
  Mar  7 22:25:48.424: INFO: Deleting pod "simpletest.rc-kmjrl" in namespace "gc-2853"
  Mar  7 22:25:48.461: INFO: Deleting pod "simpletest.rc-lbmsd" in namespace "gc-2853"
  Mar  7 22:25:48.487: INFO: Deleting pod "simpletest.rc-ld4gk" in namespace "gc-2853"
  Mar  7 22:25:48.549: INFO: Deleting pod "simpletest.rc-mttwl" in namespace "gc-2853"
  Mar  7 22:25:48.648: INFO: Deleting pod "simpletest.rc-n2ctk" in namespace "gc-2853"
  Mar  7 22:25:48.685: INFO: Deleting pod "simpletest.rc-n9mtr" in namespace "gc-2853"
  Mar  7 22:25:48.764: INFO: Deleting pod "simpletest.rc-nnt22" in namespace "gc-2853"
  Mar  7 22:25:48.804: INFO: Deleting pod "simpletest.rc-nwqc9" in namespace "gc-2853"
  Mar  7 22:25:48.843: INFO: Deleting pod "simpletest.rc-pfrpp" in namespace "gc-2853"
  Mar  7 22:25:48.877: INFO: Deleting pod "simpletest.rc-pjbsz" in namespace "gc-2853"
  Mar  7 22:25:48.912: INFO: Deleting pod "simpletest.rc-pncrt" in namespace "gc-2853"
  Mar  7 22:25:48.960: INFO: Deleting pod "simpletest.rc-ppdt2" in namespace "gc-2853"
  Mar  7 22:25:49.013: INFO: Deleting pod "simpletest.rc-pvmns" in namespace "gc-2853"
  Mar  7 22:25:49.080: INFO: Deleting pod "simpletest.rc-pw6vf" in namespace "gc-2853"
  Mar  7 22:25:49.121: INFO: Deleting pod "simpletest.rc-rk688" in namespace "gc-2853"
  Mar  7 22:25:49.170: INFO: Deleting pod "simpletest.rc-rmw48" in namespace "gc-2853"
  Mar  7 22:25:49.216: INFO: Deleting pod "simpletest.rc-rxzt5" in namespace "gc-2853"
  Mar  7 22:25:49.299: INFO: Deleting pod "simpletest.rc-s4fk8" in namespace "gc-2853"
  Mar  7 22:25:49.379: INFO: Deleting pod "simpletest.rc-skxmx" in namespace "gc-2853"
  Mar  7 22:25:49.512: INFO: Deleting pod "simpletest.rc-slftw" in namespace "gc-2853"
  Mar  7 22:25:49.606: INFO: Deleting pod "simpletest.rc-svnf7" in namespace "gc-2853"
  Mar  7 22:25:49.739: INFO: Deleting pod "simpletest.rc-sw6j5" in namespace "gc-2853"
  Mar  7 22:25:49.779: INFO: Deleting pod "simpletest.rc-t4jvb" in namespace "gc-2853"
  Mar  7 22:25:49.904: INFO: Deleting pod "simpletest.rc-t4zw9" in namespace "gc-2853"
  Mar  7 22:25:49.937: INFO: Deleting pod "simpletest.rc-t7xfb" in namespace "gc-2853"
  Mar  7 22:25:49.973: INFO: Deleting pod "simpletest.rc-tc7fp" in namespace "gc-2853"
  Mar  7 22:25:50.015: INFO: Deleting pod "simpletest.rc-tgwv2" in namespace "gc-2853"
  Mar  7 22:25:50.063: INFO: Deleting pod "simpletest.rc-txxcw" in namespace "gc-2853"
  Mar  7 22:25:50.147: INFO: Deleting pod "simpletest.rc-vkxcs" in namespace "gc-2853"
  Mar  7 22:25:50.213: INFO: Deleting pod "simpletest.rc-vqtbw" in namespace "gc-2853"
  Mar  7 22:25:50.252: INFO: Deleting pod "simpletest.rc-wbpj8" in namespace "gc-2853"
  Mar  7 22:25:50.298: INFO: Deleting pod "simpletest.rc-wfrv7" in namespace "gc-2853"
  Mar  7 22:25:50.356: INFO: Deleting pod "simpletest.rc-wttfc" in namespace "gc-2853"
  Mar  7 22:25:50.418: INFO: Deleting pod "simpletest.rc-x622v" in namespace "gc-2853"
  Mar  7 22:25:50.477: INFO: Deleting pod "simpletest.rc-xdt8s" in namespace "gc-2853"
  Mar  7 22:25:50.525: INFO: Deleting pod "simpletest.rc-xftqc" in namespace "gc-2853"
  Mar  7 22:25:50.574: INFO: Deleting pod "simpletest.rc-xkz6k" in namespace "gc-2853"
  Mar  7 22:25:50.598: INFO: Deleting pod "simpletest.rc-xr4hk" in namespace "gc-2853"
  Mar  7 22:25:50.670: INFO: Deleting pod "simpletest.rc-xt8zq" in namespace "gc-2853"
  Mar  7 22:25:50.717: INFO: Deleting pod "simpletest.rc-xtvsc" in namespace "gc-2853"
  Mar  7 22:25:50.760: INFO: Deleting pod "simpletest.rc-xxptl" in namespace "gc-2853"
  Mar  7 22:25:50.784: INFO: Deleting pod "simpletest.rc-z8jtl" in namespace "gc-2853"
  Mar  7 22:25:50.853: INFO: Deleting pod "simpletest.rc-zz824" in namespace "gc-2853"
  Mar  7 22:25:50.898: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-2853" for this suite. @ 03/07/24 22:25:50.919
• [46.943 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1698
  STEP: Creating a kubernetes client @ 03/07/24 22:25:50.962
  Mar  7 22:25:50.962: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 22:25:50.962
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:25:51.014
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:25:51.024
  STEP: creating Agnhost RC @ 03/07/24 22:25:51.029
  Mar  7 22:25:51.030: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5160 create -f -'
  Mar  7 22:25:51.310: INFO: stderr: ""
  Mar  7 22:25:51.310: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 03/07/24 22:25:51.31
  Mar  7 22:25:52.314: INFO: Selector matched 1 pods for map[app:agnhost]
  Mar  7 22:25:52.314: INFO: Found 0 / 1
  Mar  7 22:25:53.314: INFO: Selector matched 1 pods for map[app:agnhost]
  Mar  7 22:25:53.314: INFO: Found 0 / 1
  Mar  7 22:25:54.320: INFO: Selector matched 1 pods for map[app:agnhost]
  Mar  7 22:25:54.320: INFO: Found 1 / 1
  Mar  7 22:25:54.320: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  STEP: patching all pods @ 03/07/24 22:25:54.32
  Mar  7 22:25:54.330: INFO: Selector matched 1 pods for map[app:agnhost]
  Mar  7 22:25:54.330: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Mar  7 22:25:54.330: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5160 patch pod agnhost-primary-g94kh -p {"metadata":{"annotations":{"x":"y"}}}'
  Mar  7 22:25:54.493: INFO: stderr: ""
  Mar  7 22:25:54.493: INFO: stdout: "pod/agnhost-primary-g94kh patched\n"
  STEP: checking annotations @ 03/07/24 22:25:54.494
  Mar  7 22:25:54.498: INFO: Selector matched 1 pods for map[app:agnhost]
  Mar  7 22:25:54.498: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Mar  7 22:25:54.499: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-5160" for this suite. @ 03/07/24 22:25:54.505
• [3.555 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/watch.go:334
  STEP: Creating a kubernetes client @ 03/07/24 22:25:54.517
  Mar  7 22:25:54.517: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename watch @ 03/07/24 22:25:54.518
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:25:54.541
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:25:54.547
  STEP: getting a starting resourceVersion @ 03/07/24 22:25:54.55
  STEP: starting a background goroutine to produce watch events @ 03/07/24 22:25:54.554
  STEP: creating watches starting from each resource version of the events produced and verifying they all receive resource versions in the same order @ 03/07/24 22:25:54.554
  Mar  7 22:25:57.329: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-2146" for this suite. @ 03/07/24 22:25:57.373
• [2.912 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/init_container.go:256
  STEP: Creating a kubernetes client @ 03/07/24 22:25:57.43
  Mar  7 22:25:57.430: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename init-container @ 03/07/24 22:25:57.43
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:25:57.466
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:25:57.47
  STEP: creating the pod @ 03/07/24 22:25:57.472
  Mar  7 22:25:57.472: INFO: PodSpec: initContainers in spec.initContainers
  Mar  7 22:26:00.737: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-9376" for this suite. @ 03/07/24 22:26:00.743
• [3.332 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:164
  STEP: Creating a kubernetes client @ 03/07/24 22:26:00.763
  Mar  7 22:26:00.763: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 22:26:00.764
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:26:00.799
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:26:00.801
  STEP: Creating the pod @ 03/07/24 22:26:00.804
  Mar  7 22:26:03.373: INFO: Successfully updated pod "annotationupdatea9e47629-8daa-4f01-9e67-e16d67ba0e1c"
  Mar  7 22:26:07.438: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-8870" for this suite. @ 03/07/24 22:26:07.449
• [6.709 seconds]
------------------------------
SSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/lifecycle_hook.go:169
  STEP: Creating a kubernetes client @ 03/07/24 22:26:07.471
  Mar  7 22:26:07.471: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 03/07/24 22:26:07.473
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:26:07.528
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:26:07.531
  STEP: create the container to handle the HTTPGet hook request. @ 03/07/24 22:26:07.539
  STEP: create the pod with lifecycle hook @ 03/07/24 22:26:09.585
  STEP: check poststart hook @ 03/07/24 22:26:11.638
  STEP: delete the pod with lifecycle hook @ 03/07/24 22:26:11.656
  Mar  7 22:26:15.716: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-9055" for this suite. @ 03/07/24 22:26:15.728
• [8.281 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/garbage_collector.go:322
  STEP: Creating a kubernetes client @ 03/07/24 22:26:15.753
  Mar  7 22:26:15.753: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename gc @ 03/07/24 22:26:15.755
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:26:15.811
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:26:15.814
  STEP: create the rc @ 03/07/24 22:26:15.817
  W0307 22:26:15.824632      20 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: delete the rc @ 03/07/24 22:26:20.828
  STEP: wait for all pods to be garbage collected @ 03/07/24 22:26:20.834
  STEP: Gathering metrics @ 03/07/24 22:26:25.861
  W0307 22:26:25.876273      20 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Mar  7 22:26:25.876: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Mar  7 22:26:25.876: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-5627" for this suite. @ 03/07/24 22:26:25.887
• [10.160 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance] [sig-network, NodeConformance, Conformance]
test/e2e/common/network/networking.go:125
  STEP: Creating a kubernetes client @ 03/07/24 22:26:25.916
  Mar  7 22:26:25.916: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pod-network-test @ 03/07/24 22:26:25.918
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:26:25.963
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:26:25.967
  STEP: Performing setup for networking test in namespace pod-network-test-6810 @ 03/07/24 22:26:25.97
  STEP: creating a selector @ 03/07/24 22:26:25.97
  STEP: Creating the service pods in kubernetes @ 03/07/24 22:26:25.97
  Mar  7 22:26:25.970: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 03/07/24 22:26:38.09
  Mar  7 22:26:40.184: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Mar  7 22:26:40.184: INFO: Going to poll 10.1.51.99 on port 8081 at least 0 times, with a maximum of 34 tries before failing
  Mar  7 22:26:40.193: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 10.1.51.99 8081 | grep -v '^\s*$'] Namespace:pod-network-test-6810 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:26:40.193: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:26:40.194: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:26:40.194: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-6810/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+10.1.51.99+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Mar  7 22:26:41.266: INFO: Found all 1 expected endpoints: [netserver-0]
  Mar  7 22:26:41.266: INFO: Going to poll 10.1.60.194 on port 8081 at least 0 times, with a maximum of 34 tries before failing
  Mar  7 22:26:41.268: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 10.1.60.194 8081 | grep -v '^\s*$'] Namespace:pod-network-test-6810 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:26:41.268: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:26:41.268: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:26:41.268: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-6810/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+10.1.60.194+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Mar  7 22:26:42.307: INFO: Found all 1 expected endpoints: [netserver-1]
  Mar  7 22:26:42.307: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-6810" for this suite. @ 03/07/24 22:26:42.31
• [16.401 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:120
  STEP: Creating a kubernetes client @ 03/07/24 22:26:42.317
  Mar  7 22:26:42.317: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir @ 03/07/24 22:26:42.318
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:26:42.335
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:26:42.337
  STEP: Creating a pod to test emptydir 0777 on tmpfs @ 03/07/24 22:26:42.362
  STEP: Saw pod success @ 03/07/24 22:26:44.378
  Mar  7 22:26:44.381: INFO: Trying to get logs from node whiskas-1 pod pod-56de1a4a-62f7-4f0d-9117-d102b72d2f7f container test-container: <nil>
  STEP: delete the pod @ 03/07/24 22:26:44.388
  Mar  7 22:26:44.410: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-2378" for this suite. @ 03/07/24 22:26:44.414
• [2.155 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:105
  STEP: Creating a kubernetes client @ 03/07/24 22:26:44.474
  Mar  7 22:26:44.474: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename deployment @ 03/07/24 22:26:44.476
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:26:44.527
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:26:44.538
  Mar  7 22:26:44.546: INFO: Creating replica set "test-rolling-update-controller" (going to be adopted)
  Mar  7 22:26:44.582: INFO: Pod name sample-pod: Found 0 pods out of 1
  Mar  7 22:26:49.588: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 03/07/24 22:26:49.588
  Mar  7 22:26:49.588: INFO: Creating deployment "test-rolling-update-deployment"
  Mar  7 22:26:49.594: INFO: Ensuring deployment "test-rolling-update-deployment" gets the next revision from the one the adopted replica set "test-rolling-update-controller" has
  Mar  7 22:26:49.603: INFO: new replicaset for deployment "test-rolling-update-deployment" is yet to be created
  Mar  7 22:26:51.623: INFO: Ensuring status for deployment "test-rolling-update-deployment" is the expected
  Mar  7 22:26:51.631: INFO: Ensuring deployment "test-rolling-update-deployment" has one old replica set (the one it adopted)
  Mar  7 22:26:51.661: INFO: Deployment "test-rolling-update-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-rolling-update-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9267",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "5d3e922d-d508-40f3-a396-e1df6451a780",
      ResourceVersion: (string) (len=6) "103306",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845447209,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=10) "sample-pod"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305833"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447209,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=637) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 61  67 6e 68 6f 73 74 5c 22  |me\":\"agnhost\"|
              00000160  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000170  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000180  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000190  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              000001a0  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              000001b0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001c0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              000001d0  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              000001e0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001f0  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000200  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              00000210  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              00000220  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              00000230  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000270  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447211,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=10) "sample-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=10) "sample-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447209,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447209,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447211,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447209,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=82) "ReplicaSet \"test-rolling-update-deployment-7f5c55c64\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Mar  7 22:26:51.673: INFO: New ReplicaSet "test-rolling-update-deployment-7f5c55c64" of Deployment "test-rolling-update-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=40) "test-rolling-update-deployment-7f5c55c64",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9267",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "bd9d2451-7522-4855-abff-943d2e530a3f",
      ResourceVersion: (string) (len=6) "103295",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845447209,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305833",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=30) "test-rolling-update-deployment",
          UID: (types.UID) (len=36) "5d3e922d-d508-40f3-a396-e1df6451a780",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447209,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 35 64 33 65 39 32  32 64 2d 64 35 30 38 2d  |\"5d3e922d-d508-|
              00000120  34 30 66 33 2d 61 33 39  36 2d 65 31 64 66 36 34  |40f3-a396-e1df64|
              00000130  35 31 61 37 38 30 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |51a780\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447211,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=10) "sample-pod",
          (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=10) "sample-pod",
            (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Mar  7 22:26:51.674: INFO: All old ReplicaSets of Deployment "test-rolling-update-deployment":
  Mar  7 22:26:51.674: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-rolling-update-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9267",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "cd0de030-74f2-40b3-a76f-d03d35f900ac",
      ResourceVersion: (string) (len=6) "103305",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845447204,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305832"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=30) "test-rolling-update-deployment",
          UID: (types.UID) (len=36) "5d3e922d-d508-40f3-a396-e1df6451a780",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447204,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=533) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  2c 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |,"f:labels":{"."|
              00000060  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              00000070  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              00000080  73 70 65 63 22 3a 7b 22  66 3a 73 65 6c 65 63 74  |spec":{"f:select|
              00000090  6f 72 22 3a 7b 7d 2c 22  66 3a 74 65 6d 70 6c 61  |or":{},"f:templa|
              000000a0  74 65 22 3a 7b 22 66 3a  6d 65 74 61 64 61 74 61  |te":{"f:metadata|
              000000b0  22 3a 7b 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |":{"f:labels":{"|
              000000c0  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              000000d0  7d 2c 22 66 3a 70 6f 64  22 3a 7b 7d 7d 7d 2c 22  |},"f:pod":{}}},"|
              000000e0  66 3a 73 70 65 63 22 3a  7b 22 66 3a 63 6f 6e 74  |f:spec":{"f:cont|
              000000f0  61 69 6e 65 72 73 22 3a  7b 22 6b 3a 7b 5c 22 6e  |ainers":{"k:{\"n|
              00000100  61 6d 65 5c 22 3a 5c 22  68 74 74 70 64 5c 22 7d  |ame\":\"httpd\"}|
              00000110  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |":{".":{},"f:ima|
              00000120  67 65 22 3a 7b 7d 2c 22  66 3a 69 6d 61 67 65 50  |ge":{},"f:imageP|
              00000130  75 6c 6c 50 6f 6c 69 63  79 22 3a 7b 7d 2c 22 66  |ullPolicy":{},"f|
              00000140  3a 6e 61 6d 65 22 3a 7b  7d 2c 22 66 3a 72 65 73  |:name":{},"f:res|
              00000150  6f 75 72 63 65 73 22 3a  7b 7d 2c 22 66 3a 74 65  |ources":{},"f:te|
              00000160  72 6d 69 6e 61 74 69 6f  6e 4d 65 73 73 61 67 65  |rminationMessage|
              00000170  50 61 74 68 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |Path":{},"f:term|
              00000180  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 6f  |inationMessagePo|
              00000190  6c 69 63 79 22 3a 7b 7d  7d 7d 2c 22 66 3a 64 6e  |licy":{}}},"f:dn|
              000001a0  73 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 72  |sPolicy":{},"f:r|
              000001b0  65 73 74 61 72 74 50 6f  6c 69 63 79 22 3a 7b 7d  |estartPolicy":{}|
              000001c0  2c 22 66 3a 73 63 68 65  64 75 6c 65 72 4e 61 6d  |,"f:schedulerNam|
              000001d0  65 22 3a 7b 7d 2c 22 66  3a 73 65 63 75 72 69 74  |e":{},"f:securit|
              000001e0  79 43 6f 6e 74 65 78 74  22 3a 7b 7d 2c 22 66 3a  |yContext":{},"f:|
              000001f0  74 65 72 6d 69 6e 61 74  69 6f 6e 47 72 61 63 65  |terminationGrace|
              00000200  50 65 72 69 6f 64 53 65  63 6f 6e 64 73 22 3a 7b  |PeriodSeconds":{|
              00000210  7d 7d 7d 7d 7d                                    |}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447211,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=242) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 66 3a 64 65 70 6c 6f  79 6d 65 6e 74 2e 6b 75  |"f:deployment.ku|
              00000030  62 65 72 6e 65 74 65 73  2e 69 6f 2f 64 65 73 69  |bernetes.io/desi|
              00000040  72 65 64 2d 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |red-replicas":{}|
              00000050  2c 22 66 3a 64 65 70 6c  6f 79 6d 65 6e 74 2e 6b  |,"f:deployment.k|
              00000060  75 62 65 72 6e 65 74 65  73 2e 69 6f 2f 6d 61 78  |ubernetes.io/max|
              00000070  2d 72 65 70 6c 69 63 61  73 22 3a 7b 7d 7d 2c 22  |-replicas":{}},"|
              00000080  66 3a 6f 77 6e 65 72 52  65 66 65 72 65 6e 63 65  |f:ownerReference|
              00000090  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 6b 3a 7b 5c  |s":{".":{},"k:{\|
              000000a0  22 75 69 64 5c 22 3a 5c  22 35 64 33 65 39 32 32  |"uid\":\"5d3e922|
              000000b0  64 2d 64 35 30 38 2d 34  30 66 33 2d 61 33 39 36  |d-d508-40f3-a396|
              000000c0  2d 65 31 64 66 36 34 35  31 61 37 38 30 5c 22 7d  |-e1df6451a780\"}|
              000000d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000000e0  7b 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |{"f:replicas":{}|
              000000f0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447211,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=3) "pod": (string) (len=5) "httpd",
          (string) (len=4) "name": (string) (len=10) "sample-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=10) "sample-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Mar  7 22:26:51.681: INFO: Pod "test-rolling-update-deployment-7f5c55c64-cpbwp" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=46) "test-rolling-update-deployment-7f5c55c64-cpbwp",
      GenerateName: (string) (len=41) "test-rolling-update-deployment-7f5c55c64-",
      Namespace: (string) (len=15) "deployment-9267",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "72c32e8b-e421-4907-97f4-8fd2b57851aa",
      ResourceVersion: (string) (len=6) "103294",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845447209,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "b2c85cdfe9f9dac380dacf45416ef07bd9b1a2e871944e361ae7b37e26bf3cfd",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=13) "10.1.51.71/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=13) "10.1.51.71/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=40) "test-rolling-update-deployment-7f5c55c64",
          UID: (types.UID) (len=36) "bd9d2451-7522-4855-abff-943d2e530a3f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447209,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 62 64  39 64 32 34 35 31 2d 37  |d\":\"bd9d2451-7|
              00000090  35 32 32 2d 34 38 35 35  2d 61 62 66 66 2d 39 34  |522-4855-abff-94|
              000000a0  33 64 32 65 35 33 30 61  33 66 5c 22 7d 22 3a 7b  |3d2e530a3f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447210,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447211,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=659) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 35 31 2e 37 31  5c 22 7d 22 3a 7b 22 2e  |.1.51.71\"}":{".|
              00000270  22 3a 7b 7d 2c 22 66 3a  69 70 22 3a 7b 7d 7d 7d  |":{},"f:ip":{}}}|
              00000280  2c 22 66 3a 73 74 61 72  74 54 69 6d 65 22 3a 7b  |,"f:startTime":{|
              00000290  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-5kph5",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-5kph5",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447211,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447209,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447211,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447211,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845447209,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) (len=10) "10.1.51.71",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=10) "10.1.51.71"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845447209,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=7) "agnhost",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845447210,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          ImageID: (string) (len=111) "registry.k8s.io/e2e-test-images/agnhost@sha256:2c5b5b056076334e4cf431d964d102e44cbca8f1e6b16ac1e477a0ffbe6caac4",
          ContainerID: (string) (len=77) "containerd://aef7c06ded5d14cea346e5ac4192f2ee8aa75c5c62c338f2f1d7b71a2204e2b3",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 22:26:51.682: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-9267" for this suite. @ 03/07/24 22:26:51.686
• [7.223 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:808
  STEP: Creating a kubernetes client @ 03/07/24 22:26:51.697
  Mar  7 22:26:51.697: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename resourcequota @ 03/07/24 22:26:51.697
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:26:51.716
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:26:51.718
  STEP: Creating a ResourceQuota with best effort scope @ 03/07/24 22:26:51.72
  STEP: Ensuring ResourceQuota status is calculated @ 03/07/24 22:26:51.725
  STEP: Creating a ResourceQuota with not best effort scope @ 03/07/24 22:26:53.734
  STEP: Ensuring ResourceQuota status is calculated @ 03/07/24 22:26:53.758
  STEP: Creating a best-effort pod @ 03/07/24 22:26:55.767
  STEP: Ensuring resource quota with best effort scope captures the pod usage @ 03/07/24 22:26:55.818
  STEP: Ensuring resource quota with not best effort ignored the pod usage @ 03/07/24 22:26:57.828
  STEP: Deleting the pod @ 03/07/24 22:26:59.838
  STEP: Ensuring resource quota status released the pod usage @ 03/07/24 22:26:59.887
  STEP: Creating a not best-effort pod @ 03/07/24 22:27:01.896
  STEP: Ensuring resource quota with not best effort scope captures the pod usage @ 03/07/24 22:27:01.939
  STEP: Ensuring resource quota with best effort scope ignored the pod usage @ 03/07/24 22:27:03.949
  STEP: Deleting the pod @ 03/07/24 22:27:05.958
  STEP: Ensuring resource quota status released the pod usage @ 03/07/24 22:27:06.011
  Mar  7 22:27:08.018: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-7440" for this suite. @ 03/07/24 22:27:08.021
• [16.343 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:90
  STEP: Creating a kubernetes client @ 03/07/24 22:27:08.041
  Mar  7 22:27:08.041: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir @ 03/07/24 22:27:08.043
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:27:08.089
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:27:08.099
  STEP: Creating a pod to test emptydir volume type on tmpfs @ 03/07/24 22:27:08.104
  STEP: Saw pod success @ 03/07/24 22:27:12.134
  Mar  7 22:27:12.136: INFO: Trying to get logs from node whiskas-1 pod pod-f37923e2-beba-4894-be95-9ef48925acc5 container test-container: <nil>
  STEP: delete the pod @ 03/07/24 22:27:12.14
  Mar  7 22:27:12.156: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-3642" for this suite. @ 03/07/24 22:27:12.159
• [4.126 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance] [sig-storage, Conformance]
test/e2e/common/storage/secrets_volume.go:386
  STEP: Creating a kubernetes client @ 03/07/24 22:27:12.166
  Mar  7 22:27:12.166: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename secrets @ 03/07/24 22:27:12.167
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:27:12.18
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:27:12.182
  Mar  7 22:27:12.225: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-2559" for this suite. @ 03/07/24 22:27:12.227
• [0.069 seconds]
------------------------------
SS
------------------------------
[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:125
  STEP: Creating a kubernetes client @ 03/07/24 22:27:12.236
  Mar  7 22:27:12.236: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename secrets @ 03/07/24 22:27:12.236
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:27:12.256
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:27:12.258
  STEP: Creating secret with name secret-test-316d3f9c-1f82-4728-bd89-5979b9922dd2 @ 03/07/24 22:27:12.26
  STEP: Creating a pod to test consume secrets @ 03/07/24 22:27:12.267
  STEP: Saw pod success @ 03/07/24 22:27:16.293
  Mar  7 22:27:16.302: INFO: Trying to get logs from node whiskas-1 pod pod-secrets-f67f8ebe-d288-4170-a346-526a8045bcca container secret-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 22:27:16.319
  Mar  7 22:27:16.381: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-6719" for this suite. @ 03/07/24 22:27:16.399
• [4.171 seconds]
------------------------------
[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/kubelet_etc_hosts.go:64
  STEP: Creating a kubernetes client @ 03/07/24 22:27:16.407
  Mar  7 22:27:16.407: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename e2e-kubelet-etc-hosts @ 03/07/24 22:27:16.408
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:27:16.423
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:27:16.426
  STEP: Setting up the test @ 03/07/24 22:27:16.428
  STEP: Creating hostNetwork=false pod @ 03/07/24 22:27:16.428
  STEP: Creating hostNetwork=true pod @ 03/07/24 22:27:18.461
  STEP: Running the test @ 03/07/24 22:27:20.508
  STEP: Verifying /etc/hosts of container is kubelet-managed for pod with hostNetwork=false @ 03/07/24 22:27:20.509
  Mar  7 22:27:20.509: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-4305 PodName:test-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:27:20.509: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:27:20.510: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:27:20.510: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-4305/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Mar  7 22:27:20.622: INFO: Exec stderr: ""
  Mar  7 22:27:20.622: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-4305 PodName:test-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:27:20.622: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:27:20.622: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:27:20.622: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-4305/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Mar  7 22:27:20.671: INFO: Exec stderr: ""
  Mar  7 22:27:20.671: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-4305 PodName:test-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:27:20.671: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:27:20.672: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:27:20.672: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-4305/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Mar  7 22:27:20.713: INFO: Exec stderr: ""
  Mar  7 22:27:20.713: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-4305 PodName:test-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:27:20.713: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:27:20.713: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:27:20.713: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-4305/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Mar  7 22:27:20.749: INFO: Exec stderr: ""
  STEP: Verifying /etc/hosts of container is not kubelet-managed since container specifies /etc/hosts mount @ 03/07/24 22:27:20.749
  Mar  7 22:27:20.749: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-4305 PodName:test-pod ContainerName:busybox-3 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:27:20.749: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:27:20.750: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:27:20.750: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-4305/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-3&container=busybox-3&stderr=true&stdout=true)
  Mar  7 22:27:20.777: INFO: Exec stderr: ""
  Mar  7 22:27:20.777: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-4305 PodName:test-pod ContainerName:busybox-3 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:27:20.777: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:27:20.777: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:27:20.777: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-4305/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-3&container=busybox-3&stderr=true&stdout=true)
  Mar  7 22:27:20.805: INFO: Exec stderr: ""
  STEP: Verifying /etc/hosts content of container is not kubelet-managed for pod with hostNetwork=true @ 03/07/24 22:27:20.805
  Mar  7 22:27:20.805: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-4305 PodName:test-host-network-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:27:20.805: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:27:20.805: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:27:20.805: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-4305/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Mar  7 22:27:20.835: INFO: Exec stderr: ""
  Mar  7 22:27:20.835: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-4305 PodName:test-host-network-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:27:20.835: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:27:20.836: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:27:20.836: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-4305/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Mar  7 22:27:20.862: INFO: Exec stderr: ""
  Mar  7 22:27:20.862: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-4305 PodName:test-host-network-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:27:20.862: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:27:20.862: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:27:20.862: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-4305/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Mar  7 22:27:20.891: INFO: Exec stderr: ""
  Mar  7 22:27:20.891: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-4305 PodName:test-host-network-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:27:20.891: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:27:20.891: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:27:20.891: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-4305/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Mar  7 22:27:20.917: INFO: Exec stderr: ""
  Mar  7 22:27:20.918: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "e2e-kubelet-etc-hosts-4305" for this suite. @ 03/07/24 22:27:20.92
• [4.520 seconds]
------------------------------
SSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance] [sig-apps, Conformance]
test/e2e/apps/statefulset.go:332
  STEP: Creating a kubernetes client @ 03/07/24 22:27:20.927
  Mar  7 22:27:20.927: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename statefulset @ 03/07/24 22:27:20.928
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:27:20.947
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:27:20.949
  STEP: Creating service test in namespace statefulset-8663 @ 03/07/24 22:27:20.952
  STEP: Creating a new StatefulSet @ 03/07/24 22:27:20.961
  Mar  7 22:27:20.975: INFO: Found 0 stateful pods, waiting for 3
  Mar  7 22:27:30.985: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Mar  7 22:27:30.985: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Mar  7 22:27:30.985: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Updating stateful set template: update image from registry.k8s.io/e2e-test-images/httpd:2.4.38-4 to registry.k8s.io/e2e-test-images/httpd:2.4.39-4 @ 03/07/24 22:27:31.014
  Mar  7 22:27:31.059: INFO: Updating stateful set ss2
  STEP: Creating a new revision @ 03/07/24 22:27:31.059
  STEP: Not applying an update when the partition is greater than the number of replicas @ 03/07/24 22:27:41.08
  STEP: Performing a canary update @ 03/07/24 22:27:41.08
  Mar  7 22:27:41.123: INFO: Updating stateful set ss2
  Mar  7 22:27:41.144: INFO: Waiting for Pod statefulset-8663/ss2-2 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  STEP: Restoring Pods to the correct revision when they are deleted @ 03/07/24 22:27:51.132
  Mar  7 22:27:51.233: INFO: Found 2 stateful pods, waiting for 3
  Mar  7 22:28:01.242: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Mar  7 22:28:01.242: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Mar  7 22:28:01.242: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Performing a phased rolling update @ 03/07/24 22:28:01.262
  Mar  7 22:28:01.307: INFO: Updating stateful set ss2
  Mar  7 22:28:01.326: INFO: Waiting for Pod statefulset-8663/ss2-1 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  Mar  7 22:28:11.375: INFO: Updating stateful set ss2
  Mar  7 22:28:11.393: INFO: Waiting for StatefulSet statefulset-8663/ss2 to complete update
  Mar  7 22:28:11.393: INFO: Waiting for Pod statefulset-8663/ss2-0 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  Mar  7 22:28:21.397: INFO: Deleting all statefulset in ns statefulset-8663
  Mar  7 22:28:21.405: INFO: Scaling statefulset ss2 to 0
  Mar  7 22:28:31.458: INFO: Waiting for statefulset status.replicas updated to 0
  Mar  7 22:28:31.466: INFO: Deleting statefulset ss2
  Mar  7 22:28:31.516: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-8663" for this suite. @ 03/07/24 22:28:31.522
• [70.607 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:214
  STEP: Creating a kubernetes client @ 03/07/24 22:28:31.535
  Mar  7 22:28:31.535: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-probe @ 03/07/24 22:28:31.536
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:28:31.553
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:28:31.556
  STEP: Creating pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299 @ 03/07/24 22:28:31.56
  STEP: checking the pod's current state and verifying that restartCount is present @ 03/07/24 22:28:33.582
  Mar  7 22:28:33.591: INFO: Initial restart count of pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 is 0
  Mar  7 22:28:33.600: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:28:35.609: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:28:37.619: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:28:39.630: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:28:41.642: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:28:43.651: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:28:45.662: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:28:47.673: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:28:49.683: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:28:51.687: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:28:53.697: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:28:55.707: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:28:57.718: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:28:59.728: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:01.740: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:03.750: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:05.760: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:07.770: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:09.780: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:11.791: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:13.802: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:15.812: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:17.824: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:19.840: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:21.851: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:23.861: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:25.871: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:27.881: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:29.890: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:31.902: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:33.911: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:35.921: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:37.931: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:39.941: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:41.952: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:43.963: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:45.973: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:47.984: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:49.995: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:52.007: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:54.017: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:56.026: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:29:58.037: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:00.047: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:02.051: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:04.061: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:06.071: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:08.082: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:10.092: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:12.108: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:14.118: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:16.128: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:18.139: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:20.149: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:22.153: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:24.163: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:26.172: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:28.182: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:30.193: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:32.201: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:34.211: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:36.221: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:38.231: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:40.241: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:42.252: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:44.262: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:46.271: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:48.282: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:50.292: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:52.303: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:54.313: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:56.322: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:30:58.332: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:00.342: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:02.354: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:04.364: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:06.373: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:08.382: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:10.390: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:12.402: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:14.413: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:16.422: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:18.433: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:20.443: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:22.454: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:24.464: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:26.473: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:28.531: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:30.542: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:32.554: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:34.566: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:36.575: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:38.578: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:40.588: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:42.599: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:44.610: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:46.620: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:48.623: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:50.634: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:52.645: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:54.656: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:56.665: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:31:58.671: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:00.681: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:02.693: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:04.703: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:06.713: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:08.724: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:10.735: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:12.745: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:14.755: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:16.765: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:18.775: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:20.784: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:22.795: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:24.805: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:26.815: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:28.825: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:30.835: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  Mar  7 22:32:32.846: INFO: Get pod test-webserver-61e0834d-5637-4391-b030-8896aa95d057 in namespace container-probe-4299
  STEP: deleting the pod @ 03/07/24 22:32:34.847
  Mar  7 22:32:34.887: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-4299" for this suite. @ 03/07/24 22:32:34.908
• [243.387 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:251
  STEP: Creating a kubernetes client @ 03/07/24 22:32:34.922
  Mar  7 22:32:34.922: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 22:32:34.923
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:32:34.944
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:32:34.946
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 22:32:34.949
  STEP: Saw pod success @ 03/07/24 22:32:38.981
  Mar  7 22:32:38.990: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-cff29cf0-5584-42f7-ac3f-33b521c6d273 container client-container: <nil>
  STEP: delete the pod @ 03/07/24 22:32:39.025
  Mar  7 22:32:39.090: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9598" for this suite. @ 03/07/24 22:32:39.101
• [4.196 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/preemption.go:224
  STEP: Creating a kubernetes client @ 03/07/24 22:32:39.119
  Mar  7 22:32:39.119: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename sched-preemption @ 03/07/24 22:32:39.121
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:32:39.154
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:32:39.158
  Mar  7 22:32:39.192: INFO: Waiting up to 1m0s for all nodes to be ready
  Mar  7 22:33:39.205: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Create pods that use 4/5 of node resources. @ 03/07/24 22:33:39.215
  Mar  7 22:33:39.261: INFO: Created pod: pod0-0-sched-preemption-low-priority
  Mar  7 22:33:39.305: INFO: Created pod: pod0-1-sched-preemption-medium-priority
  Mar  7 22:33:39.336: INFO: Created pod: pod1-0-sched-preemption-medium-priority
  Mar  7 22:33:39.360: INFO: Created pod: pod1-1-sched-preemption-medium-priority
  STEP: Wait for pods to be scheduled. @ 03/07/24 22:33:39.361
  STEP: Run a critical pod that use same resources as that of a lower priority pod @ 03/07/24 22:33:41.448
  Mar  7 22:33:45.601: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-9690" for this suite. @ 03/07/24 22:33:45.608
• [66.496 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:263
  STEP: Creating a kubernetes client @ 03/07/24 22:33:45.615
  Mar  7 22:33:45.615: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 22:33:45.616
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:33:45.641
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:33:45.648
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 22:33:45.655
  STEP: Saw pod success @ 03/07/24 22:33:49.701
  Mar  7 22:33:49.711: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-c6252b86-191c-4ac5-adbd-294afacaf677 container client-container: <nil>
  STEP: delete the pod @ 03/07/24 22:33:49.727
  Mar  7 22:33:49.779: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2922" for this suite. @ 03/07/24 22:33:49.785
• [4.182 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:263
  STEP: Creating a kubernetes client @ 03/07/24 22:33:49.799
  Mar  7 22:33:49.799: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 22:33:49.799
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:33:49.828
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:33:49.831
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 22:33:49.834
  STEP: Saw pod success @ 03/07/24 22:33:53.865
  Mar  7 22:33:53.876: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-39034b44-06f1-4123-8512-2594615449bc container client-container: <nil>
  STEP: delete the pod @ 03/07/24 22:33:53.887
  Mar  7 22:33:53.921: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-9955" for this suite. @ 03/07/24 22:33:53.925
• [4.135 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:210
  STEP: Creating a kubernetes client @ 03/07/24 22:33:53.934
  Mar  7 22:33:53.934: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 22:33:53.934
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:33:54.025
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:33:54.034
  STEP: Setting up server cert @ 03/07/24 22:33:54.114
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 22:33:54.512
  STEP: Deploying the webhook pod @ 03/07/24 22:33:54.523
  STEP: Wait for the deployment to be ready @ 03/07/24 22:33:54.544
  Mar  7 22:33:54.549: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 03/07/24 22:33:56.581
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:33:56.601
  Mar  7 22:33:57.601: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the webhook via the AdmissionRegistration API @ 03/07/24 22:33:57.619
  STEP: create a pod @ 03/07/24 22:33:57.662
  STEP: 'kubectl attach' the pod, should be denied by the webhook @ 03/07/24 22:33:59.695
  Mar  7 22:33:59.695: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=webhook-2779 attach --namespace=webhook-2779 to-be-attached-pod -i -c=container1'
  Mar  7 22:33:59.780: INFO: rc: 1
  Mar  7 22:33:59.906: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-2779" for this suite. @ 03/07/24 22:33:59.912
  STEP: Destroying namespace "webhook-markers-3104" for this suite. @ 03/07/24 22:33:59.925
• [6.009 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:309
  STEP: Creating a kubernetes client @ 03/07/24 22:33:59.943
  Mar  7 22:33:59.943: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename crd-publish-openapi @ 03/07/24 22:33:59.944
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:33:59.978
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:33:59.98
  STEP: CRs in the same group but different versions (one multiversion CRD) show up in OpenAPI documentation @ 03/07/24 22:33:59.982
  Mar  7 22:33:59.983: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: CRs in the same group but different versions (two CRDs) show up in OpenAPI documentation @ 03/07/24 22:34:05.106
  Mar  7 22:34:05.106: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:34:06.327: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:34:11.380: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-4182" for this suite. @ 03/07/24 22:34:11.385
• [11.454 seconds]
------------------------------
SS
------------------------------
[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance] [sig-node, Conformance]
test/e2e/common/node/configmap.go:139
  STEP: Creating a kubernetes client @ 03/07/24 22:34:11.398
  Mar  7 22:34:11.398: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename configmap @ 03/07/24 22:34:11.398
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:34:11.425
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:34:11.428
  STEP: Creating configMap that has name configmap-test-emptyKey-434190fe-9e15-41de-988c-fffd659e30c1 @ 03/07/24 22:34:11.43
  Mar  7 22:34:11.431: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-5737" for this suite. @ 03/07/24 22:34:11.433
• [0.048 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:183
  STEP: Creating a kubernetes client @ 03/07/24 22:34:11.446
  Mar  7 22:34:11.446: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-probe @ 03/07/24 22:34:11.446
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:34:11.468
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:34:11.471
  STEP: Creating pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213 @ 03/07/24 22:34:11.473
  STEP: checking the pod's current state and verifying that restartCount is present @ 03/07/24 22:34:13.506
  Mar  7 22:34:13.515: INFO: Initial restart count of pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c is 0
  Mar  7 22:34:13.524: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:15.535: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:17.546: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:19.555: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:21.559: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:23.570: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:25.580: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:27.592: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:29.602: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:31.612: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:33.624: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:35.634: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:37.646: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:39.657: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:41.667: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:43.678: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:45.688: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:47.700: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:49.711: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:51.715: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:53.725: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:55.766: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:57.779: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:34:59.789: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:01.800: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:03.810: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:05.826: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:07.839: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:09.849: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:11.859: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:13.868: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:15.878: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:17.890: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:19.901: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:21.911: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:23.917: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:25.928: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:27.940: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:29.950: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:31.961: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:33.971: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:35.982: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:37.994: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:40.004: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:42.014: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:44.018: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:46.027: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:48.039: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:50.049: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:52.054: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:54.064: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:56.074: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:35:58.085: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:00.089: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:02.093: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:04.103: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:06.113: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:08.125: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:10.132: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:12.135: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:14.144: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:16.155: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:18.166: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:20.170: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:22.177: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:24.187: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:26.197: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:28.209: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:30.219: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:32.230: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:34.241: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:36.250: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:38.262: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:40.272: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:42.282: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:44.293: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:46.302: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:48.313: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:50.324: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:52.334: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:54.344: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:56.348: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:36:58.359: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:00.370: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:02.381: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:04.388: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:06.392: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:08.402: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:10.413: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:12.423: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:14.433: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:16.442: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:18.454: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:20.464: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:22.475: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:24.485: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:26.495: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:28.507: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:30.517: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:32.529: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:34.540: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:36.549: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:38.556: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:40.567: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:42.577: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:44.587: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:46.597: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:48.601: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:50.610: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:52.620: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:54.630: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:56.640: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:37:58.650: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:38:00.661: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:38:02.671: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:38:04.681: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:38:06.691: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:38:08.703: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:38:10.713: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  Mar  7 22:38:12.724: INFO: Get pod liveness-fcf0791d-64ca-47ef-a681-57c3e0cf984c in namespace container-probe-8213
  STEP: deleting the pod @ 03/07/24 22:38:14.725
  Mar  7 22:38:14.784: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-8213" for this suite. @ 03/07/24 22:38:14.793
• [243.362 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance] [sig-api-machinery, Serial, Conformance]
test/e2e/apimachinery/namespace.go:245
  STEP: Creating a kubernetes client @ 03/07/24 22:38:14.809
  Mar  7 22:38:14.809: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename namespaces @ 03/07/24 22:38:14.81
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:38:14.832
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:38:14.834
  STEP: Creating a test namespace @ 03/07/24 22:38:14.836
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:38:14.851
  STEP: Creating a pod in the namespace @ 03/07/24 22:38:14.854
  STEP: Waiting for the pod to have running status @ 03/07/24 22:38:14.866
  STEP: Deleting the namespace @ 03/07/24 22:38:16.879
  STEP: Waiting for the namespace to be removed. @ 03/07/24 22:38:16.902
  STEP: Recreating the namespace @ 03/07/24 22:38:27.911
  STEP: Verifying there are no pods in the namespace @ 03/07/24 22:38:27.973
  Mar  7 22:38:27.984: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-1239" for this suite. @ 03/07/24 22:38:27.994
  STEP: Destroying namespace "nsdeletetest-5319" for this suite. @ 03/07/24 22:38:28.006
  Mar  7 22:38:28.011: INFO: Namespace nsdeletetest-5319 was already deleted
  STEP: Destroying namespace "nsdeletetest-1728" for this suite. @ 03/07/24 22:38:28.011
• [13.214 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Environment:NotInUserNS] [Conformance] [sig-node, NodeConformance, Environment:NotInUserNS, Conformance]
test/e2e/common/node/sysctl.go:79
  STEP: Creating a kubernetes client @ 03/07/24 22:38:28.024
  Mar  7 22:38:28.024: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename sysctl @ 03/07/24 22:38:28.025
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:38:28.112
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:38:28.12
  STEP: Creating a pod with the kernel.shm_rmid_forced sysctl @ 03/07/24 22:38:28.128
  STEP: Watching for error events or started pod @ 03/07/24 22:38:28.159
  STEP: Waiting for pod completion @ 03/07/24 22:38:30.177
  STEP: Checking that the pod succeeded @ 03/07/24 22:38:32.191
  STEP: Getting logs from the pod @ 03/07/24 22:38:32.191
  STEP: Checking that the sysctl is actually updated @ 03/07/24 22:38:32.202
  Mar  7 22:38:32.202: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sysctl-4083" for this suite. @ 03/07/24 22:38:32.206
• [4.195 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance] [sig-node, Conformance]
test/e2e/common/node/expansion.go:115
  STEP: Creating a kubernetes client @ 03/07/24 22:38:32.219
  Mar  7 22:38:32.219: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename var-expansion @ 03/07/24 22:38:32.22
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:38:32.24
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:38:32.243
  STEP: Creating a pod to test substitution in volume subpath @ 03/07/24 22:38:32.246
  STEP: Saw pod success @ 03/07/24 22:38:36.282
  Mar  7 22:38:36.291: INFO: Trying to get logs from node whiskas-1 pod var-expansion-44c32f24-a940-4434-b09e-926682c63dec container dapi-container: <nil>
  STEP: delete the pod @ 03/07/24 22:38:36.307
  Mar  7 22:38:36.365: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-6806" for this suite. @ 03/07/24 22:38:36.376
• [4.178 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_watch.go:51
  STEP: Creating a kubernetes client @ 03/07/24 22:38:36.397
  Mar  7 22:38:36.397: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename crd-watch @ 03/07/24 22:38:36.399
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:38:36.461
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:38:36.468
  Mar  7 22:38:36.470: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Creating first CR  @ 03/07/24 22:38:39.065
  Mar  7 22:38:39.079: INFO: Got : ADDED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-03-07T22:38:39Z generation:1 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-03-07T22:38:39Z]] name:name1 resourceVersion:105405 uid:7a9130d1-8f91-4e23-89c6-69b0ef33ccff] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Creating second CR @ 03/07/24 22:38:49.082
  Mar  7 22:38:49.100: INFO: Got : ADDED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-03-07T22:38:49Z generation:1 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-03-07T22:38:49Z]] name:name2 resourceVersion:105428 uid:ea3a735d-4d75-4b97-9cb6-f7e97ab82a70] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Modifying first CR @ 03/07/24 22:38:59.102
  Mar  7 22:38:59.167: INFO: Got : MODIFIED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-03-07T22:38:39Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-03-07T22:38:59Z]] name:name1 resourceVersion:105448 uid:7a9130d1-8f91-4e23-89c6-69b0ef33ccff] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Modifying second CR @ 03/07/24 22:39:09.168
  Mar  7 22:39:09.195: INFO: Got : MODIFIED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-03-07T22:38:49Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-03-07T22:39:09Z]] name:name2 resourceVersion:105463 uid:ea3a735d-4d75-4b97-9cb6-f7e97ab82a70] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Deleting first CR @ 03/07/24 22:39:19.198
  Mar  7 22:39:19.226: INFO: Got : DELETED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-03-07T22:38:39Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-03-07T22:38:59Z]] name:name1 resourceVersion:105478 uid:7a9130d1-8f91-4e23-89c6-69b0ef33ccff] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Deleting second CR @ 03/07/24 22:39:29.229
  Mar  7 22:39:29.258: INFO: Got : DELETED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-03-07T22:38:49Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-03-07T22:39:09Z]] name:name2 resourceVersion:105493 uid:ea3a735d-4d75-4b97-9cb6-f7e97ab82a70] num:map[num1:9223372036854775807 num2:1000000]]}
  Mar  7 22:39:39.800: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-watch-917" for this suite. @ 03/07/24 22:39:39.817
• [63.441 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to create a functioning NodePort service [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:1280
  STEP: Creating a kubernetes client @ 03/07/24 22:39:39.839
  Mar  7 22:39:39.839: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 22:39:39.841
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:39:39.891
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:39:39.896
  STEP: creating service nodeport-test with type=NodePort in namespace services-8909 @ 03/07/24 22:39:39.9
  STEP: creating replication controller nodeport-test in namespace services-8909 @ 03/07/24 22:39:39.937
  I0307 22:39:39.957660      20 runners.go:197] Created replication controller with name: nodeport-test, namespace: services-8909, replica count: 2
  I0307 22:39:43.009015      20 runners.go:197] nodeport-test Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Mar  7 22:39:43.009: INFO: Creating new exec pod
  Mar  7 22:39:46.058: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Mar  7 22:39:46.206: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Mar  7 22:39:46.206: INFO: stdout: ""
  Mar  7 22:39:47.059: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Mar  7 22:39:47.203: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Mar  7 22:39:47.203: INFO: stdout: ""
  Mar  7 22:39:48.059: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Mar  7 22:39:48.214: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Mar  7 22:39:48.214: INFO: stdout: ""
  Mar  7 22:39:49.059: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Mar  7 22:39:49.175: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Mar  7 22:39:49.175: INFO: stdout: ""
  Mar  7 22:39:50.059: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Mar  7 22:39:50.193: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Mar  7 22:39:50.193: INFO: stdout: ""
  Mar  7 22:39:51.059: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Mar  7 22:39:51.150: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Mar  7 22:39:51.150: INFO: stdout: ""
  Mar  7 22:39:52.059: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Mar  7 22:39:52.143: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Mar  7 22:39:52.143: INFO: stdout: "nodeport-test-c8dxf"
  Mar  7 22:39:52.143: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.105 80'
  Mar  7 22:39:52.211: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.105 80\nConnection to 10.152.183.105 80 port [tcp/http] succeeded!\n"
  Mar  7 22:39:52.211: INFO: stdout: ""
  Mar  7 22:39:53.143: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.105 80'
  Mar  7 22:39:53.267: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.105 80\nConnection to 10.152.183.105 80 port [tcp/http] succeeded!\n"
  Mar  7 22:39:53.267: INFO: stdout: ""
  Mar  7 22:39:54.143: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.105 80'
  Mar  7 22:39:54.297: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.105 80\nConnection to 10.152.183.105 80 port [tcp/http] succeeded!\n"
  Mar  7 22:39:54.297: INFO: stdout: "nodeport-test-c8dxf"
  Mar  7 22:39:54.297: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.205 30968'
  Mar  7 22:39:54.378: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.205 30968\nConnection to 10.100.138.205 30968 port [tcp/*] succeeded!\n"
  Mar  7 22:39:54.378: INFO: stdout: ""
  Mar  7 22:39:55.298: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.205 30968'
  Mar  7 22:39:55.446: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.205 30968\nConnection to 10.100.138.205 30968 port [tcp/*] succeeded!\n"
  Mar  7 22:39:55.446: INFO: stdout: ""
  Mar  7 22:39:56.298: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.205 30968'
  Mar  7 22:39:56.427: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.205 30968\nConnection to 10.100.138.205 30968 port [tcp/*] succeeded!\n"
  Mar  7 22:39:56.427: INFO: stdout: ""
  Mar  7 22:39:57.298: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.205 30968'
  Mar  7 22:39:57.386: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.205 30968\nConnection to 10.100.138.205 30968 port [tcp/*] succeeded!\n"
  Mar  7 22:39:57.386: INFO: stdout: "nodeport-test-c8dxf"
  Mar  7 22:39:57.386: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.2 30968'
  Mar  7 22:39:57.460: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.2 30968\nConnection to 10.100.138.2 30968 port [tcp/*] succeeded!\n"
  Mar  7 22:39:57.460: INFO: stdout: ""
  Mar  7 22:39:58.386: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.2 30968'
  Mar  7 22:39:58.484: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.2 30968\nConnection to 10.100.138.2 30968 port [tcp/*] succeeded!\n"
  Mar  7 22:39:58.484: INFO: stdout: ""
  Mar  7 22:39:59.387: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8909 exec execpod9z859 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.2 30968'
  Mar  7 22:39:59.511: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.2 30968\nConnection to 10.100.138.2 30968 port [tcp/*] succeeded!\n"
  Mar  7 22:39:59.511: INFO: stdout: "nodeport-test-c8dxf"
  Mar  7 22:39:59.511: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-8909" for this suite. @ 03/07/24 22:39:59.514
• [19.681 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance] [sig-storage, Conformance]
test/e2e/common/storage/configmap_volume.go:505
  STEP: Creating a kubernetes client @ 03/07/24 22:39:59.522
  Mar  7 22:39:59.522: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename configmap @ 03/07/24 22:39:59.522
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:39:59.542
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:39:59.544
  Mar  7 22:39:59.585: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-2320" for this suite. @ 03/07/24 22:39:59.588
• [0.076 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance] [sig-network, NodeConformance, Conformance]
test/e2e/common/network/networking.go:96
  STEP: Creating a kubernetes client @ 03/07/24 22:39:59.598
  Mar  7 22:39:59.598: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pod-network-test @ 03/07/24 22:39:59.599
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:39:59.614
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:39:59.616
  STEP: Performing setup for networking test in namespace pod-network-test-9854 @ 03/07/24 22:39:59.618
  STEP: creating a selector @ 03/07/24 22:39:59.618
  STEP: Creating the service pods in kubernetes @ 03/07/24 22:39:59.618
  Mar  7 22:39:59.618: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 03/07/24 22:40:21.772
  Mar  7 22:40:23.821: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Mar  7 22:40:23.821: INFO: Breadth first check of 10.1.51.68 on host 10.100.138.205...
  Mar  7 22:40:23.830: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.1.51.70:9080/dial?request=hostname&protocol=udp&host=10.1.51.68&port=8081&tries=1'] Namespace:pod-network-test-9854 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:40:23.830: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:40:23.831: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:40:23.831: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-9854/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.1.51.70%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D10.1.51.68%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Mar  7 22:40:23.911: INFO: Waiting for responses: map[]
  Mar  7 22:40:23.911: INFO: reached 10.1.51.68 after 0/1 tries
  Mar  7 22:40:23.911: INFO: Breadth first check of 10.1.60.204 on host 10.100.138.2...
  Mar  7 22:40:23.913: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.1.51.70:9080/dial?request=hostname&protocol=udp&host=10.1.60.204&port=8081&tries=1'] Namespace:pod-network-test-9854 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:40:23.913: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:40:23.914: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:40:23.914: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-9854/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.1.51.70%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D10.1.60.204%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Mar  7 22:40:23.946: INFO: Waiting for responses: map[]
  Mar  7 22:40:23.946: INFO: reached 10.1.60.204 after 0/1 tries
  Mar  7 22:40:23.946: INFO: Going to retry 0 out of 2 pods....
  Mar  7 22:40:23.946: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-9854" for this suite. @ 03/07/24 22:40:23.949
• [24.358 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance] [sig-network, Conformance]
test/e2e/network/proxy.go:286
  STEP: Creating a kubernetes client @ 03/07/24 22:40:23.957
  Mar  7 22:40:23.957: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename proxy @ 03/07/24 22:40:23.957
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:40:23.975
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:40:23.977
  Mar  7 22:40:23.978: INFO: Creating pod...
  Mar  7 22:40:26.000: INFO: Creating service...
  Mar  7 22:40:26.036: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-5674/pods/agnhost/proxy/some/path/with/DELETE
  Mar  7 22:40:26.048: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Mar  7 22:40:26.048: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-5674/pods/agnhost/proxy/some/path/with/GET
  Mar  7 22:40:26.057: INFO: http.Client request:GET | StatusCode:200 | Response:foo | Method:GET
  Mar  7 22:40:26.057: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-5674/pods/agnhost/proxy/some/path/with/HEAD
  Mar  7 22:40:26.063: INFO: http.Client request:HEAD | StatusCode:200
  Mar  7 22:40:26.063: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-5674/pods/agnhost/proxy/some/path/with/OPTIONS
  Mar  7 22:40:26.067: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Mar  7 22:40:26.067: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-5674/pods/agnhost/proxy/some/path/with/PATCH
  Mar  7 22:40:26.070: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Mar  7 22:40:26.070: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-5674/pods/agnhost/proxy/some/path/with/POST
  Mar  7 22:40:26.073: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Mar  7 22:40:26.073: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-5674/pods/agnhost/proxy/some/path/with/PUT
  Mar  7 22:40:26.076: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Mar  7 22:40:26.076: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-5674/services/test-service/proxy/some/path/with/DELETE
  Mar  7 22:40:26.079: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Mar  7 22:40:26.079: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-5674/services/test-service/proxy/some/path/with/GET
  Mar  7 22:40:26.082: INFO: http.Client request:GET | StatusCode:200 | Response:foo | Method:GET
  Mar  7 22:40:26.082: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-5674/services/test-service/proxy/some/path/with/HEAD
  Mar  7 22:40:26.084: INFO: http.Client request:HEAD | StatusCode:200
  Mar  7 22:40:26.084: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-5674/services/test-service/proxy/some/path/with/OPTIONS
  Mar  7 22:40:26.087: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Mar  7 22:40:26.087: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-5674/services/test-service/proxy/some/path/with/PATCH
  Mar  7 22:40:26.090: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Mar  7 22:40:26.090: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-5674/services/test-service/proxy/some/path/with/POST
  Mar  7 22:40:26.092: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Mar  7 22:40:26.092: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-5674/services/test-service/proxy/some/path/with/PUT
  Mar  7 22:40:26.094: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Mar  7 22:40:26.094: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-5674" for this suite. @ 03/07/24 22:40:26.097
• [2.149 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtime.go:52
  STEP: Creating a kubernetes client @ 03/07/24 22:40:26.106
  Mar  7 22:40:26.106: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-runtime @ 03/07/24 22:40:26.106
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:40:26.124
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:40:26.126
  STEP: Container 'terminate-cmd-rpa': should get the expected 'RestartCount' @ 03/07/24 22:40:26.137
  STEP: Container 'terminate-cmd-rpa': should get the expected 'Phase' @ 03/07/24 22:40:45.308
  STEP: Container 'terminate-cmd-rpa': should get the expected 'Ready' condition @ 03/07/24 22:40:45.316
  STEP: Container 'terminate-cmd-rpa': should get the expected 'State' @ 03/07/24 22:40:45.333
  STEP: Container 'terminate-cmd-rpa': should be possible to delete @ 03/07/24 22:40:45.333
  STEP: Container 'terminate-cmd-rpof': should get the expected 'RestartCount' @ 03/07/24 22:40:45.384
  STEP: Container 'terminate-cmd-rpof': should get the expected 'Phase' @ 03/07/24 22:40:48.414
  STEP: Container 'terminate-cmd-rpof': should get the expected 'Ready' condition @ 03/07/24 22:40:49.433
  STEP: Container 'terminate-cmd-rpof': should get the expected 'State' @ 03/07/24 22:40:49.451
  STEP: Container 'terminate-cmd-rpof': should be possible to delete @ 03/07/24 22:40:49.451
  STEP: Container 'terminate-cmd-rpn': should get the expected 'RestartCount' @ 03/07/24 22:40:49.528
  STEP: Container 'terminate-cmd-rpn': should get the expected 'Phase' @ 03/07/24 22:40:50.547
  STEP: Container 'terminate-cmd-rpn': should get the expected 'Ready' condition @ 03/07/24 22:40:52.577
  STEP: Container 'terminate-cmd-rpn': should get the expected 'State' @ 03/07/24 22:40:52.59
  STEP: Container 'terminate-cmd-rpn': should be possible to delete @ 03/07/24 22:40:52.59
  Mar  7 22:40:52.655: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-6173" for this suite. @ 03/07/24 22:40:52.66
• [26.566 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/kubelet.go:51
  STEP: Creating a kubernetes client @ 03/07/24 22:40:52.673
  Mar  7 22:40:52.673: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubelet-test @ 03/07/24 22:40:52.674
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:40:52.7
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:40:52.708
  Mar  7 22:40:54.777: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-8562" for this suite. @ 03/07/24 22:40:54.788
• [2.131 seconds]
------------------------------
S
------------------------------
[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance] [sig-apps, Slow, Conformance]
test/e2e/apps/cronjob.go:97
  STEP: Creating a kubernetes client @ 03/07/24 22:40:54.804
  Mar  7 22:40:54.804: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename cronjob @ 03/07/24 22:40:54.805
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:40:54.828
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:40:54.83
  STEP: Creating a suspended cronjob @ 03/07/24 22:40:54.833
  STEP: Ensuring no jobs are scheduled @ 03/07/24 22:40:54.839
  STEP: Ensuring no job exists by listing jobs explicitly @ 03/07/24 22:45:54.844
  STEP: Removing cronjob @ 03/07/24 22:45:54.847
  Mar  7 22:45:54.853: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-5161" for this suite. @ 03/07/24 22:45:54.856
• [300.058 seconds]
------------------------------
SSSS
------------------------------
[sig-network] Services should find a service from listing all namespaces [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:3129
  STEP: Creating a kubernetes client @ 03/07/24 22:45:54.862
  Mar  7 22:45:54.862: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 22:45:54.863
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:45:54.879
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:45:54.881
  STEP: fetching services @ 03/07/24 22:45:54.884
  Mar  7 22:45:54.886: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-6779" for this suite. @ 03/07/24 22:45:54.889
• [0.033 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/kubelet.go:109
  STEP: Creating a kubernetes client @ 03/07/24 22:45:54.898
  Mar  7 22:45:54.898: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubelet-test @ 03/07/24 22:45:54.898
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:45:54.914
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:45:54.916
  Mar  7 22:45:58.935: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-2331" for this suite. @ 03/07/24 22:45:58.939
• [4.054 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance] [sig-storage, Conformance]
test/e2e/storage/csi_inline.go:157
  STEP: Creating a kubernetes client @ 03/07/24 22:45:58.953
  Mar  7 22:45:58.953: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename csiinlinevolumes @ 03/07/24 22:45:58.953
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:45:58.972
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:45:58.975
  STEP: Creating two CSIDrivers @ 03/07/24 22:45:58.976
  STEP: Getting "inline-driver-b050cfc5-c6e8-401d-b892-64b1aff5d294" & "inline-driver-3701d05c-85de-44eb-94b8-0f6ef1db8cf3" @ 03/07/24 22:45:58.994
  STEP: Patching the CSIDriver "inline-driver-3701d05c-85de-44eb-94b8-0f6ef1db8cf3" @ 03/07/24 22:45:58.998
  STEP: Updating the CSIDriver "inline-driver-3701d05c-85de-44eb-94b8-0f6ef1db8cf3" @ 03/07/24 22:45:59.003
  STEP: Listing all CSIDrivers with the labelSelector: "e2e-test=csiinlinevolumes-6002" @ 03/07/24 22:45:59.013
  STEP: Deleting CSIDriver "inline-driver-b050cfc5-c6e8-401d-b892-64b1aff5d294" @ 03/07/24 22:45:59.015
  STEP: Confirm deletion of CSIDriver "inline-driver-b050cfc5-c6e8-401d-b892-64b1aff5d294" @ 03/07/24 22:45:59.021
  STEP: Deleting CSIDriver "inline-driver-3701d05c-85de-44eb-94b8-0f6ef1db8cf3" via DeleteCollection @ 03/07/24 22:45:59.023
  STEP: Confirm deletion of CSIDriver "inline-driver-3701d05c-85de-44eb-94b8-0f6ef1db8cf3" @ 03/07/24 22:45:59.033
  Mar  7 22:45:59.035: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csiinlinevolumes-6002" for this suite. @ 03/07/24 22:45:59.038
• [0.092 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/watch.go:142
  STEP: Creating a kubernetes client @ 03/07/24 22:45:59.045
  Mar  7 22:45:59.045: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename watch @ 03/07/24 22:45:59.046
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:45:59.061
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:45:59.064
  STEP: creating a new configmap @ 03/07/24 22:45:59.066
  STEP: modifying the configmap once @ 03/07/24 22:45:59.071
  STEP: modifying the configmap a second time @ 03/07/24 22:45:59.08
  STEP: deleting the configmap @ 03/07/24 22:45:59.088
  STEP: creating a watch on configmaps from the resource version returned by the first update @ 03/07/24 22:45:59.095
  STEP: Expecting to observe notifications for all changes to the configmap after the first update @ 03/07/24 22:45:59.098
  Mar  7 22:45:59.098: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-resource-version  watch-8960  7ecdd21a-6009-4548-bdae-246e06ac8ad5 106458 0 2024-03-07 22:45:59 +0000 UTC <nil> <nil> map[watch-this-configmap:from-resource-version] map[] [] [] [{e2e.test Update v1 2024-03-07 22:45:59 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 22:45:59.098: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-resource-version  watch-8960  7ecdd21a-6009-4548-bdae-246e06ac8ad5 106459 0 2024-03-07 22:45:59 +0000 UTC <nil> <nil> map[watch-this-configmap:from-resource-version] map[] [] [] [{e2e.test Update v1 2024-03-07 22:45:59 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 22:45:59.098: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-8960" for this suite. @ 03/07/24 22:45:59.1
• [0.061 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:391
  STEP: Creating a kubernetes client @ 03/07/24 22:45:59.106
  Mar  7 22:45:59.106: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename crd-publish-openapi @ 03/07/24 22:45:59.107
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:45:59.121
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:45:59.123
  STEP: set up a multi version CRD @ 03/07/24 22:45:59.125
  Mar  7 22:45:59.125: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: rename a version @ 03/07/24 22:46:02.327
  STEP: check the new version name is served @ 03/07/24 22:46:02.338
  STEP: check the old version name is removed @ 03/07/24 22:46:03.063
  STEP: check the other version is not changed @ 03/07/24 22:46:03.71
  Mar  7 22:46:06.266: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-6653" for this suite. @ 03/07/24 22:46:06.271
• [7.176 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:2199
  STEP: Creating a kubernetes client @ 03/07/24 22:46:06.283
  Mar  7 22:46:06.283: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 22:46:06.284
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:46:06.301
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:46:06.303
  STEP: creating service in namespace services-5407 @ 03/07/24 22:46:06.305
  STEP: creating service affinity-clusterip-transition in namespace services-5407 @ 03/07/24 22:46:06.305
  STEP: creating replication controller affinity-clusterip-transition in namespace services-5407 @ 03/07/24 22:46:06.318
  I0307 22:46:06.330332      20 runners.go:197] Created replication controller with name: affinity-clusterip-transition, namespace: services-5407, replica count: 3
  I0307 22:46:09.382005      20 runners.go:197] affinity-clusterip-transition Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Mar  7 22:46:09.398: INFO: Creating new exec pod
  Mar  7 22:46:12.428: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-5407 exec execpod-affinitynp2tj -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-clusterip-transition 80'
  Mar  7 22:46:12.548: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-clusterip-transition 80\nConnection to affinity-clusterip-transition 80 port [tcp/http] succeeded!\n"
  Mar  7 22:46:12.548: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 22:46:12.548: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-5407 exec execpod-affinitynp2tj -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.204 80'
  Mar  7 22:46:12.620: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.204 80\nConnection to 10.152.183.204 80 port [tcp/http] succeeded!\n"
  Mar  7 22:46:12.620: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 22:46:12.630: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-5407 exec execpod-affinitynp2tj -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.152.183.204:80/ ; done'
  Mar  7 22:46:12.746: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n"
  Mar  7 22:46:12.746: INFO: stdout: "\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-kq5nd\naffinity-clusterip-transition-fntht\naffinity-clusterip-transition-kq5nd\naffinity-clusterip-transition-kq5nd\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-fntht\naffinity-clusterip-transition-kq5nd\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-kq5nd\naffinity-clusterip-transition-fntht\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-fntht\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-kq5nd"
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-kq5nd
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-fntht
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-kq5nd
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-kq5nd
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-fntht
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-kq5nd
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-kq5nd
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-fntht
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-fntht
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.746: INFO: Received response from host: affinity-clusterip-transition-kq5nd
  Mar  7 22:46:12.755: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-5407 exec execpod-affinitynp2tj -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.152.183.204:80/ ; done'
  Mar  7 22:46:12.861: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.204:80/\n"
  Mar  7 22:46:12.861: INFO: stdout: "\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk\naffinity-clusterip-transition-vm7lk"
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Received response from host: affinity-clusterip-transition-vm7lk
  Mar  7 22:46:12.861: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-clusterip-transition in namespace services-5407, will wait for the garbage collector to delete the pods @ 03/07/24 22:46:12.875
  Mar  7 22:46:12.938: INFO: Deleting ReplicationController affinity-clusterip-transition took: 10.340811ms
  Mar  7 22:46:13.039: INFO: Terminating ReplicationController affinity-clusterip-transition pods took: 100.514831ms
  Mar  7 22:46:16.382: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-5407" for this suite. @ 03/07/24 22:46:16.386
• [10.112 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:221
  STEP: Creating a kubernetes client @ 03/07/24 22:46:16.396
  Mar  7 22:46:16.396: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 22:46:16.397
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:46:16.417
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:46:16.419
  STEP: Setting up server cert @ 03/07/24 22:46:16.447
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 22:46:16.727
  STEP: Deploying the webhook pod @ 03/07/24 22:46:16.735
  STEP: Wait for the deployment to be ready @ 03/07/24 22:46:16.749
  Mar  7 22:46:16.754: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 03/07/24 22:46:18.78
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:46:18.811
  Mar  7 22:46:19.811: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Mar  7 22:46:19.828: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Registering the custom resource webhook via the AdmissionRegistration API @ 03/07/24 22:46:20.364
  STEP: Creating a custom resource that should be denied by the webhook @ 03/07/24 22:46:20.41
  STEP: Creating a custom resource whose deletion would be denied by the webhook @ 03/07/24 22:46:22.444
  STEP: Updating the custom resource with disallowed data should be denied @ 03/07/24 22:46:22.464
  STEP: Deleting the custom resource should be denied @ 03/07/24 22:46:22.488
  STEP: Remove the offending key and value from the custom resource data @ 03/07/24 22:46:22.498
  STEP: Deleting the updated custom resource should be successful @ 03/07/24 22:46:22.51
  Mar  7 22:46:23.099: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-5980" for this suite. @ 03/07/24 22:46:23.109
  STEP: Destroying namespace "webhook-markers-4471" for this suite. @ 03/07/24 22:46:23.133
• [6.758 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:646
  STEP: Creating a kubernetes client @ 03/07/24 22:46:23.156
  Mar  7 22:46:23.156: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 22:46:23.158
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:46:23.189
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:46:23.192
  STEP: Setting up server cert @ 03/07/24 22:46:23.225
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 22:46:23.575
  STEP: Deploying the webhook pod @ 03/07/24 22:46:23.581
  STEP: Wait for the deployment to be ready @ 03/07/24 22:46:23.596
  Mar  7 22:46:23.601: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 03/07/24 22:46:25.628
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:46:25.67
  Mar  7 22:46:26.670: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Listing all of the created validation webhooks @ 03/07/24 22:46:26.885
  STEP: Creating a configMap that should be mutated @ 03/07/24 22:46:26.92
  STEP: Deleting the collection of validation webhooks @ 03/07/24 22:46:26.965
  STEP: Creating a configMap that should not be mutated @ 03/07/24 22:46:27.104
  Mar  7 22:46:27.166: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-8638" for this suite. @ 03/07/24 22:46:27.172
  STEP: Destroying namespace "webhook-markers-6073" for this suite. @ 03/07/24 22:46:27.179
• [4.036 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance] [sig-auth, Conformance]
test/e2e/auth/service_accounts.go:742
  STEP: Creating a kubernetes client @ 03/07/24 22:46:27.191
  Mar  7 22:46:27.191: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename svcaccounts @ 03/07/24 22:46:27.192
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:46:27.211
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:46:27.213
  Mar  7 22:46:27.216: INFO: Got root ca configmap in namespace "svcaccounts-6082"
  Mar  7 22:46:27.223: INFO: Deleted root ca configmap in namespace "svcaccounts-6082"
  STEP: waiting for a new root ca configmap created @ 03/07/24 22:46:27.724
  Mar  7 22:46:27.732: INFO: Recreated root ca configmap in namespace "svcaccounts-6082"
  Mar  7 22:46:27.749: INFO: Updated root ca configmap in namespace "svcaccounts-6082"
  STEP: waiting for the root ca configmap reconciled @ 03/07/24 22:46:28.25
  Mar  7 22:46:28.253: INFO: Reconciled root ca configmap in namespace "svcaccounts-6082"
  Mar  7 22:46:28.253: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-6082" for this suite. @ 03/07/24 22:46:28.256
• [1.072 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/secrets.go:47
  STEP: Creating a kubernetes client @ 03/07/24 22:46:28.263
  Mar  7 22:46:28.263: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename secrets @ 03/07/24 22:46:28.263
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:46:28.285
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:46:28.291
  STEP: Creating secret with name secret-test-7841babf-d6f4-4d36-9c9a-39be2dd9da26 @ 03/07/24 22:46:28.294
  STEP: Creating a pod to test consume secrets @ 03/07/24 22:46:28.301
  STEP: Saw pod success @ 03/07/24 22:46:32.325
  Mar  7 22:46:32.329: INFO: Trying to get logs from node whiskas-1 pod pod-secrets-a8b39553-0935-4cec-815f-b3a5ce658e21 container secret-env-test: <nil>
  STEP: delete the pod @ 03/07/24 22:46:32.342
  Mar  7 22:46:32.363: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-7714" for this suite. @ 03/07/24 22:46:32.366
• [4.111 seconds]
------------------------------
S
------------------------------
[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1399
  STEP: Creating a kubernetes client @ 03/07/24 22:46:32.374
  Mar  7 22:46:32.374: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 22:46:32.374
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:46:32.399
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:46:32.402
  Mar  7 22:46:32.405: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7272 create -f -'
  Mar  7 22:46:32.490: INFO: stderr: ""
  Mar  7 22:46:32.490: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  Mar  7 22:46:32.490: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7272 create -f -'
  Mar  7 22:46:32.582: INFO: stderr: ""
  Mar  7 22:46:32.582: INFO: stdout: "service/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 03/07/24 22:46:32.582
  Mar  7 22:46:33.591: INFO: Selector matched 1 pods for map[app:agnhost]
  Mar  7 22:46:33.591: INFO: Found 0 / 1
  Mar  7 22:46:34.593: INFO: Selector matched 1 pods for map[app:agnhost]
  Mar  7 22:46:34.593: INFO: Found 1 / 1
  Mar  7 22:46:34.593: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  Mar  7 22:46:34.602: INFO: Selector matched 1 pods for map[app:agnhost]
  Mar  7 22:46:34.602: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Mar  7 22:46:34.602: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7272 describe pod agnhost-primary-8vg9g'
  Mar  7 22:46:34.712: INFO: stderr: ""
  Mar  7 22:46:34.712: INFO: stdout: "Name:             agnhost-primary-8vg9g\nNamespace:        kubectl-7272\nPriority:         0\nService Account:  default\nNode:             whiskas-1/10.100.138.205\nStart Time:       Thu, 07 Mar 2024 22:46:32 +0000\nLabels:           app=agnhost\n                  role=primary\nAnnotations:      cni.projectcalico.org/containerID: 65de41523759c15c3446119a1ae50416bc5695de646d082e400588312ffca74c\n                  cni.projectcalico.org/podIP: 10.1.51.102/32\n                  cni.projectcalico.org/podIPs: 10.1.51.102/32\nStatus:           Running\nIP:               10.1.51.102\nIPs:\n  IP:           10.1.51.102\nControlled By:  ReplicationController/agnhost-primary\nContainers:\n  agnhost-primary:\n    Container ID:   containerd://4151eb94f28cf0086d65e36c328ea434ebf1fd0d7e4e02e38ee6daead11e9e0c\n    Image:          registry.k8s.io/e2e-test-images/agnhost:2.45\n    Image ID:       registry.k8s.io/e2e-test-images/agnhost@sha256:2c5b5b056076334e4cf431d964d102e44cbca8f1e6b16ac1e477a0ffbe6caac4\n    Port:           6379/TCP\n    Host Port:      0/TCP\n    State:          Running\n      Started:      Thu, 07 Mar 2024 22:46:33 +0000\n    Ready:          True\n    Restart Count:  0\n    Environment:    <none>\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-7cgjn (ro)\nConditions:\n  Type                        Status\n  PodReadyToStartContainers   True \n  Initialized                 True \n  Ready                       True \n  ContainersReady             True \n  PodScheduled                True \nVolumes:\n  kube-api-access-7cgjn:\n    Type:                    Projected (a volume that contains injected data from multiple sources)\n    TokenExpirationSeconds:  3607\n    ConfigMapName:           kube-root-ca.crt\n    ConfigMapOptional:       <nil>\n    DownwardAPI:             true\nQoS Class:                   BestEffort\nNode-Selectors:              <none>\nTolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type    Reason     Age   From               Message\n  ----    ------     ----  ----               -------\n  Normal  Scheduled  2s    default-scheduler  Successfully assigned kubectl-7272/agnhost-primary-8vg9g to whiskas-1\n  Normal  Pulled     1s    kubelet            Container image \"registry.k8s.io/e2e-test-images/agnhost:2.45\" already present on machine\n  Normal  Created    1s    kubelet            Created container agnhost-primary\n  Normal  Started    1s    kubelet            Started container agnhost-primary\n"
  Mar  7 22:46:34.712: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7272 describe rc agnhost-primary'
  Mar  7 22:46:34.761: INFO: stderr: ""
  Mar  7 22:46:34.761: INFO: stdout: "Name:         agnhost-primary\nNamespace:    kubectl-7272\nSelector:     app=agnhost,role=primary\nLabels:       app=agnhost\n              role=primary\nAnnotations:  <none>\nReplicas:     1 current / 1 desired\nPods Status:  1 Running / 0 Waiting / 0 Succeeded / 0 Failed\nPod Template:\n  Labels:  app=agnhost\n           role=primary\n  Containers:\n   agnhost-primary:\n    Image:        registry.k8s.io/e2e-test-images/agnhost:2.45\n    Port:         6379/TCP\n    Host Port:    0/TCP\n    Environment:  <none>\n    Mounts:       <none>\n  Volumes:        <none>\nEvents:\n  Type    Reason            Age   From                    Message\n  ----    ------            ----  ----                    -------\n  Normal  SuccessfulCreate  2s    replication-controller  Created pod: agnhost-primary-8vg9g\n"
  Mar  7 22:46:34.761: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7272 describe service agnhost-primary'
  Mar  7 22:46:34.817: INFO: stderr: ""
  Mar  7 22:46:34.817: INFO: stdout: "Name:              agnhost-primary\nNamespace:         kubectl-7272\nLabels:            app=agnhost\n                   role=primary\nAnnotations:       <none>\nSelector:          app=agnhost,role=primary\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.152.183.85\nIPs:               10.152.183.85\nPort:              <unset>  6379/TCP\nTargetPort:        agnhost-server/TCP\nEndpoints:         10.1.51.102:6379\nSession Affinity:  None\nEvents:            <none>\n"
  Mar  7 22:46:34.820: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7272 describe node whiskas-1'
  Mar  7 22:46:34.879: INFO: stderr: ""
  Mar  7 22:46:34.879: INFO: stdout: "Name:               whiskas-1\nRoles:              <none>\nLabels:             beta.kubernetes.io/arch=amd64\n                    beta.kubernetes.io/os=linux\n                    kubernetes.io/arch=amd64\n                    kubernetes.io/hostname=whiskas-1\n                    kubernetes.io/os=linux\n                    microk8s.io/cluster=true\n                    node.kubernetes.io/microk8s-controlplane=microk8s-controlplane\nAnnotations:        node.alpha.kubernetes.io/ttl: 0\n                    projectcalico.org/IPv4Address: 10.100.138.205/24\n                    projectcalico.org/IPv4VXLANTunnelAddr: 10.1.51.64\n                    volumes.kubernetes.io/controller-managed-attach-detach: true\nCreationTimestamp:  Thu, 07 Mar 2024 16:43:24 +0000\nTaints:             <none>\nUnschedulable:      false\nLease:\n  HolderIdentity:  whiskas-1\n  AcquireTime:     <unset>\n  RenewTime:       Thu, 07 Mar 2024 22:46:28 +0000\nConditions:\n  Type                 Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message\n  ----                 ------  -----------------                 ------------------                ------                       -------\n  NetworkUnavailable   False   Thu, 07 Mar 2024 16:44:17 +0000   Thu, 07 Mar 2024 16:44:17 +0000   CalicoIsUp                   Calico is running on this node\n  MemoryPressure       False   Thu, 07 Mar 2024 22:43:56 +0000   Thu, 07 Mar 2024 16:43:24 +0000   KubeletHasSufficientMemory   kubelet has sufficient memory available\n  DiskPressure         False   Thu, 07 Mar 2024 22:43:56 +0000   Thu, 07 Mar 2024 16:43:24 +0000   KubeletHasNoDiskPressure     kubelet has no disk pressure\n  PIDPressure          False   Thu, 07 Mar 2024 22:43:56 +0000   Thu, 07 Mar 2024 16:43:24 +0000   KubeletHasSufficientPID      kubelet has sufficient PID available\n  Ready                True    Thu, 07 Mar 2024 22:43:56 +0000   Thu, 07 Mar 2024 16:43:45 +0000   KubeletReady                 kubelet is posting ready status. AppArmor enabled\nAddresses:\n  InternalIP:  10.100.138.205\n  Hostname:    whiskas-1\nCapacity:\n  cpu:                  4\n  ephemeral-storage:    20134592Ki\n  example.com/fakecpu:  1k\n  hugepages-1Gi:        0\n  hugepages-2Mi:        0\n  memory:               6057812Ki\n  pods:                 110\nAllocatable:\n  cpu:                  4\n  ephemeral-storage:    19086016Ki\n  example.com/fakecpu:  1k\n  hugepages-1Gi:        0\n  hugepages-2Mi:        0\n  memory:               5955412Ki\n  pods:                 110\nSystem Info:\n  Machine ID:                 6bed4206788d41d2b2d4ca3f25924c86\n  System UUID:                6bed4206788d41d2b2d4ca3f25924c86\n  Boot ID:                    366f4332-aa29-45fd-a6dd-1a702ceaca92\n  Kernel Version:             5.15.0-97-generic\n  OS Image:                   Ubuntu 22.04.4 LTS\n  Operating System:           linux\n  Architecture:               amd64\n  Container Runtime Version:  containerd://1.6.28\n  Kubelet Version:            v1.29.2\n  Kube-Proxy Version:         v1.29.2\nNon-terminated Pods:          (3 in total)\n  Namespace                   Name                                                       CPU Requests  CPU Limits  Memory Requests  Memory Limits  Age\n  ---------                   ----                                                       ------------  ----------  ---------------  -------------  ---\n  kube-system                 calico-node-qn97s                                          250m (6%)     0 (0%)      0 (0%)           0 (0%)         6h2m\n  kubectl-7272                agnhost-primary-8vg9g                                      0 (0%)        0 (0%)      0 (0%)           0 (0%)         2s\n  sonobuoy                    sonobuoy-systemd-logs-daemon-set-e0190a7af8074a44-5wrn6    0 (0%)        0 (0%)      0 (0%)           0 (0%)         51m\nAllocated resources:\n  (Total limits may be over 100 percent, i.e., overcommitted.)\n  Resource             Requests   Limits\n  --------             --------   ------\n  cpu                  250m (6%)  0 (0%)\n  memory               0 (0%)     0 (0%)\n  ephemeral-storage    0 (0%)     0 (0%)\n  hugepages-1Gi        0 (0%)     0 (0%)\n  hugepages-2Mi        0 (0%)     0 (0%)\n  example.com/fakecpu  0          0\nEvents:                <none>\n"
  Mar  7 22:46:34.879: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7272 describe namespace kubectl-7272'
  Mar  7 22:46:34.926: INFO: stderr: ""
  Mar  7 22:46:34.926: INFO: stdout: "Name:         kubectl-7272\nLabels:       e2e-framework=kubectl\n              e2e-run=85e55832-d5ed-4ed6-bb52-ff889579ebc0\n              kubernetes.io/metadata.name=kubectl-7272\n              pod-security.kubernetes.io/audit=baseline\n              pod-security.kubernetes.io/enforce=baseline\n              pod-security.kubernetes.io/warn=baseline\nAnnotations:  <none>\nStatus:       Active\n\nNo resource quota.\n\nNo LimitRange resource.\n"
  Mar  7 22:46:34.926: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-7272" for this suite. @ 03/07/24 22:46:34.929
• [2.563 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance] [sig-network, Conformance]
test/e2e/network/endpointslice.go:208
  STEP: Creating a kubernetes client @ 03/07/24 22:46:34.936
  Mar  7 22:46:34.936: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename endpointslice @ 03/07/24 22:46:34.937
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:46:34.955
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:46:34.957
  STEP: referencing a single matching pod @ 03/07/24 22:46:40.058
  STEP: referencing matching pods with named port @ 03/07/24 22:46:45.075
  STEP: creating empty Endpoints and EndpointSlices for no matching Pods @ 03/07/24 22:46:50.093
  STEP: recreating EndpointSlices after they've been deleted @ 03/07/24 22:46:55.112
  Mar  7 22:46:55.172: INFO: EndpointSlice for Service endpointslice-2312/example-named-port not found
  Mar  7 22:47:05.239: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-2312" for this suite. @ 03/07/24 22:47:05.251
• [30.341 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:2177
  STEP: Creating a kubernetes client @ 03/07/24 22:47:05.278
  Mar  7 22:47:05.278: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 22:47:05.28
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:47:05.35
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:47:05.353
  STEP: creating service in namespace services-1376 @ 03/07/24 22:47:05.354
  STEP: creating service affinity-clusterip in namespace services-1376 @ 03/07/24 22:47:05.354
  STEP: creating replication controller affinity-clusterip in namespace services-1376 @ 03/07/24 22:47:05.367
  I0307 22:47:05.382838      20 runners.go:197] Created replication controller with name: affinity-clusterip, namespace: services-1376, replica count: 3
  I0307 22:47:08.435898      20 runners.go:197] affinity-clusterip Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Mar  7 22:47:08.452: INFO: Creating new exec pod
  Mar  7 22:47:11.488: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-1376 exec execpod-affinityg5pbf -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-clusterip 80'
  Mar  7 22:47:11.589: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-clusterip 80\nConnection to affinity-clusterip 80 port [tcp/http] succeeded!\n"
  Mar  7 22:47:11.589: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 22:47:11.589: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-1376 exec execpod-affinityg5pbf -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.216 80'
  Mar  7 22:47:11.659: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.216 80\nConnection to 10.152.183.216 80 port [tcp/http] succeeded!\n"
  Mar  7 22:47:11.659: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 22:47:11.659: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-1376 exec execpod-affinityg5pbf -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.152.183.216:80/ ; done'
  Mar  7 22:47:11.766: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.216:80/\n"
  Mar  7 22:47:11.766: INFO: stdout: "\naffinity-clusterip-2cdrh\naffinity-clusterip-2cdrh\naffinity-clusterip-2cdrh\naffinity-clusterip-2cdrh\naffinity-clusterip-2cdrh\naffinity-clusterip-2cdrh\naffinity-clusterip-2cdrh\naffinity-clusterip-2cdrh\naffinity-clusterip-2cdrh\naffinity-clusterip-2cdrh\naffinity-clusterip-2cdrh\naffinity-clusterip-2cdrh\naffinity-clusterip-2cdrh\naffinity-clusterip-2cdrh\naffinity-clusterip-2cdrh\naffinity-clusterip-2cdrh"
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Received response from host: affinity-clusterip-2cdrh
  Mar  7 22:47:11.766: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-clusterip in namespace services-1376, will wait for the garbage collector to delete the pods @ 03/07/24 22:47:11.786
  Mar  7 22:47:11.866: INFO: Deleting ReplicationController affinity-clusterip took: 22.977646ms
  Mar  7 22:47:11.967: INFO: Terminating ReplicationController affinity-clusterip pods took: 100.640544ms
  Mar  7 22:47:15.434: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-1376" for this suite. @ 03/07/24 22:47:15.44
• [10.172 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:261
  STEP: Creating a kubernetes client @ 03/07/24 22:47:15.451
  Mar  7 22:47:15.451: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 22:47:15.451
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:47:15.466
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:47:15.468
  STEP: Setting up server cert @ 03/07/24 22:47:15.49
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 22:47:15.725
  STEP: Deploying the webhook pod @ 03/07/24 22:47:15.734
  STEP: Wait for the deployment to be ready @ 03/07/24 22:47:15.745
  Mar  7 22:47:15.753: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 03/07/24 22:47:17.78
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:47:17.815
  Mar  7 22:47:18.815: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the mutating pod webhook via the AdmissionRegistration API @ 03/07/24 22:47:18.831
  STEP: create a pod that should be updated by the webhook @ 03/07/24 22:47:18.872
  Mar  7 22:47:18.973: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-3658" for this suite. @ 03/07/24 22:47:18.978
  STEP: Destroying namespace "webhook-markers-2087" for this suite. @ 03/07/24 22:47:18.989
• [3.545 seconds]
------------------------------
[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/discovery.go:172
  STEP: Creating a kubernetes client @ 03/07/24 22:47:18.996
  Mar  7 22:47:18.996: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename discovery @ 03/07/24 22:47:18.996
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:47:19.013
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:47:19.015
  STEP: Setting up server cert @ 03/07/24 22:47:19.018
  STEP: Requesting APIResourceList from "/api/v1" @ 03/07/24 22:47:19.327
  STEP: Requesting APIResourceList from "/apis/admissionregistration.k8s.io/v1" @ 03/07/24 22:47:19.328
  STEP: Requesting APIResourceList from "/apis/apiextensions.k8s.io/v1" @ 03/07/24 22:47:19.329
  STEP: Requesting APIResourceList from "/apis/apiregistration.k8s.io/v1" @ 03/07/24 22:47:19.33
  STEP: Requesting APIResourceList from "/apis/apps/v1" @ 03/07/24 22:47:19.331
  STEP: Requesting APIResourceList from "/apis/authentication.k8s.io/v1" @ 03/07/24 22:47:19.332
  STEP: Requesting APIResourceList from "/apis/authorization.k8s.io/v1" @ 03/07/24 22:47:19.332
  STEP: Requesting APIResourceList from "/apis/autoscaling/v1" @ 03/07/24 22:47:19.333
  STEP: Requesting APIResourceList from "/apis/autoscaling/v2" @ 03/07/24 22:47:19.334
  STEP: Requesting APIResourceList from "/apis/batch/v1" @ 03/07/24 22:47:19.335
  STEP: Requesting APIResourceList from "/apis/certificates.k8s.io/v1" @ 03/07/24 22:47:19.336
  STEP: Requesting APIResourceList from "/apis/coordination.k8s.io/v1" @ 03/07/24 22:47:19.337
  STEP: Requesting APIResourceList from "/apis/discovery.k8s.io/v1" @ 03/07/24 22:47:19.338
  STEP: Requesting APIResourceList from "/apis/events.k8s.io/v1" @ 03/07/24 22:47:19.338
  STEP: Requesting APIResourceList from "/apis/networking.k8s.io/v1" @ 03/07/24 22:47:19.339
  STEP: Requesting APIResourceList from "/apis/node.k8s.io/v1" @ 03/07/24 22:47:19.34
  STEP: Requesting APIResourceList from "/apis/policy/v1" @ 03/07/24 22:47:19.34
  STEP: Requesting APIResourceList from "/apis/scheduling.k8s.io/v1" @ 03/07/24 22:47:19.341
  STEP: Requesting APIResourceList from "/apis/storage.k8s.io/v1" @ 03/07/24 22:47:19.342
  Mar  7 22:47:19.343: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "discovery-7004" for this suite. @ 03/07/24 22:47:19.345
• [0.362 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:948
  STEP: Creating a kubernetes client @ 03/07/24 22:47:19.357
  Mar  7 22:47:19.357: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename resourcequota @ 03/07/24 22:47:19.358
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:47:19.372
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:47:19.374
  STEP: Creating a ResourceQuota @ 03/07/24 22:47:19.376
  STEP: Getting a ResourceQuota @ 03/07/24 22:47:19.382
  STEP: Listing all ResourceQuotas with LabelSelector @ 03/07/24 22:47:19.384
  STEP: Patching the ResourceQuota @ 03/07/24 22:47:19.387
  STEP: Deleting a Collection of ResourceQuotas @ 03/07/24 22:47:19.393
  STEP: Verifying the deleted ResourceQuota @ 03/07/24 22:47:19.404
  Mar  7 22:47:19.406: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-7378" for this suite. @ 03/07/24 22:47:19.408
• [0.058 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:55
  STEP: Creating a kubernetes client @ 03/07/24 22:47:19.415
  Mar  7 22:47:19.415: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 22:47:19.416
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:47:19.429
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:47:19.431
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 22:47:19.433
  STEP: Saw pod success @ 03/07/24 22:47:23.459
  Mar  7 22:47:23.467: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-26364eed-b0b2-43bc-b8c8-54a69f6a71ee container client-container: <nil>
  STEP: delete the pod @ 03/07/24 22:47:23.483
  Mar  7 22:47:23.533: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-8683" for this suite. @ 03/07/24 22:47:23.542
• [4.139 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should be updated [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/pods.go:345
  STEP: Creating a kubernetes client @ 03/07/24 22:47:23.555
  Mar  7 22:47:23.555: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pods @ 03/07/24 22:47:23.556
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:47:23.578
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:47:23.582
  STEP: creating the pod @ 03/07/24 22:47:23.585
  STEP: submitting the pod to kubernetes @ 03/07/24 22:47:23.585
  STEP: verifying the pod is in kubernetes @ 03/07/24 22:47:25.621
  STEP: updating the pod @ 03/07/24 22:47:25.63
  Mar  7 22:47:26.156: INFO: Successfully updated pod "pod-update-89624a15-716b-4845-88f1-27a05af179f8"
  STEP: verifying the updated pod is in kubernetes @ 03/07/24 22:47:26.163
  Mar  7 22:47:26.169: INFO: Pod update OK
  Mar  7 22:47:26.169: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-1284" for this suite. @ 03/07/24 22:47:26.174
• [2.628 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/custom_resource_definition.go:270
  STEP: Creating a kubernetes client @ 03/07/24 22:47:26.183
  Mar  7 22:47:26.183: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename custom-resource-definition @ 03/07/24 22:47:26.184
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:47:26.206
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:47:26.208
  Mar  7 22:47:26.210: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:47:29.282: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-2780" for this suite. @ 03/07/24 22:47:29.292
• [3.142 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/flowcontrol.go:514
  STEP: Creating a kubernetes client @ 03/07/24 22:47:29.327
  Mar  7 22:47:29.328: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename apf @ 03/07/24 22:47:29.329
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:47:29.35
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:47:29.354
  STEP: getting /apis @ 03/07/24 22:47:29.356
  STEP: getting /apis/flowcontrol.apiserver.k8s.io @ 03/07/24 22:47:29.358
  STEP: getting /apis/flowcontrol.apiserver.k8s.io/v1 @ 03/07/24 22:47:29.359
  STEP: creating @ 03/07/24 22:47:29.36
  STEP: getting @ 03/07/24 22:47:29.377
  STEP: listing @ 03/07/24 22:47:29.379
  STEP: watching @ 03/07/24 22:47:29.381
  Mar  7 22:47:29.381: INFO: starting watch
  STEP: patching @ 03/07/24 22:47:29.382
  STEP: updating @ 03/07/24 22:47:29.387
  Mar  7 22:47:29.395: INFO: waiting for watch events with expected annotations
  STEP: getting /status @ 03/07/24 22:47:29.395
  STEP: patching /status @ 03/07/24 22:47:29.397
  STEP: updating /status @ 03/07/24 22:47:29.403
  STEP: deleting @ 03/07/24 22:47:29.411
  STEP: deleting a collection @ 03/07/24 22:47:29.42
  Mar  7 22:47:29.437: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "apf-8742" for this suite. @ 03/07/24 22:47:29.439
• [0.117 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:210
  STEP: Creating a kubernetes client @ 03/07/24 22:47:29.445
  Mar  7 22:47:29.445: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir @ 03/07/24 22:47:29.445
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:47:29.46
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:47:29.462
  STEP: Creating a pod to test emptydir 0666 on node default medium @ 03/07/24 22:47:29.464
  STEP: Saw pod success @ 03/07/24 22:47:33.487
  Mar  7 22:47:33.495: INFO: Trying to get logs from node whiskas-1 pod pod-77437fcf-d68c-4cba-b638-799794511893 container test-container: <nil>
  STEP: delete the pod @ 03/07/24 22:47:33.51
  Mar  7 22:47:33.561: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-6807" for this suite. @ 03/07/24 22:47:33.569
• [4.144 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance] [sig-node, Conformance]
test/e2e/node/security_context.go:135
  STEP: Creating a kubernetes client @ 03/07/24 22:47:33.588
  Mar  7 22:47:33.588: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename security-context @ 03/07/24 22:47:33.589
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:47:33.612
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:47:33.614
  STEP: Creating a pod to test pod.Spec.SecurityContext.RunAsUser @ 03/07/24 22:47:33.616
  STEP: Saw pod success @ 03/07/24 22:47:35.638
  Mar  7 22:47:35.647: INFO: Trying to get logs from node whiskas-1 pod security-context-6962707a-634e-4baa-a982-a8262c653074 container test-container: <nil>
  STEP: delete the pod @ 03/07/24 22:47:35.662
  Mar  7 22:47:35.693: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-9297" for this suite. @ 03/07/24 22:47:35.699
• [2.124 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:223
  STEP: Creating a kubernetes client @ 03/07/24 22:47:35.713
  Mar  7 22:47:35.713: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 22:47:35.713
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:47:35.739
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:47:35.742
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 22:47:35.746
  STEP: Saw pod success @ 03/07/24 22:47:39.775
  Mar  7 22:47:39.777: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-726c1aa6-1ee6-427b-86b9-6d9c04bc87f6 container client-container: <nil>
  STEP: delete the pod @ 03/07/24 22:47:39.781
  Mar  7 22:47:39.799: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2924" for this suite. @ 03/07/24 22:47:39.801
• [4.094 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/pods.go:399
  STEP: Creating a kubernetes client @ 03/07/24 22:47:39.807
  Mar  7 22:47:39.807: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pods @ 03/07/24 22:47:39.807
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:47:39.825
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:47:39.827
  STEP: creating the pod @ 03/07/24 22:47:39.828
  STEP: submitting the pod to kubernetes @ 03/07/24 22:47:39.829
  W0307 22:47:39.838446      20 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: verifying the pod is in kubernetes @ 03/07/24 22:47:41.859
  STEP: updating the pod @ 03/07/24 22:47:41.87
  Mar  7 22:47:42.403: INFO: Successfully updated pod "pod-update-activedeadlineseconds-a37dfadd-3095-4456-b03c-ee87f2ded013"
  Mar  7 22:47:46.426: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-2631" for this suite. @ 03/07/24 22:47:46.432
• [6.637 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/garbage_collector.go:818
  STEP: Creating a kubernetes client @ 03/07/24 22:47:46.444
  Mar  7 22:47:46.444: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename gc @ 03/07/24 22:47:46.445
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:47:46.476
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:47:46.482
  Mar  7 22:47:46.545: INFO: pod1.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod3", UID:"96288f90-4249-4765-b722-f5314fe14100", Controller:(*bool)(0xc004e3b6a2), BlockOwnerDeletion:(*bool)(0xc004e3b6a3)}}
  Mar  7 22:47:46.559: INFO: pod2.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod1", UID:"71bb0f99-708f-4a1c-8c79-ba1d2d0eba33", Controller:(*bool)(0xc0036d3b32), BlockOwnerDeletion:(*bool)(0xc0036d3b33)}}
  Mar  7 22:47:46.581: INFO: pod3.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod2", UID:"412b4c2b-f7e9-4c2e-87c4-685e480bd23b", Controller:(*bool)(0xc0036d3d72), BlockOwnerDeletion:(*bool)(0xc0036d3d73)}}
  Mar  7 22:47:51.594: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-5969" for this suite. @ 03/07/24 22:47:51.597
• [5.159 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/expansion.go:95
  STEP: Creating a kubernetes client @ 03/07/24 22:47:51.604
  Mar  7 22:47:51.604: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename var-expansion @ 03/07/24 22:47:51.605
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:47:51.623
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:47:51.625
  STEP: Creating a pod to test substitution in container's args @ 03/07/24 22:47:51.628
  STEP: Saw pod success @ 03/07/24 22:47:55.648
  Mar  7 22:47:55.650: INFO: Trying to get logs from node whiskas-1 pod var-expansion-8689fff0-dc5a-4b32-86ca-309a105b48b6 container dapi-container: <nil>
  STEP: delete the pod @ 03/07/24 22:47:55.654
  Mar  7 22:47:55.672: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-2249" for this suite. @ 03/07/24 22:47:55.675
• [4.078 seconds]
------------------------------
[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/watch.go:60
  STEP: Creating a kubernetes client @ 03/07/24 22:47:55.682
  Mar  7 22:47:55.682: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename watch @ 03/07/24 22:47:55.683
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:47:55.705
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:47:55.708
  STEP: creating a watch on configmaps with label A @ 03/07/24 22:47:55.71
  STEP: creating a watch on configmaps with label B @ 03/07/24 22:47:55.711
  STEP: creating a watch on configmaps with label A or B @ 03/07/24 22:47:55.712
  STEP: creating a configmap with label A and ensuring the correct watchers observe the notification @ 03/07/24 22:47:55.713
  Mar  7 22:47:55.720: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-4927  5524e0ef-aa98-4175-b565-e930e03454b1 107712 0 2024-03-07 22:47:55 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-03-07 22:47:55 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 22:47:55.720: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-4927  5524e0ef-aa98-4175-b565-e930e03454b1 107712 0 2024-03-07 22:47:55 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-03-07 22:47:55 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying configmap A and ensuring the correct watchers observe the notification @ 03/07/24 22:47:55.72
  Mar  7 22:47:55.728: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-4927  5524e0ef-aa98-4175-b565-e930e03454b1 107713 0 2024-03-07 22:47:55 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-03-07 22:47:55 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 22:47:55.730: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-4927  5524e0ef-aa98-4175-b565-e930e03454b1 107713 0 2024-03-07 22:47:55 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-03-07 22:47:55 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying configmap A again and ensuring the correct watchers observe the notification @ 03/07/24 22:47:55.73
  Mar  7 22:47:55.742: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-4927  5524e0ef-aa98-4175-b565-e930e03454b1 107714 0 2024-03-07 22:47:55 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-03-07 22:47:55 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 22:47:55.742: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-4927  5524e0ef-aa98-4175-b565-e930e03454b1 107714 0 2024-03-07 22:47:55 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-03-07 22:47:55 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: deleting configmap A and ensuring the correct watchers observe the notification @ 03/07/24 22:47:55.742
  Mar  7 22:47:55.747: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-4927  5524e0ef-aa98-4175-b565-e930e03454b1 107715 0 2024-03-07 22:47:55 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-03-07 22:47:55 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 22:47:55.748: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-4927  5524e0ef-aa98-4175-b565-e930e03454b1 107715 0 2024-03-07 22:47:55 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-03-07 22:47:55 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: creating a configmap with label B and ensuring the correct watchers observe the notification @ 03/07/24 22:47:55.748
  Mar  7 22:47:55.752: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-4927  f56e4e29-1ad9-4987-bc9f-396e718aefed 107716 0 2024-03-07 22:47:55 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-03-07 22:47:55 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 22:47:55.752: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-4927  f56e4e29-1ad9-4987-bc9f-396e718aefed 107716 0 2024-03-07 22:47:55 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-03-07 22:47:55 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: deleting configmap B and ensuring the correct watchers observe the notification @ 03/07/24 22:48:05.754
  Mar  7 22:48:05.830: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-4927  f56e4e29-1ad9-4987-bc9f-396e718aefed 107749 0 2024-03-07 22:47:55 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-03-07 22:47:55 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 22:48:05.831: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-4927  f56e4e29-1ad9-4987-bc9f-396e718aefed 107749 0 2024-03-07 22:47:55 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-03-07 22:47:55 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 22:48:15.832: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-4927" for this suite. @ 03/07/24 22:48:15.843
• [20.189 seconds]
------------------------------
S
------------------------------
[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance] [sig-apps, Conformance]
test/e2e/apps/disruption.go:349
  STEP: Creating a kubernetes client @ 03/07/24 22:48:15.872
  Mar  7 22:48:15.872: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename disruption @ 03/07/24 22:48:15.874
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:48:15.922
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:48:15.931
  STEP: Creating a pdb that targets all three pods in a test replica set @ 03/07/24 22:48:15.936
  STEP: Waiting for the pdb to be processed @ 03/07/24 22:48:15.947
  STEP: First trying to evict a pod which shouldn't be evictable @ 03/07/24 22:48:17.981
  STEP: Waiting for all pods to be running @ 03/07/24 22:48:17.981
  Mar  7 22:48:17.995: INFO: pods: 0 < 3
  STEP: locating a running pod @ 03/07/24 22:48:19.994
  STEP: Updating the pdb to allow a pod to be evicted @ 03/07/24 22:48:20.018
  STEP: Waiting for the pdb to be processed @ 03/07/24 22:48:20.051
  STEP: Trying to evict the same pod we tried earlier which should now be evictable @ 03/07/24 22:48:22.055
  STEP: Waiting for all pods to be running @ 03/07/24 22:48:22.055
  STEP: Waiting for the pdb to observed all healthy pods @ 03/07/24 22:48:22.058
  STEP: Patching the pdb to disallow a pod to be evicted @ 03/07/24 22:48:22.087
  STEP: Waiting for the pdb to be processed @ 03/07/24 22:48:22.161
  STEP: Waiting for all pods to be running @ 03/07/24 22:48:24.17
  STEP: locating a running pod @ 03/07/24 22:48:24.18
  STEP: Deleting the pdb to allow a pod to be evicted @ 03/07/24 22:48:24.204
  STEP: Waiting for the pdb to be deleted @ 03/07/24 22:48:24.233
  STEP: Trying to evict the same pod we tried earlier which should now be evictable @ 03/07/24 22:48:24.24
  STEP: Waiting for all pods to be running @ 03/07/24 22:48:24.24
  Mar  7 22:48:24.303: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-5682" for this suite. @ 03/07/24 22:48:24.313
• [8.488 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:251
  STEP: Creating a kubernetes client @ 03/07/24 22:48:24.36
  Mar  7 22:48:24.360: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 22:48:24.361
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:48:24.389
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:48:24.391
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 22:48:24.393
  STEP: Saw pod success @ 03/07/24 22:48:28.42
  Mar  7 22:48:28.423: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-b97d0f4d-bbd2-46a5-bb9f-6fced3b74c1b container client-container: <nil>
  STEP: delete the pod @ 03/07/24 22:48:28.427
  Mar  7 22:48:28.448: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-4203" for this suite. @ 03/07/24 22:48:28.451
• [4.099 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/configmap.go:46
  STEP: Creating a kubernetes client @ 03/07/24 22:48:28.459
  Mar  7 22:48:28.459: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename configmap @ 03/07/24 22:48:28.46
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:48:28.482
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:48:28.484
  STEP: Creating configMap configmap-5/configmap-test-db975d06-18ce-4839-88e0-9fc7a6be1b4d @ 03/07/24 22:48:28.487
  STEP: Creating a pod to test consume configMaps @ 03/07/24 22:48:28.492
  STEP: Saw pod success @ 03/07/24 22:48:32.521
  Mar  7 22:48:32.529: INFO: Trying to get logs from node whiskas-1 pod pod-configmaps-34223dc3-687a-43dd-bca1-4a5036415bcd container env-test: <nil>
  STEP: delete the pod @ 03/07/24 22:48:32.546
  Mar  7 22:48:32.602: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-5" for this suite. @ 03/07/24 22:48:32.613
• [4.173 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/kubelet.go:183
  STEP: Creating a kubernetes client @ 03/07/24 22:48:32.634
  Mar  7 22:48:32.634: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubelet-test @ 03/07/24 22:48:32.636
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:48:32.678
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:48:32.681
  Mar  7 22:48:34.734: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-4120" for this suite. @ 03/07/24 22:48:34.744
• [2.131 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance] [sig-storage, Conformance]
test/e2e/storage/subpath.go:105
  STEP: Creating a kubernetes client @ 03/07/24 22:48:34.766
  Mar  7 22:48:34.766: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename subpath @ 03/07/24 22:48:34.768
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:48:34.806
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:48:34.81
  STEP: Setting up data @ 03/07/24 22:48:34.812
  STEP: Creating pod pod-subpath-test-projected-v6vn @ 03/07/24 22:48:34.827
  STEP: Creating a pod to test atomic-volume-subpath @ 03/07/24 22:48:34.827
  STEP: Saw pod success @ 03/07/24 22:48:56.957
  Mar  7 22:48:56.959: INFO: Trying to get logs from node whiskas-1 pod pod-subpath-test-projected-v6vn container test-container-subpath-projected-v6vn: <nil>
  STEP: delete the pod @ 03/07/24 22:48:56.964
  STEP: Deleting pod pod-subpath-test-projected-v6vn @ 03/07/24 22:48:56.983
  Mar  7 22:48:56.983: INFO: Deleting pod "pod-subpath-test-projected-v6vn" in namespace "subpath-3829"
  Mar  7 22:48:56.986: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-3829" for this suite. @ 03/07/24 22:48:56.989
• [22.231 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance] [sig-network, Conformance]
test/e2e/network/hostport.go:63
  STEP: Creating a kubernetes client @ 03/07/24 22:48:56.997
  Mar  7 22:48:56.997: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename hostport @ 03/07/24 22:48:56.998
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:48:57.018
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:48:57.021
  STEP: Trying to create a pod(pod1) with hostport 54323 and hostIP 127.0.0.1 and expect scheduled @ 03/07/24 22:48:57.026
  STEP: Trying to create another pod(pod2) with hostport 54323 but hostIP 10.100.138.2 on the node which pod1 resides and expect scheduled @ 03/07/24 22:48:59.046
  STEP: Trying to create a third pod(pod3) with hostport 54323, hostIP 10.100.138.2 but use UDP protocol on the node which pod2 resides @ 03/07/24 22:49:01.09
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 127.0.0.1, port: 54323 @ 03/07/24 22:49:05.176
  Mar  7 22:49:05.176: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g --connect-timeout 5 --interface 10.100.138.2 http://127.0.0.1:54323/hostname] Namespace:hostport-5006 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:49:05.176: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:49:05.177: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:49:05.177: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/hostport-5006/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+--connect-timeout+5+--interface+10.100.138.2+http%3A%2F%2F127.0.0.1%3A54323%2Fhostname&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 10.100.138.2, port: 54323 @ 03/07/24 22:49:05.29
  Mar  7 22:49:05.290: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g --connect-timeout 5 http://10.100.138.2:54323/hostname] Namespace:hostport-5006 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:49:05.290: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:49:05.291: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:49:05.291: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/hostport-5006/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+--connect-timeout+5+http%3A%2F%2F10.100.138.2%3A54323%2Fhostname&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 10.100.138.2, port: 54323 UDP @ 03/07/24 22:49:05.336
  Mar  7 22:49:05.336: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostname | nc -u -w 5 10.100.138.2 54323] Namespace:hostport-5006 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:49:05.336: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:49:05.336: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:49:05.336: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/hostport-5006/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostname+%7C+nc+-u+-w+5+10.100.138.2+54323&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  Mar  7 22:49:10.389: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "hostport-5006" for this suite. @ 03/07/24 22:49:10.4
• [13.423 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:86
  STEP: Creating a kubernetes client @ 03/07/24 22:49:10.422
  Mar  7 22:49:10.422: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 22:49:10.424
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:49:10.473
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:49:10.477
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 22:49:10.48
  STEP: Saw pod success @ 03/07/24 22:49:14.513
  Mar  7 22:49:14.522: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-de632ca0-71f8-4666-8a30-d8946dfbfb93 container client-container: <nil>
  STEP: delete the pod @ 03/07/24 22:49:14.537
  Mar  7 22:49:14.588: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-698" for this suite. @ 03/07/24 22:49:14.598
• [4.190 seconds]
------------------------------
[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance] [sig-scheduling, Conformance]
test/e2e/scheduling/limit_range.go:253
  STEP: Creating a kubernetes client @ 03/07/24 22:49:14.611
  Mar  7 22:49:14.611: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename limitrange @ 03/07/24 22:49:14.612
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:49:14.634
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:49:14.636
  STEP: Creating LimitRange "e2e-limitrange-vfxh9" in namespace "limitrange-9429" @ 03/07/24 22:49:14.638
  STEP: Creating another limitRange in another namespace @ 03/07/24 22:49:14.643
  Mar  7 22:49:14.661: INFO: Namespace "e2e-limitrange-vfxh9-4425" created
  Mar  7 22:49:14.661: INFO: Creating LimitRange "e2e-limitrange-vfxh9" in namespace "e2e-limitrange-vfxh9-4425"
  STEP: Listing all LimitRanges with label "e2e-test=e2e-limitrange-vfxh9" @ 03/07/24 22:49:14.667
  Mar  7 22:49:14.670: INFO: Found 2 limitRanges
  STEP: Patching LimitRange "e2e-limitrange-vfxh9" in "limitrange-9429" namespace @ 03/07/24 22:49:14.67
  Mar  7 22:49:14.676: INFO: LimitRange "e2e-limitrange-vfxh9" has been patched
  STEP: Delete LimitRange "e2e-limitrange-vfxh9" by Collection with labelSelector: "e2e-limitrange-vfxh9=patched" @ 03/07/24 22:49:14.676
  STEP: Confirm that the limitRange "e2e-limitrange-vfxh9" has been deleted @ 03/07/24 22:49:14.682
  Mar  7 22:49:14.683: INFO: Requesting list of LimitRange to confirm quantity
  Mar  7 22:49:14.685: INFO: Found 0 LimitRange with label "e2e-limitrange-vfxh9=patched"
  Mar  7 22:49:14.685: INFO: LimitRange "e2e-limitrange-vfxh9" has been deleted.
  STEP: Confirm that a single LimitRange still exists with label "e2e-test=e2e-limitrange-vfxh9" @ 03/07/24 22:49:14.685
  Mar  7 22:49:14.687: INFO: Found 1 limitRange
  Mar  7 22:49:14.687: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "limitrange-9429" for this suite. @ 03/07/24 22:49:14.69
  STEP: Destroying namespace "e2e-limitrange-vfxh9-4425" for this suite. @ 03/07/24 22:49:14.706
• [0.101 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance] [sig-network, Conformance]
test/e2e/network/proxy.go:380
  STEP: Creating a kubernetes client @ 03/07/24 22:49:14.713
  Mar  7 22:49:14.713: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename proxy @ 03/07/24 22:49:14.713
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:49:14.731
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:49:14.733
  Mar  7 22:49:14.735: INFO: Creating pod...
  Mar  7 22:49:16.754: INFO: Creating service...
  Mar  7 22:49:16.793: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1376/pods/agnhost/proxy?method=DELETE
  Mar  7 22:49:16.807: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Mar  7 22:49:16.807: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1376/pods/agnhost/proxy?method=OPTIONS
  Mar  7 22:49:16.813: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Mar  7 22:49:16.813: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1376/pods/agnhost/proxy?method=PATCH
  Mar  7 22:49:16.817: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Mar  7 22:49:16.817: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1376/pods/agnhost/proxy?method=POST
  Mar  7 22:49:16.820: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Mar  7 22:49:16.820: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1376/pods/agnhost/proxy?method=PUT
  Mar  7 22:49:16.823: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Mar  7 22:49:16.823: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1376/services/e2e-proxy-test-service/proxy?method=DELETE
  Mar  7 22:49:16.826: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Mar  7 22:49:16.826: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1376/services/e2e-proxy-test-service/proxy?method=OPTIONS
  Mar  7 22:49:16.829: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Mar  7 22:49:16.829: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1376/services/e2e-proxy-test-service/proxy?method=PATCH
  Mar  7 22:49:16.832: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Mar  7 22:49:16.832: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1376/services/e2e-proxy-test-service/proxy?method=POST
  Mar  7 22:49:16.835: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Mar  7 22:49:16.835: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1376/services/e2e-proxy-test-service/proxy?method=PUT
  Mar  7 22:49:16.838: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Mar  7 22:49:16.838: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1376/pods/agnhost/proxy?method=GET
  Mar  7 22:49:16.839: INFO: http.Client request:GET StatusCode:301
  Mar  7 22:49:16.839: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1376/services/e2e-proxy-test-service/proxy?method=GET
  Mar  7 22:49:16.842: INFO: http.Client request:GET StatusCode:301
  Mar  7 22:49:16.842: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1376/pods/agnhost/proxy?method=HEAD
  Mar  7 22:49:16.843: INFO: http.Client request:HEAD StatusCode:301
  Mar  7 22:49:16.843: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-1376/services/e2e-proxy-test-service/proxy?method=HEAD
  Mar  7 22:49:16.845: INFO: http.Client request:HEAD StatusCode:301
  Mar  7 22:49:16.846: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-1376" for this suite. @ 03/07/24 22:49:16.848
• [2.142 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:250
  STEP: Creating a kubernetes client @ 03/07/24 22:49:16.855
  Mar  7 22:49:16.855: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 22:49:16.855
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:49:16.87
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:49:16.873
  STEP: Setting up server cert @ 03/07/24 22:49:16.901
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 22:49:17.047
  STEP: Deploying the webhook pod @ 03/07/24 22:49:17.055
  STEP: Wait for the deployment to be ready @ 03/07/24 22:49:17.068
  Mar  7 22:49:17.072: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 03/07/24 22:49:19.098
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:49:19.131
  Mar  7 22:49:20.132: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the mutating configmap webhook via the AdmissionRegistration API @ 03/07/24 22:49:20.15
  STEP: create a configmap that should be updated by the webhook @ 03/07/24 22:49:20.178
  Mar  7 22:49:20.250: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-6162" for this suite. @ 03/07/24 22:49:20.261
  STEP: Destroying namespace "webhook-markers-5105" for this suite. @ 03/07/24 22:49:20.268
• [3.420 seconds]
------------------------------
[sig-node] Variable Expansion should succeed in writing subpaths in container [Slow] [Conformance] [sig-node, Slow, Conformance]
test/e2e/common/node/expansion.go:300
  STEP: Creating a kubernetes client @ 03/07/24 22:49:20.275
  Mar  7 22:49:20.275: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename var-expansion @ 03/07/24 22:49:20.275
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:49:20.289
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:49:20.292
  STEP: creating the pod @ 03/07/24 22:49:20.294
  STEP: waiting for pod running @ 03/07/24 22:49:20.302
  STEP: creating a file in subpath @ 03/07/24 22:49:22.31
  Mar  7 22:49:22.313: INFO: ExecWithOptions {Command:[/bin/sh -c touch /volume_mount/mypath/foo/test.log] Namespace:var-expansion-3960 PodName:var-expansion-196f3fad-6f95-4285-9a8a-fd96bba616c3 ContainerName:dapi-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:49:22.313: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:49:22.313: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:49:22.313: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/var-expansion-3960/pods/var-expansion-196f3fad-6f95-4285-9a8a-fd96bba616c3/exec?command=%2Fbin%2Fsh&command=-c&command=touch+%2Fvolume_mount%2Fmypath%2Ffoo%2Ftest.log&container=dapi-container&container=dapi-container&stderr=true&stdout=true)
  STEP: test for file in mounted path @ 03/07/24 22:49:22.353
  Mar  7 22:49:22.356: INFO: ExecWithOptions {Command:[/bin/sh -c test -f /subpath_mount/test.log] Namespace:var-expansion-3960 PodName:var-expansion-196f3fad-6f95-4285-9a8a-fd96bba616c3 ContainerName:dapi-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:49:22.356: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:49:22.356: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:49:22.356: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/var-expansion-3960/pods/var-expansion-196f3fad-6f95-4285-9a8a-fd96bba616c3/exec?command=%2Fbin%2Fsh&command=-c&command=test+-f+%2Fsubpath_mount%2Ftest.log&container=dapi-container&container=dapi-container&stderr=true&stdout=true)
  STEP: updating the annotation value @ 03/07/24 22:49:22.385
  Mar  7 22:49:22.922: INFO: Successfully updated pod "var-expansion-196f3fad-6f95-4285-9a8a-fd96bba616c3"
  STEP: waiting for annotated pod running @ 03/07/24 22:49:22.922
  STEP: deleting the pod gracefully @ 03/07/24 22:49:22.938
  Mar  7 22:49:22.938: INFO: Deleting pod "var-expansion-196f3fad-6f95-4285-9a8a-fd96bba616c3" in namespace "var-expansion-3960"
  Mar  7 22:49:22.955: INFO: Wait up to 5m0s for pod "var-expansion-196f3fad-6f95-4285-9a8a-fd96bba616c3" to be fully deleted
  Mar  7 22:49:57.119: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-3960" for this suite. @ 03/07/24 22:49:57.13
• [36.883 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:276
  STEP: Creating a kubernetes client @ 03/07/24 22:49:57.16
  Mar  7 22:49:57.160: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename crd-publish-openapi @ 03/07/24 22:49:57.162
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:49:57.208
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:49:57.214
  STEP: CRs in different groups (two CRDs) show up in OpenAPI documentation @ 03/07/24 22:49:57.217
  Mar  7 22:49:57.218: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:49:58.485: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:50:03.478: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-4876" for this suite. @ 03/07/24 22:50:03.484
• [6.330 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/daemon_set.go:836
  STEP: Creating a kubernetes client @ 03/07/24 22:50:03.49
  Mar  7 22:50:03.490: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename daemonsets @ 03/07/24 22:50:03.491
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:50:03.505
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:50:03.507
  STEP: Creating simple DaemonSet "daemon-set" @ 03/07/24 22:50:03.521
  STEP: Check that daemon pods launch on every node of the cluster. @ 03/07/24 22:50:03.529
  Mar  7 22:50:03.534: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:50:03.534: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  Mar  7 22:50:04.550: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:50:04.550: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  Mar  7 22:50:05.549: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Mar  7 22:50:05.549: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: listing all DaemonSets @ 03/07/24 22:50:05.558
  STEP: DeleteCollection of the DaemonSets @ 03/07/24 22:50:05.569
  STEP: Verify that ReplicaSets have been deleted @ 03/07/24 22:50:05.599
  Mar  7 22:50:05.631: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"108557"},"items":null}

  Mar  7 22:50:05.636: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"108558"},"items":[{"metadata":{"name":"daemon-set-4kcgb","generateName":"daemon-set-","namespace":"daemonsets-4563","uid":"60770ca4-2dcb-46d2-89a9-af900633aa59","resourceVersion":"108554","creationTimestamp":"2024-03-07T22:50:03Z","labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"annotations":{"cni.projectcalico.org/containerID":"609e196dd9887ea6146c7e6a107aa7cf8c6bee374be7e5adcbfda79513f23961","cni.projectcalico.org/podIP":"10.1.60.221/32","cni.projectcalico.org/podIPs":"10.1.60.221/32"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"a666211f-45e3-4511-b9f9-a1e462da1be7","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kubelite","operation":"Update","apiVersion":"v1","time":"2024-03-07T22:50:03Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"a666211f-45e3-4511-b9f9-a1e462da1be7\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"calico","operation":"Update","apiVersion":"v1","time":"2024-03-07T22:50:04Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:annotations":{".":{},"f:cni.projectcalico.org/containerID":{},"f:cni.projectcalico.org/podIP":{},"f:cni.projectcalico.org/podIPs":{}}}},"subresource":"status"},{"manager":"kubelite","operation":"Update","apiVersion":"v1","time":"2024-03-07T22:50:05Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.1.60.221\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-kr76b","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-kr76b","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"whiskas-2","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["whiskas-2"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-03-07T22:50:05Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-03-07T22:50:03Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-03-07T22:50:05Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-03-07T22:50:05Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-03-07T22:50:03Z"}],"hostIP":"10.100.138.2","hostIPs":[{"ip":"10.100.138.2"}],"podIP":"10.1.60.221","podIPs":[{"ip":"10.1.60.221"}],"startTime":"2024-03-07T22:50:03Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2024-03-07T22:50:04Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"containerd://72d103f7eb1dfb0ad991f2d7cff85517cd342d736cc15347e7694086ab7be60e","started":true}],"qosClass":"BestEffort"}},{"metadata":{"name":"daemon-set-wg8qv","generateName":"daemon-set-","namespace":"daemonsets-4563","uid":"ddebf9aa-a67c-495d-b536-2e94fdc6a489","resourceVersion":"108552","creationTimestamp":"2024-03-07T22:50:03Z","labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"annotations":{"cni.projectcalico.org/containerID":"5c75cd43ab1b504d26126ec884a88364aa1aaf7695c84736717a179cd679644e","cni.projectcalico.org/podIP":"10.1.51.84/32","cni.projectcalico.org/podIPs":"10.1.51.84/32"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"a666211f-45e3-4511-b9f9-a1e462da1be7","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kubelite","operation":"Update","apiVersion":"v1","time":"2024-03-07T22:50:03Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"a666211f-45e3-4511-b9f9-a1e462da1be7\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"calico","operation":"Update","apiVersion":"v1","time":"2024-03-07T22:50:04Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:annotations":{".":{},"f:cni.projectcalico.org/containerID":{},"f:cni.projectcalico.org/podIP":{},"f:cni.projectcalico.org/podIPs":{}}}},"subresource":"status"},{"manager":"kubelite","operation":"Update","apiVersion":"v1","time":"2024-03-07T22:50:04Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.1.51.84\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-kkv78","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-kkv78","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"whiskas-1","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["whiskas-1"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-03-07T22:50:04Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-03-07T22:50:03Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-03-07T22:50:04Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-03-07T22:50:04Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-03-07T22:50:03Z"}],"hostIP":"10.100.138.205","hostIPs":[{"ip":"10.100.138.205"}],"podIP":"10.1.51.84","podIPs":[{"ip":"10.1.51.84"}],"startTime":"2024-03-07T22:50:03Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2024-03-07T22:50:04Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"containerd://3c285e910caa77ff38f3511cf924c70b7f6015edd4987406fe34aa17997bffcf","started":true}],"qosClass":"BestEffort"}}]}

  Mar  7 22:50:05.647: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-4563" for this suite. @ 03/07/24 22:50:05.65
• [2.168 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_secret.go:78
  STEP: Creating a kubernetes client @ 03/07/24 22:50:05.659
  Mar  7 22:50:05.659: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 22:50:05.659
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:50:05.672
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:50:05.674
  STEP: Creating projection with secret that has name projected-secret-test-map-e07ed06b-b3d7-4b3e-a43f-478fd6d9e3be @ 03/07/24 22:50:05.677
  STEP: Creating a pod to test consume secrets @ 03/07/24 22:50:05.682
  STEP: Saw pod success @ 03/07/24 22:50:09.715
  Mar  7 22:50:09.724: INFO: Trying to get logs from node whiskas-1 pod pod-projected-secrets-0216ec38-8eb9-4b77-bf8a-7bf70ddfc9fa container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 22:50:09.742
  Mar  7 22:50:09.796: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6895" for this suite. @ 03/07/24 22:50:09.802
• [4.157 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtimeclass.go:106
  STEP: Creating a kubernetes client @ 03/07/24 22:50:09.817
  Mar  7 22:50:09.817: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename runtimeclass @ 03/07/24 22:50:09.818
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:50:09.842
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:50:09.845
  Mar  7 22:50:11.902: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-558" for this suite. @ 03/07/24 22:50:11.913
• [2.117 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/kubelet.go:134
  STEP: Creating a kubernetes client @ 03/07/24 22:50:11.935
  Mar  7 22:50:11.935: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubelet-test @ 03/07/24 22:50:11.937
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:50:11.994
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:50:12.002
  Mar  7 22:50:12.050: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-8407" for this suite. @ 03/07/24 22:50:12.053
• [0.127 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:107
  STEP: Creating a kubernetes client @ 03/07/24 22:50:12.062
  Mar  7 22:50:12.062: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-probe @ 03/07/24 22:50:12.062
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:50:12.092
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:50:12.095
  Mar  7 22:51:12.112: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-2475" for this suite. @ 03/07/24 22:51:12.115
• [60.060 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:357
  STEP: Creating a kubernetes client @ 03/07/24 22:51:12.122
  Mar  7 22:51:12.122: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename crd-publish-openapi @ 03/07/24 22:51:12.123
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:51:12.141
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:51:12.144
  STEP: CRs in the same group and version but different kinds (two CRDs) show up in OpenAPI documentation @ 03/07/24 22:51:12.145
  Mar  7 22:51:12.146: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:51:13.354: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:51:18.428: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-5125" for this suite. @ 03/07/24 22:51:18.434
• [6.318 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for pods for Subdomain [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:286
  STEP: Creating a kubernetes client @ 03/07/24 22:51:18.441
  Mar  7 22:51:18.441: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename dns @ 03/07/24 22:51:18.441
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:51:18.459
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:51:18.461
  STEP: Creating a test headless service @ 03/07/24 22:51:18.463
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local;check="$$(dig +notcp +noall +answer +search dns-test-service-2.dns-6967.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service-2.dns-6967.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service-2.dns-6967.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service-2.dns-6967.svc.cluster.local;sleep 1; done
   @ 03/07/24 22:51:18.47
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local;check="$$(dig +notcp +noall +answer +search dns-test-service-2.dns-6967.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service-2.dns-6967.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service-2.dns-6967.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service-2.dns-6967.svc.cluster.local;sleep 1; done
   @ 03/07/24 22:51:18.47
  STEP: creating a pod to probe DNS @ 03/07/24 22:51:18.47
  STEP: submitting the pod to kubernetes @ 03/07/24 22:51:18.47
  STEP: retrieving the pod @ 03/07/24 22:51:20.499
  STEP: looking for the results for each expected name from probers @ 03/07/24 22:51:20.508
  Mar  7 22:51:20.519: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local from pod dns-6967/dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d: the server could not find the requested resource (get pods dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d)
  Mar  7 22:51:20.530: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local from pod dns-6967/dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d: the server could not find the requested resource (get pods dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d)
  Mar  7 22:51:20.536: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-6967.svc.cluster.local from pod dns-6967/dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d: the server could not find the requested resource (get pods dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d)
  Mar  7 22:51:20.541: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-6967.svc.cluster.local from pod dns-6967/dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d: the server could not find the requested resource (get pods dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d)
  Mar  7 22:51:20.545: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local from pod dns-6967/dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d: the server could not find the requested resource (get pods dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d)
  Mar  7 22:51:20.548: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local from pod dns-6967/dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d: the server could not find the requested resource (get pods dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d)
  Mar  7 22:51:20.551: INFO: Unable to read jessie_udp@dns-test-service-2.dns-6967.svc.cluster.local from pod dns-6967/dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d: the server could not find the requested resource (get pods dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d)
  Mar  7 22:51:20.554: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-6967.svc.cluster.local from pod dns-6967/dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d: the server could not find the requested resource (get pods dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d)
  Mar  7 22:51:20.554: INFO: Lookups using dns-6967/dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local wheezy_udp@dns-test-service-2.dns-6967.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-6967.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-6967.svc.cluster.local jessie_udp@dns-test-service-2.dns-6967.svc.cluster.local jessie_tcp@dns-test-service-2.dns-6967.svc.cluster.local]

  Mar  7 22:51:20.564: INFO: Pod client logs for webserver: 
  Mar  7 22:51:20.567: INFO: Pod client logs for querier: 
  Mar  7 22:51:20.571: INFO: Pod client logs for jessie-querier: 
  Mar  7 22:51:25.584: INFO: DNS probes using dns-6967/dns-test-28f38fdd-b009-4371-9ddf-f04cf371044d succeeded

  STEP: deleting the pod @ 03/07/24 22:51:25.584
  STEP: deleting the test headless service @ 03/07/24 22:51:25.676
  Mar  7 22:51:25.708: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-6967" for this suite. @ 03/07/24 22:51:25.711
• [7.279 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/init_container.go:178
  STEP: Creating a kubernetes client @ 03/07/24 22:51:25.721
  Mar  7 22:51:25.721: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename init-container @ 03/07/24 22:51:25.721
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:51:25.74
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:51:25.742
  STEP: creating the pod @ 03/07/24 22:51:25.743
  Mar  7 22:51:25.743: INFO: PodSpec: initContainers in spec.initContainers
  Mar  7 22:51:30.514: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-9176" for this suite. @ 03/07/24 22:51:30.518
• [4.809 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:79
  STEP: Creating a kubernetes client @ 03/07/24 22:51:30.53
  Mar  7 22:51:30.530: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename secrets @ 03/07/24 22:51:30.53
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:51:30.546
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:51:30.548
  STEP: Creating secret with name secret-test-map-61c137af-dc23-478e-a1bf-5e97ac240d68 @ 03/07/24 22:51:30.552
  STEP: Creating a pod to test consume secrets @ 03/07/24 22:51:30.558
  STEP: Saw pod success @ 03/07/24 22:51:32.574
  Mar  7 22:51:32.581: INFO: Trying to get logs from node whiskas-1 pod pod-secrets-caa72e42-7b77-4ca0-8a79-4b8928de9aa6 container secret-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 22:51:32.597
  Mar  7 22:51:32.641: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-477" for this suite. @ 03/07/24 22:51:32.645
• [2.125 seconds]
------------------------------
[sig-network] Services should complete a service status lifecycle [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:3338
  STEP: Creating a kubernetes client @ 03/07/24 22:51:32.655
  Mar  7 22:51:32.655: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 22:51:32.655
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:51:32.674
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:51:32.677
  STEP: creating a Service @ 03/07/24 22:51:32.682
  STEP: watching for the Service to be added @ 03/07/24 22:51:32.701
  Mar  7 22:51:32.707: INFO: Found Service test-service-rvx24 in namespace services-3755 with labels: map[test-service-static:true] & ports [{http TCP <nil> 80 {0 80 } 30752}]
  Mar  7 22:51:32.707: INFO: Service test-service-rvx24 created
  STEP: Getting /status @ 03/07/24 22:51:32.707
  Mar  7 22:51:32.710: INFO: Service test-service-rvx24 has LoadBalancer: {[]}
  STEP: patching the ServiceStatus @ 03/07/24 22:51:32.71
  STEP: watching for the Service to be patched @ 03/07/24 22:51:32.72
  Mar  7 22:51:32.721: INFO: observed Service test-service-rvx24 in namespace services-3755 with annotations: map[] & LoadBalancer: {[]}
  Mar  7 22:51:32.721: INFO: Found Service test-service-rvx24 in namespace services-3755 with annotations: map[patchedstatus:true] & LoadBalancer: {[{203.0.113.1  <nil> []}]}
  Mar  7 22:51:32.721: INFO: Service test-service-rvx24 has service status patched
  STEP: updating the ServiceStatus @ 03/07/24 22:51:32.721
  Mar  7 22:51:32.732: INFO: updatedStatus.Conditions: []v1.Condition{v1.Condition{Type:"StatusUpdate", Status:"True", ObservedGeneration:0, LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the Service to be updated @ 03/07/24 22:51:32.732
  Mar  7 22:51:32.734: INFO: Observed Service test-service-rvx24 in namespace services-3755 with annotations: map[] & Conditions: {[]}
  Mar  7 22:51:32.734: INFO: Observed event: &Service{ObjectMeta:{test-service-rvx24  services-3755  6b0ad559-f262-4f65-87a9-2a54082a805a 108964 0 2024-03-07 22:51:32 +0000 UTC <nil> <nil> map[test-service-static:true] map[patchedstatus:true] [] [] [{e2e.test Update v1 2024-03-07 22:51:32 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:test-service-static":{}}},"f:spec":{"f:allocateLoadBalancerNodePorts":{},"f:externalTrafficPolicy":{},"f:internalTrafficPolicy":{},"f:loadBalancerClass":{},"f:ports":{".":{},"k:{\"port\":80,\"protocol\":\"TCP\"}":{".":{},"f:name":{},"f:port":{},"f:protocol":{},"f:targetPort":{}}},"f:sessionAffinity":{},"f:type":{}}} } {e2e.test Update v1 2024-03-07 22:51:32 +0000 UTC FieldsV1 {"f:metadata":{"f:annotations":{".":{},"f:patchedstatus":{}}},"f:status":{"f:loadBalancer":{"f:ingress":{}}}} status}]},Spec:ServiceSpec{Ports:[]ServicePort{ServicePort{Name:http,Protocol:TCP,Port:80,TargetPort:{0 80 },NodePort:30752,AppProtocol:nil,},},Selector:map[string]string{},ClusterIP:10.152.183.123,Type:LoadBalancer,ExternalIPs:[],SessionAffinity:None,LoadBalancerIP:,LoadBalancerSourceRanges:[],ExternalName:,ExternalTrafficPolicy:Cluster,HealthCheckNodePort:0,PublishNotReadyAddresses:false,SessionAffinityConfig:nil,IPFamilyPolicy:*SingleStack,ClusterIPs:[10.152.183.123],IPFamilies:[IPv4],AllocateLoadBalancerNodePorts:*true,LoadBalancerClass:*example.com/internal-vip,InternalTrafficPolicy:*Cluster,},Status:ServiceStatus{LoadBalancer:LoadBalancerStatus{Ingress:[]LoadBalancerIngress{LoadBalancerIngress{IP:203.0.113.1,Hostname:,IPMode:nil,Ports:[]PortStatus{},},},},Conditions:[]Condition{},},}
  Mar  7 22:51:32.734: INFO: Found Service test-service-rvx24 in namespace services-3755 with annotations: map[patchedstatus:true] & Conditions: [{StatusUpdate True 0 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Mar  7 22:51:32.734: INFO: Service test-service-rvx24 has service status updated
  STEP: patching the service @ 03/07/24 22:51:32.734
  STEP: watching for the Service to be patched @ 03/07/24 22:51:32.741
  Mar  7 22:51:32.743: INFO: observed Service test-service-rvx24 in namespace services-3755 with labels: map[test-service-static:true]
  Mar  7 22:51:32.743: INFO: observed Service test-service-rvx24 in namespace services-3755 with labels: map[test-service-static:true]
  Mar  7 22:51:32.743: INFO: observed Service test-service-rvx24 in namespace services-3755 with labels: map[test-service-static:true]
  Mar  7 22:51:32.743: INFO: Found Service test-service-rvx24 in namespace services-3755 with labels: map[test-service:patched test-service-static:true]
  Mar  7 22:51:32.743: INFO: Service test-service-rvx24 patched
  STEP: deleting the service @ 03/07/24 22:51:32.743
  STEP: watching for the Service to be deleted @ 03/07/24 22:51:32.767
  Mar  7 22:51:32.771: INFO: Observed event: ADDED
  Mar  7 22:51:32.771: INFO: Observed event: MODIFIED
  Mar  7 22:51:32.772: INFO: Observed event: MODIFIED
  Mar  7 22:51:32.772: INFO: Observed event: MODIFIED
  Mar  7 22:51:32.772: INFO: Found Service test-service-rvx24 in namespace services-3755 with labels: map[test-service:patched test-service-static:true] & annotations: map[patchedstatus:true]
  Mar  7 22:51:32.772: INFO: Service test-service-rvx24 deleted
  Mar  7 22:51:32.773: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-3755" for this suite. @ 03/07/24 22:51:32.783
• [0.165 seconds]
------------------------------
SS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/lifecycle_hook.go:136
  STEP: Creating a kubernetes client @ 03/07/24 22:51:32.821
  Mar  7 22:51:32.822: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 03/07/24 22:51:32.824
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:51:32.876
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:51:32.886
  STEP: create the container to handle the HTTPGet hook request. @ 03/07/24 22:51:32.904
  STEP: create the pod with lifecycle hook @ 03/07/24 22:51:34.955
  STEP: check poststart hook @ 03/07/24 22:51:37.004
  STEP: delete the pod with lifecycle hook @ 03/07/24 22:51:37.02
  Mar  7 22:51:41.077: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-639" for this suite. @ 03/07/24 22:51:41.087
• [8.294 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/containers.go:61
  STEP: Creating a kubernetes client @ 03/07/24 22:51:41.117
  Mar  7 22:51:41.117: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename containers @ 03/07/24 22:51:41.119
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:51:41.175
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:51:41.182
  STEP: Creating a pod to test override arguments @ 03/07/24 22:51:41.187
  STEP: Saw pod success @ 03/07/24 22:51:45.219
  Mar  7 22:51:45.228: INFO: Trying to get logs from node whiskas-1 pod client-containers-56f654f2-4223-4360-86d4-90607ba089d0 container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 22:51:45.244
  Mar  7 22:51:45.301: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-707" for this suite. @ 03/07/24 22:51:45.312
• [4.217 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance] [sig-storage, Conformance]
test/e2e/storage/subpath.go:79
  STEP: Creating a kubernetes client @ 03/07/24 22:51:45.334
  Mar  7 22:51:45.334: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename subpath @ 03/07/24 22:51:45.336
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:51:45.368
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:51:45.37
  STEP: Setting up data @ 03/07/24 22:51:45.372
  STEP: Creating pod pod-subpath-test-configmap-s4hn @ 03/07/24 22:51:45.383
  STEP: Creating a pod to test atomic-volume-subpath @ 03/07/24 22:51:45.383
  STEP: Saw pod success @ 03/07/24 22:52:09.499
  Mar  7 22:52:09.508: INFO: Trying to get logs from node whiskas-1 pod pod-subpath-test-configmap-s4hn container test-container-subpath-configmap-s4hn: <nil>
  STEP: delete the pod @ 03/07/24 22:52:09.525
  STEP: Deleting pod pod-subpath-test-configmap-s4hn @ 03/07/24 22:52:09.58
  Mar  7 22:52:09.580: INFO: Deleting pod "pod-subpath-test-configmap-s4hn" in namespace "subpath-2035"
  Mar  7 22:52:09.590: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-2035" for this suite. @ 03/07/24 22:52:09.6
• [24.287 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/field_validation.go:289
  STEP: Creating a kubernetes client @ 03/07/24 22:52:09.621
  Mar  7 22:52:09.621: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename field-validation @ 03/07/24 22:52:09.622
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:52:09.644
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:52:09.647
  Mar  7 22:52:09.651: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:52:12.789: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-4932" for this suite. @ 03/07/24 22:52:12.8
• [3.205 seconds]
------------------------------
S
------------------------------
[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:170
  STEP: Creating a kubernetes client @ 03/07/24 22:52:12.827
  Mar  7 22:52:12.827: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir @ 03/07/24 22:52:12.828
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:52:12.861
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:52:12.868
  STEP: Creating a pod to test emptydir 0644 on node default medium @ 03/07/24 22:52:12.874
  STEP: Saw pod success @ 03/07/24 22:52:16.924
  Mar  7 22:52:16.933: INFO: Trying to get logs from node whiskas-1 pod pod-6c3de316-cbe9-4d0f-8880-25b0519025a9 container test-container: <nil>
  STEP: delete the pod @ 03/07/24 22:52:16.948
  Mar  7 22:52:16.981: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-3449" for this suite. @ 03/07/24 22:52:16.985
• [4.168 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance] [sig-auth, Conformance]
test/e2e/auth/service_accounts.go:531
  STEP: Creating a kubernetes client @ 03/07/24 22:52:16.995
  Mar  7 22:52:16.995: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename svcaccounts @ 03/07/24 22:52:16.996
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:52:17.019
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:52:17.023
  Mar  7 22:52:17.044: INFO: created pod
  STEP: Saw pod success @ 03/07/24 22:52:21.108
  Mar  7 22:52:51.109: INFO: polling logs
  Mar  7 22:52:51.127: INFO: Pod logs: 
  I0307 22:52:17.722200       1 log.go:194] OK: Got token
  I0307 22:52:17.722245       1 log.go:194] validating with in-cluster discovery
  I0307 22:52:17.722444       1 log.go:194] OK: got issuer https://kubernetes.default.svc
  I0307 22:52:17.722469       1 log.go:194] Full, not-validated claims: 
  openidmetadata.claims{Claims:jwt.Claims{Issuer:"https://kubernetes.default.svc", Subject:"system:serviceaccount:svcaccounts-9233:default", Audience:jwt.Audience{"oidc-discovery-test"}, Expiry:(*jwt.NumericDate)(0xc000217ee0), NotBefore:(*jwt.NumericDate)(0xc000217fc8), IssuedAt:(*jwt.NumericDate)(0xc000217ef0), ID:""}, Kubernetes:openidmetadata.kubeClaims{Namespace:"svcaccounts-9233", ServiceAccount:openidmetadata.kubeName{Name:"default", UID:"698f4011-e246-44a6-8ab0-089d7da814e3"}}}
  I0307 22:52:17.728374       1 log.go:194] OK: Constructed OIDC provider for issuer https://kubernetes.default.svc
  I0307 22:52:17.732575       1 log.go:194] OK: Validated signature on JWT
  I0307 22:52:17.732624       1 log.go:194] OK: Got valid claims from token!
  I0307 22:52:17.732642       1 log.go:194] Full, validated claims: 
  &openidmetadata.claims{Claims:jwt.Claims{Issuer:"https://kubernetes.default.svc", Subject:"system:serviceaccount:svcaccounts-9233:default", Audience:jwt.Audience{"oidc-discovery-test"}, Expiry:(*jwt.NumericDate)(0xc00028ec50), NotBefore:(*jwt.NumericDate)(0xc00028ec78), IssuedAt:(*jwt.NumericDate)(0xc00028ec58), ID:""}, Kubernetes:openidmetadata.kubeClaims{Namespace:"svcaccounts-9233", ServiceAccount:openidmetadata.kubeName{Name:"default", UID:"698f4011-e246-44a6-8ab0-089d7da814e3"}}}

  Mar  7 22:52:51.127: INFO: completed pod
  Mar  7 22:52:51.152: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-9233" for this suite. @ 03/07/24 22:52:51.157
• [34.173 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance] [sig-auth, Conformance]
test/e2e/auth/service_accounts.go:649
  STEP: Creating a kubernetes client @ 03/07/24 22:52:51.169
  Mar  7 22:52:51.169: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename svcaccounts @ 03/07/24 22:52:51.17
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:52:51.188
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:52:51.192
  STEP: creating a ServiceAccount @ 03/07/24 22:52:51.194
  STEP: watching for the ServiceAccount to be added @ 03/07/24 22:52:51.202
  STEP: patching the ServiceAccount @ 03/07/24 22:52:51.205
  STEP: finding ServiceAccount in list of all ServiceAccounts (by LabelSelector) @ 03/07/24 22:52:51.212
  STEP: deleting the ServiceAccount @ 03/07/24 22:52:51.215
  Mar  7 22:52:51.232: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-756" for this suite. @ 03/07/24 22:52:51.235
• [0.072 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtime.go:195
  STEP: Creating a kubernetes client @ 03/07/24 22:52:51.241
  Mar  7 22:52:51.242: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-runtime @ 03/07/24 22:52:51.242
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:52:51.294
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:52:51.296
  STEP: create the container @ 03/07/24 22:52:51.299
  W0307 22:52:51.311418      20 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 03/07/24 22:52:51.311
  STEP: get the container status @ 03/07/24 22:52:54.343
  STEP: the container should be terminated @ 03/07/24 22:52:54.352
  STEP: the termination message should be set @ 03/07/24 22:52:54.352
  Mar  7 22:52:54.353: INFO: Expected: &{DONE} to match Container's Termination Message: DONE --
  STEP: delete the container @ 03/07/24 22:52:54.353
  Mar  7 22:52:54.407: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-2475" for this suite. @ 03/07/24 22:52:54.412
• [3.183 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:397
  STEP: Creating a kubernetes client @ 03/07/24 22:52:54.425
  Mar  7 22:52:54.425: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename resourcequota @ 03/07/24 22:52:54.426
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:52:54.454
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:52:54.457
  STEP: Counting existing ResourceQuota @ 03/07/24 22:52:54.461
  STEP: Creating a ResourceQuota @ 03/07/24 22:52:59.464
  STEP: Ensuring resource quota status is calculated @ 03/07/24 22:52:59.472
  STEP: Creating a ReplicationController @ 03/07/24 22:53:01.477
  STEP: Ensuring resource quota status captures replication controller creation @ 03/07/24 22:53:01.5
  STEP: Deleting a ReplicationController @ 03/07/24 22:53:03.509
  STEP: Ensuring resource quota status released usage @ 03/07/24 22:53:03.534
  Mar  7 22:53:05.545: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-8704" for this suite. @ 03/07/24 22:53:05.556
• [11.154 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:330
  STEP: Creating a kubernetes client @ 03/07/24 22:53:05.581
  Mar  7 22:53:05.581: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename resourcequota @ 03/07/24 22:53:05.583
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:53:05.629
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:53:05.641
  STEP: Counting existing ResourceQuota @ 03/07/24 22:53:22.654
  STEP: Creating a ResourceQuota @ 03/07/24 22:53:27.666
  STEP: Ensuring resource quota status is calculated @ 03/07/24 22:53:27.684
  STEP: Creating a ConfigMap @ 03/07/24 22:53:29.699
  STEP: Ensuring resource quota status captures configMap creation @ 03/07/24 22:53:29.738
  STEP: Deleting a ConfigMap @ 03/07/24 22:53:31.748
  STEP: Ensuring resource quota status released usage @ 03/07/24 22:53:31.772
  Mar  7 22:53:33.783: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-2703" for this suite. @ 03/07/24 22:53:33.793
• [28.239 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_conversion_webhook.go:142
  STEP: Creating a kubernetes client @ 03/07/24 22:53:33.821
  Mar  7 22:53:33.821: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename crd-webhook @ 03/07/24 22:53:33.823
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:53:33.871
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:53:33.878
  STEP: Setting up server cert @ 03/07/24 22:53:33.883
  STEP: Create role binding to let cr conversion webhook read extension-apiserver-authentication @ 03/07/24 22:53:34.189
  STEP: Deploying the custom resource conversion webhook pod @ 03/07/24 22:53:34.202
  STEP: Wait for the deployment to be ready @ 03/07/24 22:53:34.217
  Mar  7 22:53:34.222: INFO: new replicaset for deployment "sample-crd-conversion-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 03/07/24 22:53:36.251
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:53:36.285
  Mar  7 22:53:37.286: INFO: Waiting for amount of service:e2e-test-crd-conversion-webhook endpoints to be 1
  Mar  7 22:53:37.303: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Creating a v1 custom resource @ 03/07/24 22:53:39.912
  STEP: v2 custom resource should be converted @ 03/07/24 22:53:39.935
  Mar  7 22:53:40.605: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-webhook-7534" for this suite. @ 03/07/24 22:53:40.632
• [6.844 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:273
  STEP: Creating a kubernetes client @ 03/07/24 22:53:40.666
  Mar  7 22:53:40.666: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 22:53:40.667
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:53:40.729
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:53:40.735
  STEP: Setting up server cert @ 03/07/24 22:53:40.779
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 22:53:41.126
  STEP: Deploying the webhook pod @ 03/07/24 22:53:41.132
  STEP: Wait for the deployment to be ready @ 03/07/24 22:53:41.156
  Mar  7 22:53:41.161: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 03/07/24 22:53:43.183
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:53:43.212
  Mar  7 22:53:44.212: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering a validating webhook on ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects, via the AdmissionRegistration API @ 03/07/24 22:53:44.23
  STEP: Registering a mutating webhook on ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects, via the AdmissionRegistration API @ 03/07/24 22:53:44.283
  STEP: Creating a dummy validating-webhook-configuration object @ 03/07/24 22:53:44.308
  STEP: Deleting the validating-webhook-configuration, which should be possible to remove @ 03/07/24 22:53:44.324
  STEP: Creating a dummy mutating-webhook-configuration object @ 03/07/24 22:53:44.338
  STEP: Deleting the mutating-webhook-configuration, which should be possible to remove @ 03/07/24 22:53:44.355
  Mar  7 22:53:44.506: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-4411" for this suite. @ 03/07/24 22:53:44.509
  STEP: Destroying namespace "webhook-markers-6076" for this suite. @ 03/07/24 22:53:44.524
• [3.873 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/field_validation.go:622
  STEP: Creating a kubernetes client @ 03/07/24 22:53:44.539
  Mar  7 22:53:44.539: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename field-validation @ 03/07/24 22:53:44.539
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:53:44.573
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:53:44.575
  Mar  7 22:53:44.577: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  W0307 22:53:47.152823      20 warnings.go:70] unknown field "alpha"
  W0307 22:53:47.152889      20 warnings.go:70] unknown field "beta"
  W0307 22:53:47.152903      20 warnings.go:70] unknown field "delta"
  W0307 22:53:47.152916      20 warnings.go:70] unknown field "epsilon"
  W0307 22:53:47.152928      20 warnings.go:70] unknown field "gamma"
  Mar  7 22:53:47.734: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-2845" for this suite. @ 03/07/24 22:53:47.737
• [3.210 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_secret.go:46
  STEP: Creating a kubernetes client @ 03/07/24 22:53:47.749
  Mar  7 22:53:47.749: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 22:53:47.75
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:53:47.779
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:53:47.782
  STEP: Creating projection with secret that has name projected-secret-test-092b9397-4d44-4e1e-9e36-54c51a51b2ad @ 03/07/24 22:53:47.785
  STEP: Creating a pod to test consume secrets @ 03/07/24 22:53:47.795
  STEP: Saw pod success @ 03/07/24 22:53:51.827
  Mar  7 22:53:51.836: INFO: Trying to get logs from node whiskas-1 pod pod-projected-secrets-3ce94c82-d4a5-4ba6-9c21-d2f77c6f9238 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 22:53:51.854
  Mar  7 22:53:51.918: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6643" for this suite. @ 03/07/24 22:53:51.927
• [4.190 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance] [sig-apps, Conformance]
test/e2e/apps/statefulset.go:793
  STEP: Creating a kubernetes client @ 03/07/24 22:53:51.94
  Mar  7 22:53:51.940: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename statefulset @ 03/07/24 22:53:51.94
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:53:51.989
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:53:51.994
  STEP: Creating service test in namespace statefulset-3158 @ 03/07/24 22:53:51.999
  STEP: Looking for a node to schedule stateful set and pod @ 03/07/24 22:53:52.011
  STEP: Creating pod with conflicting port in namespace statefulset-3158 @ 03/07/24 22:53:52.022
  STEP: Waiting until pod test-pod will start running in namespace statefulset-3158 @ 03/07/24 22:53:52.04
  STEP: Creating statefulset with conflicting port in namespace statefulset-3158 @ 03/07/24 22:53:54.055
  STEP: Waiting until stateful pod ss-0 will be recreated and deleted at least once in namespace statefulset-3158 @ 03/07/24 22:53:54.087
  Mar  7 22:53:54.120: INFO: Observed stateful pod in namespace: statefulset-3158, name: ss-0, uid: cedeaae6-a677-4c69-abf8-8b93443036c0, status phase: Pending. Waiting for statefulset controller to delete.
  Mar  7 22:53:54.173: INFO: Observed stateful pod in namespace: statefulset-3158, name: ss-0, uid: cedeaae6-a677-4c69-abf8-8b93443036c0, status phase: Failed. Waiting for statefulset controller to delete.
  Mar  7 22:53:54.210: INFO: Observed stateful pod in namespace: statefulset-3158, name: ss-0, uid: cedeaae6-a677-4c69-abf8-8b93443036c0, status phase: Failed. Waiting for statefulset controller to delete.
  Mar  7 22:53:54.230: INFO: Observed delete event for stateful pod ss-0 in namespace statefulset-3158
  STEP: Removing pod with conflicting port in namespace statefulset-3158 @ 03/07/24 22:53:54.23
  STEP: Waiting when stateful pod ss-0 will be recreated in namespace statefulset-3158 and will be in running state @ 03/07/24 22:53:54.282
  Mar  7 22:53:56.303: INFO: Deleting all statefulset in ns statefulset-3158
  Mar  7 22:53:56.312: INFO: Scaling statefulset ss to 0
  Mar  7 22:54:06.363: INFO: Waiting for statefulset status.replicas updated to 0
  Mar  7 22:54:06.371: INFO: Deleting statefulset ss
  Mar  7 22:54:06.417: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-3158" for this suite. @ 03/07/24 22:54:06.429
• [14.502 seconds]
------------------------------
SS
------------------------------
[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:887
  STEP: Creating a kubernetes client @ 03/07/24 22:54:06.442
  Mar  7 22:54:06.442: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 22:54:06.443
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:54:06.477
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:54:06.482
  STEP: validating api versions @ 03/07/24 22:54:06.486
  Mar  7 22:54:06.486: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-2730 api-versions'
  Mar  7 22:54:06.565: INFO: stderr: ""
  Mar  7 22:54:06.565: INFO: stdout: "admissionregistration.k8s.io/v1\napiextensions.k8s.io/v1\napiregistration.k8s.io/v1\napps/v1\nauthentication.k8s.io/v1\nauthorization.k8s.io/v1\nautoscaling/v1\nautoscaling/v2\nbatch/v1\ncertificates.k8s.io/v1\ncoordination.k8s.io/v1\ncrd.projectcalico.org/v1\ndiscovery.k8s.io/v1\nevents.k8s.io/v1\nflowcontrol.apiserver.k8s.io/v1\nflowcontrol.apiserver.k8s.io/v1beta3\nnetworking.k8s.io/v1\nnode.k8s.io/v1\npolicy/v1\nrbac.authorization.k8s.io/v1\nscheduling.k8s.io/v1\nstorage.k8s.io/v1\nv1\n"
  Mar  7 22:54:06.565: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-2730" for this suite. @ 03/07/24 22:54:06.569
• [0.135 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance] [sig-apps, Conformance]
test/e2e/apps/statefulset.go:962
  STEP: Creating a kubernetes client @ 03/07/24 22:54:06.577
  Mar  7 22:54:06.577: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename statefulset @ 03/07/24 22:54:06.578
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:54:06.597
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:54:06.6
  STEP: Creating service test in namespace statefulset-1304 @ 03/07/24 22:54:06.603
  Mar  7 22:54:06.652: INFO: Found 0 stateful pods, waiting for 1
  Mar  7 22:54:16.651: INFO: Waiting for pod test-ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: patching the StatefulSet @ 03/07/24 22:54:16.659
  W0307 22:54:16.674587      20 warnings.go:70] unknown field "spec.template.spec.TerminationGracePeriodSeconds"
  Mar  7 22:54:16.680: INFO: Found 1 stateful pods, waiting for 2
  Mar  7 22:54:26.688: INFO: Waiting for pod test-ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Mar  7 22:54:26.688: INFO: Waiting for pod test-ss-1 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Listing all StatefulSets @ 03/07/24 22:54:26.707
  STEP: Delete all of the StatefulSets @ 03/07/24 22:54:26.716
  STEP: Verify that StatefulSets have been deleted @ 03/07/24 22:54:26.75
  Mar  7 22:54:26.763: INFO: Deleting all statefulset in ns statefulset-1304
  Mar  7 22:54:26.794: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-1304" for this suite. @ 03/07/24 22:54:26.815
• [20.263 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:1493
  STEP: Creating a kubernetes client @ 03/07/24 22:54:26.841
  Mar  7 22:54:26.841: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 22:54:26.842
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:54:26.866
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:54:26.868
  STEP: creating a service clusterip-service with the type=ClusterIP in namespace services-377 @ 03/07/24 22:54:26.87
  STEP: Creating active service to test reachability when its FQDN is referred as externalName for another service @ 03/07/24 22:54:26.883
  STEP: creating service externalsvc in namespace services-377 @ 03/07/24 22:54:26.883
  STEP: creating replication controller externalsvc in namespace services-377 @ 03/07/24 22:54:26.906
  I0307 22:54:26.923083      20 runners.go:197] Created replication controller with name: externalsvc, namespace: services-377, replica count: 2
  I0307 22:54:29.975109      20 runners.go:197] externalsvc Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  STEP: changing the ClusterIP service to type=ExternalName @ 03/07/24 22:54:29.983
  Mar  7 22:54:30.026: INFO: Creating new exec pod
  Mar  7 22:54:32.061: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-377 exec execpodq7wvz -- /bin/sh -x -c nslookup clusterip-service.services-377.svc.cluster.local'
  Mar  7 22:54:32.176: INFO: stderr: "+ nslookup clusterip-service.services-377.svc.cluster.local\n"
  Mar  7 22:54:32.176: INFO: stdout: "Server:\t\t10.152.183.10\nAddress:\t10.152.183.10#53\n\nclusterip-service.services-377.svc.cluster.local\tcanonical name = externalsvc.services-377.svc.cluster.local.\nName:\texternalsvc.services-377.svc.cluster.local\nAddress: 10.152.183.84\n\n"
  STEP: deleting ReplicationController externalsvc in namespace services-377, will wait for the garbage collector to delete the pods @ 03/07/24 22:54:32.176
  Mar  7 22:54:32.242: INFO: Deleting ReplicationController externalsvc took: 11.712129ms
  Mar  7 22:54:32.349: INFO: Terminating ReplicationController externalsvc pods took: 107.081011ms
  Mar  7 22:54:35.232: INFO: Cleaning up the ClusterIP to ExternalName test service
  Mar  7 22:54:35.246: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-377" for this suite. @ 03/07/24 22:54:35.25
• [8.417 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl expose should create services for rc [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1538
  STEP: Creating a kubernetes client @ 03/07/24 22:54:35.258
  Mar  7 22:54:35.258: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 22:54:35.259
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:54:35.276
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:54:35.278
  STEP: creating Agnhost RC @ 03/07/24 22:54:35.28
  Mar  7 22:54:35.280: INFO: namespace kubectl-7869
  Mar  7 22:54:35.280: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7869 create -f -'
  Mar  7 22:54:35.364: INFO: stderr: ""
  Mar  7 22:54:35.364: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 03/07/24 22:54:35.364
  Mar  7 22:54:36.374: INFO: Selector matched 1 pods for map[app:agnhost]
  Mar  7 22:54:36.374: INFO: Found 0 / 1
  Mar  7 22:54:37.375: INFO: Selector matched 1 pods for map[app:agnhost]
  Mar  7 22:54:37.375: INFO: Found 1 / 1
  Mar  7 22:54:37.375: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  Mar  7 22:54:37.384: INFO: Selector matched 1 pods for map[app:agnhost]
  Mar  7 22:54:37.384: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Mar  7 22:54:37.384: INFO: wait on agnhost-primary startup in kubectl-7869 
  Mar  7 22:54:37.384: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7869 logs agnhost-primary-sjjkk agnhost-primary'
  Mar  7 22:54:37.476: INFO: stderr: ""
  Mar  7 22:54:37.476: INFO: stdout: "Paused\n"
  STEP: exposing RC @ 03/07/24 22:54:37.476
  Mar  7 22:54:37.477: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7869 expose rc agnhost-primary --name=rm2 --port=1234 --target-port=6379'
  Mar  7 22:54:37.537: INFO: stderr: ""
  Mar  7 22:54:37.537: INFO: stdout: "service/rm2 exposed\n"
  Mar  7 22:54:37.540: INFO: Service rm2 in namespace kubectl-7869 found.
  STEP: exposing service @ 03/07/24 22:54:39.557
  Mar  7 22:54:39.557: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7869 expose service rm2 --name=rm3 --port=2345 --target-port=6379'
  Mar  7 22:54:39.710: INFO: stderr: ""
  Mar  7 22:54:39.710: INFO: stdout: "service/rm3 exposed\n"
  Mar  7 22:54:39.723: INFO: Service rm3 in namespace kubectl-7869 found.
  Mar  7 22:54:41.740: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-7869" for this suite. @ 03/07/24 22:54:41.75
• [6.513 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:125
  STEP: Creating a kubernetes client @ 03/07/24 22:54:41.772
  Mar  7 22:54:41.772: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename configmap @ 03/07/24 22:54:41.774
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:54:41.822
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:54:41.824
  STEP: Creating configMap with name configmap-test-upd-4b6ca87b-397e-4de1-bb4d-31c79d761edb @ 03/07/24 22:54:41.83
  STEP: Creating the pod @ 03/07/24 22:54:41.836
  STEP: Updating configmap configmap-test-upd-4b6ca87b-397e-4de1-bb4d-31c79d761edb @ 03/07/24 22:54:43.884
  STEP: waiting to observe update in volume @ 03/07/24 22:54:43.909
  Mar  7 22:54:45.942: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-6484" for this suite. @ 03/07/24 22:54:45.953
• [4.210 seconds]
------------------------------
SS
------------------------------
[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:86
  STEP: Creating a kubernetes client @ 03/07/24 22:54:45.983
  Mar  7 22:54:45.983: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 22:54:45.985
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:54:46.024
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:54:46.028
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 22:54:46.031
  STEP: Saw pod success @ 03/07/24 22:54:50.062
  Mar  7 22:54:50.071: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-eadda167-eb81-45f1-b9f1-a6f65f00d6c4 container client-container: <nil>
  STEP: delete the pod @ 03/07/24 22:54:50.088
  Mar  7 22:54:50.138: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3770" for this suite. @ 03/07/24 22:54:50.144
• [4.174 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:238
  STEP: Creating a kubernetes client @ 03/07/24 22:54:50.157
  Mar  7 22:54:50.157: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 22:54:50.158
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:54:50.179
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:54:50.182
  STEP: Setting up server cert @ 03/07/24 22:54:50.219
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 22:54:50.41
  STEP: Deploying the webhook pod @ 03/07/24 22:54:50.417
  STEP: Wait for the deployment to be ready @ 03/07/24 22:54:50.43
  Mar  7 22:54:50.434: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 03/07/24 22:54:52.461
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:54:52.496
  Mar  7 22:54:53.497: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering a webhook that server cannot talk to, with fail closed policy, via the AdmissionRegistration API @ 03/07/24 22:54:53.514
  STEP: create a namespace for the webhook @ 03/07/24 22:54:53.557
  STEP: create a configmap should be unconditionally rejected by the webhook @ 03/07/24 22:54:53.6
  Mar  7 22:54:53.669: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-3811" for this suite. @ 03/07/24 22:54:53.672
  STEP: Destroying namespace "webhook-markers-9456" for this suite. @ 03/07/24 22:54:53.679
  STEP: Destroying namespace "fail-closed-namespace-1077" for this suite. @ 03/07/24 22:54:53.689
• [3.540 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should get a host IP [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/pods.go:205
  STEP: Creating a kubernetes client @ 03/07/24 22:54:53.697
  Mar  7 22:54:53.697: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pods @ 03/07/24 22:54:53.698
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:54:53.713
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:54:53.715
  STEP: creating pod @ 03/07/24 22:54:53.717
  Mar  7 22:54:55.754: INFO: Pod pod-hostip-97447b4c-7e65-41dc-9c12-a4202c70e019 has hostIP: 10.100.138.205
  Mar  7 22:54:55.754: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-2870" for this suite. @ 03/07/24 22:54:55.765
• [2.095 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/field_validation.go:474
  STEP: Creating a kubernetes client @ 03/07/24 22:54:55.796
  Mar  7 22:54:55.796: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename field-validation @ 03/07/24 22:54:55.799
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:54:55.854
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:54:55.862
  Mar  7 22:54:55.870: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  W0307 22:54:58.438234      20 warnings.go:70] unknown field "alpha"
  W0307 22:54:58.438294      20 warnings.go:70] unknown field "beta"
  W0307 22:54:58.438315      20 warnings.go:70] unknown field "delta"
  W0307 22:54:58.438327      20 warnings.go:70] unknown field "epsilon"
  W0307 22:54:58.438339      20 warnings.go:70] unknown field "gamma"
  Mar  7 22:54:59.047: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-5457" for this suite. @ 03/07/24 22:54:59.058
• [3.289 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/containers.go:41
  STEP: Creating a kubernetes client @ 03/07/24 22:54:59.083
  Mar  7 22:54:59.084: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename containers @ 03/07/24 22:54:59.085
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:54:59.14
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:54:59.148
  Mar  7 22:55:01.199: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-6914" for this suite. @ 03/07/24 22:55:01.202
• [2.126 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/field_validation.go:350
  STEP: Creating a kubernetes client @ 03/07/24 22:55:01.209
  Mar  7 22:55:01.209: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename field-validation @ 03/07/24 22:55:01.21
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:55:01.234
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:55:01.238
  Mar  7 22:55:01.240: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  W0307 22:55:01.240878      20 field_validation.go:423] props: &JSONSchemaProps{ID:,Schema:,Ref:nil,Description:,Type:object,Format:,Title:,Default:nil,Maximum:nil,ExclusiveMaximum:false,Minimum:nil,ExclusiveMinimum:false,MaxLength:nil,MinLength:nil,Pattern:,MaxItems:nil,MinItems:nil,UniqueItems:false,MultipleOf:nil,Enum:[]JSON{},MaxProperties:nil,MinProperties:nil,Required:[],Items:nil,AllOf:[]JSONSchemaProps{},OneOf:[]JSONSchemaProps{},AnyOf:[]JSONSchemaProps{},Not:nil,Properties:map[string]JSONSchemaProps{spec: {  <nil>  object   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[cronSpec:{  <nil>  string   nil <nil> false <nil> false <nil> <nil> ^(\d+|\*)(/\d+)?(\s+(\d+|\*)(/\d+)?){4}$ <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []} foo:{  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []} ports:{  <nil>  array   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] &JSONSchemaPropsOrArray{Schema:&JSONSchemaProps{ID:,Schema:,Ref:nil,Description:,Type:object,Format:,Title:,Default:nil,Maximum:nil,ExclusiveMaximum:false,Minimum:nil,ExclusiveMinimum:false,MaxLength:nil,MinLength:nil,Pattern:,MaxItems:nil,MinItems:nil,UniqueItems:false,MultipleOf:nil,Enum:[]JSON{},MaxProperties:nil,MinProperties:nil,Required:[containerPort protocol],Items:nil,AllOf:[]JSONSchemaProps{},OneOf:[]JSONSchemaProps{},AnyOf:[]JSONSchemaProps{},Not:nil,Properties:map[string]JSONSchemaProps{containerPort: {  <nil>  integer int32  nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},hostIP: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},hostPort: {  <nil>  integer int32  nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},name: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},protocol: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},},AdditionalProperties:nil,PatternProperties:map[string]JSONSchemaProps{},Dependencies:JSONSchemaDependencies{},AdditionalItems:nil,Definitions:JSONSchemaDefinitions{},ExternalDocs:nil,Example:nil,Nullable:false,XPreserveUnknownFields:nil,XEmbeddedResource:false,XIntOrString:false,XListMapKeys:[],XListType:nil,XMapType:nil,XValidations:[]ValidationRule{},},JSONSchemas:[]JSONSchemaProps{},} [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [containerPort protocol] 0xc004ca0930 <nil> []}] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},},AdditionalProperties:nil,PatternProperties:map[string]JSONSchemaProps{},Dependencies:JSONSchemaDependencies{},AdditionalItems:nil,Definitions:JSONSchemaDefinitions{},ExternalDocs:nil,Example:nil,Nullable:false,XPreserveUnknownFields:nil,XEmbeddedResource:false,XIntOrString:false,XListMapKeys:[],XListType:nil,XMapType:nil,XValidations:[]ValidationRule{},}
  W0307 22:55:03.803638      20 warnings.go:70] unknown field "alpha"
  W0307 22:55:03.803702      20 warnings.go:70] unknown field "beta"
  W0307 22:55:03.803715      20 warnings.go:70] unknown field "delta"
  W0307 22:55:03.803727      20 warnings.go:70] unknown field "epsilon"
  W0307 22:55:03.803739      20 warnings.go:70] unknown field "gamma"
  Mar  7 22:55:04.407: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-9488" for this suite. @ 03/07/24 22:55:04.419
• [3.233 seconds]
------------------------------
SS
------------------------------
[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/downwardapi.go:46
  STEP: Creating a kubernetes client @ 03/07/24 22:55:04.442
  Mar  7 22:55:04.442: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 22:55:04.443
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:55:04.518
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:55:04.526
  STEP: Creating a pod to test downward api env vars @ 03/07/24 22:55:04.532
  STEP: Saw pod success @ 03/07/24 22:55:08.578
  Mar  7 22:55:08.581: INFO: Trying to get logs from node whiskas-1 pod downward-api-61257f8b-e291-4679-89fa-06c8667eb20b container dapi-container: <nil>
  STEP: delete the pod @ 03/07/24 22:55:08.588
  Mar  7 22:55:08.609: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-2466" for this suite. @ 03/07/24 22:55:08.612
• [4.178 seconds]
------------------------------
SS
------------------------------
[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:195
  STEP: Creating a kubernetes client @ 03/07/24 22:55:08.62
  Mar  7 22:55:08.620: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 22:55:08.621
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:55:08.634
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:55:08.636
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 22:55:08.638
  STEP: Saw pod success @ 03/07/24 22:55:12.669
  Mar  7 22:55:12.678: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-e6a9186e-479c-45d0-a956-8ea36a96b17b container client-container: <nil>
  STEP: delete the pod @ 03/07/24 22:55:12.694
  Mar  7 22:55:12.753: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-5255" for this suite. @ 03/07/24 22:55:12.764
• [4.161 seconds]
------------------------------
S
------------------------------
[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/daemon_set.go:443
  STEP: Creating a kubernetes client @ 03/07/24 22:55:12.782
  Mar  7 22:55:12.782: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename daemonsets @ 03/07/24 22:55:12.783
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:55:12.819
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:55:12.823
  Mar  7 22:55:12.852: INFO: Create a RollingUpdate DaemonSet
  Mar  7 22:55:12.863: INFO: Check that daemon pods launch on every node of the cluster
  Mar  7 22:55:12.873: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:55:12.873: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  Mar  7 22:55:13.880: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:55:13.882: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  Mar  7 22:55:14.871: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Mar  7 22:55:14.871: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  Mar  7 22:55:14.871: INFO: Update the DaemonSet to trigger a rollout
  Mar  7 22:55:14.883: INFO: Updating DaemonSet daemon-set
  Mar  7 22:55:16.921: INFO: Roll back the DaemonSet before rollout is complete
  Mar  7 22:55:16.946: INFO: Updating DaemonSet daemon-set
  Mar  7 22:55:16.946: INFO: Make sure DaemonSet rollback is complete
  Mar  7 22:55:16.954: INFO: Wrong image for pod: daemon-set-wl9nd. Expected: registry.k8s.io/e2e-test-images/httpd:2.4.38-4, got: foo:non-existent.
  Mar  7 22:55:16.954: INFO: Pod daemon-set-wl9nd is not available
  Mar  7 22:55:19.958: INFO: Pod daemon-set-5pcvb is not available
  STEP: Deleting DaemonSet "daemon-set" @ 03/07/24 22:55:19.987
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-3212, will wait for the garbage collector to delete the pods @ 03/07/24 22:55:19.987
  Mar  7 22:55:20.067: INFO: Deleting DaemonSet.extensions daemon-set took: 21.854343ms
  Mar  7 22:55:20.168: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.768428ms
  Mar  7 22:55:22.381: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:55:22.381: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Mar  7 22:55:22.396: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"110662"},"items":null}

  Mar  7 22:55:22.413: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"110662"},"items":null}

  Mar  7 22:55:22.429: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-3212" for this suite. @ 03/07/24 22:55:22.432
• [9.658 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Secrets should fail to create secret due to empty secret key [Conformance] [sig-node, Conformance]
test/e2e/common/node/secrets.go:141
  STEP: Creating a kubernetes client @ 03/07/24 22:55:22.44
  Mar  7 22:55:22.440: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename secrets @ 03/07/24 22:55:22.441
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:55:22.463
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:55:22.469
  STEP: Creating projection with secret that has name secret-emptykey-test-1fefeb7e-1f18-4bdf-b53b-48f029a4cc3c @ 03/07/24 22:55:22.472
  Mar  7 22:55:22.473: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-5213" for this suite. @ 03/07/24 22:55:22.477
• [0.044 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:180
  STEP: Creating a kubernetes client @ 03/07/24 22:55:22.484
  Mar  7 22:55:22.484: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir @ 03/07/24 22:55:22.485
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:55:22.505
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:55:22.508
  STEP: Creating a pod to test emptydir 0666 on node default medium @ 03/07/24 22:55:22.51
  STEP: Saw pod success @ 03/07/24 22:55:24.534
  Mar  7 22:55:24.543: INFO: Trying to get logs from node whiskas-1 pod pod-b972d037-e5f0-4951-8da9-6680bb67890e container test-container: <nil>
  STEP: delete the pod @ 03/07/24 22:55:24.559
  Mar  7 22:55:24.613: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-5453" for this suite. @ 03/07/24 22:55:24.618
• [2.144 seconds]
------------------------------
S
------------------------------
[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/downwardapi.go:219
  STEP: Creating a kubernetes client @ 03/07/24 22:55:24.628
  Mar  7 22:55:24.628: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 22:55:24.628
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:55:24.648
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:55:24.651
  STEP: Creating a pod to test downward api env vars @ 03/07/24 22:55:24.653
  STEP: Saw pod success @ 03/07/24 22:55:28.7
  Mar  7 22:55:28.709: INFO: Trying to get logs from node whiskas-1 pod downward-api-51dcf97a-e39e-4f47-a6f9-3da811e90981 container dapi-container: <nil>
  STEP: delete the pod @ 03/07/24 22:55:28.727
  Mar  7 22:55:28.779: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-7176" for this suite. @ 03/07/24 22:55:28.789
• [4.182 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/predicates.go:469
  STEP: Creating a kubernetes client @ 03/07/24 22:55:28.812
  Mar  7 22:55:28.812: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename sched-pred @ 03/07/24 22:55:28.813
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:55:28.853
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:55:28.859
  Mar  7 22:55:28.865: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Mar  7 22:55:28.880: INFO: Waiting for terminating namespaces to be deleted...
  Mar  7 22:55:28.886: INFO: 
  Logging pods the apiserver thinks is on node whiskas-1 before test
  Mar  7 22:55:28.893: INFO: calico-node-qn97s from kube-system started at 2024-03-07 16:43:41 +0000 UTC (1 container statuses recorded)
  Mar  7 22:55:28.893: INFO: 	Container calico-node ready: true, restart count 0
  Mar  7 22:55:28.893: INFO: sonobuoy-systemd-logs-daemon-set-e0190a7af8074a44-5wrn6 from sonobuoy started at 2024-03-07 21:55:24 +0000 UTC (2 container statuses recorded)
  Mar  7 22:55:28.893: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Mar  7 22:55:28.893: INFO: 	Container systemd-logs ready: true, restart count 0
  Mar  7 22:55:28.893: INFO: 
  Logging pods the apiserver thinks is on node whiskas-2 before test
  Mar  7 22:55:28.900: INFO: calico-kube-controllers-77bd7c5b-fdpjv from kube-system started at 2024-03-07 22:08:21 +0000 UTC (1 container statuses recorded)
  Mar  7 22:55:28.900: INFO: 	Container calico-kube-controllers ready: true, restart count 0
  Mar  7 22:55:28.900: INFO: calico-node-dqm6m from kube-system started at 2024-03-07 16:43:45 +0000 UTC (1 container statuses recorded)
  Mar  7 22:55:28.900: INFO: 	Container calico-node ready: true, restart count 0
  Mar  7 22:55:28.900: INFO: coredns-864597b5fd-8rq6f from kube-system started at 2024-03-07 22:08:21 +0000 UTC (1 container statuses recorded)
  Mar  7 22:55:28.900: INFO: 	Container coredns ready: true, restart count 0
  Mar  7 22:55:28.900: INFO: sonobuoy from sonobuoy started at 2024-03-07 21:55:23 +0000 UTC (1 container statuses recorded)
  Mar  7 22:55:28.900: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Mar  7 22:55:28.900: INFO: sonobuoy-e2e-job-2fc5b94cf9844ccc from sonobuoy started at 2024-03-07 21:55:24 +0000 UTC (2 container statuses recorded)
  Mar  7 22:55:28.900: INFO: 	Container e2e ready: true, restart count 0
  Mar  7 22:55:28.900: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Mar  7 22:55:28.900: INFO: sonobuoy-systemd-logs-daemon-set-e0190a7af8074a44-fx8dw from sonobuoy started at 2024-03-07 21:55:24 +0000 UTC (2 container statuses recorded)
  Mar  7 22:55:28.900: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Mar  7 22:55:28.900: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 03/07/24 22:55:28.9
  STEP: Explicitly delete pod here to free the resource it takes. @ 03/07/24 22:55:30.925
  STEP: Trying to apply a random label on the found node. @ 03/07/24 22:55:30.961
  STEP: verifying the node has the label kubernetes.io/e2e-4ffe8210-981c-469a-b4a0-cf84e8541fdc 42 @ 03/07/24 22:55:30.979
  STEP: Trying to relaunch the pod, now with labels. @ 03/07/24 22:55:30.991
  STEP: removing the label kubernetes.io/e2e-4ffe8210-981c-469a-b4a0-cf84e8541fdc off the node whiskas-1 @ 03/07/24 22:55:33.023
  STEP: verifying the node doesn't have the label kubernetes.io/e2e-4ffe8210-981c-469a-b4a0-cf84e8541fdc @ 03/07/24 22:55:33.056
  Mar  7 22:55:33.071: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-9419" for this suite. @ 03/07/24 22:55:33.084
• [4.284 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/downwardapi.go:92
  STEP: Creating a kubernetes client @ 03/07/24 22:55:33.096
  Mar  7 22:55:33.097: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 22:55:33.097
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:55:33.117
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:55:33.119
  STEP: Creating a pod to test downward api env vars @ 03/07/24 22:55:33.121
  STEP: Saw pod success @ 03/07/24 22:55:37.16
  Mar  7 22:55:37.169: INFO: Trying to get logs from node whiskas-1 pod downward-api-a40a52c6-a2c6-499e-b35f-7c95c57f25eb container dapi-container: <nil>
  STEP: delete the pod @ 03/07/24 22:55:37.189
  Mar  7 22:55:37.247: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-531" for this suite. @ 03/07/24 22:55:37.258
• [4.178 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:453
  STEP: Creating a kubernetes client @ 03/07/24 22:55:37.274
  Mar  7 22:55:37.274: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename resourcequota @ 03/07/24 22:55:37.275
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:55:37.298
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:55:37.301
  STEP: Counting existing ResourceQuota @ 03/07/24 22:55:37.303
  STEP: Creating a ResourceQuota @ 03/07/24 22:55:42.316
  STEP: Ensuring resource quota status is calculated @ 03/07/24 22:55:42.334
  STEP: Creating a ReplicaSet @ 03/07/24 22:55:44.344
  STEP: Ensuring resource quota status captures replicaset creation @ 03/07/24 22:55:44.387
  STEP: Deleting a ReplicaSet @ 03/07/24 22:55:46.391
  STEP: Ensuring resource quota status released usage @ 03/07/24 22:55:46.413
  Mar  7 22:55:48.423: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-5192" for this suite. @ 03/07/24 22:55:48.434
• [11.181 seconds]
------------------------------
SSS
------------------------------
[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/secrets.go:96
  STEP: Creating a kubernetes client @ 03/07/24 22:55:48.455
  Mar  7 22:55:48.455: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename secrets @ 03/07/24 22:55:48.458
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:55:48.502
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:55:48.507
  STEP: creating secret secrets-3183/secret-test-1e5d63bc-f284-4d92-ac13-0d20445c2241 @ 03/07/24 22:55:48.511
  STEP: Creating a pod to test consume secrets @ 03/07/24 22:55:48.519
  STEP: Saw pod success @ 03/07/24 22:55:52.552
  Mar  7 22:55:52.560: INFO: Trying to get logs from node whiskas-1 pod pod-configmaps-411b95da-2c6c-4245-95a8-c394cc45c166 container env-test: <nil>
  STEP: delete the pod @ 03/07/24 22:55:52.578
  Mar  7 22:55:52.634: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-3183" for this suite. @ 03/07/24 22:55:52.645
• [4.207 seconds]
------------------------------
[sig-instrumentation] Events should manage the lifecycle of an event [Conformance] [sig-instrumentation, Conformance]
test/e2e/instrumentation/core_events.go:58
  STEP: Creating a kubernetes client @ 03/07/24 22:55:52.663
  Mar  7 22:55:52.663: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename events @ 03/07/24 22:55:52.664
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:55:52.69
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:55:52.693
  STEP: creating a test event @ 03/07/24 22:55:52.695
  STEP: listing all events in all namespaces @ 03/07/24 22:55:52.701
  STEP: patching the test event @ 03/07/24 22:55:52.704
  STEP: fetching the test event @ 03/07/24 22:55:52.71
  STEP: updating the test event @ 03/07/24 22:55:52.711
  STEP: getting the test event @ 03/07/24 22:55:52.721
  STEP: deleting the test event @ 03/07/24 22:55:52.723
  STEP: listing all events in all namespaces @ 03/07/24 22:55:52.73
  Mar  7 22:55:52.732: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-9938" for this suite. @ 03/07/24 22:55:52.735
• [0.079 seconds]
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance] [sig-apps, Conformance]
test/e2e/apps/statefulset.go:902
  STEP: Creating a kubernetes client @ 03/07/24 22:55:52.742
  Mar  7 22:55:52.742: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename statefulset @ 03/07/24 22:55:52.742
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:55:52.758
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:55:52.76
  STEP: Creating service test in namespace statefulset-8262 @ 03/07/24 22:55:52.763
  STEP: Creating statefulset ss in namespace statefulset-8262 @ 03/07/24 22:55:52.77
  Mar  7 22:55:52.796: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Pending - Ready=false
  Mar  7 22:56:02.781: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: getting scale subresource @ 03/07/24 22:56:02.787
  STEP: updating a scale subresource @ 03/07/24 22:56:02.789
  STEP: verifying the statefulset Spec.Replicas was modified @ 03/07/24 22:56:02.798
  STEP: Patch a scale subresource @ 03/07/24 22:56:02.801
  STEP: verifying the statefulset Spec.Replicas was modified @ 03/07/24 22:56:02.809
  Mar  7 22:56:02.813: INFO: Deleting all statefulset in ns statefulset-8262
  Mar  7 22:56:02.816: INFO: Scaling statefulset ss to 0
  Mar  7 22:56:12.843: INFO: Waiting for statefulset status.replicas updated to 0
  Mar  7 22:56:12.851: INFO: Deleting statefulset ss
  Mar  7 22:56:12.897: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-8262" for this suite. @ 03/07/24 22:56:12.903
• [20.170 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:164
  STEP: Creating a kubernetes client @ 03/07/24 22:56:12.912
  Mar  7 22:56:12.912: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 22:56:12.913
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:56:12.932
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:56:12.935
  STEP: Creating the pod @ 03/07/24 22:56:12.938
  Mar  7 22:56:15.516: INFO: Successfully updated pod "annotationupdatedef2145a-c966-4dc4-8e93-dcd8e249eff0"
  Mar  7 22:56:19.573: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9250" for this suite. @ 03/07/24 22:56:19.584
• [6.697 seconds]
------------------------------
[sig-auth] ServiceAccounts should update a ServiceAccount [Conformance] [sig-auth, Conformance]
test/e2e/auth/service_accounts.go:810
  STEP: Creating a kubernetes client @ 03/07/24 22:56:19.61
  Mar  7 22:56:19.610: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename svcaccounts @ 03/07/24 22:56:19.613
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:56:19.67
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:56:19.681
  STEP: Creating ServiceAccount "e2e-sa-c55n2"  @ 03/07/24 22:56:19.686
  Mar  7 22:56:19.698: INFO: AutomountServiceAccountToken: false
  STEP: Updating ServiceAccount "e2e-sa-c55n2"  @ 03/07/24 22:56:19.698
  Mar  7 22:56:19.712: INFO: AutomountServiceAccountToken: true
  Mar  7 22:56:19.712: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-8101" for this suite. @ 03/07/24 22:56:19.717
• [0.118 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:78
  STEP: Creating a kubernetes client @ 03/07/24 22:56:19.728
  Mar  7 22:56:19.728: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename resourcequota @ 03/07/24 22:56:19.729
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:56:19.748
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:56:19.751
  STEP: Counting existing ResourceQuota @ 03/07/24 22:56:19.754
  STEP: Creating a ResourceQuota @ 03/07/24 22:56:24.758
  STEP: Ensuring resource quota status is calculated @ 03/07/24 22:56:24.771
  Mar  7 22:56:26.780: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-6544" for this suite. @ 03/07/24 22:56:26.791
• [7.107 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/daemon_set.go:205
  STEP: Creating a kubernetes client @ 03/07/24 22:56:26.836
  Mar  7 22:56:26.836: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename daemonsets @ 03/07/24 22:56:26.838
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:56:26.897
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:56:26.905
  Mar  7 22:56:26.929: INFO: Creating daemon "daemon-set" with a node selector
  STEP: Initially, daemon pods should not be running on any nodes. @ 03/07/24 22:56:26.938
  Mar  7 22:56:26.943: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:56:26.943: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  STEP: Change node label to blue, check that daemon pod is launched. @ 03/07/24 22:56:26.943
  Mar  7 22:56:27.007: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:56:27.007: INFO: Node whiskas-2 is running 0 daemon pod, expected 1
  Mar  7 22:56:28.008: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:56:28.008: INFO: Node whiskas-2 is running 0 daemon pod, expected 1
  Mar  7 22:56:29.008: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Mar  7 22:56:29.008: INFO: Number of running nodes: 1, number of available pods: 1 in daemonset daemon-set
  STEP: Update the node label to green, and wait for daemons to be unscheduled @ 03/07/24 22:56:29.016
  Mar  7 22:56:29.069: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Mar  7 22:56:29.069: INFO: Number of running nodes: 0, number of available pods: 1 in daemonset daemon-set
  Mar  7 22:56:30.060: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:56:30.060: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  STEP: Update DaemonSet node selector to green, and change its update strategy to RollingUpdate @ 03/07/24 22:56:30.06
  Mar  7 22:56:30.075: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:56:30.075: INFO: Node whiskas-2 is running 0 daemon pod, expected 1
  Mar  7 22:56:31.083: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:56:31.083: INFO: Node whiskas-2 is running 0 daemon pod, expected 1
  Mar  7 22:56:32.077: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:56:32.077: INFO: Node whiskas-2 is running 0 daemon pod, expected 1
  Mar  7 22:56:33.082: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Mar  7 22:56:33.082: INFO: Number of running nodes: 1, number of available pods: 1 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 03/07/24 22:56:33.099
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-7860, will wait for the garbage collector to delete the pods @ 03/07/24 22:56:33.099
  Mar  7 22:56:33.185: INFO: Deleting DaemonSet.extensions daemon-set took: 26.807967ms
  Mar  7 22:56:33.285: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.317453ms
  Mar  7 22:56:35.590: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:56:35.590: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Mar  7 22:56:35.594: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"111222"},"items":null}

  Mar  7 22:56:35.598: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"111222"},"items":null}

  Mar  7 22:56:35.646: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-7860" for this suite. @ 03/07/24 22:56:35.655
• [8.832 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment should validate Deployment Status endpoints [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:489
  STEP: Creating a kubernetes client @ 03/07/24 22:56:35.669
  Mar  7 22:56:35.669: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename deployment @ 03/07/24 22:56:35.671
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:56:35.693
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:56:35.698
  STEP: creating a Deployment @ 03/07/24 22:56:35.703
  Mar  7 22:56:35.703: INFO: Creating simple deployment test-deployment-nx57x
  Mar  7 22:56:35.714: INFO: new replicaset for deployment "test-deployment-nx57x" is yet to be created
  STEP: Getting /status @ 03/07/24 22:56:37.742
  Mar  7 22:56:37.747: INFO: Deployment test-deployment-nx57x has Conditions: [{Available True 2024-03-07 22:56:36 +0000 UTC 2024-03-07 22:56:36 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.} {Progressing True 2024-03-07 22:56:36 +0000 UTC 2024-03-07 22:56:35 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-nx57x-5d576bd769" has successfully progressed.}]
  STEP: updating Deployment Status @ 03/07/24 22:56:37.747
  Mar  7 22:56:37.765: INFO: updatedStatus.Conditions: []v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 22, 56, 36, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 22, 56, 36, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.March, 7, 22, 56, 36, 0, time.Local), LastTransitionTime:time.Date(2024, time.March, 7, 22, 56, 35, 0, time.Local), Reason:"NewReplicaSetAvailable", Message:"ReplicaSet \"test-deployment-nx57x-5d576bd769\" has successfully progressed."}, v1.DeploymentCondition{Type:"StatusUpdate", Status:"True", LastUpdateTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the Deployment status to be updated @ 03/07/24 22:56:37.765
  Mar  7 22:56:37.766: INFO: Observed &Deployment event: ADDED
  Mar  7 22:56:37.767: INFO: Observed Deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-03-07 22:56:35 +0000 UTC 2024-03-07 22:56:35 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-nx57x-5d576bd769"}
  Mar  7 22:56:37.767: INFO: Observed &Deployment event: MODIFIED
  Mar  7 22:56:37.767: INFO: Observed Deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-03-07 22:56:35 +0000 UTC 2024-03-07 22:56:35 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-nx57x-5d576bd769"}
  Mar  7 22:56:37.767: INFO: Observed Deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-03-07 22:56:35 +0000 UTC 2024-03-07 22:56:35 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Mar  7 22:56:37.767: INFO: Observed &Deployment event: MODIFIED
  Mar  7 22:56:37.767: INFO: Observed Deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-03-07 22:56:35 +0000 UTC 2024-03-07 22:56:35 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Mar  7 22:56:37.767: INFO: Observed Deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-03-07 22:56:35 +0000 UTC 2024-03-07 22:56:35 +0000 UTC ReplicaSetUpdated ReplicaSet "test-deployment-nx57x-5d576bd769" is progressing.}
  Mar  7 22:56:37.767: INFO: Observed &Deployment event: MODIFIED
  Mar  7 22:56:37.767: INFO: Observed Deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-03-07 22:56:36 +0000 UTC 2024-03-07 22:56:36 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Mar  7 22:56:37.767: INFO: Observed Deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-03-07 22:56:36 +0000 UTC 2024-03-07 22:56:35 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-nx57x-5d576bd769" has successfully progressed.}
  Mar  7 22:56:37.767: INFO: Observed &Deployment event: MODIFIED
  Mar  7 22:56:37.767: INFO: Observed Deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-03-07 22:56:36 +0000 UTC 2024-03-07 22:56:36 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Mar  7 22:56:37.767: INFO: Observed Deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-03-07 22:56:36 +0000 UTC 2024-03-07 22:56:35 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-nx57x-5d576bd769" has successfully progressed.}
  Mar  7 22:56:37.767: INFO: Found Deployment test-deployment-nx57x in namespace deployment-5288 with labels: map[e2e:testing name:httpd] annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Mar  7 22:56:37.767: INFO: Deployment test-deployment-nx57x has an updated status
  STEP: patching the Statefulset Status @ 03/07/24 22:56:37.767
  Mar  7 22:56:37.767: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Mar  7 22:56:37.774: INFO: Patched status conditions: []v1.DeploymentCondition{v1.DeploymentCondition{Type:"StatusPatched", Status:"True", LastUpdateTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Deployment status to be patched @ 03/07/24 22:56:37.774
  Mar  7 22:56:37.778: INFO: Observed &Deployment event: ADDED
  Mar  7 22:56:37.778: INFO: Observed deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-03-07 22:56:35 +0000 UTC 2024-03-07 22:56:35 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-nx57x-5d576bd769"}
  Mar  7 22:56:37.778: INFO: Observed &Deployment event: MODIFIED
  Mar  7 22:56:37.778: INFO: Observed deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-03-07 22:56:35 +0000 UTC 2024-03-07 22:56:35 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-nx57x-5d576bd769"}
  Mar  7 22:56:37.778: INFO: Observed deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-03-07 22:56:35 +0000 UTC 2024-03-07 22:56:35 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Mar  7 22:56:37.778: INFO: Observed &Deployment event: MODIFIED
  Mar  7 22:56:37.778: INFO: Observed deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-03-07 22:56:35 +0000 UTC 2024-03-07 22:56:35 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Mar  7 22:56:37.778: INFO: Observed deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-03-07 22:56:35 +0000 UTC 2024-03-07 22:56:35 +0000 UTC ReplicaSetUpdated ReplicaSet "test-deployment-nx57x-5d576bd769" is progressing.}
  Mar  7 22:56:37.778: INFO: Observed &Deployment event: MODIFIED
  Mar  7 22:56:37.778: INFO: Observed deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-03-07 22:56:36 +0000 UTC 2024-03-07 22:56:36 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Mar  7 22:56:37.778: INFO: Observed deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-03-07 22:56:36 +0000 UTC 2024-03-07 22:56:35 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-nx57x-5d576bd769" has successfully progressed.}
  Mar  7 22:56:37.778: INFO: Observed &Deployment event: MODIFIED
  Mar  7 22:56:37.778: INFO: Observed deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-03-07 22:56:36 +0000 UTC 2024-03-07 22:56:36 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Mar  7 22:56:37.778: INFO: Observed deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-03-07 22:56:36 +0000 UTC 2024-03-07 22:56:35 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-nx57x-5d576bd769" has successfully progressed.}
  Mar  7 22:56:37.778: INFO: Observed deployment test-deployment-nx57x in namespace deployment-5288 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Mar  7 22:56:37.779: INFO: Observed &Deployment event: MODIFIED
  Mar  7 22:56:37.779: INFO: Found deployment test-deployment-nx57x in namespace deployment-5288 with labels: map[e2e:testing name:httpd] annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC  }
  Mar  7 22:56:37.779: INFO: Deployment test-deployment-nx57x has a patched status
  Mar  7 22:56:37.781: INFO: Deployment "test-deployment-nx57x":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=21) "test-deployment-nx57x",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5288",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ed692480-76e3-486b-bfff-b2e56eee6bc6",
      ResourceVersion: (string) (len=6) "111254",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845448995,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845448995,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=657) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 65 32 65  22 3a 7b 7d 2c 22 66 3a  |},"f:e2e":{},"f:|
              00000030  6e 61 6d 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |name":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  70 72 6f 67 72 65 73 73  |ec":{"f:progress|
              00000050  44 65 61 64 6c 69 6e 65  53 65 63 6f 6e 64 73 22  |DeadlineSeconds"|
              00000060  3a 7b 7d 2c 22 66 3a 72  65 70 6c 69 63 61 73 22  |:{},"f:replicas"|
              00000070  3a 7b 7d 2c 22 66 3a 72  65 76 69 73 69 6f 6e 48  |:{},"f:revisionH|
              00000080  69 73 74 6f 72 79 4c 69  6d 69 74 22 3a 7b 7d 2c  |istoryLimit":{},|
              00000090  22 66 3a 73 65 6c 65 63  74 6f 72 22 3a 7b 7d 2c  |"f:selector":{},|
              000000a0  22 66 3a 73 74 72 61 74  65 67 79 22 3a 7b 22 66  |"f:strategy":{"f|
              000000b0  3a 72 6f 6c 6c 69 6e 67  55 70 64 61 74 65 22 3a  |:rollingUpdate":|
              000000c0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6d 61 78 53 75  |{".":{},"f:maxSu|
              000000d0  72 67 65 22 3a 7b 7d 2c  22 66 3a 6d 61 78 55 6e  |rge":{},"f:maxUn|
              000000e0  61 76 61 69 6c 61 62 6c  65 22 3a 7b 7d 7d 2c 22  |available":{}},"|
              000000f0  66 3a 74 79 70 65 22 3a  7b 7d 7d 2c 22 66 3a 74  |f:type":{}},"f:t|
              00000100  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000110  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              00000120  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 65 32  |s":{".":{},"f:e2|
              00000130  65 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |e":{},"f:name":{|
              00000140  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              00000150  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000160  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              00000170  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              00000180  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000190  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              000001a0  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              000001b0  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              000001c0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000001d0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000001e0  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000210  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000220  69 63 79 22 3a 7b 7d 2c  22 66 3a 72 65 73 74 61  |icy":{},"f:resta|
              00000230  72 74 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |rtPolicy":{},"f:|
              00000240  73 63 68 65 64 75 6c 65  72 4e 61 6d 65 22 3a 7b  |schedulerName":{|
              00000250  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000260  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000270  69 6e 61 74 69 6f 6e 47  72 61 63 65 50 65 72 69  |inationGracePeri|
              00000280  6f 64 53 65 63 6f 6e 64  73 22 3a 7b 7d 7d 7d 7d  |odSeconds":{}}}}|
              00000290  7d                                                |}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845448996,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=224) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |ions":{},"f:obse|
              00000090  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              000000a0  7b 7d 2c 22 66 3a 72 65  61 64 79 52 65 70 6c 69  |{},"f:readyRepli|
              000000b0  63 61 73 22 3a 7b 7d 2c  22 66 3a 72 65 70 6c 69  |cas":{},"f:repli|
              000000c0  63 61 73 22 3a 7b 7d 2c  22 66 3a 75 70 64 61 74  |cas":{},"f:updat|
              000000d0  65 64 52 65 70 6c 69 63  61 73 22 3a 7b 7d 7d 7d  |edReplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845448997,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=147) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 53 74 61 74  |{\"type\":\"Stat|
              00000030  75 73 50 61 74 63 68 65  64 5c 22 7d 22 3a 7b 22  |usPatched\"}":{"|
              00000040  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |.":{},"f:lastTra|
              00000050  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000060  22 66 3a 6c 61 73 74 55  70 64 61 74 65 54 69 6d  |"f:lastUpdateTim|
              00000070  65 22 3a 7b 7d 2c 22 66  3a 73 74 61 74 75 73 22  |e":{},"f:status"|
              00000080  3a 7b 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |:{},"f:type":{}}|
              00000090  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=3) "e2e": (string) (len=7) "testing"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=3) "e2e": (string) (len=7) "testing",
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=1) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=13) "StatusPatched",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Mar  7 22:56:37.785: INFO: New ReplicaSet "test-deployment-nx57x-5d576bd769" of Deployment "test-deployment-nx57x":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-nx57x-5d576bd769",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5288",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7c7f65bc-b84c-4447-9c5d-f2d4f466fdc3",
      ResourceVersion: (string) (len=6) "111249",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845448995,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=3) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=21) "test-deployment-nx57x",
          UID: (types.UID) (len=36) "ed692480-76e3-486b-bfff-b2e56eee6bc6",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845448995,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=803) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 65 32 65  22 3a 7b 7d 2c 22 66 3a  |},"f:e2e":{},"f:|
              000000d0  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 70 6f 64 2d  |name":{},"f:pod-|
              000000e0  74 65 6d 70 6c 61 74 65  2d 68 61 73 68 22 3a 7b  |template-hash":{|
              000000f0  7d 7d 2c 22 66 3a 6f 77  6e 65 72 52 65 66 65 72  |}},"f:ownerRefer|
              00000100  65 6e 63 65 73 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |ences":{".":{},"|
              00000110  6b 3a 7b 5c 22 75 69 64  5c 22 3a 5c 22 65 64 36  |k:{\"uid\":\"ed6|
              00000120  39 32 34 38 30 2d 37 36  65 33 2d 34 38 36 62 2d  |92480-76e3-486b-|
              00000130  62 66 66 66 2d 62 32 65  35 36 65 65 65 36 62 63  |bfff-b2e56eee6bc|
              00000140  36 5c 22 7d 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |6\"}":{}}},"f:sp|
              00000150  65 63 22 3a 7b 22 66 3a  72 65 70 6c 69 63 61 73  |ec":{"f:replicas|
              00000160  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000180  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000190  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              000001a0  3a 7b 7d 2c 22 66 3a 65  32 65 22 3a 7b 7d 2c 22  |:{},"f:e2e":{},"|
              000001b0  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 70 6f  |f:name":{},"f:po|
              000001c0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001d0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000001e0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000001f0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 68  |"k:{\"name\":\"h|
              00000200  74 74 70 64 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |ttpd\"}":{".":{}|
              00000210  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000220  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000230  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000240  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000250  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000260  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000270  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000280  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000290  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              000002a0  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              000002b0  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              000002c0  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              000002d0  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              000002e0  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000002f0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              00000300  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              00000310  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              00000320  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845448996,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=3) {
          (string) (len=3) "e2e": (string) (len=7) "testing",
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=3) {
            (string) (len=3) "e2e": (string) (len=7) "testing",
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Mar  7 22:56:37.787: INFO: Pod "test-deployment-nx57x-5d576bd769-7fm5j" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=38) "test-deployment-nx57x-5d576bd769-7fm5j",
      GenerateName: (string) (len=33) "test-deployment-nx57x-5d576bd769-",
      Namespace: (string) (len=15) "deployment-5288",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ab552ce4-7f24-48af-be85-9c530c3bb310",
      ResourceVersion: (string) (len=6) "111248",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845448995,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=3) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "69382ce60afe7cbdc3fb07e78d4c3e0ab8950255db7e85c0f907f75dc9b74d59",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=13) "10.1.51.82/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=13) "10.1.51.82/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=32) "test-deployment-nx57x-5d576bd769",
          UID: (types.UID) (len=36) "7c7f65bc-b84c-4447-9c5d-f2d4f466fdc3",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845448995,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=548) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 65 32 65 22 3a 7b 7d  |.":{},"f:e2e":{}|
              00000040  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000050  70 6f 64 2d 74 65 6d 70  6c 61 74 65 2d 68 61 73  |pod-template-has|
              00000060  68 22 3a 7b 7d 7d 2c 22  66 3a 6f 77 6e 65 72 52  |h":{}},"f:ownerR|
              00000070  65 66 65 72 65 6e 63 65  73 22 3a 7b 22 2e 22 3a  |eferences":{".":|
              00000080  7b 7d 2c 22 6b 3a 7b 5c  22 75 69 64 5c 22 3a 5c  |{},"k:{\"uid\":\|
              00000090  22 37 63 37 66 36 35 62  63 2d 62 38 34 63 2d 34  |"7c7f65bc-b84c-4|
              000000a0  34 34 37 2d 39 63 35 64  2d 66 32 64 34 66 34 36  |447-9c5d-f2d4f46|
              000000b0  36 66 64 63 33 5c 22 7d  22 3a 7b 7d 7d 7d 2c 22  |6fdc3\"}":{}}},"|
              000000c0  66 3a 73 70 65 63 22 3a  7b 22 66 3a 63 6f 6e 74  |f:spec":{"f:cont|
              000000d0  61 69 6e 65 72 73 22 3a  7b 22 6b 3a 7b 5c 22 6e  |ainers":{"k:{\"n|
              000000e0  61 6d 65 5c 22 3a 5c 22  68 74 74 70 64 5c 22 7d  |ame\":\"httpd\"}|
              000000f0  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |":{".":{},"f:ima|
              00000100  67 65 22 3a 7b 7d 2c 22  66 3a 69 6d 61 67 65 50  |ge":{},"f:imageP|
              00000110  75 6c 6c 50 6f 6c 69 63  79 22 3a 7b 7d 2c 22 66  |ullPolicy":{},"f|
              00000120  3a 6e 61 6d 65 22 3a 7b  7d 2c 22 66 3a 72 65 73  |:name":{},"f:res|
              00000130  6f 75 72 63 65 73 22 3a  7b 7d 2c 22 66 3a 73 65  |ources":{},"f:se|
              00000140  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000150  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000160  4d 65 73 73 61 67 65 50  61 74 68 22 3a 7b 7d 2c  |MessagePath":{},|
              00000170  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000180  73 73 61 67 65 50 6f 6c  69 63 79 22 3a 7b 7d 7d  |ssagePolicy":{}}|
              00000190  7d 2c 22 66 3a 64 6e 73  50 6f 6c 69 63 79 22 3a  |},"f:dnsPolicy":|
              000001a0  7b 7d 2c 22 66 3a 65 6e  61 62 6c 65 53 65 72 76  |{},"f:enableServ|
              000001b0  69 63 65 4c 69 6e 6b 73  22 3a 7b 7d 2c 22 66 3a  |iceLinks":{},"f:|
              000001c0  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000001d0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000001e0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000001f0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              00000200  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              00000210  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              00000220  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845448996,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845448996,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=659) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 35 31 2e 38 32  5c 22 7d 22 3a 7b 22 2e  |.1.51.82\"}":{".|
              00000270  22 3a 7b 7d 2c 22 66 3a  69 70 22 3a 7b 7d 7d 7d  |":{},"f:ip":{}}}|
              00000280  2c 22 66 3a 73 74 61 72  74 54 69 6d 65 22 3a 7b  |,"f:startTime":{|
              00000290  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-6jxvr",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-6jxvr",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845448996,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845448995,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845448996,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845448996,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845448995,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) (len=10) "10.1.51.82",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=10) "10.1.51.82"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845448995,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845448996,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://02c8a9902a14e389a590e457e8957fcc49075f7c7853b20927e7cdbb515c6346",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 22:56:37.788: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-5288" for this suite. @ 03/07/24 22:56:37.792
• [2.130 seconds]
------------------------------
SSSSSS
------------------------------
[sig-instrumentation] Events API should delete a collection of events [Conformance] [sig-instrumentation, Conformance]
test/e2e/instrumentation/events.go:207
  STEP: Creating a kubernetes client @ 03/07/24 22:56:37.8
  Mar  7 22:56:37.800: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename events @ 03/07/24 22:56:37.8
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:56:37.816
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:56:37.819
  STEP: Create set of events @ 03/07/24 22:56:37.821
  STEP: get a list of Events with a label in the current namespace @ 03/07/24 22:56:37.838
  STEP: delete a list of events @ 03/07/24 22:56:37.841
  Mar  7 22:56:37.841: INFO: requesting DeleteCollection of events
  STEP: check that the list of events matches the requested quantity @ 03/07/24 22:56:37.86
  Mar  7 22:56:37.863: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-9051" for this suite. @ 03/07/24 22:56:37.866
• [0.072 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/custom_resource_definition.go:86
  STEP: Creating a kubernetes client @ 03/07/24 22:56:37.872
  Mar  7 22:56:37.872: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename custom-resource-definition @ 03/07/24 22:56:37.872
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:56:37.891
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:56:37.893
  Mar  7 22:56:37.895: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:56:44.402: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-562" for this suite. @ 03/07/24 22:56:44.413
• [6.569 seconds]
------------------------------
SSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance] [sig-network, NodeConformance, Conformance]
test/e2e/common/network/networking.go:85
  STEP: Creating a kubernetes client @ 03/07/24 22:56:44.443
  Mar  7 22:56:44.443: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pod-network-test @ 03/07/24 22:56:44.445
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:56:44.496
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:56:44.509
  STEP: Performing setup for networking test in namespace pod-network-test-1382 @ 03/07/24 22:56:44.513
  STEP: creating a selector @ 03/07/24 22:56:44.513
  STEP: Creating the service pods in kubernetes @ 03/07/24 22:56:44.513
  Mar  7 22:56:44.513: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 03/07/24 22:57:06.683
  Mar  7 22:57:08.717: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Mar  7 22:57:08.717: INFO: Breadth first check of 10.1.51.79 on host 10.100.138.205...
  Mar  7 22:57:08.719: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.1.51.75:9080/dial?request=hostname&protocol=http&host=10.1.51.79&port=8083&tries=1'] Namespace:pod-network-test-1382 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:57:08.719: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:57:08.720: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:57:08.720: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-1382/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.1.51.75%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D10.1.51.79%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Mar  7 22:57:08.759: INFO: Waiting for responses: map[]
  Mar  7 22:57:08.759: INFO: reached 10.1.51.79 after 0/1 tries
  Mar  7 22:57:08.759: INFO: Breadth first check of 10.1.60.196 on host 10.100.138.2...
  Mar  7 22:57:08.765: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.1.51.75:9080/dial?request=hostname&protocol=http&host=10.1.60.196&port=8083&tries=1'] Namespace:pod-network-test-1382 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 22:57:08.765: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 22:57:08.765: INFO: ExecWithOptions: Clientset creation
  Mar  7 22:57:08.765: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-1382/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.1.51.75%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D10.1.60.196%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Mar  7 22:57:08.796: INFO: Waiting for responses: map[]
  Mar  7 22:57:08.796: INFO: reached 10.1.60.196 after 0/1 tries
  Mar  7 22:57:08.796: INFO: Going to retry 0 out of 2 pods....
  Mar  7 22:57:08.796: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-1382" for this suite. @ 03/07/24 22:57:08.799
• [24.363 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should serve a basic image on each replica with a public image [Conformance] [sig-apps, Conformance]
test/e2e/apps/replica_set.go:112
  STEP: Creating a kubernetes client @ 03/07/24 22:57:08.806
  Mar  7 22:57:08.806: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename replicaset @ 03/07/24 22:57:08.806
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:57:08.825
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:57:08.828
  Mar  7 22:57:08.830: INFO: Creating ReplicaSet my-hostname-basic-c985752d-9217-4269-a52b-b36464f2e86c
  Mar  7 22:57:08.840: INFO: Pod name my-hostname-basic-c985752d-9217-4269-a52b-b36464f2e86c: Found 0 pods out of 1
  Mar  7 22:57:13.843: INFO: Pod name my-hostname-basic-c985752d-9217-4269-a52b-b36464f2e86c: Found 1 pods out of 1
  Mar  7 22:57:13.843: INFO: Ensuring a pod for ReplicaSet "my-hostname-basic-c985752d-9217-4269-a52b-b36464f2e86c" is running
  Mar  7 22:57:13.845: INFO: Pod "my-hostname-basic-c985752d-9217-4269-a52b-b36464f2e86c-2x9lr" is running (conditions: [{Type:PodReadyToStartContainers Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-03-07 22:57:09 +0000 UTC Reason: Message:} {Type:Initialized Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-03-07 22:57:08 +0000 UTC Reason: Message:} {Type:Ready Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-03-07 22:57:09 +0000 UTC Reason: Message:} {Type:ContainersReady Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-03-07 22:57:09 +0000 UTC Reason: Message:} {Type:PodScheduled Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-03-07 22:57:08 +0000 UTC Reason: Message:}])
  Mar  7 22:57:13.846: INFO: Trying to dial the pod
  STEP: trying to dial each unique pod @ 03/07/24 22:57:13.846
  Mar  7 22:57:13.852: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-3503" for this suite. @ 03/07/24 22:57:13.854
• [5.064 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance] [sig-network, Conformance]
test/e2e/network/proxy.go:101
  STEP: Creating a kubernetes client @ 03/07/24 22:57:13.87
  Mar  7 22:57:13.870: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename proxy @ 03/07/24 22:57:13.871
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:57:13.923
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:57:13.925
  STEP: starting an echo server on multiple ports @ 03/07/24 22:57:13.949
  STEP: creating replication controller proxy-service-8f2vr in namespace proxy-901 @ 03/07/24 22:57:13.949
  I0307 22:57:13.968102      20 runners.go:197] Created replication controller with name: proxy-service-8f2vr, namespace: proxy-901, replica count: 1
  I0307 22:57:15.020438      20 runners.go:197] proxy-service-8f2vr Pods: 1 out of 1 created, 0 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 1 runningButNotReady 
  I0307 22:57:16.021424      20 runners.go:197] proxy-service-8f2vr Pods: 1 out of 1 created, 1 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Mar  7 22:57:16.029: INFO: setup took 2.100449132s, starting test cases
  STEP: running 16 cases, 20 attempts per case, 320 total attempts @ 03/07/24 22:57:16.029
  Mar  7 22:57:16.042: INFO: (0) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 12.662866ms)
  Mar  7 22:57:16.042: INFO: (0) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 12.780188ms)
  Mar  7 22:57:16.047: INFO: (0) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 17.849421ms)
  Mar  7 22:57:16.048: INFO: (0) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 18.521271ms)
  Mar  7 22:57:16.053: INFO: (0) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 22.889307ms)
  Mar  7 22:57:16.053: INFO: (0) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 23.353684ms)
  Mar  7 22:57:16.053: INFO: (0) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 23.730164ms)
  Mar  7 22:57:16.053: INFO: (0) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 23.842426ms)
  Mar  7 22:57:16.053: INFO: (0) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 23.747511ms)
  Mar  7 22:57:16.053: INFO: (0) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 23.971986ms)
  Mar  7 22:57:16.053: INFO: (0) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 23.832468ms)
  Mar  7 22:57:16.053: INFO: (0) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 23.670228ms)
  Mar  7 22:57:16.054: INFO: (0) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 24.125286ms)
  Mar  7 22:57:16.054: INFO: (0) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 24.246888ms)
  Mar  7 22:57:16.054: INFO: (0) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 24.413952ms)
  Mar  7 22:57:16.057: INFO: (0) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 27.290969ms)
  Mar  7 22:57:16.067: INFO: (1) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 10.195904ms)
  Mar  7 22:57:16.067: INFO: (1) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 10.105743ms)
  Mar  7 22:57:16.067: INFO: (1) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 10.204276ms)
  Mar  7 22:57:16.067: INFO: (1) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 10.171651ms)
  Mar  7 22:57:16.067: INFO: (1) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 10.09679ms)
  Mar  7 22:57:16.067: INFO: (1) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 10.082923ms)
  Mar  7 22:57:16.067: INFO: (1) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 10.223823ms)
  Mar  7 22:57:16.067: INFO: (1) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 10.074067ms)
  Mar  7 22:57:16.067: INFO: (1) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 10.200396ms)
  Mar  7 22:57:16.067: INFO: (1) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 10.160859ms)
  Mar  7 22:57:16.070: INFO: (1) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 12.774236ms)
  Mar  7 22:57:16.070: INFO: (1) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 12.644906ms)
  Mar  7 22:57:16.070: INFO: (1) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 12.690095ms)
  Mar  7 22:57:16.070: INFO: (1) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 12.819322ms)
  Mar  7 22:57:16.070: INFO: (1) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 12.863369ms)
  Mar  7 22:57:16.070: INFO: (1) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 12.723056ms)
  Mar  7 22:57:16.073: INFO: (2) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 3.094711ms)
  Mar  7 22:57:16.075: INFO: (2) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 4.876786ms)
  Mar  7 22:57:16.078: INFO: (2) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 8.072406ms)
  Mar  7 22:57:16.078: INFO: (2) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 8.084234ms)
  Mar  7 22:57:16.078: INFO: (2) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 8.128006ms)
  Mar  7 22:57:16.078: INFO: (2) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 8.16942ms)
  Mar  7 22:57:16.078: INFO: (2) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 8.150217ms)
  Mar  7 22:57:16.078: INFO: (2) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 8.156757ms)
  Mar  7 22:57:16.078: INFO: (2) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 8.21336ms)
  Mar  7 22:57:16.078: INFO: (2) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 8.206143ms)
  Mar  7 22:57:16.078: INFO: (2) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 8.200814ms)
  Mar  7 22:57:16.079: INFO: (2) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 8.734749ms)
  Mar  7 22:57:16.079: INFO: (2) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 8.783031ms)
  Mar  7 22:57:16.079: INFO: (2) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 8.797794ms)
  Mar  7 22:57:16.079: INFO: (2) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 8.847836ms)
  Mar  7 22:57:16.079: INFO: (2) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 9.269139ms)
  Mar  7 22:57:16.082: INFO: (3) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 2.786784ms)
  Mar  7 22:57:16.085: INFO: (3) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 5.293426ms)
  Mar  7 22:57:16.085: INFO: (3) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 5.385687ms)
  Mar  7 22:57:16.085: INFO: (3) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 5.441334ms)
  Mar  7 22:57:16.086: INFO: (3) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 6.626388ms)
  Mar  7 22:57:16.086: INFO: (3) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 6.661539ms)
  Mar  7 22:57:16.086: INFO: (3) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 6.53822ms)
  Mar  7 22:57:16.087: INFO: (3) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 7.482527ms)
  Mar  7 22:57:16.087: INFO: (3) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 7.355689ms)
  Mar  7 22:57:16.087: INFO: (3) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 7.464222ms)
  Mar  7 22:57:16.087: INFO: (3) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 7.346535ms)
  Mar  7 22:57:16.087: INFO: (3) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 7.971448ms)
  Mar  7 22:57:16.087: INFO: (3) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 7.989091ms)
  Mar  7 22:57:16.088: INFO: (3) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 8.407004ms)
  Mar  7 22:57:16.088: INFO: (3) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 8.393835ms)
  Mar  7 22:57:16.088: INFO: (3) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 8.388827ms)
  Mar  7 22:57:16.093: INFO: (4) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 4.543737ms)
  Mar  7 22:57:16.093: INFO: (4) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 4.886781ms)
  Mar  7 22:57:16.093: INFO: (4) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 4.519783ms)
  Mar  7 22:57:16.093: INFO: (4) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 4.167628ms)
  Mar  7 22:57:16.093: INFO: (4) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 4.985346ms)
  Mar  7 22:57:16.094: INFO: (4) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 5.726518ms)
  Mar  7 22:57:16.094: INFO: (4) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 5.540271ms)
  Mar  7 22:57:16.095: INFO: (4) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 6.634113ms)
  Mar  7 22:57:16.095: INFO: (4) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 5.739195ms)
  Mar  7 22:57:16.095: INFO: (4) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 6.583605ms)
  Mar  7 22:57:16.096: INFO: (4) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 8.179945ms)
  Mar  7 22:57:16.097: INFO: (4) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 8.4769ms)
  Mar  7 22:57:16.097: INFO: (4) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 9.280017ms)
  Mar  7 22:57:16.097: INFO: (4) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 8.498288ms)
  Mar  7 22:57:16.098: INFO: (4) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 10.168648ms)
  Mar  7 22:57:16.098: INFO: (4) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 9.839118ms)
  Mar  7 22:57:16.103: INFO: (5) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 4.755478ms)
  Mar  7 22:57:16.105: INFO: (5) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 5.886842ms)
  Mar  7 22:57:16.105: INFO: (5) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 6.140372ms)
  Mar  7 22:57:16.105: INFO: (5) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 5.990791ms)
  Mar  7 22:57:16.105: INFO: (5) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 6.595743ms)
  Mar  7 22:57:16.105: INFO: (5) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 6.557859ms)
  Mar  7 22:57:16.105: INFO: (5) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 6.419934ms)
  Mar  7 22:57:16.106: INFO: (5) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 7.505645ms)
  Mar  7 22:57:16.107: INFO: (5) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 8.440491ms)
  Mar  7 22:57:16.108: INFO: (5) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 8.830982ms)
  Mar  7 22:57:16.108: INFO: (5) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 9.054634ms)
  Mar  7 22:57:16.108: INFO: (5) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 8.972059ms)
  Mar  7 22:57:16.108: INFO: (5) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 8.882035ms)
  Mar  7 22:57:16.108: INFO: (5) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 9.35145ms)
  Mar  7 22:57:16.108: INFO: (5) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 9.79146ms)
  Mar  7 22:57:16.108: INFO: (5) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 9.768963ms)
  Mar  7 22:57:16.115: INFO: (6) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 6.808391ms)
  Mar  7 22:57:16.118: INFO: (6) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 9.613889ms)
  Mar  7 22:57:16.118: INFO: (6) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 9.635803ms)
  Mar  7 22:57:16.118: INFO: (6) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 9.616887ms)
  Mar  7 22:57:16.118: INFO: (6) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 9.644582ms)
  Mar  7 22:57:16.118: INFO: (6) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 9.861326ms)
  Mar  7 22:57:16.118: INFO: (6) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 10.005696ms)
  Mar  7 22:57:16.118: INFO: (6) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 9.987708ms)
  Mar  7 22:57:16.118: INFO: (6) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 9.994754ms)
  Mar  7 22:57:16.118: INFO: (6) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 9.973678ms)
  Mar  7 22:57:16.119: INFO: (6) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 10.142436ms)
  Mar  7 22:57:16.119: INFO: (6) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 10.127352ms)
  Mar  7 22:57:16.119: INFO: (6) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 10.169145ms)
  Mar  7 22:57:16.120: INFO: (6) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 11.73492ms)
  Mar  7 22:57:16.120: INFO: (6) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 11.837849ms)
  Mar  7 22:57:16.120: INFO: (6) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 11.754051ms)
  Mar  7 22:57:16.129: INFO: (7) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 8.197607ms)
  Mar  7 22:57:16.129: INFO: (7) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 8.238382ms)
  Mar  7 22:57:16.129: INFO: (7) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 8.270716ms)
  Mar  7 22:57:16.129: INFO: (7) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 8.227295ms)
  Mar  7 22:57:16.129: INFO: (7) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 8.294417ms)
  Mar  7 22:57:16.129: INFO: (7) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 8.372798ms)
  Mar  7 22:57:16.129: INFO: (7) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 8.373836ms)
  Mar  7 22:57:16.129: INFO: (7) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 8.39516ms)
  Mar  7 22:57:16.129: INFO: (7) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 8.257513ms)
  Mar  7 22:57:16.129: INFO: (7) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 8.372297ms)
  Mar  7 22:57:16.131: INFO: (7) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 10.494651ms)
  Mar  7 22:57:16.131: INFO: (7) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 10.556348ms)
  Mar  7 22:57:16.131: INFO: (7) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 10.531028ms)
  Mar  7 22:57:16.131: INFO: (7) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 10.513141ms)
  Mar  7 22:57:16.132: INFO: (7) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 11.182995ms)
  Mar  7 22:57:16.132: INFO: (7) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 11.556764ms)
  Mar  7 22:57:16.137: INFO: (8) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 4.43149ms)
  Mar  7 22:57:16.138: INFO: (8) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 6.316262ms)
  Mar  7 22:57:16.139: INFO: (8) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 6.730863ms)
  Mar  7 22:57:16.140: INFO: (8) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 7.585005ms)
  Mar  7 22:57:16.141: INFO: (8) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 8.455308ms)
  Mar  7 22:57:16.141: INFO: (8) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 8.646922ms)
  Mar  7 22:57:16.141: INFO: (8) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 9.221289ms)
  Mar  7 22:57:16.141: INFO: (8) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 9.254922ms)
  Mar  7 22:57:16.141: INFO: (8) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 9.313868ms)
  Mar  7 22:57:16.142: INFO: (8) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 9.83339ms)
  Mar  7 22:57:16.143: INFO: (8) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 11.183656ms)
  Mar  7 22:57:16.143: INFO: (8) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 11.344585ms)
  Mar  7 22:57:16.143: INFO: (8) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 11.340661ms)
  Mar  7 22:57:16.143: INFO: (8) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 11.294446ms)
  Mar  7 22:57:16.143: INFO: (8) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 11.2755ms)
  Mar  7 22:57:16.143: INFO: (8) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 11.321224ms)
  Mar  7 22:57:16.148: INFO: (9) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 4.602784ms)
  Mar  7 22:57:16.148: INFO: (9) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 4.39307ms)
  Mar  7 22:57:16.148: INFO: (9) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 4.325601ms)
  Mar  7 22:57:16.150: INFO: (9) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 6.037706ms)
  Mar  7 22:57:16.150: INFO: (9) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 6.220158ms)
  Mar  7 22:57:16.150: INFO: (9) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 6.543464ms)
  Mar  7 22:57:16.150: INFO: (9) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 6.793465ms)
  Mar  7 22:57:16.151: INFO: (9) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 6.724759ms)
  Mar  7 22:57:16.151: INFO: (9) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 7.366985ms)
  Mar  7 22:57:16.151: INFO: (9) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 7.224117ms)
  Mar  7 22:57:16.152: INFO: (9) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 7.7259ms)
  Mar  7 22:57:16.152: INFO: (9) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 7.906322ms)
  Mar  7 22:57:16.152: INFO: (9) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 7.929753ms)
  Mar  7 22:57:16.152: INFO: (9) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 8.416904ms)
  Mar  7 22:57:16.153: INFO: (9) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 9.480267ms)
  Mar  7 22:57:16.153: INFO: (9) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 9.506019ms)
  Mar  7 22:57:16.158: INFO: (10) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 4.327146ms)
  Mar  7 22:57:16.160: INFO: (10) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 6.179496ms)
  Mar  7 22:57:16.160: INFO: (10) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 6.193487ms)
  Mar  7 22:57:16.160: INFO: (10) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 6.692992ms)
  Mar  7 22:57:16.161: INFO: (10) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 7.090397ms)
  Mar  7 22:57:16.161: INFO: (10) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 7.755993ms)
  Mar  7 22:57:16.161: INFO: (10) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 7.779968ms)
  Mar  7 22:57:16.161: INFO: (10) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 7.929849ms)
  Mar  7 22:57:16.162: INFO: (10) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 7.965448ms)
  Mar  7 22:57:16.163: INFO: (10) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 9.633327ms)
  Mar  7 22:57:16.164: INFO: (10) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 10.911587ms)
  Mar  7 22:57:16.165: INFO: (10) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 11.109052ms)
  Mar  7 22:57:16.165: INFO: (10) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 11.021262ms)
  Mar  7 22:57:16.166: INFO: (10) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 12.320611ms)
  Mar  7 22:57:16.166: INFO: (10) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 12.470264ms)
  Mar  7 22:57:16.166: INFO: (10) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 12.436387ms)
  Mar  7 22:57:16.170: INFO: (11) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 3.736828ms)
  Mar  7 22:57:16.171: INFO: (11) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 4.493299ms)
  Mar  7 22:57:16.173: INFO: (11) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 6.77578ms)
  Mar  7 22:57:16.173: INFO: (11) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 7.044561ms)
  Mar  7 22:57:16.175: INFO: (11) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 8.724181ms)
  Mar  7 22:57:16.176: INFO: (11) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 9.751349ms)
  Mar  7 22:57:16.176: INFO: (11) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 9.651998ms)
  Mar  7 22:57:16.176: INFO: (11) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 10.387998ms)
  Mar  7 22:57:16.177: INFO: (11) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 10.540748ms)
  Mar  7 22:57:16.177: INFO: (11) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 10.930028ms)
  Mar  7 22:57:16.178: INFO: (11) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 11.699136ms)
  Mar  7 22:57:16.179: INFO: (11) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 12.937098ms)
  Mar  7 22:57:16.179: INFO: (11) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 12.940363ms)
  Mar  7 22:57:16.179: INFO: (11) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 13.070366ms)
  Mar  7 22:57:16.179: INFO: (11) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 13.193262ms)
  Mar  7 22:57:16.179: INFO: (11) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 13.337441ms)
  Mar  7 22:57:16.184: INFO: (12) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 4.164602ms)
  Mar  7 22:57:16.184: INFO: (12) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 4.73789ms)
  Mar  7 22:57:16.185: INFO: (12) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 5.499432ms)
  Mar  7 22:57:16.185: INFO: (12) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 5.963582ms)
  Mar  7 22:57:16.186: INFO: (12) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 5.910414ms)
  Mar  7 22:57:16.187: INFO: (12) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 7.832415ms)
  Mar  7 22:57:16.188: INFO: (12) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 7.905809ms)
  Mar  7 22:57:16.188: INFO: (12) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 7.830599ms)
  Mar  7 22:57:16.188: INFO: (12) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 7.919971ms)
  Mar  7 22:57:16.188: INFO: (12) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 8.519808ms)
  Mar  7 22:57:16.188: INFO: (12) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 8.565307ms)
  Mar  7 22:57:16.188: INFO: (12) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 8.573976ms)
  Mar  7 22:57:16.188: INFO: (12) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 8.864938ms)
  Mar  7 22:57:16.188: INFO: (12) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 8.81898ms)
  Mar  7 22:57:16.190: INFO: (12) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 9.863028ms)
  Mar  7 22:57:16.190: INFO: (12) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 9.974365ms)
  Mar  7 22:57:16.193: INFO: (13) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 3.330429ms)
  Mar  7 22:57:16.194: INFO: (13) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 4.050327ms)
  Mar  7 22:57:16.194: INFO: (13) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 3.871092ms)
  Mar  7 22:57:16.194: INFO: (13) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 4.43498ms)
  Mar  7 22:57:16.195: INFO: (13) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 5.029402ms)
  Mar  7 22:57:16.197: INFO: (13) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 6.593221ms)
  Mar  7 22:57:16.197: INFO: (13) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 6.623266ms)
  Mar  7 22:57:16.197: INFO: (13) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 7.165967ms)
  Mar  7 22:57:16.197: INFO: (13) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 7.483317ms)
  Mar  7 22:57:16.198: INFO: (13) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 7.90675ms)
  Mar  7 22:57:16.198: INFO: (13) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 8.522941ms)
  Mar  7 22:57:16.199: INFO: (13) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 8.967057ms)
  Mar  7 22:57:16.200: INFO: (13) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 9.497542ms)
  Mar  7 22:57:16.200: INFO: (13) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 9.597738ms)
  Mar  7 22:57:16.201: INFO: (13) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 10.674146ms)
  Mar  7 22:57:16.201: INFO: (13) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 10.783311ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 11.65431ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 11.785554ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 11.876117ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 11.659035ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 11.779866ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 11.6715ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 11.746127ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 11.762748ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 11.70059ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 11.988295ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 11.720818ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 11.790262ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 11.685463ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 11.625466ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 11.913816ms)
  Mar  7 22:57:16.213: INFO: (14) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 11.650009ms)
  Mar  7 22:57:16.218: INFO: (15) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 4.979364ms)
  Mar  7 22:57:16.218: INFO: (15) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 5.023134ms)
  Mar  7 22:57:16.225: INFO: (15) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 11.407987ms)
  Mar  7 22:57:16.225: INFO: (15) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 11.403181ms)
  Mar  7 22:57:16.226: INFO: (15) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 12.767207ms)
  Mar  7 22:57:16.226: INFO: (15) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 13.075129ms)
  Mar  7 22:57:16.226: INFO: (15) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 13.056072ms)
  Mar  7 22:57:16.226: INFO: (15) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 13.160123ms)
  Mar  7 22:57:16.227: INFO: (15) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 13.571727ms)
  Mar  7 22:57:16.227: INFO: (15) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 14.21755ms)
  Mar  7 22:57:16.227: INFO: (15) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 14.156299ms)
  Mar  7 22:57:16.228: INFO: (15) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 14.413385ms)
  Mar  7 22:57:16.228: INFO: (15) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 14.389018ms)
  Mar  7 22:57:16.228: INFO: (15) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 14.484029ms)
  Mar  7 22:57:16.229: INFO: (15) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 15.769421ms)
  Mar  7 22:57:16.229: INFO: (15) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 15.799815ms)
  Mar  7 22:57:16.234: INFO: (16) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 4.884268ms)
  Mar  7 22:57:16.234: INFO: (16) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 5.380069ms)
  Mar  7 22:57:16.234: INFO: (16) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 5.565573ms)
  Mar  7 22:57:16.234: INFO: (16) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 5.454316ms)
  Mar  7 22:57:16.235: INFO: (16) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 6.518636ms)
  Mar  7 22:57:16.236: INFO: (16) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 7.356602ms)
  Mar  7 22:57:16.238: INFO: (16) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 9.145537ms)
  Mar  7 22:57:16.238: INFO: (16) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 9.127504ms)
  Mar  7 22:57:16.239: INFO: (16) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 9.679192ms)
  Mar  7 22:57:16.239: INFO: (16) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 10.448372ms)
  Mar  7 22:57:16.240: INFO: (16) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 10.75546ms)
  Mar  7 22:57:16.240: INFO: (16) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 10.851051ms)
  Mar  7 22:57:16.240: INFO: (16) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 10.924105ms)
  Mar  7 22:57:16.240: INFO: (16) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 10.798748ms)
  Mar  7 22:57:16.240: INFO: (16) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 10.873891ms)
  Mar  7 22:57:16.240: INFO: (16) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 11.033404ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 9.187162ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 9.563032ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 9.722996ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 9.146659ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 9.781269ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 9.849055ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 9.633365ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 9.302842ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 9.565043ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 9.389362ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 9.477076ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 9.717308ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 9.095078ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 9.692167ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 9.554222ms)
  Mar  7 22:57:16.250: INFO: (17) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 9.983138ms)
  Mar  7 22:57:16.254: INFO: (18) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 3.674829ms)
  Mar  7 22:57:16.256: INFO: (18) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 5.692251ms)
  Mar  7 22:57:16.261: INFO: (18) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 11.101631ms)
  Mar  7 22:57:16.261: INFO: (18) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 10.96949ms)
  Mar  7 22:57:16.261: INFO: (18) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 11.021331ms)
  Mar  7 22:57:16.261: INFO: (18) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 11.058317ms)
  Mar  7 22:57:16.261: INFO: (18) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 11.163698ms)
  Mar  7 22:57:16.261: INFO: (18) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 11.081613ms)
  Mar  7 22:57:16.261: INFO: (18) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 11.045865ms)
  Mar  7 22:57:16.261: INFO: (18) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 10.98434ms)
  Mar  7 22:57:16.261: INFO: (18) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 11.125444ms)
  Mar  7 22:57:16.261: INFO: (18) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 11.106316ms)
  Mar  7 22:57:16.261: INFO: (18) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 11.170817ms)
  Mar  7 22:57:16.261: INFO: (18) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 11.043039ms)
  Mar  7 22:57:16.261: INFO: (18) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 11.015117ms)
  Mar  7 22:57:16.261: INFO: (18) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 11.005115ms)
  Mar  7 22:57:16.265: INFO: (19) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 3.58104ms)
  Mar  7 22:57:16.265: INFO: (19) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">t... (200; 3.641089ms)
  Mar  7 22:57:16.268: INFO: (19) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:443/proxy/tlsrewriteme... (200; 6.94206ms)
  Mar  7 22:57:16.268: INFO: (19) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:162/proxy/: bar (200; 6.883558ms)
  Mar  7 22:57:16.268: INFO: (19) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:462/proxy/: tls qux (200; 6.864469ms)
  Mar  7 22:57:16.268: INFO: (19) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:1080/proxy/rewriteme">test</... (200; 6.847218ms)
  Mar  7 22:57:16.268: INFO: (19) /api/v1/namespaces/proxy-901/pods/https:proxy-service-8f2vr-slc6q:460/proxy/: tls baz (200; 6.833365ms)
  Mar  7 22:57:16.268: INFO: (19) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/: <a href="/api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q/proxy/rewriteme">test</a> (200; 6.814284ms)
  Mar  7 22:57:16.268: INFO: (19) /api/v1/namespaces/proxy-901/pods/proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 6.931276ms)
  Mar  7 22:57:16.269: INFO: (19) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname1/proxy/: foo (200; 7.742119ms)
  Mar  7 22:57:16.269: INFO: (19) /api/v1/namespaces/proxy-901/pods/http:proxy-service-8f2vr-slc6q:160/proxy/: foo (200; 7.808507ms)
  Mar  7 22:57:16.270: INFO: (19) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname1/proxy/: tls baz (200; 8.3563ms)
  Mar  7 22:57:16.270: INFO: (19) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname1/proxy/: foo (200; 8.434702ms)
  Mar  7 22:57:16.270: INFO: (19) /api/v1/namespaces/proxy-901/services/https:proxy-service-8f2vr:tlsportname2/proxy/: tls qux (200; 9.135776ms)
  Mar  7 22:57:16.271: INFO: (19) /api/v1/namespaces/proxy-901/services/http:proxy-service-8f2vr:portname2/proxy/: bar (200; 9.156063ms)
  Mar  7 22:57:16.271: INFO: (19) /api/v1/namespaces/proxy-901/services/proxy-service-8f2vr:portname2/proxy/: bar (200; 9.304585ms)
  STEP: deleting ReplicationController proxy-service-8f2vr in namespace proxy-901, will wait for the garbage collector to delete the pods @ 03/07/24 22:57:16.271
  Mar  7 22:57:16.349: INFO: Deleting ReplicationController proxy-service-8f2vr took: 26.177149ms
  Mar  7 22:57:16.450: INFO: Terminating ReplicationController proxy-service-8f2vr pods took: 100.749105ms
  Mar  7 22:57:18.851: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-901" for this suite. @ 03/07/24 22:57:18.864
• [5.022 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/garbage_collector.go:539
  STEP: Creating a kubernetes client @ 03/07/24 22:57:18.893
  Mar  7 22:57:18.893: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename gc @ 03/07/24 22:57:18.894
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:57:18.917
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:57:18.919
  STEP: create the deployment @ 03/07/24 22:57:18.921
  W0307 22:57:18.928659      20 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: Wait for the Deployment to create new ReplicaSet @ 03/07/24 22:57:18.928
  STEP: delete the deployment @ 03/07/24 22:57:19.45
  STEP: wait for deployment deletion to see if the garbage collector mistakenly deletes the rs @ 03/07/24 22:57:19.471
  STEP: Gathering metrics @ 03/07/24 22:57:20.018
  W0307 22:57:20.033131      20 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Mar  7 22:57:20.033: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Mar  7 22:57:20.033: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-9806" for this suite. @ 03/07/24 22:57:20.043
• [1.180 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:315
  STEP: Creating a kubernetes client @ 03/07/24 22:57:20.073
  Mar  7 22:57:20.073: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 22:57:20.075
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:57:20.124
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:57:20.132
  STEP: Setting up server cert @ 03/07/24 22:57:20.21
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 22:57:20.458
  STEP: Deploying the webhook pod @ 03/07/24 22:57:20.465
  STEP: Wait for the deployment to be ready @ 03/07/24 22:57:20.483
  Mar  7 22:57:20.505: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 03/07/24 22:57:22.532
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 22:57:22.574
  Mar  7 22:57:23.574: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Mar  7 22:57:23.591: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-5696-crds.webhook.example.com via the AdmissionRegistration API @ 03/07/24 22:57:24.119
  STEP: Creating a custom resource while v1 is storage version @ 03/07/24 22:57:24.129
  STEP: Patching Custom Resource Definition to set v2 as storage @ 03/07/24 22:57:26.168
  STEP: Patching the custom resource while v2 is storage version @ 03/07/24 22:57:26.188
  Mar  7 22:57:26.823: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-3858" for this suite. @ 03/07/24 22:57:26.833
  STEP: Destroying namespace "webhook-markers-1772" for this suite. @ 03/07/24 22:57:26.858
• [6.805 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:1455
  STEP: Creating a kubernetes client @ 03/07/24 22:57:26.882
  Mar  7 22:57:26.882: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 22:57:26.884
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:57:26.93
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:57:26.937
  STEP: creating a service externalname-service with the type=ExternalName in namespace services-7886 @ 03/07/24 22:57:26.941
  STEP: changing the ExternalName service to type=NodePort @ 03/07/24 22:57:26.951
  STEP: creating replication controller externalname-service in namespace services-7886 @ 03/07/24 22:57:26.979
  I0307 22:57:26.989934      20 runners.go:197] Created replication controller with name: externalname-service, namespace: services-7886, replica count: 2
  I0307 22:57:30.040715      20 runners.go:197] externalname-service Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Mar  7 22:57:30.040: INFO: Creating new exec pod
  Mar  7 22:57:33.097: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-7886 exec execpod49zqb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Mar  7 22:57:33.172: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Mar  7 22:57:33.172: INFO: stdout: ""
  Mar  7 22:57:34.098: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-7886 exec execpod49zqb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Mar  7 22:57:34.177: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Mar  7 22:57:34.177: INFO: stdout: ""
  Mar  7 22:57:35.098: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-7886 exec execpod49zqb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Mar  7 22:57:35.221: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Mar  7 22:57:35.221: INFO: stdout: "externalname-service-lzfwv"
  Mar  7 22:57:35.221: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-7886 exec execpod49zqb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.98 80'
  Mar  7 22:57:35.291: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.98 80\nConnection to 10.152.183.98 80 port [tcp/http] succeeded!\n"
  Mar  7 22:57:35.291: INFO: stdout: ""
  Mar  7 22:57:36.222: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-7886 exec execpod49zqb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.98 80'
  Mar  7 22:57:36.343: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.98 80\nConnection to 10.152.183.98 80 port [tcp/http] succeeded!\n"
  Mar  7 22:57:36.343: INFO: stdout: ""
  Mar  7 22:57:37.222: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-7886 exec execpod49zqb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.98 80'
  Mar  7 22:57:37.354: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.98 80\nConnection to 10.152.183.98 80 port [tcp/http] succeeded!\n"
  Mar  7 22:57:37.354: INFO: stdout: ""
  Mar  7 22:57:38.222: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-7886 exec execpod49zqb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.98 80'
  Mar  7 22:57:38.325: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.98 80\nConnection to 10.152.183.98 80 port [tcp/http] succeeded!\n"
  Mar  7 22:57:38.325: INFO: stdout: "externalname-service-lzfwv"
  Mar  7 22:57:38.325: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-7886 exec execpod49zqb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.205 32019'
  Mar  7 22:57:38.396: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.205 32019\nConnection to 10.100.138.205 32019 port [tcp/*] succeeded!\n"
  Mar  7 22:57:38.396: INFO: stdout: "externalname-service-bk85j"
  Mar  7 22:57:38.396: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-7886 exec execpod49zqb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.2 32019'
  Mar  7 22:57:38.465: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.2 32019\nConnection to 10.100.138.2 32019 port [tcp/*] succeeded!\n"
  Mar  7 22:57:38.465: INFO: stdout: ""
  Mar  7 22:57:39.397: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-7886 exec execpod49zqb -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.2 32019'
  Mar  7 22:57:39.508: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.2 32019\nConnection to 10.100.138.2 32019 port [tcp/*] succeeded!\n"
  Mar  7 22:57:39.508: INFO: stdout: "externalname-service-lzfwv"
  Mar  7 22:57:39.508: INFO: Cleaning up the ExternalName to NodePort test service
  Mar  7 22:57:39.538: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-7886" for this suite. @ 03/07/24 22:57:39.541
• [12.664 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance] [sig-api-machinery, Serial, Conformance]
test/e2e/apimachinery/namespace.go:274
  STEP: Creating a kubernetes client @ 03/07/24 22:57:39.547
  Mar  7 22:57:39.547: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename namespaces @ 03/07/24 22:57:39.547
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:57:39.563
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:57:39.565
  STEP: creating a Namespace @ 03/07/24 22:57:39.567
  STEP: patching the Namespace @ 03/07/24 22:57:39.582
  STEP: get the Namespace and ensuring it has the label @ 03/07/24 22:57:39.589
  Mar  7 22:57:39.592: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-3964" for this suite. @ 03/07/24 22:57:39.595
  STEP: Destroying namespace "nspatchtest-f0f9ac82-38b2-43c2-a6af-06fe7c9ce044-4097" for this suite. @ 03/07/24 22:57:39.603
• [0.063 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:132
  STEP: Creating a kubernetes client @ 03/07/24 22:57:39.61
  Mar  7 22:57:39.610: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 22:57:39.61
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:57:39.627
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:57:39.629
  STEP: Creating the pod @ 03/07/24 22:57:39.631
  Mar  7 22:57:42.210: INFO: Successfully updated pod "labelsupdate8dca246e-2980-45ef-835b-1a8d80eb4b1c"
  Mar  7 22:57:44.261: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2870" for this suite. @ 03/07/24 22:57:44.273
• [4.678 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/custom_resource_definition.go:199
  STEP: Creating a kubernetes client @ 03/07/24 22:57:44.288
  Mar  7 22:57:44.288: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename custom-resource-definition @ 03/07/24 22:57:44.289
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:57:44.324
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:57:44.331
  STEP: fetching the /apis discovery document @ 03/07/24 22:57:44.337
  STEP: finding the apiextensions.k8s.io API group in the /apis discovery document @ 03/07/24 22:57:44.339
  STEP: finding the apiextensions.k8s.io/v1 API group/version in the /apis discovery document @ 03/07/24 22:57:44.34
  STEP: fetching the /apis/apiextensions.k8s.io discovery document @ 03/07/24 22:57:44.34
  STEP: finding the apiextensions.k8s.io/v1 API group/version in the /apis/apiextensions.k8s.io discovery document @ 03/07/24 22:57:44.342
  STEP: fetching the /apis/apiextensions.k8s.io/v1 discovery document @ 03/07/24 22:57:44.342
  STEP: finding customresourcedefinitions resources in the /apis/apiextensions.k8s.io/v1 discovery document @ 03/07/24 22:57:44.344
  Mar  7 22:57:44.344: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-9300" for this suite. @ 03/07/24 22:57:44.352
• [0.079 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:70
  STEP: Creating a kubernetes client @ 03/07/24 22:57:44.367
  Mar  7 22:57:44.367: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 22:57:44.369
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:57:44.405
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:57:44.408
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 22:57:44.411
  STEP: Saw pod success @ 03/07/24 22:57:48.449
  Mar  7 22:57:48.458: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-7a46ca79-5bbb-498b-a026-85a64761f82b container client-container: <nil>
  STEP: delete the pod @ 03/07/24 22:57:48.474
  Mar  7 22:57:48.523: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-6622" for this suite. @ 03/07/24 22:57:48.53
• [4.175 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should release no longer matching pods [Conformance] [sig-apps, Conformance]
test/e2e/apps/rc.go:104
  STEP: Creating a kubernetes client @ 03/07/24 22:57:48.544
  Mar  7 22:57:48.544: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename replication-controller @ 03/07/24 22:57:48.545
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:57:48.564
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:57:48.566
  STEP: Given a ReplicationController is created @ 03/07/24 22:57:48.568
  STEP: When the matched label of one of its pods change @ 03/07/24 22:57:48.575
  Mar  7 22:57:48.578: INFO: Pod name pod-release: Found 0 pods out of 1
  Mar  7 22:57:53.589: INFO: Pod name pod-release: Found 1 pods out of 1
  STEP: Then the pod is released @ 03/07/24 22:57:53.622
  Mar  7 22:57:53.639: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-8973" for this suite. @ 03/07/24 22:57:53.643
• [5.117 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should mount projected service account token [Conformance] [sig-auth, Conformance]
test/e2e/auth/service_accounts.go:277
  STEP: Creating a kubernetes client @ 03/07/24 22:57:53.662
  Mar  7 22:57:53.662: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename svcaccounts @ 03/07/24 22:57:53.662
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:57:53.691
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:57:53.694
  STEP: Creating a pod to test service account token:  @ 03/07/24 22:57:53.699
  STEP: Saw pod success @ 03/07/24 22:57:57.729
  Mar  7 22:57:57.738: INFO: Trying to get logs from node whiskas-1 pod test-pod-f1ee0291-85f3-47c3-86da-c6c150681fe1 container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 22:57:57.754
  Mar  7 22:57:57.798: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-7271" for this suite. @ 03/07/24 22:57:57.804
• [4.152 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtime.go:216
  STEP: Creating a kubernetes client @ 03/07/24 22:57:57.814
  Mar  7 22:57:57.814: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-runtime @ 03/07/24 22:57:57.814
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:57:57.828
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:57:57.83
  STEP: create the container @ 03/07/24 22:57:57.832
  W0307 22:57:57.839841      20 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Failed @ 03/07/24 22:57:57.839
  STEP: get the container status @ 03/07/24 22:58:00.864
  STEP: the container should be terminated @ 03/07/24 22:58:00.872
  STEP: the termination message should be set @ 03/07/24 22:58:00.872
  Mar  7 22:58:00.872: INFO: Expected: &{DONE} to match Container's Termination Message: DONE --
  STEP: delete the container @ 03/07/24 22:58:00.872
  Mar  7 22:58:00.919: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-3920" for this suite. @ 03/07/24 22:58:00.923
• [3.118 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance] [sig-apps, Conformance]
test/e2e/apps/job.go:655
  STEP: Creating a kubernetes client @ 03/07/24 22:58:00.932
  Mar  7 22:58:00.932: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename job @ 03/07/24 22:58:00.932
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:58:00.948
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:58:00.95
  STEP: Creating a job @ 03/07/24 22:58:00.952
  STEP: Ensuring active pods == parallelism @ 03/07/24 22:58:00.959
  STEP: Orphaning one of the Job's Pods @ 03/07/24 22:58:02.966
  Mar  7 22:58:03.522: INFO: Successfully updated pod "adopt-release-579kz"
  STEP: Checking that the Job readopts the Pod @ 03/07/24 22:58:03.522
  STEP: Removing the labels from the Job's Pod @ 03/07/24 22:58:05.54
  Mar  7 22:58:06.130: INFO: Successfully updated pod "adopt-release-579kz"
  STEP: Checking that the Job releases the Pod @ 03/07/24 22:58:06.13
  Mar  7 22:58:08.146: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-7517" for this suite. @ 03/07/24 22:58:08.156
• [7.252 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/preemption.go:812
  STEP: Creating a kubernetes client @ 03/07/24 22:58:08.193
  Mar  7 22:58:08.193: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename sched-preemption @ 03/07/24 22:58:08.195
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:58:08.218
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:58:08.221
  Mar  7 22:58:08.241: INFO: Waiting up to 1m0s for all nodes to be ready
  Mar  7 22:59:08.253: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Creating a kubernetes client @ 03/07/24 22:59:08.262
  Mar  7 22:59:08.262: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename sched-preemption-path @ 03/07/24 22:59:08.264
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:59:08.314
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:59:08.323
  Mar  7 22:59:08.367: INFO: PriorityClass.scheduling.k8s.io "p1" is invalid: value: Forbidden: may not be changed in an update.
  Mar  7 22:59:08.372: INFO: PriorityClass.scheduling.k8s.io "p2" is invalid: value: Forbidden: may not be changed in an update.
  Mar  7 22:59:08.482: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-path-6423" for this suite. @ 03/07/24 22:59:08.488
  Mar  7 22:59:08.501: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-2778" for this suite. @ 03/07/24 22:59:08.52
• [60.340 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:695
  STEP: Creating a kubernetes client @ 03/07/24 22:59:08.533
  Mar  7 22:59:08.533: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename resourcequota @ 03/07/24 22:59:08.534
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:59:08.561
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:59:08.564
  STEP: Creating a ResourceQuota with terminating scope @ 03/07/24 22:59:08.566
  STEP: Ensuring ResourceQuota status is calculated @ 03/07/24 22:59:08.571
  STEP: Creating a ResourceQuota with not terminating scope @ 03/07/24 22:59:10.58
  STEP: Ensuring ResourceQuota status is calculated @ 03/07/24 22:59:10.602
  STEP: Creating a long running pod @ 03/07/24 22:59:12.611
  STEP: Ensuring resource quota with not terminating scope captures the pod usage @ 03/07/24 22:59:12.663
  STEP: Ensuring resource quota with terminating scope ignored the pod usage @ 03/07/24 22:59:14.673
  STEP: Deleting the pod @ 03/07/24 22:59:16.686
  STEP: Ensuring resource quota status released the pod usage @ 03/07/24 22:59:16.735
  STEP: Creating a terminating pod @ 03/07/24 22:59:18.744
  STEP: Ensuring resource quota with terminating scope captures the pod usage @ 03/07/24 22:59:18.783
  STEP: Ensuring resource quota with not terminating scope ignored the pod usage @ 03/07/24 22:59:20.787
  STEP: Deleting the pod @ 03/07/24 22:59:22.796
  STEP: Ensuring resource quota status released the pod usage @ 03/07/24 22:59:22.877
  Mar  7 22:59:24.881: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-7269" for this suite. @ 03/07/24 22:59:24.885
• [16.358 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:103
  STEP: Creating a kubernetes client @ 03/07/24 22:59:24.891
  Mar  7 22:59:24.891: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename resourcequota @ 03/07/24 22:59:24.891
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:59:24.921
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:59:24.925
  STEP: Counting existing ResourceQuota @ 03/07/24 22:59:24.929
  STEP: Creating a ResourceQuota @ 03/07/24 22:59:29.942
  STEP: Ensuring resource quota status is calculated @ 03/07/24 22:59:29.96
  STEP: Creating a Service @ 03/07/24 22:59:31.97
  STEP: Creating a NodePort Service @ 03/07/24 22:59:32.025
  STEP: Not allowing a LoadBalancer Service with NodePort to be created that exceeds remaining quota @ 03/07/24 22:59:32.059
  STEP: Ensuring resource quota status captures service creation @ 03/07/24 22:59:32.085
  STEP: Deleting Services @ 03/07/24 22:59:34.096
  STEP: Ensuring resource quota status released usage @ 03/07/24 22:59:34.18
  Mar  7 22:59:36.190: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-2003" for this suite. @ 03/07/24 22:59:36.201
• [11.337 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:153
  STEP: Creating a kubernetes client @ 03/07/24 22:59:36.231
  Mar  7 22:59:36.231: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename crd-publish-openapi @ 03/07/24 22:59:36.233
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:59:36.287
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:59:36.291
  Mar  7 22:59:36.294: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 03/07/24 22:59:37.535
  Mar  7 22:59:37.535: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-4655 --namespace=crd-publish-openapi-4655 create -f -'
  Mar  7 22:59:39.611: INFO: stderr: ""
  Mar  7 22:59:39.611: INFO: stdout: "e2e-test-crd-publish-openapi-3618-crd.crd-publish-openapi-test-empty.example.com/test-cr created\n"
  Mar  7 22:59:39.611: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-4655 --namespace=crd-publish-openapi-4655 delete e2e-test-crd-publish-openapi-3618-crds test-cr'
  Mar  7 22:59:39.689: INFO: stderr: ""
  Mar  7 22:59:39.689: INFO: stdout: "e2e-test-crd-publish-openapi-3618-crd.crd-publish-openapi-test-empty.example.com \"test-cr\" deleted\n"
  Mar  7 22:59:39.689: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-4655 --namespace=crd-publish-openapi-4655 apply -f -'
  Mar  7 22:59:39.740: INFO: stderr: ""
  Mar  7 22:59:39.740: INFO: stdout: "e2e-test-crd-publish-openapi-3618-crd.crd-publish-openapi-test-empty.example.com/test-cr created\n"
  Mar  7 22:59:39.740: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-4655 --namespace=crd-publish-openapi-4655 delete e2e-test-crd-publish-openapi-3618-crds test-cr'
  Mar  7 22:59:39.788: INFO: stderr: ""
  Mar  7 22:59:39.788: INFO: stdout: "e2e-test-crd-publish-openapi-3618-crd.crd-publish-openapi-test-empty.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR without validation schema @ 03/07/24 22:59:39.788
  Mar  7 22:59:39.788: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-4655 explain e2e-test-crd-publish-openapi-3618-crds'
  Mar  7 22:59:39.829: INFO: stderr: ""
  Mar  7 22:59:39.829: INFO: stdout: "GROUP:      crd-publish-openapi-test-empty.example.com\nKIND:       e2e-test-crd-publish-openapi-3618-crd\nVERSION:    v1\n\nDESCRIPTION:\n    <empty>\nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n\n"
  Mar  7 22:59:41.060: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-4655" for this suite. @ 03/07/24 22:59:41.065
• [4.847 seconds]
------------------------------
[sig-auth] SubjectReview should support SubjectReview API operations [Conformance] [sig-auth, Conformance]
test/e2e/auth/subjectreviews.go:50
  STEP: Creating a kubernetes client @ 03/07/24 22:59:41.078
  Mar  7 22:59:41.078: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename subjectreview @ 03/07/24 22:59:41.079
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:59:41.092
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:59:41.095
  STEP: Creating a Serviceaccount "e2e" in namespace "subjectreview-3921" @ 03/07/24 22:59:41.1
  Mar  7 22:59:41.106: INFO: saUsername: "system:serviceaccount:subjectreview-3921:e2e"
  Mar  7 22:59:41.106: INFO: saGroups: []string{"system:authenticated", "system:serviceaccounts", "system:serviceaccounts:subjectreview-3921"}
  Mar  7 22:59:41.106: INFO: saUID: "58a12e46-5f5e-4118-ba94-93ca7b8c69e6"
  STEP: Creating clientset to impersonate "system:serviceaccount:subjectreview-3921:e2e" @ 03/07/24 22:59:41.106
  STEP: Creating SubjectAccessReview for "system:serviceaccount:subjectreview-3921:e2e" @ 03/07/24 22:59:41.106
  Mar  7 22:59:41.109: INFO: sarResponse Status: v1.SubjectAccessReviewStatus{Allowed:true, Denied:false, Reason:"", EvaluationError:""}
  STEP: Verifying as "system:serviceaccount:subjectreview-3921:e2e" api 'list' configmaps in "subjectreview-3921" namespace @ 03/07/24 22:59:41.109
  Mar  7 22:59:41.112: INFO: SubjectAccessReview has been verified
  STEP: Creating a LocalSubjectAccessReview for "system:serviceaccount:subjectreview-3921:e2e" @ 03/07/24 22:59:41.112
  Mar  7 22:59:41.113: INFO: lsarResponse Status: v1.SubjectAccessReviewStatus{Allowed:true, Denied:false, Reason:"", EvaluationError:""}
  Mar  7 22:59:41.113: INFO: LocalSubjectAccessReview has been verified
  Mar  7 22:59:41.113: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subjectreview-3921" for this suite. @ 03/07/24 22:59:41.116
• [0.044 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance] [sig-node, Conformance]
test/e2e/common/node/podtemplates.go:54
  STEP: Creating a kubernetes client @ 03/07/24 22:59:41.122
  Mar  7 22:59:41.122: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename podtemplate @ 03/07/24 22:59:41.122
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:59:41.137
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:59:41.139
  Mar  7 22:59:41.222: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-6321" for this suite. @ 03/07/24 22:59:41.233
• [0.130 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:75
  STEP: Creating a kubernetes client @ 03/07/24 22:59:41.253
  Mar  7 22:59:41.253: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 22:59:41.254
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:59:41.281
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:59:41.284
  STEP: Creating configMap with name projected-configmap-test-volume-1fb6ed31-801b-4555-a05c-b59dc8ccdc6d @ 03/07/24 22:59:41.286
  STEP: Creating a pod to test consume configMaps @ 03/07/24 22:59:41.291
  STEP: Saw pod success @ 03/07/24 22:59:45.322
  Mar  7 22:59:45.331: INFO: Trying to get logs from node whiskas-1 pod pod-projected-configmaps-6e86d7a6-4e81-4ac2-8409-d14055737f55 container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 22:59:45.367
  Mar  7 22:59:45.410: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7430" for this suite. @ 03/07/24 22:59:45.415
• [4.173 seconds]
------------------------------
SSS
------------------------------
[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/expansion.go:47
  STEP: Creating a kubernetes client @ 03/07/24 22:59:45.426
  Mar  7 22:59:45.426: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename var-expansion @ 03/07/24 22:59:45.427
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:59:45.449
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:59:45.457
  STEP: Creating a pod to test env composition @ 03/07/24 22:59:45.46
  STEP: Saw pod success @ 03/07/24 22:59:49.496
  Mar  7 22:59:49.505: INFO: Trying to get logs from node whiskas-1 pod var-expansion-2b05b6cb-ef01-48fe-b846-db1cfe37753d container dapi-container: <nil>
  STEP: delete the pod @ 03/07/24 22:59:49.522
  Mar  7 22:59:49.581: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-1860" for this suite. @ 03/07/24 22:59:49.591
• [4.174 seconds]
------------------------------
SS
------------------------------
[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/daemon_set.go:385
  STEP: Creating a kubernetes client @ 03/07/24 22:59:49.6
  Mar  7 22:59:49.600: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename daemonsets @ 03/07/24 22:59:49.601
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:59:49.62
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:59:49.623
  Mar  7 22:59:49.640: INFO: Creating simple daemon set daemon-set
  STEP: Check that daemon pods launch on every node of the cluster. @ 03/07/24 22:59:49.645
  Mar  7 22:59:49.651: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:59:49.651: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  Mar  7 22:59:50.655: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:59:50.655: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  Mar  7 22:59:51.667: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Mar  7 22:59:51.667: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Update daemon pods image. @ 03/07/24 22:59:51.702
  STEP: Check that daemon pods images are updated. @ 03/07/24 22:59:51.739
  Mar  7 22:59:51.750: INFO: Wrong image for pod: daemon-set-4d2wz. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Mar  7 22:59:51.750: INFO: Wrong image for pod: daemon-set-t7wgc. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Mar  7 22:59:52.750: INFO: Wrong image for pod: daemon-set-t7wgc. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Mar  7 22:59:53.743: INFO: Pod daemon-set-9gn92 is not available
  Mar  7 22:59:53.743: INFO: Wrong image for pod: daemon-set-t7wgc. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Mar  7 22:59:54.742: INFO: Pod daemon-set-hw8k4 is not available
  STEP: Check that daemon pods are still running on every node of the cluster. @ 03/07/24 22:59:54.745
  Mar  7 22:59:54.752: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Mar  7 22:59:54.752: INFO: Node whiskas-2 is running 0 daemon pod, expected 1
  Mar  7 22:59:55.765: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Mar  7 22:59:55.765: INFO: Node whiskas-2 is running 0 daemon pod, expected 1
  Mar  7 22:59:56.765: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Mar  7 22:59:56.765: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 03/07/24 22:59:56.803
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-4297, will wait for the garbage collector to delete the pods @ 03/07/24 22:59:56.803
  Mar  7 22:59:56.883: INFO: Deleting DaemonSet.extensions daemon-set took: 24.122647ms
  Mar  7 22:59:56.984: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.710719ms
  Mar  7 22:59:59.290: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 22:59:59.290: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Mar  7 22:59:59.295: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"112685"},"items":null}

  Mar  7 22:59:59.299: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"112685"},"items":null}

  Mar  7 22:59:59.313: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-4297" for this suite. @ 03/07/24 22:59:59.317
• [9.728 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1084
  STEP: Creating a kubernetes client @ 03/07/24 22:59:59.33
  Mar  7 22:59:59.330: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 22:59:59.331
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 22:59:59.354
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 22:59:59.357
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 03/07/24 22:59:59.361
  Mar  7 22:59:59.361: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7729 run e2e-test-httpd-pod --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4 --pod-running-timeout=2m0s --labels=run=e2e-test-httpd-pod'
  Mar  7 22:59:59.421: INFO: stderr: ""
  Mar  7 22:59:59.421: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: replace the image in the pod with server-side dry-run @ 03/07/24 22:59:59.421
  Mar  7 22:59:59.421: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7729 patch pod e2e-test-httpd-pod -p {"spec":{"containers":[{"name": "e2e-test-httpd-pod","image": "registry.k8s.io/e2e-test-images/busybox:1.36.1-1"}]}} --dry-run=server'
  Mar  7 22:59:59.466: INFO: stderr: ""
  Mar  7 22:59:59.466: INFO: stdout: "pod/e2e-test-httpd-pod patched\n"
  STEP: verifying the pod e2e-test-httpd-pod has the right image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 03/07/24 22:59:59.466
  Mar  7 22:59:59.469: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7729 delete pods e2e-test-httpd-pod'
  Mar  7 23:00:01.394: INFO: stderr: ""
  Mar  7 23:00:01.394: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Mar  7 23:00:01.394: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-7729" for this suite. @ 03/07/24 23:00:01.402
• [2.083 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance] [sig-apps, Conformance]
test/e2e/apps/replica_set.go:144
  STEP: Creating a kubernetes client @ 03/07/24 23:00:01.413
  Mar  7 23:00:01.413: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename replicaset @ 03/07/24 23:00:01.414
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:00:01.433
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:00:01.435
  STEP: Creating replica set "test-rs" that asks for more than the allowed pod quota @ 03/07/24 23:00:01.437
  Mar  7 23:00:01.446: INFO: Pod name sample-pod: Found 0 pods out of 1
  Mar  7 23:00:06.455: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 03/07/24 23:00:06.456
  STEP: getting scale subresource @ 03/07/24 23:00:06.456
  STEP: updating a scale subresource @ 03/07/24 23:00:06.463
  STEP: verifying the replicaset Spec.Replicas was modified @ 03/07/24 23:00:06.477
  STEP: Patch a scale subresource @ 03/07/24 23:00:06.484
  Mar  7 23:00:06.514: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-3412" for this suite. @ 03/07/24 23:00:06.518
• [5.120 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance] [sig-apps, Slow, Conformance]
test/e2e/apps/statefulset.go:641
  STEP: Creating a kubernetes client @ 03/07/24 23:00:06.534
  Mar  7 23:00:06.534: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename statefulset @ 03/07/24 23:00:06.535
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:00:06.578
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:00:06.581
  STEP: Creating service test in namespace statefulset-4821 @ 03/07/24 23:00:06.583
  STEP: Initializing watcher for selector baz=blah,foo=bar @ 03/07/24 23:00:06.59
  STEP: Creating stateful set ss in namespace statefulset-4821 @ 03/07/24 23:00:06.594
  STEP: Waiting until all stateful set ss replicas will be running in namespace statefulset-4821 @ 03/07/24 23:00:06.603
  Mar  7 23:00:06.607: INFO: Found 0 stateful pods, waiting for 1
  Mar  7 23:00:16.613: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Confirming that stateful set scale up will halt with unhealthy stateful pod @ 03/07/24 23:00:16.613
  Mar  7 23:00:16.623: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-4821 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Mar  7 23:00:16.738: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Mar  7 23:00:16.738: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Mar  7 23:00:16.738: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Mar  7 23:00:16.741: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=true
  Mar  7 23:00:26.749: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Mar  7 23:00:26.749: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Mar  7 23:00:26.800: INFO: Verifying statefulset ss doesn't scale past 1 for another 9.999999221s
  Mar  7 23:00:27.810: INFO: Verifying statefulset ss doesn't scale past 1 for another 8.989980857s
  Mar  7 23:00:28.820: INFO: Verifying statefulset ss doesn't scale past 1 for another 7.980128652s
  Mar  7 23:00:29.830: INFO: Verifying statefulset ss doesn't scale past 1 for another 6.969900912s
  Mar  7 23:00:30.839: INFO: Verifying statefulset ss doesn't scale past 1 for another 5.960443347s
  Mar  7 23:00:31.849: INFO: Verifying statefulset ss doesn't scale past 1 for another 4.950809099s
  Mar  7 23:00:32.859: INFO: Verifying statefulset ss doesn't scale past 1 for another 3.940740065s
  Mar  7 23:00:33.869: INFO: Verifying statefulset ss doesn't scale past 1 for another 2.931134226s
  Mar  7 23:00:34.872: INFO: Verifying statefulset ss doesn't scale past 1 for another 1.921221881s
  Mar  7 23:00:35.884: INFO: Verifying statefulset ss doesn't scale past 1 for another 917.189614ms
  STEP: Scaling up stateful set ss to 3 replicas and waiting until all of them will be running in namespace statefulset-4821 @ 03/07/24 23:00:36.885
  Mar  7 23:00:36.894: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-4821 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Mar  7 23:00:37.023: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Mar  7 23:00:37.023: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Mar  7 23:00:37.023: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Mar  7 23:00:37.026: INFO: Found 1 stateful pods, waiting for 3
  Mar  7 23:00:47.036: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Mar  7 23:00:47.036: INFO: Waiting for pod ss-1 to enter Running - Ready=true, currently Running - Ready=true
  Mar  7 23:00:47.036: INFO: Waiting for pod ss-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Verifying that stateful set ss was scaled up in order @ 03/07/24 23:00:47.036
  STEP: Scale down will halt with unhealthy stateful pod @ 03/07/24 23:00:47.036
  Mar  7 23:00:47.058: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-4821 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Mar  7 23:00:47.162: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Mar  7 23:00:47.162: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Mar  7 23:00:47.162: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Mar  7 23:00:47.162: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-4821 exec ss-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Mar  7 23:00:47.238: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Mar  7 23:00:47.238: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Mar  7 23:00:47.238: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Mar  7 23:00:47.238: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-4821 exec ss-2 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Mar  7 23:00:47.309: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Mar  7 23:00:47.309: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Mar  7 23:00:47.309: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-2: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Mar  7 23:00:47.309: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Mar  7 23:00:47.312: INFO: Waiting for statefulset status.readyReplicas to become 0, currently 3
  Mar  7 23:00:57.330: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Mar  7 23:00:57.330: INFO: Waiting for pod ss-1 to enter Running - Ready=false, currently Running - Ready=false
  Mar  7 23:00:57.330: INFO: Waiting for pod ss-2 to enter Running - Ready=false, currently Running - Ready=false
  Mar  7 23:00:57.377: INFO: Verifying statefulset ss doesn't scale past 3 for another 9.999998984s
  Mar  7 23:00:58.388: INFO: Verifying statefulset ss doesn't scale past 3 for another 8.98252755s
  Mar  7 23:00:59.400: INFO: Verifying statefulset ss doesn't scale past 3 for another 7.970419562s
  Mar  7 23:01:00.406: INFO: Verifying statefulset ss doesn't scale past 3 for another 6.959238612s
  Mar  7 23:01:01.418: INFO: Verifying statefulset ss doesn't scale past 3 for another 5.952693688s
  Mar  7 23:01:02.429: INFO: Verifying statefulset ss doesn't scale past 3 for another 4.941807603s
  Mar  7 23:01:03.440: INFO: Verifying statefulset ss doesn't scale past 3 for another 3.930415855s
  Mar  7 23:01:04.452: INFO: Verifying statefulset ss doesn't scale past 3 for another 2.919066603s
  Mar  7 23:01:05.465: INFO: Verifying statefulset ss doesn't scale past 3 for another 1.906689831s
  Mar  7 23:01:06.477: INFO: Verifying statefulset ss doesn't scale past 3 for another 893.830572ms
  STEP: Scaling down stateful set ss to 0 replicas and waiting until none of pods will run in namespacestatefulset-4821 @ 03/07/24 23:01:07.478
  Mar  7 23:01:07.489: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-4821 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Mar  7 23:01:07.612: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Mar  7 23:01:07.612: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Mar  7 23:01:07.612: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Mar  7 23:01:07.612: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-4821 exec ss-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Mar  7 23:01:07.685: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Mar  7 23:01:07.685: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Mar  7 23:01:07.685: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Mar  7 23:01:07.685: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-4821 exec ss-2 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Mar  7 23:01:07.755: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Mar  7 23:01:07.755: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Mar  7 23:01:07.755: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-2: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Mar  7 23:01:07.755: INFO: Scaling statefulset ss to 0
  STEP: Verifying that stateful set ss was scaled down in reverse order @ 03/07/24 23:01:17.775
  Mar  7 23:01:17.775: INFO: Deleting all statefulset in ns statefulset-4821
  Mar  7 23:01:17.784: INFO: Scaling statefulset ss to 0
  Mar  7 23:01:17.815: INFO: Waiting for statefulset status.replicas updated to 0
  Mar  7 23:01:17.823: INFO: Deleting statefulset ss
  Mar  7 23:01:17.863: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-4821" for this suite. @ 03/07/24 23:01:17.868
• [71.344 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should serve a basic endpoint from pods [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:785
  STEP: Creating a kubernetes client @ 03/07/24 23:01:17.878
  Mar  7 23:01:17.878: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 23:01:17.879
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:01:17.896
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:01:17.899
  STEP: creating service endpoint-test2 in namespace services-8270 @ 03/07/24 23:01:17.902
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-8270 to expose endpoints map[] @ 03/07/24 23:01:17.915
  Mar  7 23:01:17.921: INFO: Failed go get Endpoints object: endpoints "endpoint-test2" not found
  Mar  7 23:01:18.940: INFO: successfully validated that service endpoint-test2 in namespace services-8270 exposes endpoints map[]
  STEP: Creating pod pod1 in namespace services-8270 @ 03/07/24 23:01:18.941
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-8270 to expose endpoints map[pod1:[80]] @ 03/07/24 23:01:21.001
  Mar  7 23:01:21.018: INFO: successfully validated that service endpoint-test2 in namespace services-8270 exposes endpoints map[pod1:[80]]
  STEP: Checking if the Service forwards traffic to pod1 @ 03/07/24 23:01:21.019
  Mar  7 23:01:21.019: INFO: Creating new exec pod
  Mar  7 23:01:24.049: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8270 exec execpodp6mx5 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Mar  7 23:01:24.133: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Mar  7 23:01:24.133: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 23:01:24.133: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8270 exec execpodp6mx5 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.142 80'
  Mar  7 23:01:24.202: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.142 80\nConnection to 10.152.183.142 80 port [tcp/http] succeeded!\n"
  Mar  7 23:01:24.203: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Creating pod pod2 in namespace services-8270 @ 03/07/24 23:01:24.203
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-8270 to expose endpoints map[pod1:[80] pod2:[80]] @ 03/07/24 23:01:26.222
  Mar  7 23:01:26.231: INFO: successfully validated that service endpoint-test2 in namespace services-8270 exposes endpoints map[pod1:[80] pod2:[80]]
  STEP: Checking if the Service forwards traffic to pod1 and pod2 @ 03/07/24 23:01:26.231
  Mar  7 23:01:27.232: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8270 exec execpodp6mx5 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Mar  7 23:01:27.307: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Mar  7 23:01:27.307: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 23:01:27.307: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8270 exec execpodp6mx5 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.142 80'
  Mar  7 23:01:27.377: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.142 80\nConnection to 10.152.183.142 80 port [tcp/http] succeeded!\n"
  Mar  7 23:01:27.377: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod1 in namespace services-8270 @ 03/07/24 23:01:27.377
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-8270 to expose endpoints map[pod2:[80]] @ 03/07/24 23:01:27.408
  Mar  7 23:01:27.425: INFO: successfully validated that service endpoint-test2 in namespace services-8270 exposes endpoints map[pod2:[80]]
  STEP: Checking if the Service forwards traffic to pod2 @ 03/07/24 23:01:27.425
  Mar  7 23:01:28.427: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8270 exec execpodp6mx5 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Mar  7 23:01:28.541: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Mar  7 23:01:28.541: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 23:01:28.541: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-8270 exec execpodp6mx5 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.142 80'
  Mar  7 23:01:28.612: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.142 80\nConnection to 10.152.183.142 80 port [tcp/http] succeeded!\n"
  Mar  7 23:01:28.612: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod2 in namespace services-8270 @ 03/07/24 23:01:28.612
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-8270 to expose endpoints map[] @ 03/07/24 23:01:28.627
  Mar  7 23:01:30.650: INFO: successfully validated that service endpoint-test2 in namespace services-8270 exposes endpoints map[]
  Mar  7 23:01:30.706: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-8270" for this suite. @ 03/07/24 23:01:30.711
• [12.842 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:194
  STEP: Creating a kubernetes client @ 03/07/24 23:01:30.72
  Mar  7 23:01:30.720: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename crd-publish-openapi @ 03/07/24 23:01:30.721
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:01:30.735
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:01:30.738
  Mar  7 23:01:30.740: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 03/07/24 23:01:31.973
  Mar  7 23:01:31.973: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-3854 --namespace=crd-publish-openapi-3854 create -f -'
  Mar  7 23:01:32.036: INFO: stderr: ""
  Mar  7 23:01:32.036: INFO: stdout: "e2e-test-crd-publish-openapi-2224-crd.crd-publish-openapi-test-unknown-at-root.example.com/test-cr created\n"
  Mar  7 23:01:32.036: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-3854 --namespace=crd-publish-openapi-3854 delete e2e-test-crd-publish-openapi-2224-crds test-cr'
  Mar  7 23:01:32.092: INFO: stderr: ""
  Mar  7 23:01:32.092: INFO: stdout: "e2e-test-crd-publish-openapi-2224-crd.crd-publish-openapi-test-unknown-at-root.example.com \"test-cr\" deleted\n"
  Mar  7 23:01:32.092: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-3854 --namespace=crd-publish-openapi-3854 apply -f -'
  Mar  7 23:01:32.145: INFO: stderr: ""
  Mar  7 23:01:32.145: INFO: stdout: "e2e-test-crd-publish-openapi-2224-crd.crd-publish-openapi-test-unknown-at-root.example.com/test-cr created\n"
  Mar  7 23:01:32.145: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-3854 --namespace=crd-publish-openapi-3854 delete e2e-test-crd-publish-openapi-2224-crds test-cr'
  Mar  7 23:01:32.193: INFO: stderr: ""
  Mar  7 23:01:32.193: INFO: stdout: "e2e-test-crd-publish-openapi-2224-crd.crd-publish-openapi-test-unknown-at-root.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR @ 03/07/24 23:01:32.193
  Mar  7 23:01:32.193: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-3854 explain e2e-test-crd-publish-openapi-2224-crds'
  Mar  7 23:01:32.234: INFO: stderr: ""
  Mar  7 23:01:32.234: INFO: stdout: "GROUP:      crd-publish-openapi-test-unknown-at-root.example.com\nKIND:       e2e-test-crd-publish-openapi-2224-crd\nVERSION:    v1\n\nDESCRIPTION:\n    preserve-unknown-properties at root for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Waldo\n\n  status\t<Object>\n    Status of Waldo\n\n\n"
  Mar  7 23:01:33.462: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-3854" for this suite. @ 03/07/24 23:01:33.467
• [2.753 seconds]
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance] [sig-apps, Conformance]
test/e2e/apps/statefulset.go:1031
  STEP: Creating a kubernetes client @ 03/07/24 23:01:33.473
  Mar  7 23:01:33.473: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename statefulset @ 03/07/24 23:01:33.474
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:01:33.488
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:01:33.491
  STEP: Creating service test in namespace statefulset-4008 @ 03/07/24 23:01:33.493
  STEP: Creating statefulset ss in namespace statefulset-4008 @ 03/07/24 23:01:33.503
  Mar  7 23:01:33.515: INFO: Found 0 stateful pods, waiting for 1
  Mar  7 23:01:43.524: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Patch Statefulset to include a label @ 03/07/24 23:01:43.54
  STEP: Getting /status @ 03/07/24 23:01:43.561
  Mar  7 23:01:43.573: INFO: StatefulSet ss has Conditions: []v1.StatefulSetCondition(nil)
  STEP: updating the StatefulSet Status @ 03/07/24 23:01:43.573
  Mar  7 23:01:43.593: INFO: updatedStatus.Conditions: []v1.StatefulSetCondition{v1.StatefulSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the statefulset status to be updated @ 03/07/24 23:01:43.598
  Mar  7 23:01:43.602: INFO: Observed &StatefulSet event: ADDED
  Mar  7 23:01:43.602: INFO: Found Statefulset ss in namespace statefulset-4008 with labels: map[e2e:testing] annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Mar  7 23:01:43.602: INFO: Statefulset ss has an updated status
  STEP: patching the Statefulset Status @ 03/07/24 23:01:43.602
  Mar  7 23:01:43.602: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Mar  7 23:01:43.620: INFO: Patched status conditions: []v1.StatefulSetCondition{v1.StatefulSetCondition{Type:"StatusPatched", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Statefulset status to be patched @ 03/07/24 23:01:43.62
  Mar  7 23:01:43.624: INFO: Observed &StatefulSet event: ADDED
  Mar  7 23:01:43.624: INFO: Deleting all statefulset in ns statefulset-4008
  Mar  7 23:01:43.630: INFO: Scaling statefulset ss to 0
  Mar  7 23:01:53.664: INFO: Waiting for statefulset status.replicas updated to 0
  Mar  7 23:01:53.672: INFO: Deleting statefulset ss
  Mar  7 23:01:53.712: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-4008" for this suite. @ 03/07/24 23:01:53.718
• [20.253 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:70
  STEP: Creating a kubernetes client @ 03/07/24 23:01:53.727
  Mar  7 23:01:53.727: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 23:01:53.728
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:01:53.744
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:01:53.747
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 23:01:53.749
  STEP: Saw pod success @ 03/07/24 23:01:57.776
  Mar  7 23:01:57.785: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-58dd5016-6eae-4a4b-8b1d-12c01e704c22 container client-container: <nil>
  STEP: delete the pod @ 03/07/24 23:01:57.821
  Mar  7 23:01:57.874: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3560" for this suite. @ 03/07/24 23:01:57.883
• [4.170 seconds]
------------------------------
[sig-node] RuntimeClass should reject a Pod requesting a non-existent RuntimeClass [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtimeclass.go:57
  STEP: Creating a kubernetes client @ 03/07/24 23:01:57.897
  Mar  7 23:01:57.897: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename runtimeclass @ 03/07/24 23:01:57.898
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:01:57.928
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:01:57.932
  Mar  7 23:01:57.940: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-1894" for this suite. @ 03/07/24 23:01:57.943
• [0.057 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance] [sig-apps, Conformance]
test/e2e/apps/cronjob.go:70
  STEP: Creating a kubernetes client @ 03/07/24 23:01:57.955
  Mar  7 23:01:57.955: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename cronjob @ 03/07/24 23:01:57.955
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:01:57.972
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:01:57.974
  STEP: Creating a cronjob @ 03/07/24 23:01:57.975
  STEP: Ensuring more than one job is running at a time @ 03/07/24 23:01:57.982
  STEP: Ensuring at least two running jobs exists by listing jobs explicitly @ 03/07/24 23:03:01.992
  STEP: Removing cronjob @ 03/07/24 23:03:02.003
  Mar  7 23:03:02.024: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-6256" for this suite. @ 03/07/24 23:03:02.031
• [64.089 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance] [sig-network, NodeConformance, Conformance]
test/e2e/common/network/networking.go:108
  STEP: Creating a kubernetes client @ 03/07/24 23:03:02.043
  Mar  7 23:03:02.043: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pod-network-test @ 03/07/24 23:03:02.044
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:03:02.118
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:03:02.12
  STEP: Performing setup for networking test in namespace pod-network-test-9075 @ 03/07/24 23:03:02.123
  STEP: creating a selector @ 03/07/24 23:03:02.123
  STEP: Creating the service pods in kubernetes @ 03/07/24 23:03:02.123
  Mar  7 23:03:02.123: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 03/07/24 23:03:24.366
  Mar  7 23:03:26.440: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Mar  7 23:03:26.440: INFO: Going to poll 10.1.51.105 on port 8083 at least 0 times, with a maximum of 34 tries before failing
  Mar  7 23:03:26.449: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://10.1.51.105:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-9075 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 23:03:26.449: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 23:03:26.450: INFO: ExecWithOptions: Clientset creation
  Mar  7 23:03:26.451: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-9075/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F10.1.51.105%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Mar  7 23:03:26.534: INFO: Found all 1 expected endpoints: [netserver-0]
  Mar  7 23:03:26.534: INFO: Going to poll 10.1.60.241 on port 8083 at least 0 times, with a maximum of 34 tries before failing
  Mar  7 23:03:26.536: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://10.1.60.241:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-9075 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 23:03:26.536: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 23:03:26.537: INFO: ExecWithOptions: Clientset creation
  Mar  7 23:03:26.537: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-9075/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F10.1.60.241%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Mar  7 23:03:26.565: INFO: Found all 1 expected endpoints: [netserver-1]
  Mar  7 23:03:26.565: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-9075" for this suite. @ 03/07/24 23:03:26.571
• [24.536 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:209
  STEP: Creating a kubernetes client @ 03/07/24 23:03:26.579
  Mar  7 23:03:26.579: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 23:03:26.58
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:03:26.598
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:03:26.601
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 23:03:26.603
  STEP: Saw pod success @ 03/07/24 23:03:30.625
  Mar  7 23:03:30.628: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-66b8bf0b-e381-4ded-a613-7f0307e57604 container client-container: <nil>
  STEP: delete the pod @ 03/07/24 23:03:30.635
  Mar  7 23:03:30.658: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-9507" for this suite. @ 03/07/24 23:03:30.661
• [4.088 seconds]
------------------------------
SSSS
------------------------------
[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/daemon_set.go:875
  STEP: Creating a kubernetes client @ 03/07/24 23:03:30.667
  Mar  7 23:03:30.667: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename daemonsets @ 03/07/24 23:03:30.668
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:03:30.682
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:03:30.684
  STEP: Creating simple DaemonSet "daemon-set" @ 03/07/24 23:03:30.703
  STEP: Check that daemon pods launch on every node of the cluster. @ 03/07/24 23:03:30.71
  Mar  7 23:03:30.715: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 23:03:30.715: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  Mar  7 23:03:31.730: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 23:03:31.730: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  Mar  7 23:03:32.731: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Mar  7 23:03:32.731: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Getting /status @ 03/07/24 23:03:32.739
  Mar  7 23:03:32.748: INFO: Daemon Set daemon-set has Conditions: []
  STEP: updating the DaemonSet Status @ 03/07/24 23:03:32.748
  Mar  7 23:03:32.776: INFO: updatedStatus.Conditions: []v1.DaemonSetCondition{v1.DaemonSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the daemon set status to be updated @ 03/07/24 23:03:32.777
  Mar  7 23:03:32.782: INFO: Observed &DaemonSet event: ADDED
  Mar  7 23:03:32.782: INFO: Observed &DaemonSet event: MODIFIED
  Mar  7 23:03:32.782: INFO: Observed &DaemonSet event: MODIFIED
  Mar  7 23:03:32.783: INFO: Observed &DaemonSet event: MODIFIED
  Mar  7 23:03:32.784: INFO: Observed &DaemonSet event: MODIFIED
  Mar  7 23:03:32.784: INFO: Found daemon set daemon-set in namespace daemonsets-9330 with labels: map[daemonset-name:daemon-set] annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Mar  7 23:03:32.784: INFO: Daemon set daemon-set has an updated status
  STEP: patching the DaemonSet Status @ 03/07/24 23:03:32.784
  STEP: watching for the daemon set status to be patched @ 03/07/24 23:03:32.806
  Mar  7 23:03:32.810: INFO: Observed &DaemonSet event: ADDED
  Mar  7 23:03:32.811: INFO: Observed &DaemonSet event: MODIFIED
  Mar  7 23:03:32.811: INFO: Observed &DaemonSet event: MODIFIED
  Mar  7 23:03:32.812: INFO: Observed &DaemonSet event: MODIFIED
  Mar  7 23:03:32.812: INFO: Observed &DaemonSet event: MODIFIED
  Mar  7 23:03:32.812: INFO: Observed daemon set daemon-set in namespace daemonsets-9330 with annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Mar  7 23:03:32.812: INFO: Observed &DaemonSet event: MODIFIED
  Mar  7 23:03:32.812: INFO: Found daemon set daemon-set in namespace daemonsets-9330 with labels: map[daemonset-name:daemon-set] annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusPatched True 0001-01-01 00:00:00 +0000 UTC  }]
  Mar  7 23:03:32.812: INFO: Daemon set daemon-set has a patched status
  STEP: Deleting DaemonSet "daemon-set" @ 03/07/24 23:03:32.821
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-9330, will wait for the garbage collector to delete the pods @ 03/07/24 23:03:32.821
  Mar  7 23:03:32.904: INFO: Deleting DaemonSet.extensions daemon-set took: 24.060023ms
  Mar  7 23:03:33.006: INFO: Terminating DaemonSet.extensions daemon-set pods took: 101.161479ms
  Mar  7 23:03:35.209: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 23:03:35.210: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Mar  7 23:03:35.213: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"113820"},"items":null}

  Mar  7 23:03:35.217: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"113820"},"items":null}

  Mar  7 23:03:35.228: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-9330" for this suite. @ 03/07/24 23:03:35.232
• [4.573 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance] [sig-storage, Conformance]
test/e2e/storage/subpath.go:91
  STEP: Creating a kubernetes client @ 03/07/24 23:03:35.24
  Mar  7 23:03:35.240: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename subpath @ 03/07/24 23:03:35.241
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:03:35.261
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:03:35.264
  STEP: Setting up data @ 03/07/24 23:03:35.267
  STEP: Creating pod pod-subpath-test-downwardapi-gt8b @ 03/07/24 23:03:35.281
  STEP: Creating a pod to test atomic-volume-subpath @ 03/07/24 23:03:35.282
  STEP: Saw pod success @ 03/07/24 23:03:59.411
  Mar  7 23:03:59.420: INFO: Trying to get logs from node whiskas-1 pod pod-subpath-test-downwardapi-gt8b container test-container-subpath-downwardapi-gt8b: <nil>
  STEP: delete the pod @ 03/07/24 23:03:59.44
  STEP: Deleting pod pod-subpath-test-downwardapi-gt8b @ 03/07/24 23:03:59.48
  Mar  7 23:03:59.480: INFO: Deleting pod "pod-subpath-test-downwardapi-gt8b" in namespace "subpath-2033"
  Mar  7 23:03:59.485: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-2033" for this suite. @ 03/07/24 23:03:59.491
• [24.266 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_secret.go:56
  STEP: Creating a kubernetes client @ 03/07/24 23:03:59.506
  Mar  7 23:03:59.506: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 23:03:59.508
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:03:59.544
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:03:59.547
  STEP: Creating projection with secret that has name projected-secret-test-c6cbd1d4-fa39-4211-abb4-34e46c5c4e67 @ 03/07/24 23:03:59.551
  STEP: Creating a pod to test consume secrets @ 03/07/24 23:03:59.559
  STEP: Saw pod success @ 03/07/24 23:04:03.596
  Mar  7 23:04:03.603: INFO: Trying to get logs from node whiskas-1 pod pod-projected-secrets-f7add7ba-1631-4050-bf19-0e638f119c28 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 23:04:03.616
  Mar  7 23:04:03.664: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6640" for this suite. @ 03/07/24 23:04:03.673
• [4.182 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/security_context.go:349
  STEP: Creating a kubernetes client @ 03/07/24 23:04:03.688
  Mar  7 23:04:03.688: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename security-context-test @ 03/07/24 23:04:03.689
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:04:03.751
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:04:03.759
  Mar  7 23:04:07.808: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-1547" for this suite. @ 03/07/24 23:04:07.811
• [4.137 seconds]
------------------------------
[sig-cli] Kubectl client Kubectl label should update the label on a resource [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1632
  STEP: Creating a kubernetes client @ 03/07/24 23:04:07.825
  Mar  7 23:04:07.825: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 23:04:07.826
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:04:07.857
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:04:07.86
  STEP: creating the pod @ 03/07/24 23:04:07.863
  Mar  7 23:04:07.863: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7166 create -f -'
  Mar  7 23:04:07.958: INFO: stderr: ""
  Mar  7 23:04:07.958: INFO: stdout: "pod/pause created\n"
  STEP: adding the label testing-label with value testing-label-value to a pod @ 03/07/24 23:04:09.972
  Mar  7 23:04:09.973: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7166 label pods pause testing-label=testing-label-value'
  Mar  7 23:04:10.073: INFO: stderr: ""
  Mar  7 23:04:10.073: INFO: stdout: "pod/pause labeled\n"
  STEP: verifying the pod has the label testing-label with the value testing-label-value @ 03/07/24 23:04:10.073
  Mar  7 23:04:10.073: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7166 get pod pause -L testing-label'
  Mar  7 23:04:10.152: INFO: stderr: ""
  Mar  7 23:04:10.152: INFO: stdout: "NAME    READY   STATUS    RESTARTS   AGE   TESTING-LABEL\npause   1/1     Running   0          3s    testing-label-value\n"
  STEP: removing the label testing-label of a pod @ 03/07/24 23:04:10.152
  Mar  7 23:04:10.152: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7166 label pods pause testing-label-'
  Mar  7 23:04:10.207: INFO: stderr: ""
  Mar  7 23:04:10.207: INFO: stdout: "pod/pause unlabeled\n"
  STEP: verifying the pod doesn't have the label testing-label @ 03/07/24 23:04:10.207
  Mar  7 23:04:10.207: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7166 get pod pause -L testing-label'
  Mar  7 23:04:10.253: INFO: stderr: ""
  Mar  7 23:04:10.253: INFO: stdout: "NAME    READY   STATUS    RESTARTS   AGE   TESTING-LABEL\npause   1/1     Running   0          3s    \n"
  STEP: using delete to clean up resources @ 03/07/24 23:04:10.253
  Mar  7 23:04:10.253: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7166 delete --grace-period=0 --force -f -'
  Mar  7 23:04:10.318: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Mar  7 23:04:10.318: INFO: stdout: "pod \"pause\" force deleted\n"
  Mar  7 23:04:10.318: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7166 get rc,svc -l name=pause --no-headers'
  Mar  7 23:04:10.366: INFO: stderr: "No resources found in kubectl-7166 namespace.\n"
  Mar  7 23:04:10.366: INFO: stdout: ""
  Mar  7 23:04:10.366: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7166 get pods -l name=pause -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Mar  7 23:04:10.409: INFO: stderr: ""
  Mar  7 23:04:10.409: INFO: stdout: ""
  Mar  7 23:04:10.409: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-7166" for this suite. @ 03/07/24 23:04:10.413
• [2.599 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/ephemeral_containers.go:51
  STEP: Creating a kubernetes client @ 03/07/24 23:04:10.425
  Mar  7 23:04:10.425: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename ephemeral-containers-test @ 03/07/24 23:04:10.426
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:04:10.45
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:04:10.453
  STEP: creating a target pod @ 03/07/24 23:04:10.455
  STEP: adding an ephemeral container @ 03/07/24 23:04:12.5
  STEP: checking pod container endpoints @ 03/07/24 23:04:16.529
  Mar  7 23:04:16.529: INFO: ExecWithOptions {Command:[/bin/echo marco] Namespace:ephemeral-containers-test-3637 PodName:ephemeral-containers-target-pod ContainerName:debugger Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 23:04:16.529: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 23:04:16.530: INFO: ExecWithOptions: Clientset creation
  Mar  7 23:04:16.530: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/ephemeral-containers-test-3637/pods/ephemeral-containers-target-pod/exec?command=%2Fbin%2Fecho&command=marco&container=debugger&container=debugger&stderr=true&stdout=true)
  Mar  7 23:04:16.570: INFO: Exec stderr: ""
  Mar  7 23:04:16.574: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ephemeral-containers-test-3637" for this suite. @ 03/07/24 23:04:16.577
• [6.161 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:376
  STEP: Creating a kubernetes client @ 03/07/24 23:04:16.587
  Mar  7 23:04:16.587: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 23:04:16.587
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:04:16.603
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:04:16.605
  STEP: Creating configMap with name projected-configmap-test-volume-8f91eb20-a529-44e3-aea9-8439e16858be @ 03/07/24 23:04:16.606
  STEP: Creating a pod to test consume configMaps @ 03/07/24 23:04:16.612
  STEP: Saw pod success @ 03/07/24 23:04:20.645
  Mar  7 23:04:20.654: INFO: Trying to get logs from node whiskas-1 pod pod-projected-configmaps-46bd5a2a-04ef-4ca1-ae3a-01822f9a0f7b container projected-configmap-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 23:04:20.67
  Mar  7 23:04:20.731: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3853" for this suite. @ 03/07/24 23:04:20.741
• [4.171 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/watch.go:191
  STEP: Creating a kubernetes client @ 03/07/24 23:04:20.758
  Mar  7 23:04:20.758: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename watch @ 03/07/24 23:04:20.759
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:04:20.78
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:04:20.782
  STEP: creating a watch on configmaps @ 03/07/24 23:04:20.785
  STEP: creating a new configmap @ 03/07/24 23:04:20.787
  STEP: modifying the configmap once @ 03/07/24 23:04:20.794
  STEP: closing the watch once it receives two notifications @ 03/07/24 23:04:20.804
  Mar  7 23:04:20.804: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-5260  a249e190-5dc3-4bcf-adc8-77e964a8bd22 114090 0 2024-03-07 23:04:20 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-03-07 23:04:20 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 23:04:20.804: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-5260  a249e190-5dc3-4bcf-adc8-77e964a8bd22 114091 0 2024-03-07 23:04:20 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-03-07 23:04:20 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying the configmap a second time, while the watch is closed @ 03/07/24 23:04:20.804
  STEP: creating a new watch on configmaps from the last resource version observed by the first watch @ 03/07/24 23:04:20.816
  STEP: deleting the configmap @ 03/07/24 23:04:20.818
  STEP: Expecting to observe notifications for all changes to the configmap since the first watch closed @ 03/07/24 23:04:20.826
  Mar  7 23:04:20.826: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-5260  a249e190-5dc3-4bcf-adc8-77e964a8bd22 114092 0 2024-03-07 23:04:20 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-03-07 23:04:20 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 23:04:20.826: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-5260  a249e190-5dc3-4bcf-adc8-77e964a8bd22 114093 0 2024-03-07 23:04:20 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-03-07 23:04:20 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 23:04:20.827: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-5260" for this suite. @ 03/07/24 23:04:20.831
• [0.081 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Servers with support for API chunking should support continue listing from the last key if the original version has been compacted away, though the list is inconsistent [Slow] [Conformance] [sig-api-machinery, Slow, Conformance]
test/e2e/apimachinery/chunking.go:144
  STEP: Creating a kubernetes client @ 03/07/24 23:04:20.839
  Mar  7 23:04:20.839: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename chunking @ 03/07/24 23:04:20.84
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:04:20.861
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:04:20.864
  STEP: creating a large number of resources @ 03/07/24 23:04:20.867
  STEP: retrieving the first page @ 03/07/24 23:04:38.55
  Mar  7 23:04:38.597: INFO: Retrieved 40/40 results with rv 114547 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ
  STEP: retrieving the second page until the token expires @ 03/07/24 23:04:38.597
  Mar  7 23:04:58.604: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:05:18.611: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:05:38.606: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:05:58.622: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:06:18.604: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:06:38.603: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:06:58.607: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:07:18.608: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:07:38.612: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:07:58.606: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:08:18.610: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:08:38.605: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:08:58.606: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:09:18.610: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:09:38.603: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:09:58.605: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:10:18.605: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:10:38.609: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:10:58.611: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:11:18.605: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:11:38.606: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:11:58.606: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:12:18.607: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:12:38.605: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:12:58.605: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:13:18.609: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:13:38.605: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE0NTQ3LCJzdGFydCI6InRlbXBsYXRlLTAwMzlcdTAwMDAifQ has not expired yet
  Mar  7 23:13:58.603: INFO: got error The provided continue parameter is too old to display a consistent list result. You can start a new list without the continue parameter, or use the continue token in this response to retrieve the remainder of the results. Continuing with the provided token results in an inconsistent list - objects that were created, modified, or deleted between the time the first chunk was returned and now may show up in the list.
  Mar  7 23:13:58.603: INFO: Retrieved inconsistent continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6LTEsInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9
  STEP: retrieving the second page again with the token received with the error message @ 03/07/24 23:13:58.603
  STEP: retrieving all remaining pages @ 03/07/24 23:13:58.608
  Mar  7 23:13:58.613: INFO: Retrieved 40/40 results with rv 115331 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE1MzMxLCJzdGFydCI6InRlbXBsYXRlLTAxMTlcdTAwMDAifQ
  Mar  7 23:13:58.618: INFO: Retrieved 40/40 results with rv 115331 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE1MzMxLCJzdGFydCI6InRlbXBsYXRlLTAxNTlcdTAwMDAifQ
  Mar  7 23:13:58.622: INFO: Retrieved 40/40 results with rv 115331 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE1MzMxLCJzdGFydCI6InRlbXBsYXRlLTAxOTlcdTAwMDAifQ
  Mar  7 23:13:58.626: INFO: Retrieved 40/40 results with rv 115331 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE1MzMxLCJzdGFydCI6InRlbXBsYXRlLTAyMzlcdTAwMDAifQ
  Mar  7 23:13:58.630: INFO: Retrieved 40/40 results with rv 115331 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE1MzMxLCJzdGFydCI6InRlbXBsYXRlLTAyNzlcdTAwMDAifQ
  Mar  7 23:13:58.634: INFO: Retrieved 40/40 results with rv 115331 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE1MzMxLCJzdGFydCI6InRlbXBsYXRlLTAzMTlcdTAwMDAifQ
  Mar  7 23:13:58.637: INFO: Retrieved 40/40 results with rv 115331 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTE1MzMxLCJzdGFydCI6InRlbXBsYXRlLTAzNTlcdTAwMDAifQ
  Mar  7 23:13:58.640: INFO: Retrieved 40/40 results with rv 115331 and continue 
  Mar  7 23:13:58.640: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "chunking-4576" for this suite. @ 03/07/24 23:13:58.643
• [577.813 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance] [sig-node, Conformance]
test/e2e/common/node/pods.go:897
  STEP: Creating a kubernetes client @ 03/07/24 23:13:58.652
  Mar  7 23:13:58.652: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pods @ 03/07/24 23:13:58.653
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:13:58.674
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:13:58.676
  STEP: creating a Pod with a static label @ 03/07/24 23:13:58.681
  STEP: watching for Pod to be ready @ 03/07/24 23:13:58.693
  Mar  7 23:13:58.694: INFO: observed Pod pod-test in namespace pods-1694 in phase Pending with labels: map[test-pod-static:true] & conditions []
  Mar  7 23:13:58.697: INFO: observed Pod pod-test in namespace pods-1694 in phase Pending with labels: map[test-pod-static:true] & conditions [{PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:13:58 +0000 UTC  }]
  Mar  7 23:13:58.706: INFO: observed Pod pod-test in namespace pods-1694 in phase Pending with labels: map[test-pod-static:true] & conditions [{PodReadyToStartContainers False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:13:58 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:13:58 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:13:58 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:13:58 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:13:58 +0000 UTC  }]
  Mar  7 23:13:59.181: INFO: observed Pod pod-test in namespace pods-1694 in phase Pending with labels: map[test-pod-static:true] & conditions [{PodReadyToStartContainers False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:13:58 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:13:58 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:13:58 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:13:58 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:13:58 +0000 UTC  }]
  Mar  7 23:14:00.101: INFO: Found Pod pod-test in namespace pods-1694 in phase Running with labels: map[test-pod-static:true] & conditions [{PodReadyToStartContainers True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:14:00 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:13:58 +0000 UTC  } {Ready True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:14:00 +0000 UTC  } {ContainersReady True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:14:00 +0000 UTC  } {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-03-07 23:13:58 +0000 UTC  }]
  STEP: patching the Pod with a new Label and updated data @ 03/07/24 23:14:00.114
  STEP: getting the Pod and ensuring that it's patched @ 03/07/24 23:14:00.134
  STEP: replacing the Pod's status Ready condition to False @ 03/07/24 23:14:00.138
  STEP: check the Pod again to ensure its Ready conditions are False @ 03/07/24 23:14:00.155
  STEP: deleting the Pod via a Collection with a LabelSelector @ 03/07/24 23:14:00.155
  STEP: watching for the Pod to be deleted @ 03/07/24 23:14:00.167
  Mar  7 23:14:00.168: INFO: observed event type MODIFIED
  Mar  7 23:14:02.089: INFO: observed event type MODIFIED
  Mar  7 23:14:02.218: INFO: observed event type MODIFIED
  Mar  7 23:14:02.337: INFO: observed event type MODIFIED
  Mar  7 23:14:03.110: INFO: observed event type MODIFIED
  Mar  7 23:14:03.133: INFO: observed event type MODIFIED
  Mar  7 23:14:03.145: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-1694" for this suite. @ 03/07/24 23:14:03.149
• [4.506 seconds]
------------------------------
SSS
------------------------------
[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1053
  STEP: Creating a kubernetes client @ 03/07/24 23:14:03.158
  Mar  7 23:14:03.158: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 23:14:03.159
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:14:03.181
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:14:03.185
  STEP: create deployment with httpd image @ 03/07/24 23:14:03.188
  Mar  7 23:14:03.188: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5492 create -f -'
  Mar  7 23:14:03.275: INFO: stderr: ""
  Mar  7 23:14:03.275: INFO: stdout: "deployment.apps/httpd-deployment created\n"
  STEP: verify diff finds difference between live and declared image @ 03/07/24 23:14:03.275
  Mar  7 23:14:03.275: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5492 diff -f -'
  Mar  7 23:14:07.676: INFO: rc: 1
  Mar  7 23:14:07.676: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5492 delete -f -'
  Mar  7 23:14:07.722: INFO: stderr: ""
  Mar  7 23:14:07.722: INFO: stdout: "deployment.apps \"httpd-deployment\" deleted\n"
  Mar  7 23:14:07.722: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-5492" for this suite. @ 03/07/24 23:14:07.725
• [4.577 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance] [sig-instrumentation, Conformance]
test/e2e/instrumentation/events.go:98
  STEP: Creating a kubernetes client @ 03/07/24 23:14:07.735
  Mar  7 23:14:07.735: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename events @ 03/07/24 23:14:07.736
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:14:07.778
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:14:07.781
  STEP: creating a test event @ 03/07/24 23:14:07.783
  STEP: listing events in all namespaces @ 03/07/24 23:14:07.79
  STEP: listing events in test namespace @ 03/07/24 23:14:07.793
  STEP: listing events with field selection filtering on source @ 03/07/24 23:14:07.795
  STEP: listing events with field selection filtering on reportingController @ 03/07/24 23:14:07.798
  STEP: getting the test event @ 03/07/24 23:14:07.8
  STEP: patching the test event @ 03/07/24 23:14:07.803
  STEP: getting the test event @ 03/07/24 23:14:07.813
  STEP: updating the test event @ 03/07/24 23:14:07.817
  STEP: getting the test event @ 03/07/24 23:14:07.829
  STEP: deleting the test event @ 03/07/24 23:14:07.831
  STEP: listing events in all namespaces @ 03/07/24 23:14:07.838
  STEP: listing events in test namespace @ 03/07/24 23:14:07.84
  Mar  7 23:14:07.843: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-425" for this suite. @ 03/07/24 23:14:07.845
• [0.121 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment deployment should support proportional scaling [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:160
  STEP: Creating a kubernetes client @ 03/07/24 23:14:07.858
  Mar  7 23:14:07.858: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename deployment @ 03/07/24 23:14:07.859
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:14:07.893
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:14:07.896
  Mar  7 23:14:07.898: INFO: Creating deployment "webserver-deployment"
  Mar  7 23:14:07.906: INFO: Waiting for observed generation 1
  Mar  7 23:14:09.919: INFO: Waiting for all required pods to come up
  Mar  7 23:14:09.933: INFO: Pod name httpd: Found 10 pods out of 10
  STEP: ensuring each pod is running @ 03/07/24 23:14:09.934
  Mar  7 23:14:11.957: INFO: Waiting for deployment "webserver-deployment" to complete
  Mar  7 23:14:11.960: INFO: Updating deployment "webserver-deployment" with a non-existent image
  Mar  7 23:14:11.979: INFO: Updating deployment webserver-deployment
  Mar  7 23:14:11.979: INFO: Waiting for observed generation 2
  Mar  7 23:14:14.003: INFO: Waiting for the first rollout's replicaset to have .status.availableReplicas = 8
  Mar  7 23:14:14.012: INFO: Waiting for the first rollout's replicaset to have .spec.replicas = 8
  Mar  7 23:14:14.030: INFO: Waiting for the first rollout's replicaset of deployment "webserver-deployment" to have desired number of replicas
  Mar  7 23:14:14.052: INFO: Verifying that the second rollout's replicaset has .status.availableReplicas = 0
  Mar  7 23:14:14.052: INFO: Waiting for the second rollout's replicaset to have .spec.replicas = 5
  Mar  7 23:14:14.057: INFO: Waiting for the second rollout's replicaset of deployment "webserver-deployment" to have desired number of replicas
  Mar  7 23:14:14.067: INFO: Verifying that deployment "webserver-deployment" has minimum required number of available replicas
  Mar  7 23:14:14.067: INFO: Scaling up the deployment "webserver-deployment" from 10 to 30
  Mar  7 23:14:14.085: INFO: Updating deployment webserver-deployment
  Mar  7 23:14:14.085: INFO: Waiting for the replicasets of deployment "webserver-deployment" to have desired number of replicas
  Mar  7 23:14:14.092: INFO: Verifying that first rollout's replicaset has .spec.replicas = 20
  Mar  7 23:14:14.095: INFO: Verifying that second rollout's replicaset has .spec.replicas = 13
  Mar  7 23:14:16.105: INFO: Deployment "webserver-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=20) "webserver-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3babd030-8132-461e-a0b2-6e3ea0f186aa",
      ResourceVersion: (string) (len=6) "116191",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450047,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=635) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 68  74 74 70 64 5c 22 7d 22  |me\":\"httpd\"}"|
              00000160  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000170  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000180  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000190  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              000001a0  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              000001b0  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              000001c0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001d0  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000001e0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000001f0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              00000200  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              00000210  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              00000220  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              00000230  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000270  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=541) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 6e 61  |licas":{},"f:una|
              000001f0  76 61 69 6c 61 62 6c 65  52 65 70 6c 69 63 61 73  |vailableReplicas|
              00000200  22 3a 7b 7d 2c 22 66 3a  75 70 64 61 74 65 64 52  |":{},"f:updatedR|
              00000210  65 70 6c 69 63 61 73 22  3a 7b 7d 7d 7d           |eplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(30),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=13) "webserver:404",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 2,
            StrVal: (string) ""
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 3,
            StrVal: (string) ""
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 3,
      Replicas: (int32) 33,
      UpdatedReplicas: (int32) 13,
      ReadyReplicas: (int32) 8,
      AvailableReplicas: (int32) 8,
      UnavailableReplicas: (int32) 25,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=26) "MinimumReplicasUnavailable",
          Message: (string) (len=46) "Deployment does not have minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450047,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=17) "ReplicaSetUpdated",
          Message: (string) (len=59) "ReplicaSet \"webserver-deployment-9b4f5bf69\" is progressing."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Mar  7 23:14:16.108: INFO: New ReplicaSet "webserver-deployment-9b4f5bf69" of Deployment "webserver-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "f5c7d30d-9ecc-4ec9-9412-0930d6651e45",
      ResourceVersion: (string) (len=6) "116183",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450051,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=2) "30",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=2) "33",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=20) "webserver-deployment",
          UID: (types.UID) (len=36) "3babd030-8132-461e-a0b2-6e3ea0f186aa",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 33 62 61 62 64 30  33 30 2d 38 31 33 32 2d  |\"3babd030-8132-|
              00000120  34 36 31 65 2d 61 30 62  32 2d 36 65 33 65 61 30  |461e-a0b2-6e3ea0|
              00000130  66 31 38 36 61 61 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |f186aa\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=84) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  66 75 6c 6c 79 4c 61 62  65 6c 65 64 52 65 70 6c  |fullyLabeledRepl|
              00000020  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |icas":{},"f:obse|
              00000030  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              00000040  7b 7d 2c 22 66 3a 72 65  70 6c 69 63 61 73 22 3a  |{},"f:replicas":|
              00000050  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(13),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=13) "webserver:404",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 13,
      FullyLabeledReplicas: (int32) 13,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Mar  7 23:14:16.109: INFO: All old ReplicaSets of Deployment "webserver-deployment":
  Mar  7 23:14:16.109: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "webserver-deployment-557759b7c7",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
      ResourceVersion: (string) (len=6) "116178",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450047,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=2) "30",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=2) "33"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=20) "webserver-deployment",
          UID: (types.UID) (len=36) "3babd030-8132-461e-a0b2-6e3ea0f186aa",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 33 62 61 62 64 30  33 30 2d 38 31 33 32 2d  |\"3babd030-8132-|
              00000120  34 36 31 65 2d 61 30 62  32 2d 36 65 33 65 61 30  |461e-a0b2-6e3ea0|
              00000130  66 31 38 36 61 61 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |f186aa\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(20),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 20,
      FullyLabeledReplicas: (int32) 20,
      ReadyReplicas: (int32) 8,
      AvailableReplicas: (int32) 8,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Mar  7 23:14:16.125: INFO: Pod "webserver-deployment-557759b7c7-2kc7f" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-2kc7f",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "dc58b754-08e7-4462-8695-aa00ead27171",
      ResourceVersion: (string) (len=6) "116307",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "1d97f9f287dfd4c676d2e0f1c8346d126210507c6963206ef45dab3cd7293531",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.51.109/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.51.109/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-mjgvf",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-mjgvf",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.126: INFO: Pod "webserver-deployment-557759b7c7-4g27z" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-4g27z",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "4929a833-226f-48b1-a580-b5f7c7d30279",
      ResourceVersion: (string) (len=6) "116310",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "6b8c139b17e1d2d1994744a8f590f6b91dffa9a01e498442fdfb80961d6597e1",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.193/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.193/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-hn92v",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-hn92v",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.127: INFO: Pod "webserver-deployment-557759b7c7-76pzn" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-76pzn",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "bccbf4dd-bb35-4cc2-bb5e-5fe08ad1d54f",
      ResourceVersion: (string) (len=6) "115937",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450047,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "1fa23f71152e283ccf598b39e0c7b375d6d2e219f7bb2101d7c03d68f713f0fb",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.246/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.246/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450047,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 36 30 2e 32 34  36 5c 22 7d 22 3a 7b 22  |.1.60.246\"}":{"|
              00000270  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              00000280  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              00000290  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-qs9nx",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-qs9nx",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450047,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) (len=11) "10.1.60.246",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.60.246"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450048,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845450048,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://ae1a7cb7edd9f20051b6f422e9bbc5b26c3ee50eefea9907023cf2e6aed8e82e",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.131: INFO: Pod "webserver-deployment-557759b7c7-9kfq7" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-9kfq7",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "204f04d2-b5f3-484a-8744-8465d8c2d655",
      ResourceVersion: (string) (len=6) "115939",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450047,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "0a0ac8fdb115fc59f58614d70a61b5d5ff987736b786dda3a2076eb472982bea",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.51.126/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.51.126/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450047,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 35 31 2e 31 32  36 5c 22 7d 22 3a 7b 22  |.1.51.126\"}":{"|
              00000270  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              00000280  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              00000290  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-qdx8x",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-qdx8x",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) (len=11) "10.1.51.126",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.51.126"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450048,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845450048,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://f5f20f8501729675767ad69b0c90acbea313c5d1b5d6adbc05a1f29fe246cf19",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.131: INFO: Pod "webserver-deployment-557759b7c7-dldqj" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-dldqj",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "b9b3e5b1-8f62-42f5-8714-b2c230141cf5",
      ResourceVersion: (string) (len=6) "115973",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450048,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "df6287ae78d8c00c4b11cc2eb285de126e5e3aa65dea651861e63bc18c9069bd",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.232/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.232/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450050,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 36 30 2e 32 33  32 5c 22 7d 22 3a 7b 22  |.1.60.232\"}":{"|
              00000270  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              00000280  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              00000290  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-294jd",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-294jd",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450050,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450050,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450050,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) (len=11) "10.1.60.232",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.60.232"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450048,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845450049,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://4970ab76120923df9b7e10f7319dbfdc03f9e0e712d74551c179ba9205deb3b3",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.133: INFO: Pod "webserver-deployment-557759b7c7-dvsdc" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-dvsdc",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "fa7acaeb-3fa2-4b12-9b36-41f78c01dae0",
      ResourceVersion: (string) (len=6) "116298",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "9cba20527483a3df4e2e4acc910ef38d0129ba3acccd6b42a19bc11f8d3efd26",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.243/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.243/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-v7b24",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-v7b24",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.134: INFO: Pod "webserver-deployment-557759b7c7-fd7bm" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-fd7bm",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "93979bc8-8ed0-4e95-beba-24b46dda0a48",
      ResourceVersion: (string) (len=6) "116233",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.51.112/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.51.112/32",
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "02b96c2391fd84446d8fa5beef9fb3680df4f3be34537cd9f21ec3e71e734057"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-849qz",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-849qz",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.135: INFO: Pod "webserver-deployment-557759b7c7-gdh8h" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-gdh8h",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "491f0e10-54fd-4506-b2ce-b8060eca0d0c",
      ResourceVersion: (string) (len=6) "115946",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450047,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "e633e6f56406724f2837c4fd369a8e15af5290c7beae500b9486ec9613c36a89",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.51.127/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.51.127/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450047,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 35 31 2e 31 32  37 5c 22 7d 22 3a 7b 22  |.1.51.127\"}":{"|
              00000270  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              00000280  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              00000290  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-7ghfc",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-7ghfc",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450047,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450047,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) (len=11) "10.1.51.127",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.51.127"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450047,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845450049,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://c6175f7eaa1e98e2ed3dc76730c9ba5a942900d9f7daa530076f426d54bc98c4",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.137: INFO: Pod "webserver-deployment-557759b7c7-jx744" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-jx744",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "17484aa5-8b0d-4225-8276-83c32eac12a9",
      ResourceVersion: (string) (len=6) "116221",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "a0e3f30830f7ab3852caf37f87358a31ae3ca0507ed22447530f7cc539700c81",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.51.106/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.51.106/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-qx5sb",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-qx5sb",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.138: INFO: Pod "webserver-deployment-557759b7c7-jxk7q" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-jxk7q",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "25f3d61f-9f9e-48df-9703-c40c16898c59",
      ResourceVersion: (string) (len=6) "116254",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "f2620e542519a2b28128770979dddbcd3339a9a88ccb10dc6d327a2ae022ca17",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=13) "10.1.51.87/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=13) "10.1.51.87/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-l64tw",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-l64tw",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.141: INFO: Pod "webserver-deployment-557759b7c7-kcn46" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-kcn46",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "5d905028-3064-4bc6-b46f-347bfaf91c87",
      ResourceVersion: (string) (len=6) "116316",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "7f80da32e190f2ef571182d9b65fd7001f88b1f71e18905ac59e7a4c6a6e7c34",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=13) "10.1.51.74/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=13) "10.1.51.74/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-dp2df",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-dp2df",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.143: INFO: Pod "webserver-deployment-557759b7c7-llgdc" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-llgdc",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "4166daa6-866a-44dd-8234-f33271e0ea0d",
      ResourceVersion: (string) (len=6) "116271",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "3fb133627350583e1c370ba02a51e35c7b2367b179fe1cbd1054eaeac49594bc",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.223/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.223/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-rtjmz",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-rtjmz",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.146: INFO: Pod "webserver-deployment-557759b7c7-lwz6l" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-lwz6l",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "1d5a85fd-20f9-44d3-a280-6ebdaba57edf",
      ResourceVersion: (string) (len=6) "115970",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450048,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "a24390d9e60a79e73557719cb97382ac83aba317a604ef35805e541427d834aa",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.222/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.222/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450050,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 36 30 2e 32 32  32 5c 22 7d 22 3a 7b 22  |.1.60.222\"}":{"|
              00000270  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              00000280  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              00000290  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-5b4fz",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-5b4fz",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450050,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450050,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450050,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) (len=11) "10.1.60.222",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.60.222"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450048,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845450049,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://be00e1d79d3c7f3200af777c87a7cc46a73f79808680aa6ec2033fa6adf94793",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.149: INFO: Pod "webserver-deployment-557759b7c7-m56mg" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-m56mg",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e53f9d0c-a563-4928-944b-018f08a9de86",
      ResourceVersion: (string) (len=6) "116231",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "83aa0e4ea320936acac9d25b395a14ba3125d0fb7b691f9d9182cacaae4b5aa1",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.210/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.210/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-8tb6b",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-8tb6b",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.163: INFO: Pod "webserver-deployment-557759b7c7-m922c" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-m922c",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6adbec63-9e1f-4962-85b2-ecfe8e162fdc",
      ResourceVersion: (string) (len=6) "116250",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.195/32",
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "227e8ef236c055f9e4072d7d95bad17ca76e9dd620647be1ecf4c642a1feab20",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.195/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-v72vn",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-v72vn",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.164: INFO: Pod "webserver-deployment-557759b7c7-mp4pv" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-mp4pv",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "382a62dd-2499-4e1f-bde9-6423dcdbfd1e",
      ResourceVersion: (string) (len=6) "116243",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "ff48adbe4808c398017ba0b4356ee3f2ab30e2d2a328cde4c6fc29d3d6d86877",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.51.119/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.51.119/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-djd9w",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-djd9w",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.167: INFO: Pod "webserver-deployment-557759b7c7-qbllw" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-qbllw",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "c06ef104-b51f-4bbe-8348-8e029a69d795",
      ResourceVersion: (string) (len=6) "116324",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "81c47c1d1ce647ea14842e207b16c0e0803887a8ee73d2b8bb8879833b269193",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=13) "10.1.51.98/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=13) "10.1.51.98/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450056,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-6hdp5",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-6hdp5",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.168: INFO: Pod "webserver-deployment-557759b7c7-qdd9t" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-qdd9t",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "c1e77d82-ee78-474f-a0a4-3a81fd772ffe",
      ResourceVersion: (string) (len=6) "115944",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450047,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "dc966cbf08d9d0377f1eae5a985c002db3c37891bb39fb3db6f95867c69a653f",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.231/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.231/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450047,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 36 30 2e 32 33  31 5c 22 7d 22 3a 7b 22  |.1.60.231\"}":{"|
              00000270  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              00000280  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              00000290  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-wn56w",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-wn56w",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450047,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) (len=11) "10.1.60.231",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.60.231"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450048,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845450049,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://8b70db4b9401c3b958525609f6ea3998bcf8e4baa7106de548fd97212eb61a26",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.169: INFO: Pod "webserver-deployment-557759b7c7-s77bp" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-s77bp",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "07bdcaa8-2fb8-4a33-bcb9-2eb133050932",
      ResourceVersion: (string) (len=6) "115972",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450047,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.51.111/32",
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "046fbac31bfaffb11c073670cec545fca381ad21c35063343034304ed27f835e",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.51.111/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450047,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450050,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 35 31 2e 31 31  31 5c 22 7d 22 3a 7b 22  |.1.51.111\"}":{"|
              00000270  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              00000280  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              00000290  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-4wmsc",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-4wmsc",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450050,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450047,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450050,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450050,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450047,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) (len=11) "10.1.51.111",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.51.111"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450047,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845450049,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://33384642d9e5e2fda56e2dfa89da413cda39e6a81aa6b7c48151c8566c0a8265",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.170: INFO: Pod "webserver-deployment-557759b7c7-wdtdr" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-wdtdr",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "914770f4-9211-4874-9e49-affa4d9c1514",
      ResourceVersion: (string) (len=6) "115950",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450047,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "7eeb526905c477bc23bd0fd1f45734c339c85d1f4b470cd8557f52932967d239",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.247/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.247/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "1b9870da-e0af-493b-8174-17cb7796ac18",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450047,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 31 62  39 38 37 30 64 61 2d 65  |d\":\"1b9870da-e|
              00000090  30 61 66 2d 34 39 33 62  2d 38 31 37 34 2d 31 37  |0af-493b-8174-17|
              000000a0  63 62 37 37 39 36 61 63  31 38 5c 22 7d 22 3a 7b  |cb7796ac18\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450048,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 36 30 2e 32 34  37 5c 22 7d 22 3a 7b 22  |.1.60.247\"}":{"|
              00000270  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              00000280  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              00000290  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-9d7wf",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-9d7wf",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450047,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450049,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450047,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) (len=11) "10.1.60.247",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.60.247"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450047,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845450048,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://384b4d45dc0d20df816e2352edbf2c43e1f20168df6522968a749bae49379534",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.172: INFO: Pod "webserver-deployment-9b4f5bf69-29gt8" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-29gt8",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7bfe8a00-e372-456f-bbfa-89007a43078d",
      ResourceVersion: (string) (len=6) "116275",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "9b25f9f318b840486af04cdbe57616a163a1417a12a75a9cbe416daf9dece01f",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.51.101/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.51.101/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "f5c7d30d-9ecc-4ec9-9412-0930d6651e45",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 35  63 37 64 33 30 64 2d 39  |d\":\"f5c7d30d-9|
              00000090  65 63 63 2d 34 65 63 39  2d 39 34 31 32 2d 30 39  |ecc-4ec9-9412-09|
              000000a0  33 30 64 36 36 35 31 65  34 35 5c 22 7d 22 3a 7b  |30d6651e45\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-fsz7x",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-fsz7x",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.174: INFO: Pod "webserver-deployment-9b4f5bf69-5lfdc" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-5lfdc",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "70b6931f-4929-4c81-9d66-411d7748b848",
      ResourceVersion: (string) (len=6) "116117",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450052,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "cd4b9e880eb9d7e18dc08f80d6ee4b5f42d766b5dfa287e1761bcb3bf41cfe39",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.240/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.240/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "f5c7d30d-9ecc-4ec9-9412-0930d6651e45",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 35  63 37 64 33 30 64 2d 39  |d\":\"f5c7d30d-9|
              00000090  65 63 63 2d 34 65 63 39  2d 39 34 31 32 2d 30 39  |ecc-4ec9-9412-09|
              000000a0  33 30 64 36 36 35 31 65  34 35 5c 22 7d 22 3a 7b  |30d6651e45\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=705) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 70 6f 64 49 50 22 3a  7b 7d 2c 22 66 3a 70 6f  |:podIP":{},"f:po|
              00000270  64 49 50 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |dIPs":{".":{},"k|
              00000280  3a 7b 5c 22 69 70 5c 22  3a 5c 22 31 30 2e 31 2e  |:{\"ip\":\"10.1.|
              00000290  36 30 2e 32 34 30 5c 22  7d 22 3a 7b 22 2e 22 3a  |60.240\"}":{".":|
              000002a0  7b 7d 2c 22 66 3a 69 70  22 3a 7b 7d 7d 7d 2c 22  |{},"f:ip":{}}},"|
              000002b0  66 3a 73 74 61 72 74 54  69 6d 65 22 3a 7b 7d 7d  |f:startTime":{}}|
              000002c0  7d                                                |}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-pnmwj",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-pnmwj",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) (len=11) "10.1.60.240",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.60.240"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450052,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.174: INFO: Pod "webserver-deployment-9b4f5bf69-65hsv" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-65hsv",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "1c28bbb6-b2e2-4a52-974e-2be110f5713b",
      ResourceVersion: (string) (len=6) "116100",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450052,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.255/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.255/32",
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "9f9c24d127cdc1e05db32ab34fe3dd4087fb168222da4cf812ebce2e5c4a9455"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "f5c7d30d-9ecc-4ec9-9412-0930d6651e45",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 35  63 37 64 33 30 64 2d 39  |d\":\"f5c7d30d-9|
              00000090  65 63 63 2d 34 65 63 39  2d 39 34 31 32 2d 30 39  |ecc-4ec9-9412-09|
              000000a0  33 30 64 36 36 35 31 65  34 35 5c 22 7d 22 3a 7b  |30d6651e45\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=705) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 70 6f 64 49 50 22 3a  7b 7d 2c 22 66 3a 70 6f  |:podIP":{},"f:po|
              00000270  64 49 50 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |dIPs":{".":{},"k|
              00000280  3a 7b 5c 22 69 70 5c 22  3a 5c 22 31 30 2e 31 2e  |:{\"ip\":\"10.1.|
              00000290  36 30 2e 32 35 35 5c 22  7d 22 3a 7b 22 2e 22 3a  |60.255\"}":{".":|
              000002a0  7b 7d 2c 22 66 3a 69 70  22 3a 7b 7d 7d 7d 2c 22  |{},"f:ip":{}}},"|
              000002b0  66 3a 73 74 61 72 74 54  69 6d 65 22 3a 7b 7d 7d  |f:startTime":{}}|
              000002c0  7d                                                |}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-7hw2r",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-7hw2r",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) (len=11) "10.1.60.255",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.60.255"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450052,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.175: INFO: Pod "webserver-deployment-9b4f5bf69-8z4nm" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-8z4nm",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "1ea040f6-d0e1-490b-a331-ea7ea053c834",
      ResourceVersion: (string) (len=6) "116267",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "48b74a8e4aa1ac27713603787acefc331f206c1a44ce1a4dcf7cf6c07cf70939",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.51.124/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.51.124/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "f5c7d30d-9ecc-4ec9-9412-0930d6651e45",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 35  63 37 64 33 30 64 2d 39  |d\":\"f5c7d30d-9|
              00000090  65 63 63 2d 34 65 63 39  2d 39 34 31 32 2d 30 39  |ecc-4ec9-9412-09|
              000000a0  33 30 64 36 36 35 31 65  34 35 5c 22 7d 22 3a 7b  |30d6651e45\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-zdcc4",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-zdcc4",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.184: INFO: Pod "webserver-deployment-9b4f5bf69-8zwgg" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-8zwgg",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e3bd809c-ab6a-415e-a387-792b9226bc44",
      ResourceVersion: (string) (len=6) "116286",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "724559d716c4bd6d943c8599afc067a46a4fbe55d900f2f5b61a0a049c706dea",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.230/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.230/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "f5c7d30d-9ecc-4ec9-9412-0930d6651e45",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 35  63 37 64 33 30 64 2d 39  |d\":\"f5c7d30d-9|
              00000090  65 63 63 2d 34 65 63 39  2d 39 34 31 32 2d 30 39  |ecc-4ec9-9412-09|
              000000a0  33 30 64 36 36 35 31 65  34 35 5c 22 7d 22 3a 7b  |30d6651e45\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-pk8z5",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-pk8z5",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.185: INFO: Pod "webserver-deployment-9b4f5bf69-cnmct" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-cnmct",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "993a54ab-d495-4155-b523-200b5a8c9d63",
      ResourceVersion: (string) (len=6) "116239",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.201/32",
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "a833e431de7655aa7ca98eb917a7108babc7519998cd7f7e65390f596ada4136",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.201/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "f5c7d30d-9ecc-4ec9-9412-0930d6651e45",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 35  63 37 64 33 30 64 2d 39  |d\":\"f5c7d30d-9|
              00000090  65 63 63 2d 34 65 63 39  2d 39 34 31 32 2d 30 39  |ecc-4ec9-9412-09|
              000000a0  33 30 64 36 36 35 31 65  34 35 5c 22 7d 22 3a 7b  |30d6651e45\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-ftl68",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-ftl68",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.186: INFO: Pod "webserver-deployment-9b4f5bf69-dn6pk" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-dn6pk",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "bb17cb4e-d9c4-4a64-962f-2ffda223cbd1",
      ResourceVersion: (string) (len=6) "116292",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "48bb7ce7c8f1d1389e01fb837e267fb5c8a3d3f81540c7d952cd83f570861097",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.51.114/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.51.114/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "f5c7d30d-9ecc-4ec9-9412-0930d6651e45",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 35  63 37 64 33 30 64 2d 39  |d\":\"f5c7d30d-9|
              00000090  65 63 63 2d 34 65 63 39  2d 39 34 31 32 2d 30 39  |ecc-4ec9-9412-09|
              000000a0  33 30 64 36 36 35 31 65  34 35 5c 22 7d 22 3a 7b  |30d6651e45\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-8d2kq",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-8d2kq",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.187: INFO: Pod "webserver-deployment-9b4f5bf69-fpgqg" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-fpgqg",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "938c6527-3153-4da8-b228-d65f62a97327",
      ResourceVersion: (string) (len=6) "116190",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450052,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=13) "10.1.51.69/32",
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "83cc4144dd51c0c28e49a21c43c2522da674753f1b0e6c828c5ae0374c0ff372",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=13) "10.1.51.69/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "f5c7d30d-9ecc-4ec9-9412-0930d6651e45",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 35  63 37 64 33 30 64 2d 39  |d\":\"f5c7d30d-9|
              00000090  65 63 63 2d 34 65 63 39  2d 39 34 31 32 2d 30 39  |ecc-4ec9-9412-09|
              000000a0  33 30 64 36 36 35 31 65  34 35 5c 22 7d 22 3a 7b  |30d6651e45\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=704) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 70 6f 64 49 50 22 3a  7b 7d 2c 22 66 3a 70 6f  |:podIP":{},"f:po|
              00000270  64 49 50 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |dIPs":{".":{},"k|
              00000280  3a 7b 5c 22 69 70 5c 22  3a 5c 22 31 30 2e 31 2e  |:{\"ip\":\"10.1.|
              00000290  35 31 2e 36 39 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |51.69\"}":{".":{|
              000002a0  7d 2c 22 66 3a 69 70 22  3a 7b 7d 7d 7d 2c 22 66  |},"f:ip":{}}},"f|
              000002b0  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-mlt2x",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-mlt2x",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) (len=10) "10.1.51.69",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=10) "10.1.51.69"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450052,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.188: INFO: Pod "webserver-deployment-9b4f5bf69-l9v85" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-l9v85",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "23d28b47-cb08-4155-b3fc-fb0387998f77",
      ResourceVersion: (string) (len=6) "116219",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "aa7222aff024777c95f4ad024a98a8c8274bb22caf3ecfd9f8a06dec38f4bb90",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.220/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.220/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "f5c7d30d-9ecc-4ec9-9412-0930d6651e45",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 35  63 37 64 33 30 64 2d 39  |d\":\"f5c7d30d-9|
              00000090  65 63 63 2d 34 65 63 39  2d 39 34 31 32 2d 30 39  |ecc-4ec9-9412-09|
              000000a0  33 30 64 36 36 35 31 65  34 35 5c 22 7d 22 3a 7b  |30d6651e45\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-x6vrn",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-x6vrn",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.189: INFO: Pod "webserver-deployment-9b4f5bf69-qhfgh" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-qhfgh",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3bb4d147-e73f-45f8-92b2-7e3b8c8aa3f4",
      ResourceVersion: (string) (len=6) "116302",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "267edea341b8d91a0cd016ae0c0fe323e5f9a8229562f4cf3d4ef2a1252e3996",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=13) "10.1.51.90/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=13) "10.1.51.90/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "f5c7d30d-9ecc-4ec9-9412-0930d6651e45",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 35  63 37 64 33 30 64 2d 39  |d\":\"f5c7d30d-9|
              00000090  65 63 63 2d 34 65 63 39  2d 39 34 31 32 2d 30 39  |ecc-4ec9-9412-09|
              000000a0  33 30 64 36 36 35 31 65  34 35 5c 22 7d 22 3a 7b  |30d6651e45\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-rfq7n",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-rfq7n",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.192: INFO: Pod "webserver-deployment-9b4f5bf69-v68bs" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-v68bs",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "9f343a0b-e179-488b-825d-71176ec7a6ac",
      ResourceVersion: (string) (len=6) "116262",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.60.215/32",
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "20a8ff027e560703eaaf621baf1b8d670349f5fbac475e1ca473b422737b3de3",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.60.215/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "f5c7d30d-9ecc-4ec9-9412-0930d6651e45",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 35  63 37 64 33 30 64 2d 39  |d\":\"f5c7d30d-9|
              00000090  65 63 63 2d 34 65 63 39  2d 39 34 31 32 2d 30 39  |ecc-4ec9-9412-09|
              000000a0  33 30 64 36 36 35 31 65  34 35 5c 22 7d 22 3a 7b  |30d6651e45\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450055,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-fmvkc",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-fmvkc",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.100.138.2",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.100.138.2"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450054,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.193: INFO: Pod "webserver-deployment-9b4f5bf69-vjksj" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-vjksj",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "74f4bf49-c09d-43c2-92b1-cc37c332a5f0",
      ResourceVersion: (string) (len=6) "116197",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450052,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "d14ba28bc242f912ea8da4cfebbceff158a7723e95fbd34d834c3fdddb318747",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=13) "10.1.51.68/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=13) "10.1.51.68/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "f5c7d30d-9ecc-4ec9-9412-0930d6651e45",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 35  63 37 64 33 30 64 2d 39  |d\":\"f5c7d30d-9|
              00000090  65 63 63 2d 34 65 63 39  2d 39 34 31 32 2d 30 39  |ecc-4ec9-9412-09|
              000000a0  33 30 64 36 36 35 31 65  34 35 5c 22 7d 22 3a 7b  |30d6651e45\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=704) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 70 6f 64 49 50 22 3a  7b 7d 2c 22 66 3a 70 6f  |:podIP":{},"f:po|
              00000270  64 49 50 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |dIPs":{".":{},"k|
              00000280  3a 7b 5c 22 69 70 5c 22  3a 5c 22 31 30 2e 31 2e  |:{\"ip\":\"10.1.|
              00000290  35 31 2e 36 38 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |51.68\"}":{".":{|
              000002a0  7d 2c 22 66 3a 69 70 22  3a 7b 7d 7d 7d 2c 22 66  |},"f:ip":{}}},"f|
              000002b0  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-r259c",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-r259c",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) (len=10) "10.1.51.68",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=10) "10.1.51.68"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450052,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.194: INFO: Pod "webserver-deployment-9b4f5bf69-wmc4m" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-wmc4m",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-7545",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6f84df2a-ddea-4f4b-b1b3-287588752779",
      ResourceVersion: (string) (len=6) "116152",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450052,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "01f6db29224cd7c4c4616fae7d20b01ae3d86f8c3f0bb329cb719763889f678f",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=13) "10.1.51.70/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=13) "10.1.51.70/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "f5c7d30d-9ecc-4ec9-9412-0930d6651e45",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 35  63 37 64 33 30 64 2d 39  |d\":\"f5c7d30d-9|
              00000090  65 63 63 2d 34 65 63 39  2d 39 34 31 32 2d 30 39  |ecc-4ec9-9412-09|
              000000a0  33 30 64 36 36 35 31 65  34 35 5c 22 7d 22 3a 7b  |30d6651e45\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=704) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 70 6f 64 49 50 22 3a  7b 7d 2c 22 66 3a 70 6f  |:podIP":{},"f:po|
              00000270  64 49 50 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |dIPs":{".":{},"k|
              00000280  3a 7b 5c 22 69 70 5c 22  3a 5c 22 31 30 2e 31 2e  |:{\"ip\":\"10.1.|
              00000290  35 31 2e 37 30 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |51.70\"}":{".":{|
              000002a0  7d 2c 22 66 3a 69 70 22  3a 7b 7d 7d 7d 2c 22 66  |},"f:ip":{}}},"f|
              000002b0  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-src5w",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-src5w",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450054,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845450052,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) (len=10) "10.1.51.70",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=10) "10.1.51.70"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845450052,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:14:16.195: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-7545" for this suite. @ 03/07/24 23:14:16.2
• [8.377 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for the cluster [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:50
  STEP: Creating a kubernetes client @ 03/07/24 23:14:16.235
  Mar  7 23:14:16.235: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename dns @ 03/07/24 23:14:16.236
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:14:16.281
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:14:16.283
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@kubernetes.default.svc.cluster.local;check="$$(dig +tcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@kubernetes.default.svc.cluster.local;sleep 1; done
   @ 03/07/24 23:14:16.285
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@kubernetes.default.svc.cluster.local;check="$$(dig +tcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@kubernetes.default.svc.cluster.local;sleep 1; done
   @ 03/07/24 23:14:16.285
  STEP: creating a pod to probe DNS @ 03/07/24 23:14:16.285
  STEP: submitting the pod to kubernetes @ 03/07/24 23:14:16.286
  STEP: retrieving the pod @ 03/07/24 23:14:18.319
  STEP: looking for the results for each expected name from probers @ 03/07/24 23:14:18.329
  Mar  7 23:14:18.366: INFO: DNS probes using dns-7685/dns-test-613a7029-5de5-4e79-81c2-147b033e3be1 succeeded

  STEP: deleting the pod @ 03/07/24 23:14:18.367
  Mar  7 23:14:18.414: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-7685" for this suite. @ 03/07/24 23:14:18.419
• [2.198 seconds]
------------------------------
S
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/predicates.go:446
  STEP: Creating a kubernetes client @ 03/07/24 23:14:18.434
  Mar  7 23:14:18.434: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename sched-pred @ 03/07/24 23:14:18.434
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:14:18.45
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:14:18.452
  Mar  7 23:14:18.454: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Mar  7 23:14:18.458: INFO: Waiting for terminating namespaces to be deleted...
  Mar  7 23:14:18.460: INFO: 
  Logging pods the apiserver thinks is on node whiskas-1 before test
  Mar  7 23:14:18.468: INFO: webserver-deployment-557759b7c7-2kc7f from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-557759b7c7-9kfq7 from deployment-7545 started at 2024-03-07 23:14:08 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-557759b7c7-fd7bm from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-557759b7c7-gdh8h from deployment-7545 started at 2024-03-07 23:14:07 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-557759b7c7-jx744 from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-557759b7c7-jxk7q from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-557759b7c7-kcn46 from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-557759b7c7-mp4pv from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-557759b7c7-qbllw from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-557759b7c7-s77bp from deployment-7545 started at 2024-03-07 23:14:07 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-9b4f5bf69-29gt8 from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: false, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-9b4f5bf69-8z4nm from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: false, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-9b4f5bf69-dn6pk from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: false, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-9b4f5bf69-fpgqg from deployment-7545 started at 2024-03-07 23:14:12 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: false, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-9b4f5bf69-qhfgh from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: false, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-9b4f5bf69-vjksj from deployment-7545 started at 2024-03-07 23:14:12 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: false, restart count 0
  Mar  7 23:14:18.468: INFO: webserver-deployment-9b4f5bf69-wmc4m from deployment-7545 started at 2024-03-07 23:14:12 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container httpd ready: false, restart count 0
  Mar  7 23:14:18.468: INFO: calico-node-qn97s from kube-system started at 2024-03-07 16:43:41 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container calico-node ready: true, restart count 0
  Mar  7 23:14:18.468: INFO: sonobuoy-systemd-logs-daemon-set-e0190a7af8074a44-5wrn6 from sonobuoy started at 2024-03-07 21:55:24 +0000 UTC (2 container statuses recorded)
  Mar  7 23:14:18.468: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Mar  7 23:14:18.468: INFO: 	Container systemd-logs ready: true, restart count 0
  Mar  7 23:14:18.468: INFO: 
  Logging pods the apiserver thinks is on node whiskas-2 before test
  Mar  7 23:14:18.476: INFO: webserver-deployment-557759b7c7-4g27z from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: webserver-deployment-557759b7c7-76pzn from deployment-7545 started at 2024-03-07 23:14:08 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: webserver-deployment-557759b7c7-dldqj from deployment-7545 started at 2024-03-07 23:14:08 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: webserver-deployment-557759b7c7-dvsdc from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: webserver-deployment-557759b7c7-llgdc from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: webserver-deployment-557759b7c7-lwz6l from deployment-7545 started at 2024-03-07 23:14:08 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: webserver-deployment-557759b7c7-m56mg from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: webserver-deployment-557759b7c7-m922c from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: webserver-deployment-557759b7c7-qdd9t from deployment-7545 started at 2024-03-07 23:14:08 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: webserver-deployment-557759b7c7-wdtdr from deployment-7545 started at 2024-03-07 23:14:07 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: webserver-deployment-9b4f5bf69-5lfdc from deployment-7545 started at 2024-03-07 23:14:12 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: false, restart count 0
  Mar  7 23:14:18.476: INFO: webserver-deployment-9b4f5bf69-65hsv from deployment-7545 started at 2024-03-07 23:14:12 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: false, restart count 0
  Mar  7 23:14:18.476: INFO: webserver-deployment-9b4f5bf69-8zwgg from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: false, restart count 0
  Mar  7 23:14:18.476: INFO: webserver-deployment-9b4f5bf69-cnmct from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: false, restart count 0
  Mar  7 23:14:18.476: INFO: webserver-deployment-9b4f5bf69-l9v85 from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: false, restart count 0
  Mar  7 23:14:18.476: INFO: webserver-deployment-9b4f5bf69-v68bs from deployment-7545 started at 2024-03-07 23:14:14 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container httpd ready: false, restart count 0
  Mar  7 23:14:18.476: INFO: calico-kube-controllers-77bd7c5b-fdpjv from kube-system started at 2024-03-07 22:08:21 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container calico-kube-controllers ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: calico-node-dqm6m from kube-system started at 2024-03-07 16:43:45 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container calico-node ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: coredns-864597b5fd-8rq6f from kube-system started at 2024-03-07 22:08:21 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container coredns ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: sonobuoy from sonobuoy started at 2024-03-07 21:55:23 +0000 UTC (1 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: sonobuoy-e2e-job-2fc5b94cf9844ccc from sonobuoy started at 2024-03-07 21:55:24 +0000 UTC (2 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container e2e ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: sonobuoy-systemd-logs-daemon-set-e0190a7af8074a44-fx8dw from sonobuoy started at 2024-03-07 21:55:24 +0000 UTC (2 container statuses recorded)
  Mar  7 23:14:18.476: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Mar  7 23:14:18.476: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to schedule Pod with nonempty NodeSelector. @ 03/07/24 23:14:18.476
  STEP: Considering event: 
  Type = [Warning], Name = [restricted-pod.17ba9e7abb0d5c1d], Reason = [FailedScheduling], Message = [0/2 nodes are available: 2 node(s) didn't match Pod's node affinity/selector. preemption: 0/2 nodes are available: 2 Preemption is not helpful for scheduling.] @ 03/07/24 23:14:18.51
  Mar  7 23:14:19.510: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-2179" for this suite. @ 03/07/24 23:14:19.52
• [1.107 seconds]
------------------------------
SS
------------------------------
[sig-network] DNS should provide DNS for ExternalName services [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:329
  STEP: Creating a kubernetes client @ 03/07/24 23:14:19.542
  Mar  7 23:14:19.542: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename dns @ 03/07/24 23:14:19.544
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:14:19.589
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:14:19.597
  STEP: Creating a test externalName service @ 03/07/24 23:14:19.603
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-5360.svc.cluster.local CNAME > /results/wheezy_udp@dns-test-service-3.dns-5360.svc.cluster.local; sleep 1; done
   @ 03/07/24 23:14:19.613
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-5360.svc.cluster.local CNAME > /results/jessie_udp@dns-test-service-3.dns-5360.svc.cluster.local; sleep 1; done
   @ 03/07/24 23:14:19.613
  STEP: creating a pod to probe DNS @ 03/07/24 23:14:19.613
  STEP: submitting the pod to kubernetes @ 03/07/24 23:14:19.613
  STEP: retrieving the pod @ 03/07/24 23:14:21.657
  STEP: looking for the results for each expected name from probers @ 03/07/24 23:14:21.666
  Mar  7 23:14:21.685: INFO: DNS probes using dns-test-44dff0c8-5049-4a6e-a380-04b2ea1688d3 succeeded

  STEP: changing the externalName to bar.example.com @ 03/07/24 23:14:21.685
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-5360.svc.cluster.local CNAME > /results/wheezy_udp@dns-test-service-3.dns-5360.svc.cluster.local; sleep 1; done
   @ 03/07/24 23:14:21.699
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-5360.svc.cluster.local CNAME > /results/jessie_udp@dns-test-service-3.dns-5360.svc.cluster.local; sleep 1; done
   @ 03/07/24 23:14:21.699
  STEP: creating a second pod to probe DNS @ 03/07/24 23:14:21.699
  STEP: submitting the pod to kubernetes @ 03/07/24 23:14:21.699
  STEP: retrieving the pod @ 03/07/24 23:14:23.758
  STEP: looking for the results for each expected name from probers @ 03/07/24 23:14:23.781
  Mar  7 23:14:23.804: INFO: File wheezy_udp@dns-test-service-3.dns-5360.svc.cluster.local from pod  dns-5360/dns-test-a5c82fb1-b837-4a85-ab10-c3402674d527 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Mar  7 23:14:23.829: INFO: File jessie_udp@dns-test-service-3.dns-5360.svc.cluster.local from pod  dns-5360/dns-test-a5c82fb1-b837-4a85-ab10-c3402674d527 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Mar  7 23:14:23.829: INFO: Lookups using dns-5360/dns-test-a5c82fb1-b837-4a85-ab10-c3402674d527 failed for: [wheezy_udp@dns-test-service-3.dns-5360.svc.cluster.local jessie_udp@dns-test-service-3.dns-5360.svc.cluster.local]

  Mar  7 23:14:23.880: INFO: Pod client logs for webserver: 
  Mar  7 23:14:23.900: INFO: Pod client logs for querier: 
  Mar  7 23:14:23.975: INFO: Pod client logs for jessie-querier: 
  Mar  7 23:14:28.802: INFO: DNS probes using dns-test-a5c82fb1-b837-4a85-ab10-c3402674d527 succeeded

  STEP: changing the service to type=ClusterIP @ 03/07/24 23:14:28.802
  W0307 23:14:28.844901      20 warnings.go:70] spec.externalName is ignored when spec.type is not "ExternalName"
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-5360.svc.cluster.local A > /results/wheezy_udp@dns-test-service-3.dns-5360.svc.cluster.local; sleep 1; done
   @ 03/07/24 23:14:28.845
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-5360.svc.cluster.local A > /results/jessie_udp@dns-test-service-3.dns-5360.svc.cluster.local; sleep 1; done
   @ 03/07/24 23:14:28.845
  STEP: creating a third pod to probe DNS @ 03/07/24 23:14:28.845
  STEP: submitting the pod to kubernetes @ 03/07/24 23:14:28.854
  STEP: retrieving the pod @ 03/07/24 23:14:30.882
  STEP: looking for the results for each expected name from probers @ 03/07/24 23:14:30.891
  Mar  7 23:14:30.917: INFO: DNS probes using dns-test-4c0475e6-675a-474c-9235-3bf48f7dfc78 succeeded

  STEP: deleting the pod @ 03/07/24 23:14:30.918
  STEP: deleting the pod @ 03/07/24 23:14:30.943
  STEP: deleting the pod @ 03/07/24 23:14:30.97
  STEP: deleting the test externalName service @ 03/07/24 23:14:31.009
  Mar  7 23:14:31.029: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-5360" for this suite. @ 03/07/24 23:14:31.032
• [11.501 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/containers.go:89
  STEP: Creating a kubernetes client @ 03/07/24 23:14:31.043
  Mar  7 23:14:31.043: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename containers @ 03/07/24 23:14:31.043
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:14:31.059
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:14:31.061
  STEP: Creating a pod to test override all @ 03/07/24 23:14:31.088
  STEP: Saw pod success @ 03/07/24 23:14:35.14
  Mar  7 23:14:35.149: INFO: Trying to get logs from node whiskas-1 pod client-containers-4d4ed592-ce63-495f-8d7d-514cbd2bcecb container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 23:14:35.165
  Mar  7 23:14:35.221: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-627" for this suite. @ 03/07/24 23:14:35.23
• [4.200 seconds]
------------------------------
SSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/preemption.go:624
  STEP: Creating a kubernetes client @ 03/07/24 23:14:35.243
  Mar  7 23:14:35.243: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename sched-preemption @ 03/07/24 23:14:35.244
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:14:35.267
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:14:35.271
  Mar  7 23:14:35.313: INFO: Waiting up to 1m0s for all nodes to be ready
  Mar  7 23:15:35.325: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Creating a kubernetes client @ 03/07/24 23:15:35.334
  Mar  7 23:15:35.334: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename sched-preemption-path @ 03/07/24 23:15:35.336
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:15:35.398
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:15:35.406
  STEP: Finding an available node @ 03/07/24 23:15:35.412
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 03/07/24 23:15:35.412
  STEP: Explicitly delete pod here to free the resource it takes. @ 03/07/24 23:15:37.452
  Mar  7 23:15:37.501: INFO: found a healthy node: whiskas-1
  Mar  7 23:15:43.598: INFO: pods created so far: [1 1 1]
  Mar  7 23:15:43.598: INFO: length of pods created so far: 3
  Mar  7 23:15:47.630: INFO: pods created so far: [2 2 1]
  Mar  7 23:15:54.771: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-path-3917" for this suite. @ 03/07/24 23:15:54.775
  Mar  7 23:15:54.789: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-1202" for this suite. @ 03/07/24 23:15:54.794
• [79.559 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance] [sig-apps, Conformance]
test/e2e/apps/cronjob.go:161
  STEP: Creating a kubernetes client @ 03/07/24 23:15:54.803
  Mar  7 23:15:54.803: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename cronjob @ 03/07/24 23:15:54.803
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:15:54.82
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:15:54.824
  STEP: Creating a ReplaceConcurrent cronjob @ 03/07/24 23:15:54.826
  STEP: Ensuring a job is scheduled @ 03/07/24 23:15:54.832
  STEP: Ensuring exactly one is scheduled @ 03/07/24 23:16:00.836
  STEP: Ensuring exactly one running job exists by listing jobs explicitly @ 03/07/24 23:16:00.838
  STEP: Ensuring the job is replaced with a new one @ 03/07/24 23:16:00.839
  STEP: Removing cronjob @ 03/07/24 23:17:00.845
  Mar  7 23:17:00.856: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-536" for this suite. @ 03/07/24 23:17:00.87
• [66.086 seconds]
------------------------------
[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:205
  STEP: Creating a kubernetes client @ 03/07/24 23:17:00.889
  Mar  7 23:17:00.889: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename secrets @ 03/07/24 23:17:00.889
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:17:00.914
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:17:00.916
  STEP: Creating secret with name s-test-opt-del-30cbd02a-07e7-4414-8487-8131784d89e0 @ 03/07/24 23:17:00.921
  STEP: Creating secret with name s-test-opt-upd-7725beeb-dcd2-4d5f-8406-8ba81cc101b5 @ 03/07/24 23:17:00.927
  STEP: Creating the pod @ 03/07/24 23:17:00.932
  STEP: Deleting secret s-test-opt-del-30cbd02a-07e7-4414-8487-8131784d89e0 @ 03/07/24 23:17:03.027
  STEP: Updating secret s-test-opt-upd-7725beeb-dcd2-4d5f-8406-8ba81cc101b5 @ 03/07/24 23:17:03.051
  STEP: Creating secret with name s-test-opt-create-6b1cd9a5-be32-4778-9d13-b94303b7312a @ 03/07/24 23:17:03.071
  STEP: waiting to observe update in volume @ 03/07/24 23:17:03.091
  Mar  7 23:17:05.150: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-9516" for this suite. @ 03/07/24 23:17:05.155
• [4.283 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/configmap.go:94
  STEP: Creating a kubernetes client @ 03/07/24 23:17:05.173
  Mar  7 23:17:05.173: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename configmap @ 03/07/24 23:17:05.173
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:17:05.191
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:17:05.193
  STEP: Creating configMap configmap-906/configmap-test-8d1feabf-8755-43ce-96a2-b923e95b8f48 @ 03/07/24 23:17:05.195
  STEP: Creating a pod to test consume configMaps @ 03/07/24 23:17:05.2
  STEP: Saw pod success @ 03/07/24 23:17:07.224
  Mar  7 23:17:07.233: INFO: Trying to get logs from node whiskas-2 pod pod-configmaps-b39e71cd-96d9-42dd-bbff-004b0da1fda5 container env-test: <nil>
  STEP: delete the pod @ 03/07/24 23:17:07.273
  Mar  7 23:17:07.316: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-906" for this suite. @ 03/07/24 23:17:07.324
• [2.165 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:168
  STEP: Creating a kubernetes client @ 03/07/24 23:17:07.339
  Mar  7 23:17:07.339: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-probe @ 03/07/24 23:17:07.34
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:17:07.374
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:17:07.379
  STEP: Creating pod liveness-20716e4a-e208-4ddf-9fe6-eea7a51915ae in namespace container-probe-8618 @ 03/07/24 23:17:07.384
  STEP: checking the pod's current state and verifying that restartCount is present @ 03/07/24 23:17:09.408
  Mar  7 23:17:09.417: INFO: Initial restart count of pod liveness-20716e4a-e208-4ddf-9fe6-eea7a51915ae is 0
  Mar  7 23:17:09.425: INFO: Get pod liveness-20716e4a-e208-4ddf-9fe6-eea7a51915ae in namespace container-probe-8618
  Mar  7 23:17:11.435: INFO: Get pod liveness-20716e4a-e208-4ddf-9fe6-eea7a51915ae in namespace container-probe-8618
  Mar  7 23:17:13.445: INFO: Get pod liveness-20716e4a-e208-4ddf-9fe6-eea7a51915ae in namespace container-probe-8618
  Mar  7 23:17:15.458: INFO: Get pod liveness-20716e4a-e208-4ddf-9fe6-eea7a51915ae in namespace container-probe-8618
  Mar  7 23:17:17.468: INFO: Get pod liveness-20716e4a-e208-4ddf-9fe6-eea7a51915ae in namespace container-probe-8618
  Mar  7 23:17:19.478: INFO: Get pod liveness-20716e4a-e208-4ddf-9fe6-eea7a51915ae in namespace container-probe-8618
  Mar  7 23:17:21.486: INFO: Get pod liveness-20716e4a-e208-4ddf-9fe6-eea7a51915ae in namespace container-probe-8618
  Mar  7 23:17:23.495: INFO: Get pod liveness-20716e4a-e208-4ddf-9fe6-eea7a51915ae in namespace container-probe-8618
  Mar  7 23:17:25.506: INFO: Get pod liveness-20716e4a-e208-4ddf-9fe6-eea7a51915ae in namespace container-probe-8618
  Mar  7 23:17:27.511: INFO: Get pod liveness-20716e4a-e208-4ddf-9fe6-eea7a51915ae in namespace container-probe-8618
  Mar  7 23:17:29.520: INFO: Get pod liveness-20716e4a-e208-4ddf-9fe6-eea7a51915ae in namespace container-probe-8618
  Mar  7 23:17:29.521: INFO: Restart count of pod container-probe-8618/liveness-20716e4a-e208-4ddf-9fe6-eea7a51915ae is now 1 (20.103877576s elapsed)
  STEP: deleting the pod @ 03/07/24 23:17:29.521
  Mar  7 23:17:29.573: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-8618" for this suite. @ 03/07/24 23:17:29.577
• [22.250 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet Replace and Patch tests [Conformance] [sig-apps, Conformance]
test/e2e/apps/replica_set.go:155
  STEP: Creating a kubernetes client @ 03/07/24 23:17:29.588
  Mar  7 23:17:29.588: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename replicaset @ 03/07/24 23:17:29.589
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:17:29.611
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:17:29.613
  Mar  7 23:17:29.625: INFO: Pod name sample-pod: Found 0 pods out of 1
  Mar  7 23:17:34.638: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 03/07/24 23:17:34.638
  STEP: Scaling up "test-rs" replicaset @ 03/07/24 23:17:34.638
  Mar  7 23:17:34.662: INFO: Updating replica set "test-rs"
  STEP: patching the ReplicaSet @ 03/07/24 23:17:34.662
  Mar  7 23:17:34.679: INFO: observed ReplicaSet test-rs in namespace replicaset-81 with ReadyReplicas 1, AvailableReplicas 1
  Mar  7 23:17:34.697: INFO: observed ReplicaSet test-rs in namespace replicaset-81 with ReadyReplicas 1, AvailableReplicas 1
  Mar  7 23:17:34.729: INFO: observed ReplicaSet test-rs in namespace replicaset-81 with ReadyReplicas 1, AvailableReplicas 1
  Mar  7 23:17:34.743: INFO: observed ReplicaSet test-rs in namespace replicaset-81 with ReadyReplicas 1, AvailableReplicas 1
  Mar  7 23:17:36.049: INFO: observed ReplicaSet test-rs in namespace replicaset-81 with ReadyReplicas 2, AvailableReplicas 2
  Mar  7 23:17:36.309: INFO: observed Replicaset test-rs in namespace replicaset-81 with ReadyReplicas 3 found true
  Mar  7 23:17:36.312: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-81" for this suite. @ 03/07/24 23:17:36.317
• [6.737 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:191
  STEP: Creating a kubernetes client @ 03/07/24 23:17:36.326
  Mar  7 23:17:36.326: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename dns @ 03/07/24 23:17:36.326
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:17:36.352
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:17:36.354
  STEP: Creating a test headless service @ 03/07/24 23:17:36.357
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service;check="$$(dig +tcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-6076 A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-6076;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-6076 A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-6076;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-6076.svc A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-6076.svc;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-6076.svc A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-6076.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-6076.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.dns-test-service.dns-6076.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-6076.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.dns-test-service.dns-6076.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-6076.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.test-service-2.dns-6076.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-6076.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.test-service-2.dns-6076.svc;check="$$(dig +notcp +noall +answer +search 19.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.19_udp@PTR;check="$$(dig +tcp +noall +answer +search 19.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.19_tcp@PTR;sleep 1; done
   @ 03/07/24 23:17:36.402
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service;check="$$(dig +tcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-6076 A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-6076;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-6076 A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-6076;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-6076.svc A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-6076.svc;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-6076.svc A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-6076.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-6076.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.dns-test-service.dns-6076.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-6076.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.dns-test-service.dns-6076.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-6076.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.test-service-2.dns-6076.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-6076.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.test-service-2.dns-6076.svc;check="$$(dig +notcp +noall +answer +search 19.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.19_udp@PTR;check="$$(dig +tcp +noall +answer +search 19.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.19_tcp@PTR;sleep 1; done
   @ 03/07/24 23:17:36.402
  STEP: creating a pod to probe DNS @ 03/07/24 23:17:36.402
  STEP: submitting the pod to kubernetes @ 03/07/24 23:17:36.402
  STEP: retrieving the pod @ 03/07/24 23:17:38.43
  STEP: looking for the results for each expected name from probers @ 03/07/24 23:17:38.439
  Mar  7 23:17:38.449: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.457: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.467: INFO: Unable to read wheezy_udp@dns-test-service.dns-6076 from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.476: INFO: Unable to read wheezy_tcp@dns-test-service.dns-6076 from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.483: INFO: Unable to read wheezy_udp@dns-test-service.dns-6076.svc from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.488: INFO: Unable to read wheezy_tcp@dns-test-service.dns-6076.svc from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.493: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-6076.svc from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.497: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-6076.svc from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.520: INFO: Unable to read jessie_udp@dns-test-service from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.524: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.527: INFO: Unable to read jessie_udp@dns-test-service.dns-6076 from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.530: INFO: Unable to read jessie_tcp@dns-test-service.dns-6076 from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.533: INFO: Unable to read jessie_udp@dns-test-service.dns-6076.svc from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.535: INFO: Unable to read jessie_tcp@dns-test-service.dns-6076.svc from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.538: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-6076.svc from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.540: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-6076.svc from pod dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b: the server could not find the requested resource (get pods dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b)
  Mar  7 23:17:38.550: INFO: Lookups using dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-6076 wheezy_tcp@dns-test-service.dns-6076 wheezy_udp@dns-test-service.dns-6076.svc wheezy_tcp@dns-test-service.dns-6076.svc wheezy_udp@_http._tcp.dns-test-service.dns-6076.svc wheezy_tcp@_http._tcp.dns-test-service.dns-6076.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-6076 jessie_tcp@dns-test-service.dns-6076 jessie_udp@dns-test-service.dns-6076.svc jessie_tcp@dns-test-service.dns-6076.svc jessie_udp@_http._tcp.dns-test-service.dns-6076.svc jessie_tcp@_http._tcp.dns-test-service.dns-6076.svc]

  Mar  7 23:17:38.554: INFO: Pod client logs for webserver: 
  Mar  7 23:17:38.558: INFO: Pod client logs for querier: 
  Mar  7 23:17:38.562: INFO: Pod client logs for jessie-querier: 
  Mar  7 23:17:43.544: INFO: DNS probes using dns-6076/dns-test-ad8c64ac-3531-43e1-966e-85c7dfd6310b succeeded

  STEP: deleting the pod @ 03/07/24 23:17:43.544
  STEP: deleting the test service @ 03/07/24 23:17:43.567
  STEP: deleting the test headless service @ 03/07/24 23:17:43.642
  Mar  7 23:17:43.654: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-6076" for this suite. @ 03/07/24 23:17:43.658
• [7.339 seconds]
------------------------------
SSS
------------------------------
[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance] [sig-network, Conformance]
test/e2e/network/endpointslice.go:105
  STEP: Creating a kubernetes client @ 03/07/24 23:17:43.664
  Mar  7 23:17:43.664: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename endpointslice @ 03/07/24 23:17:43.665
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:17:43.681
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:17:43.684
  Mar  7 23:17:45.733: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-3600" for this suite. @ 03/07/24 23:17:45.736
• [2.078 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/lifecycle_hook.go:153
  STEP: Creating a kubernetes client @ 03/07/24 23:17:45.742
  Mar  7 23:17:45.742: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 03/07/24 23:17:45.743
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:17:45.762
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:17:45.765
  STEP: create the container to handle the HTTPGet hook request. @ 03/07/24 23:17:45.769
  STEP: create the pod with lifecycle hook @ 03/07/24 23:17:47.802
  STEP: delete the pod with lifecycle hook @ 03/07/24 23:17:49.852
  STEP: check prestop hook @ 03/07/24 23:17:53.906
  Mar  7 23:17:53.923: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-4657" for this suite. @ 03/07/24 23:17:53.926
• [8.189 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_conversion_webhook.go:177
  STEP: Creating a kubernetes client @ 03/07/24 23:17:53.932
  Mar  7 23:17:53.932: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename crd-webhook @ 03/07/24 23:17:53.932
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:17:53.951
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:17:53.952
  STEP: Setting up server cert @ 03/07/24 23:17:53.954
  STEP: Create role binding to let cr conversion webhook read extension-apiserver-authentication @ 03/07/24 23:17:54.052
  STEP: Deploying the custom resource conversion webhook pod @ 03/07/24 23:17:54.06
  STEP: Wait for the deployment to be ready @ 03/07/24 23:17:54.073
  Mar  7 23:17:54.077: INFO: new replicaset for deployment "sample-crd-conversion-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 03/07/24 23:17:56.104
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 23:17:56.145
  Mar  7 23:17:57.145: INFO: Waiting for amount of service:e2e-test-crd-conversion-webhook endpoints to be 1
  Mar  7 23:17:57.160: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Creating a v1 custom resource @ 03/07/24 23:17:59.774
  STEP: Create a v2 custom resource @ 03/07/24 23:17:59.825
  STEP: List CRs in v1 @ 03/07/24 23:17:59.854
  STEP: List CRs in v2 @ 03/07/24 23:17:59.859
  Mar  7 23:18:00.461: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-webhook-7631" for this suite. @ 03/07/24 23:18:00.463
• [6.545 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:2214
  STEP: Creating a kubernetes client @ 03/07/24 23:18:00.477
  Mar  7 23:18:00.477: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 23:18:00.477
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:18:00.491
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:18:00.497
  STEP: creating service in namespace services-2209 @ 03/07/24 23:18:00.498
  STEP: creating service affinity-nodeport in namespace services-2209 @ 03/07/24 23:18:00.498
  STEP: creating replication controller affinity-nodeport in namespace services-2209 @ 03/07/24 23:18:00.529
  I0307 23:18:00.541873      20 runners.go:197] Created replication controller with name: affinity-nodeport, namespace: services-2209, replica count: 3
  I0307 23:18:03.593653      20 runners.go:197] affinity-nodeport Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Mar  7 23:18:03.620: INFO: Creating new exec pod
  Mar  7 23:18:06.659: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-2209 exec execpod-affinityq2cg9 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-nodeport 80'
  Mar  7 23:18:06.767: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-nodeport 80\nConnection to affinity-nodeport 80 port [tcp/http] succeeded!\n"
  Mar  7 23:18:06.767: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 23:18:06.767: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-2209 exec execpod-affinityq2cg9 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.72 80'
  Mar  7 23:18:06.838: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.72 80\nConnection to 10.152.183.72 80 port [tcp/http] succeeded!\n"
  Mar  7 23:18:06.838: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 23:18:06.838: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-2209 exec execpod-affinityq2cg9 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.205 30281'
  Mar  7 23:18:06.907: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.205 30281\nConnection to 10.100.138.205 30281 port [tcp/*] succeeded!\n"
  Mar  7 23:18:06.907: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 23:18:06.907: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-2209 exec execpod-affinityq2cg9 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.2 30281'
  Mar  7 23:18:06.977: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.2 30281\nConnection to 10.100.138.2 30281 port [tcp/*] succeeded!\n"
  Mar  7 23:18:06.977: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 23:18:06.977: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-2209 exec execpod-affinityq2cg9 -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.100.138.205:30281/ ; done'
  Mar  7 23:18:07.093: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.205:30281/\n"
  Mar  7 23:18:07.093: INFO: stdout: "\naffinity-nodeport-8t5wh\naffinity-nodeport-8t5wh\naffinity-nodeport-8t5wh\naffinity-nodeport-8t5wh\naffinity-nodeport-8t5wh\naffinity-nodeport-8t5wh\naffinity-nodeport-8t5wh\naffinity-nodeport-8t5wh\naffinity-nodeport-8t5wh\naffinity-nodeport-8t5wh\naffinity-nodeport-8t5wh\naffinity-nodeport-8t5wh\naffinity-nodeport-8t5wh\naffinity-nodeport-8t5wh\naffinity-nodeport-8t5wh\naffinity-nodeport-8t5wh"
  Mar  7 23:18:07.093: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.093: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.093: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.093: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.093: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.093: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.093: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.094: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.094: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.094: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.094: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.094: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.094: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.094: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.094: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.094: INFO: Received response from host: affinity-nodeport-8t5wh
  Mar  7 23:18:07.094: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-nodeport in namespace services-2209, will wait for the garbage collector to delete the pods @ 03/07/24 23:18:07.109
  Mar  7 23:18:07.170: INFO: Deleting ReplicationController affinity-nodeport took: 7.058836ms
  Mar  7 23:18:07.271: INFO: Terminating ReplicationController affinity-nodeport pods took: 100.773507ms
  Mar  7 23:18:10.633: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-2209" for this suite. @ 03/07/24 23:18:10.637
• [10.206 seconds]
------------------------------
[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance] [sig-apps, Conformance]
test/e2e/apps/disruption.go:87
  STEP: Creating a kubernetes client @ 03/07/24 23:18:10.683
  Mar  7 23:18:10.683: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename disruption @ 03/07/24 23:18:10.684
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:18:10.708
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:18:10.711
  STEP: Creating a kubernetes client @ 03/07/24 23:18:10.713
  Mar  7 23:18:10.713: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename disruption-2 @ 03/07/24 23:18:10.714
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:18:10.736
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:18:10.738
  STEP: Waiting for the pdb to be processed @ 03/07/24 23:18:10.749
  STEP: Waiting for the pdb to be processed @ 03/07/24 23:18:12.78
  STEP: Waiting for the pdb to be processed @ 03/07/24 23:18:14.804
  STEP: listing a collection of PDBs across all namespaces @ 03/07/24 23:18:16.813
  STEP: listing a collection of PDBs in namespace disruption-1491 @ 03/07/24 23:18:16.822
  STEP: deleting a collection of PDBs @ 03/07/24 23:18:16.831
  STEP: Waiting for the PDB collection to be deleted @ 03/07/24 23:18:16.872
  Mar  7 23:18:16.883: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-2-2230" for this suite. @ 03/07/24 23:18:16.894
  Mar  7 23:18:16.912: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-1491" for this suite. @ 03/07/24 23:18:16.924
• [6.256 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance] [sig-apps, Conformance]
test/e2e/apps/disruption.go:141
  STEP: Creating a kubernetes client @ 03/07/24 23:18:16.94
  Mar  7 23:18:16.940: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename disruption @ 03/07/24 23:18:16.941
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:18:16.976
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:18:16.983
  STEP: Waiting for the pdb to be processed @ 03/07/24 23:18:16.997
  STEP: Waiting for all pods to be running @ 03/07/24 23:18:19.085
  Mar  7 23:18:19.093: INFO: running pods: 0 < 3
  Mar  7 23:18:21.104: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-1875" for this suite. @ 03/07/24 23:18:21.114
• [4.200 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:110
  STEP: Creating a kubernetes client @ 03/07/24 23:18:21.141
  Mar  7 23:18:21.142: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename configmap @ 03/07/24 23:18:21.144
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:18:21.233
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:18:21.241
  STEP: Creating configMap with name configmap-test-volume-map-d806a8f2-f9bf-4d00-a550-49ff8f3592c4 @ 03/07/24 23:18:21.249
  STEP: Creating a pod to test consume configMaps @ 03/07/24 23:18:21.269
  STEP: Saw pod success @ 03/07/24 23:18:25.328
  Mar  7 23:18:25.337: INFO: Trying to get logs from node whiskas-1 pod pod-configmaps-9c8a7d7a-e6a9-4a41-89ca-f3fb510e7e58 container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 23:18:25.353
  Mar  7 23:18:25.403: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-5924" for this suite. @ 03/07/24 23:18:25.407
• [4.275 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance] [sig-storage, Conformance]
test/e2e/storage/persistent_volumes.go:430
  STEP: Creating a kubernetes client @ 03/07/24 23:18:25.416
  Mar  7 23:18:25.416: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pv @ 03/07/24 23:18:25.417
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:18:25.437
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:18:25.439
  STEP: Creating initial PV and PVC @ 03/07/24 23:18:25.441
  Mar  7 23:18:25.441: INFO: Creating a PV followed by a PVC
  STEP: Listing all PVs with the labelSelector: "e2e-pv-pool=pv-5275" @ 03/07/24 23:18:25.456
  STEP: Listing PVCs in namespace "pv-5275" @ 03/07/24 23:18:25.458
  STEP: Patching the PV "pv-5275-2bcwr" @ 03/07/24 23:18:25.46
  STEP: Patching the PVC "pvc-xwbwk" @ 03/07/24 23:18:25.466
  STEP: Getting PV "pv-5275-2bcwr" @ 03/07/24 23:18:25.473
  STEP: Getting PVC "pvc-xwbwk" @ 03/07/24 23:18:25.474
  STEP: Deleting PVC "pvc-xwbwk" @ 03/07/24 23:18:25.476
  STEP: Confirm deletion of PVC "pvc-xwbwk" @ 03/07/24 23:18:25.483
  STEP: Deleting PV "pv-5275-2bcwr" @ 03/07/24 23:18:27.501
  STEP: Confirm deletion of PV "pv-5275-2bcwr" @ 03/07/24 23:18:27.525
  STEP: Recreating another PV & PVC @ 03/07/24 23:18:29.544
  Mar  7 23:18:29.544: INFO: Creating a PV followed by a PVC
  STEP: Updating the PV "pv-5275-9pfb8" @ 03/07/24 23:18:29.608
  STEP: Updating the PVC "pvc-jn7qv" @ 03/07/24 23:18:29.643
  STEP: Listing PVCs in all namespaces with the labelSelector: "pvc-jn7qv=updated" @ 03/07/24 23:18:29.673
  STEP: Deleting PVC "pvc-jn7qv" via DeleteCollection @ 03/07/24 23:18:29.682
  STEP: Confirm deletion of PVC "pvc-jn7qv" @ 03/07/24 23:18:29.703
  STEP: Deleting PV "pv-5275-9pfb8" via DeleteCollection @ 03/07/24 23:18:31.713
  STEP: Confirm deletion of PV "pv-5275-9pfb8" @ 03/07/24 23:18:31.727
  Mar  7 23:18:33.745: INFO: AfterEach: deleting 1 PVCs and 1 PVs...
  Mar  7 23:18:33.745: INFO: Deleting PersistentVolumeClaim "pvc-jn7qv"
  Mar  7 23:18:33.751: INFO: Deleting PersistentVolume "pv-5275-9pfb8"
  Mar  7 23:18:33.755: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pv-5275" for this suite. @ 03/07/24 23:18:33.76
• [8.360 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] PodTemplates should delete a collection of pod templates [Conformance] [sig-node, Conformance]
test/e2e/common/node/podtemplates.go:123
  STEP: Creating a kubernetes client @ 03/07/24 23:18:33.777
  Mar  7 23:18:33.777: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename podtemplate @ 03/07/24 23:18:33.777
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:18:33.794
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:18:33.797
  STEP: Create set of pod templates @ 03/07/24 23:18:33.799
  Mar  7 23:18:33.805: INFO: created test-podtemplate-1
  Mar  7 23:18:33.812: INFO: created test-podtemplate-2
  Mar  7 23:18:33.819: INFO: created test-podtemplate-3
  STEP: get a list of pod templates with a label in the current namespace @ 03/07/24 23:18:33.819
  STEP: delete collection of pod templates @ 03/07/24 23:18:33.822
  Mar  7 23:18:33.822: INFO: requesting DeleteCollection of pod templates
  STEP: check that the list of pod templates matches the requested quantity @ 03/07/24 23:18:33.845
  Mar  7 23:18:33.845: INFO: requesting list of pod templates to confirm quantity
  Mar  7 23:18:33.847: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-5255" for this suite. @ 03/07/24 23:18:33.85
• [0.079 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:100
  STEP: Creating a kubernetes client @ 03/07/24 23:18:33.856
  Mar  7 23:18:33.856: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 23:18:33.856
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:18:33.871
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:18:33.873
  STEP: Creating configMap with name projected-configmap-test-volume-map-df89512e-3f3e-48cb-be22-4e807c997e63 @ 03/07/24 23:18:33.875
  STEP: Creating a pod to test consume configMaps @ 03/07/24 23:18:33.88
  STEP: Saw pod success @ 03/07/24 23:18:37.914
  Mar  7 23:18:37.923: INFO: Trying to get logs from node whiskas-1 pod pod-projected-configmaps-8748c316-d761-4fde-b093-19639c11a931 container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 23:18:37.939
  Mar  7 23:18:37.971: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2775" for this suite. @ 03/07/24 23:18:37.976
• [4.130 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:75
  STEP: Creating a kubernetes client @ 03/07/24 23:18:37.987
  Mar  7 23:18:37.987: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename configmap @ 03/07/24 23:18:37.987
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:18:38.007
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:18:38.011
  STEP: Creating configMap with name configmap-test-volume-05baa66b-bc2a-49fb-9913-b908c84f9921 @ 03/07/24 23:18:38.014
  STEP: Creating a pod to test consume configMaps @ 03/07/24 23:18:38.024
  STEP: Saw pod success @ 03/07/24 23:18:42.082
  Mar  7 23:18:42.089: INFO: Trying to get logs from node whiskas-1 pod pod-configmaps-40cbee22-78ef-4aac-8399-e67b9a22d750 container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 23:18:42.098
  Mar  7 23:18:42.133: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-3372" for this suite. @ 03/07/24 23:18:42.139
• [4.163 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should be restarted with a GRPC liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:550
  STEP: Creating a kubernetes client @ 03/07/24 23:18:42.151
  Mar  7 23:18:42.151: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-probe @ 03/07/24 23:18:42.151
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:18:42.171
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:18:42.173
  STEP: Creating pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580 @ 03/07/24 23:18:42.175
  STEP: checking the pod's current state and verifying that restartCount is present @ 03/07/24 23:18:44.197
  Mar  7 23:18:44.206: INFO: Initial restart count of pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 is 0
  Mar  7 23:18:44.214: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:18:46.224: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:18:48.234: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:18:50.238: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:18:52.249: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:18:54.260: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:18:56.268: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:18:58.278: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:00.288: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:02.295: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:04.305: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:06.315: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:08.325: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:10.334: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:12.346: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:14.357: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:16.367: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:18.377: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:20.383: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:22.395: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:24.405: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:26.409: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:28.418: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:30.429: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:32.438: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:34.449: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:36.458: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:38.469: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:40.479: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:42.491: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:44.501: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:46.511: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:48.522: INFO: Get pod test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 in namespace container-probe-8580
  Mar  7 23:19:48.522: INFO: Restart count of pod container-probe-8580/test-grpc-f68d762e-521a-4b54-9985-3315d625cbc7 is now 1 (1m4.316563199s elapsed)
  STEP: deleting the pod @ 03/07/24 23:19:48.523
  Mar  7 23:19:48.566: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-8580" for this suite. @ 03/07/24 23:19:48.58
• [66.437 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/downwardapi.go:168
  STEP: Creating a kubernetes client @ 03/07/24 23:19:48.587
  Mar  7 23:19:48.587: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 23:19:48.588
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:19:48.604
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:19:48.607
  STEP: Creating a pod to test downward api env vars @ 03/07/24 23:19:48.608
  STEP: Saw pod success @ 03/07/24 23:19:52.64
  Mar  7 23:19:52.649: INFO: Trying to get logs from node whiskas-1 pod downward-api-0c62a6f2-6ebf-4572-af8d-c0401f630418 container dapi-container: <nil>
  STEP: delete the pod @ 03/07/24 23:19:52.666
  Mar  7 23:19:52.712: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-3888" for this suite. @ 03/07/24 23:19:52.72
• [4.149 seconds]
------------------------------
SSS
------------------------------
[sig-cli] Kubectl client Update Demo should create and stop a replication controller [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:344
  STEP: Creating a kubernetes client @ 03/07/24 23:19:52.737
  Mar  7 23:19:52.737: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 23:19:52.739
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:19:52.767
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:19:52.774
  STEP: creating a replication controller @ 03/07/24 23:19:52.778
  Mar  7 23:19:52.779: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-8183 create -f -'
  Mar  7 23:19:52.871: INFO: stderr: ""
  Mar  7 23:19:52.871: INFO: stdout: "replicationcontroller/update-demo-nautilus created\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 03/07/24 23:19:52.871
  Mar  7 23:19:52.871: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-8183 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Mar  7 23:19:52.930: INFO: stderr: ""
  Mar  7 23:19:52.930: INFO: stdout: "update-demo-nautilus-55dnf update-demo-nautilus-b7bvd "
  Mar  7 23:19:52.931: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-8183 get pods update-demo-nautilus-55dnf -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Mar  7 23:19:52.974: INFO: stderr: ""
  Mar  7 23:19:52.974: INFO: stdout: ""
  Mar  7 23:19:52.974: INFO: update-demo-nautilus-55dnf is created but not running
  Mar  7 23:19:57.974: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-8183 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Mar  7 23:19:58.034: INFO: stderr: ""
  Mar  7 23:19:58.034: INFO: stdout: "update-demo-nautilus-55dnf update-demo-nautilus-b7bvd "
  Mar  7 23:19:58.034: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-8183 get pods update-demo-nautilus-55dnf -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Mar  7 23:19:58.081: INFO: stderr: ""
  Mar  7 23:19:58.081: INFO: stdout: "true"
  Mar  7 23:19:58.081: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-8183 get pods update-demo-nautilus-55dnf -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Mar  7 23:19:58.124: INFO: stderr: ""
  Mar  7 23:19:58.124: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Mar  7 23:19:58.124: INFO: validating pod update-demo-nautilus-55dnf
  Mar  7 23:19:58.128: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Mar  7 23:19:58.128: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Mar  7 23:19:58.128: INFO: update-demo-nautilus-55dnf is verified up and running
  Mar  7 23:19:58.128: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-8183 get pods update-demo-nautilus-b7bvd -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Mar  7 23:19:58.169: INFO: stderr: ""
  Mar  7 23:19:58.169: INFO: stdout: "true"
  Mar  7 23:19:58.169: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-8183 get pods update-demo-nautilus-b7bvd -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Mar  7 23:19:58.210: INFO: stderr: ""
  Mar  7 23:19:58.210: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Mar  7 23:19:58.210: INFO: validating pod update-demo-nautilus-b7bvd
  Mar  7 23:19:58.213: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Mar  7 23:19:58.213: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Mar  7 23:19:58.213: INFO: update-demo-nautilus-b7bvd is verified up and running
  STEP: using delete to clean up resources @ 03/07/24 23:19:58.213
  Mar  7 23:19:58.213: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-8183 delete --grace-period=0 --force -f -'
  Mar  7 23:19:58.259: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Mar  7 23:19:58.259: INFO: stdout: "replicationcontroller \"update-demo-nautilus\" force deleted\n"
  Mar  7 23:19:58.259: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-8183 get rc,svc -l name=update-demo --no-headers'
  Mar  7 23:19:58.315: INFO: stderr: "No resources found in kubectl-8183 namespace.\n"
  Mar  7 23:19:58.315: INFO: stdout: ""
  Mar  7 23:19:58.315: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-8183 get pods -l name=update-demo -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Mar  7 23:19:58.367: INFO: stderr: ""
  Mar  7 23:19:58.367: INFO: stdout: ""
  Mar  7 23:19:58.367: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-8183" for this suite. @ 03/07/24 23:19:58.37
• [5.640 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:117
  STEP: Creating a kubernetes client @ 03/07/24 23:19:58.377
  Mar  7 23:19:58.377: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename dns @ 03/07/24 23:19:58.381
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:19:58.409
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:19:58.414
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-1.dns-test-service.dns-152.svc.cluster.local)" && echo OK > /results/wheezy_hosts@dns-querier-1.dns-test-service.dns-152.svc.cluster.local;test -n "$$(getent hosts dns-querier-1)" && echo OK > /results/wheezy_hosts@dns-querier-1;sleep 1; done
   @ 03/07/24 23:19:58.416
  STEP: Running these commands on jessie: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-1.dns-test-service.dns-152.svc.cluster.local)" && echo OK > /results/jessie_hosts@dns-querier-1.dns-test-service.dns-152.svc.cluster.local;test -n "$$(getent hosts dns-querier-1)" && echo OK > /results/jessie_hosts@dns-querier-1;sleep 1; done
   @ 03/07/24 23:19:58.416
  STEP: creating a pod to probe /etc/hosts @ 03/07/24 23:19:58.416
  STEP: submitting the pod to kubernetes @ 03/07/24 23:19:58.416
  STEP: retrieving the pod @ 03/07/24 23:20:00.438
  STEP: looking for the results for each expected name from probers @ 03/07/24 23:20:00.446
  Mar  7 23:20:00.484: INFO: Unable to read jessie_hosts@dns-querier-1 from pod dns-152/dns-test-b01150a4-5909-4847-8671-d0912087cc41: the server could not find the requested resource (get pods dns-test-b01150a4-5909-4847-8671-d0912087cc41)
  Mar  7 23:20:00.486: INFO: Lookups using dns-152/dns-test-b01150a4-5909-4847-8671-d0912087cc41 failed for: [jessie_hosts@dns-querier-1]

  Mar  7 23:20:00.503: INFO: Pod client logs for webserver: 
  Mar  7 23:20:00.515: INFO: Pod client logs for querier: 
  Mar  7 23:20:00.533: INFO: Pod client logs for jessie-querier: 
  Mar  7 23:20:05.482: INFO: DNS probes using dns-152/dns-test-b01150a4-5909-4847-8671-d0912087cc41 succeeded

  STEP: deleting the pod @ 03/07/24 23:20:05.483
  Mar  7 23:20:05.524: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-152" for this suite. @ 03/07/24 23:20:05.529
• [7.175 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance] [sig-apps, Conformance]
test/e2e/apps/disruption.go:164
  STEP: Creating a kubernetes client @ 03/07/24 23:20:05.553
  Mar  7 23:20:05.553: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename disruption @ 03/07/24 23:20:05.554
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:20:05.571
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:20:05.574
  STEP: Waiting for the pdb to be processed @ 03/07/24 23:20:05.582
  STEP: Updating PodDisruptionBudget status @ 03/07/24 23:20:07.585
  STEP: Waiting for all pods to be running @ 03/07/24 23:20:07.594
  Mar  7 23:20:07.597: INFO: running pods: 0 < 1
  STEP: locating a running pod @ 03/07/24 23:20:09.605
  STEP: Waiting for the pdb to be processed @ 03/07/24 23:20:09.644
  STEP: Patching PodDisruptionBudget status @ 03/07/24 23:20:09.661
  STEP: Waiting for the pdb to be processed @ 03/07/24 23:20:09.688
  Mar  7 23:20:09.695: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-3418" for this suite. @ 03/07/24 23:20:09.707
• [4.172 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance] [sig-apps, Conformance]
test/e2e/apps/rc.go:113
  STEP: Creating a kubernetes client @ 03/07/24 23:20:09.726
  Mar  7 23:20:09.726: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename replication-controller @ 03/07/24 23:20:09.728
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:20:09.769
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:20:09.772
  STEP: creating a ReplicationController @ 03/07/24 23:20:09.78
  STEP: waiting for RC to be added @ 03/07/24 23:20:09.788
  STEP: waiting for available Replicas @ 03/07/24 23:20:09.788
  STEP: patching ReplicationController @ 03/07/24 23:20:10.946
  STEP: waiting for RC to be modified @ 03/07/24 23:20:10.952
  STEP: patching ReplicationController status @ 03/07/24 23:20:10.952
  STEP: waiting for RC to be modified @ 03/07/24 23:20:10.96
  STEP: waiting for available Replicas @ 03/07/24 23:20:10.96
  STEP: fetching ReplicationController status @ 03/07/24 23:20:10.967
  STEP: patching ReplicationController scale @ 03/07/24 23:20:10.969
  STEP: waiting for RC to be modified @ 03/07/24 23:20:10.976
  STEP: waiting for ReplicationController's scale to be the max amount @ 03/07/24 23:20:10.976
  STEP: fetching ReplicationController; ensuring that it's patched @ 03/07/24 23:20:12.549
  STEP: updating ReplicationController status @ 03/07/24 23:20:12.552
  STEP: waiting for RC to be modified @ 03/07/24 23:20:12.559
  STEP: listing all ReplicationControllers @ 03/07/24 23:20:12.559
  STEP: checking that ReplicationController has expected values @ 03/07/24 23:20:12.561
  STEP: deleting ReplicationControllers by collection @ 03/07/24 23:20:12.561
  STEP: waiting for ReplicationController to have a DELETED watchEvent @ 03/07/24 23:20:12.571
  Mar  7 23:20:12.602: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  E0307 23:20:12.602669      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "replication-controller-5893" for this suite. @ 03/07/24 23:20:12.605
• [2.921 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should mount an API token into pods [Conformance] [sig-auth, Conformance]
test/e2e/auth/service_accounts.go:80
  STEP: Creating a kubernetes client @ 03/07/24 23:20:12.647
  Mar  7 23:20:12.647: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename svcaccounts @ 03/07/24 23:20:12.647
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:20:12.663
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:20:12.665
  E0307 23:20:13.603353      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:14.604315      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: reading a file in the container @ 03/07/24 23:20:14.694
  Mar  7 23:20:14.694: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-1475 pod-service-account-96ba8a49-531c-4c47-bb6b-ffb469386057 -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/token'
  STEP: reading a file in the container @ 03/07/24 23:20:14.826
  Mar  7 23:20:14.826: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-1475 pod-service-account-96ba8a49-531c-4c47-bb6b-ffb469386057 -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
  STEP: reading a file in the container @ 03/07/24 23:20:14.901
  Mar  7 23:20:14.901: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-1475 pod-service-account-96ba8a49-531c-4c47-bb6b-ffb469386057 -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/namespace'
  Mar  7 23:20:14.985: INFO: Got root ca configmap in namespace "svcaccounts-1475"
  Mar  7 23:20:14.987: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-1475" for this suite. @ 03/07/24 23:20:14.99
• [2.350 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-network] Service endpoints latency should not be very high [Conformance] [sig-network, Conformance]
test/e2e/network/service_latency.go:59
  STEP: Creating a kubernetes client @ 03/07/24 23:20:14.997
  Mar  7 23:20:14.997: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename svc-latency @ 03/07/24 23:20:14.998
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:20:15.015
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:20:15.017
  Mar  7 23:20:15.026: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: creating replication controller svc-latency-rc in namespace svc-latency-9426 @ 03/07/24 23:20:15.027
  I0307 23:20:15.041268      20 runners.go:197] Created replication controller with name: svc-latency-rc, namespace: svc-latency-9426, replica count: 1
  E0307 23:20:15.604579      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0307 23:20:16.094720      20 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 1 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Mar  7 23:20:16.234: INFO: Created: latency-svc-dmkzm
  Mar  7 23:20:16.257: INFO: Got endpoints: latency-svc-dmkzm [61.736012ms]
  Mar  7 23:20:16.274: INFO: Created: latency-svc-c9kpb
  Mar  7 23:20:16.282: INFO: Got endpoints: latency-svc-c9kpb [25.123494ms]
  Mar  7 23:20:16.289: INFO: Created: latency-svc-qghpl
  Mar  7 23:20:16.297: INFO: Got endpoints: latency-svc-qghpl [38.937153ms]
  Mar  7 23:20:16.308: INFO: Created: latency-svc-x2jpq
  Mar  7 23:20:16.319: INFO: Created: latency-svc-7fwmx
  Mar  7 23:20:16.323: INFO: Created: latency-svc-4g6wt
  Mar  7 23:20:16.330: INFO: Got endpoints: latency-svc-7fwmx [72.233241ms]
  Mar  7 23:20:16.341: INFO: Got endpoints: latency-svc-4g6wt [83.348901ms]
  Mar  7 23:20:16.344: INFO: Created: latency-svc-8d96g
  Mar  7 23:20:16.351: INFO: Got endpoints: latency-svc-x2jpq [93.083208ms]
  Mar  7 23:20:16.365: INFO: Got endpoints: latency-svc-8d96g [106.213395ms]
  Mar  7 23:20:16.378: INFO: Created: latency-svc-46rld
  Mar  7 23:20:16.407: INFO: Got endpoints: latency-svc-46rld [149.253506ms]
  Mar  7 23:20:16.429: INFO: Created: latency-svc-8fg59
  Mar  7 23:20:16.467: INFO: Got endpoints: latency-svc-8fg59 [209.268045ms]
  Mar  7 23:20:16.475: INFO: Created: latency-svc-pslnc
  Mar  7 23:20:16.504: INFO: Got endpoints: latency-svc-pslnc [246.168202ms]
  Mar  7 23:20:16.523: INFO: Created: latency-svc-6wfvr
  Mar  7 23:20:16.550: INFO: Got endpoints: latency-svc-6wfvr [292.075873ms]
  Mar  7 23:20:16.561: INFO: Created: latency-svc-hj267
  Mar  7 23:20:16.591: INFO: Got endpoints: latency-svc-hj267 [333.073693ms]
  E0307 23:20:16.605744      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:20:16.610: INFO: Created: latency-svc-l6bxw
  Mar  7 23:20:16.649: INFO: Created: latency-svc-74jjv
  Mar  7 23:20:16.659: INFO: Got endpoints: latency-svc-l6bxw [400.652382ms]
  Mar  7 23:20:16.685: INFO: Got endpoints: latency-svc-74jjv [427.250682ms]
  Mar  7 23:20:16.692: INFO: Created: latency-svc-2rq4h
  Mar  7 23:20:16.718: INFO: Got endpoints: latency-svc-2rq4h [459.634265ms]
  Mar  7 23:20:16.970: INFO: Created: latency-svc-7xh8l
  Mar  7 23:20:16.975: INFO: Created: latency-svc-f6t8k
  Mar  7 23:20:16.980: INFO: Created: latency-svc-msfrb
  Mar  7 23:20:16.994: INFO: Created: latency-svc-vs5rj
  Mar  7 23:20:16.994: INFO: Created: latency-svc-sbsf4
  Mar  7 23:20:17.000: INFO: Created: latency-svc-bx8pz
  Mar  7 23:20:17.004: INFO: Created: latency-svc-2nblf
  Mar  7 23:20:17.010: INFO: Created: latency-svc-5mgm7
  Mar  7 23:20:17.014: INFO: Created: latency-svc-lx9qr
  Mar  7 23:20:17.016: INFO: Created: latency-svc-2zlkv
  Mar  7 23:20:17.022: INFO: Created: latency-svc-hzltr
  Mar  7 23:20:17.027: INFO: Created: latency-svc-vq6xh
  Mar  7 23:20:17.031: INFO: Created: latency-svc-jsvhd
  Mar  7 23:20:17.035: INFO: Created: latency-svc-f6jzc
  Mar  7 23:20:17.039: INFO: Created: latency-svc-c9vp7
  Mar  7 23:20:17.043: INFO: Got endpoints: latency-svc-7xh8l [746.474734ms]
  Mar  7 23:20:17.051: INFO: Got endpoints: latency-svc-f6t8k [721.261514ms]
  Mar  7 23:20:17.063: INFO: Got endpoints: latency-svc-msfrb [344.967257ms]
  Mar  7 23:20:17.066: INFO: Got endpoints: latency-svc-sbsf4 [724.675926ms]
  Mar  7 23:20:17.077: INFO: Got endpoints: latency-svc-vs5rj [526.802049ms]
  Mar  7 23:20:17.081: INFO: Got endpoints: latency-svc-bx8pz [716.460092ms]
  Mar  7 23:20:17.130: INFO: Got endpoints: latency-svc-2nblf [847.593933ms]
  Mar  7 23:20:17.148: INFO: Got endpoints: latency-svc-lx9qr [740.807928ms]
  Mar  7 23:20:17.148: INFO: Got endpoints: latency-svc-5mgm7 [890.96831ms]
  Mar  7 23:20:17.165: INFO: Got endpoints: latency-svc-hzltr [574.085125ms]
  Mar  7 23:20:17.165: INFO: Got endpoints: latency-svc-2zlkv [506.474254ms]
  Mar  7 23:20:17.170: INFO: Created: latency-svc-nhvdc
  Mar  7 23:20:17.180: INFO: Got endpoints: latency-svc-vq6xh [828.378047ms]
  Mar  7 23:20:17.194: INFO: Got endpoints: latency-svc-f6jzc [509.211338ms]
  Mar  7 23:20:17.195: INFO: Got endpoints: latency-svc-jsvhd [690.20408ms]
  Mar  7 23:20:17.202: INFO: Got endpoints: latency-svc-c9vp7 [735.16541ms]
  Mar  7 23:20:17.209: INFO: Got endpoints: latency-svc-nhvdc [165.781931ms]
  Mar  7 23:20:17.216: INFO: Created: latency-svc-wmf4j
  Mar  7 23:20:17.229: INFO: Got endpoints: latency-svc-wmf4j [177.752579ms]
  Mar  7 23:20:17.234: INFO: Created: latency-svc-4b5d8
  Mar  7 23:20:17.243: INFO: Got endpoints: latency-svc-4b5d8 [180.28482ms]
  Mar  7 23:20:17.250: INFO: Created: latency-svc-z6mpz
  Mar  7 23:20:17.258: INFO: Got endpoints: latency-svc-z6mpz [191.870234ms]
  Mar  7 23:20:17.265: INFO: Created: latency-svc-v726r
  Mar  7 23:20:17.271: INFO: Got endpoints: latency-svc-v726r [194.449603ms]
  Mar  7 23:20:17.278: INFO: Created: latency-svc-dh97s
  Mar  7 23:20:17.295: INFO: Got endpoints: latency-svc-dh97s [213.615608ms]
  Mar  7 23:20:17.297: INFO: Created: latency-svc-7xmct
  Mar  7 23:20:17.308: INFO: Got endpoints: latency-svc-7xmct [177.624099ms]
  Mar  7 23:20:17.310: INFO: Created: latency-svc-flm74
  Mar  7 23:20:17.320: INFO: Got endpoints: latency-svc-flm74 [171.856839ms]
  Mar  7 23:20:17.324: INFO: Created: latency-svc-xc667
  Mar  7 23:20:17.332: INFO: Got endpoints: latency-svc-xc667 [183.233523ms]
  Mar  7 23:20:17.361: INFO: Created: latency-svc-g9zx9
  Mar  7 23:20:17.441: INFO: Created: latency-svc-kp2rw
  Mar  7 23:20:17.454: INFO: Got endpoints: latency-svc-g9zx9 [288.939214ms]
  Mar  7 23:20:17.481: INFO: Got endpoints: latency-svc-kp2rw [315.2257ms]
  Mar  7 23:20:17.493: INFO: Created: latency-svc-qpkgr
  Mar  7 23:20:17.514: INFO: Got endpoints: latency-svc-qpkgr [334.02255ms]
  Mar  7 23:20:17.553: INFO: Created: latency-svc-fbgrh
  Mar  7 23:20:17.577: INFO: Got endpoints: latency-svc-fbgrh [382.510494ms]
  Mar  7 23:20:17.585: INFO: Created: latency-svc-wsvxn
  E0307 23:20:17.606437      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:20:17.618: INFO: Got endpoints: latency-svc-wsvxn [423.396468ms]
  Mar  7 23:20:17.625: INFO: Created: latency-svc-7g55v
  Mar  7 23:20:17.649: INFO: Got endpoints: latency-svc-7g55v [445.997093ms]
  Mar  7 23:20:17.670: INFO: Created: latency-svc-flmzg
  Mar  7 23:20:17.691: INFO: Got endpoints: latency-svc-flmzg [482.006957ms]
  Mar  7 23:20:17.707: INFO: Created: latency-svc-jxn2k
  Mar  7 23:20:17.754: INFO: Got endpoints: latency-svc-jxn2k [524.451605ms]
  Mar  7 23:20:17.761: INFO: Created: latency-svc-8w6l6
  Mar  7 23:20:17.806: INFO: Got endpoints: latency-svc-8w6l6 [563.116012ms]
  Mar  7 23:20:17.812: INFO: Created: latency-svc-72ct2
  Mar  7 23:20:17.841: INFO: Got endpoints: latency-svc-72ct2 [583.731059ms]
  Mar  7 23:20:17.856: INFO: Created: latency-svc-9gz52
  Mar  7 23:20:17.885: INFO: Created: latency-svc-pssb7
  Mar  7 23:20:17.899: INFO: Got endpoints: latency-svc-9gz52 [628.171604ms]
  Mar  7 23:20:17.973: INFO: Got endpoints: latency-svc-pssb7 [677.897519ms]
  Mar  7 23:20:17.984: INFO: Created: latency-svc-wrssm
  Mar  7 23:20:18.009: INFO: Got endpoints: latency-svc-wrssm [701.226406ms]
  Mar  7 23:20:18.025: INFO: Created: latency-svc-xxzw5
  Mar  7 23:20:18.068: INFO: Got endpoints: latency-svc-xxzw5 [747.270366ms]
  Mar  7 23:20:18.077: INFO: Created: latency-svc-224j4
  Mar  7 23:20:18.108: INFO: Got endpoints: latency-svc-224j4 [768.013085ms]
  Mar  7 23:20:18.133: INFO: Created: latency-svc-fg28x
  Mar  7 23:20:18.165: INFO: Got endpoints: latency-svc-fg28x [710.715148ms]
  Mar  7 23:20:18.183: INFO: Created: latency-svc-htgmk
  Mar  7 23:20:18.218: INFO: Got endpoints: latency-svc-htgmk [737.395932ms]
  Mar  7 23:20:18.240: INFO: Created: latency-svc-jmdnk
  Mar  7 23:20:18.273: INFO: Created: latency-svc-g9cqz
  Mar  7 23:20:18.290: INFO: Got endpoints: latency-svc-jmdnk [776.124734ms]
  Mar  7 23:20:18.314: INFO: Got endpoints: latency-svc-g9cqz [736.410257ms]
  Mar  7 23:20:18.329: INFO: Created: latency-svc-qkhsl
  Mar  7 23:20:18.342: INFO: Got endpoints: latency-svc-qkhsl [723.395533ms]
  Mar  7 23:20:18.354: INFO: Created: latency-svc-wvs27
  Mar  7 23:20:18.380: INFO: Got endpoints: latency-svc-wvs27 [731.627816ms]
  Mar  7 23:20:18.389: INFO: Created: latency-svc-sdfqp
  Mar  7 23:20:18.413: INFO: Got endpoints: latency-svc-sdfqp [721.716549ms]
  Mar  7 23:20:18.424: INFO: Created: latency-svc-5h75k
  Mar  7 23:20:18.439: INFO: Got endpoints: latency-svc-5h75k [685.412527ms]
  Mar  7 23:20:18.450: INFO: Created: latency-svc-wnmk6
  Mar  7 23:20:18.477: INFO: Got endpoints: latency-svc-wnmk6 [670.362833ms]
  Mar  7 23:20:18.495: INFO: Created: latency-svc-6d7k8
  Mar  7 23:20:18.519: INFO: Got endpoints: latency-svc-6d7k8 [674.427947ms]
  Mar  7 23:20:18.540: INFO: Created: latency-svc-dv658
  Mar  7 23:20:18.589: INFO: Got endpoints: latency-svc-dv658 [689.252586ms]
  Mar  7 23:20:18.597: INFO: Created: latency-svc-6l5xj
  E0307 23:20:18.606873      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:20:18.609: INFO: Got endpoints: latency-svc-6l5xj [635.883753ms]
  Mar  7 23:20:18.620: INFO: Created: latency-svc-fgdxp
  Mar  7 23:20:18.629: INFO: Got endpoints: latency-svc-fgdxp [620.183922ms]
  Mar  7 23:20:18.640: INFO: Created: latency-svc-cvpbj
  Mar  7 23:20:18.655: INFO: Got endpoints: latency-svc-cvpbj [587.438021ms]
  Mar  7 23:20:18.660: INFO: Created: latency-svc-g2qnr
  Mar  7 23:20:18.672: INFO: Got endpoints: latency-svc-g2qnr [564.34476ms]
  Mar  7 23:20:18.684: INFO: Created: latency-svc-xsdqh
  Mar  7 23:20:18.695: INFO: Got endpoints: latency-svc-xsdqh [530.093097ms]
  Mar  7 23:20:18.702: INFO: Created: latency-svc-hdzz7
  Mar  7 23:20:18.712: INFO: Got endpoints: latency-svc-hdzz7 [493.850236ms]
  Mar  7 23:20:18.724: INFO: Created: latency-svc-d76p2
  Mar  7 23:20:18.736: INFO: Got endpoints: latency-svc-d76p2 [445.427639ms]
  Mar  7 23:20:18.748: INFO: Created: latency-svc-d9bpf
  Mar  7 23:20:18.754: INFO: Got endpoints: latency-svc-d9bpf [440.072104ms]
  Mar  7 23:20:18.769: INFO: Created: latency-svc-gv9kb
  Mar  7 23:20:18.780: INFO: Got endpoints: latency-svc-gv9kb [437.939634ms]
  Mar  7 23:20:18.783: INFO: Created: latency-svc-tcfp2
  Mar  7 23:20:18.791: INFO: Got endpoints: latency-svc-tcfp2 [401.397157ms]
  Mar  7 23:20:18.797: INFO: Created: latency-svc-7ld5q
  Mar  7 23:20:18.809: INFO: Got endpoints: latency-svc-7ld5q [396.306711ms]
  Mar  7 23:20:18.817: INFO: Created: latency-svc-dsr4m
  Mar  7 23:20:18.832: INFO: Got endpoints: latency-svc-dsr4m [393.152547ms]
  Mar  7 23:20:18.834: INFO: Created: latency-svc-r5mq8
  Mar  7 23:20:18.841: INFO: Created: latency-svc-wmfdr
  Mar  7 23:20:18.850: INFO: Got endpoints: latency-svc-r5mq8 [373.23893ms]
  Mar  7 23:20:18.865: INFO: Got endpoints: latency-svc-wmfdr [345.900411ms]
  Mar  7 23:20:18.875: INFO: Created: latency-svc-p7dv5
  Mar  7 23:20:18.890: INFO: Got endpoints: latency-svc-p7dv5 [301.55788ms]
  Mar  7 23:20:18.901: INFO: Created: latency-svc-9wcqv
  Mar  7 23:20:18.918: INFO: Got endpoints: latency-svc-9wcqv [309.465238ms]
  Mar  7 23:20:18.928: INFO: Created: latency-svc-nrs74
  Mar  7 23:20:18.941: INFO: Got endpoints: latency-svc-nrs74 [311.327093ms]
  Mar  7 23:20:18.949: INFO: Created: latency-svc-kr5qm
  Mar  7 23:20:18.964: INFO: Got endpoints: latency-svc-kr5qm [308.446507ms]
  Mar  7 23:20:18.970: INFO: Created: latency-svc-5hc6b
  Mar  7 23:20:18.985: INFO: Got endpoints: latency-svc-5hc6b [313.211126ms]
  Mar  7 23:20:18.988: INFO: Created: latency-svc-ftx87
  Mar  7 23:20:18.997: INFO: Got endpoints: latency-svc-ftx87 [301.231469ms]
  Mar  7 23:20:19.009: INFO: Created: latency-svc-4fvqv
  Mar  7 23:20:19.012: INFO: Created: latency-svc-lc9gt
  Mar  7 23:20:19.022: INFO: Created: latency-svc-mqk27
  Mar  7 23:20:19.030: INFO: Created: latency-svc-m4wxj
  Mar  7 23:20:19.041: INFO: Got endpoints: latency-svc-4fvqv [328.694198ms]
  Mar  7 23:20:19.044: INFO: Created: latency-svc-v6cbf
  Mar  7 23:20:19.053: INFO: Created: latency-svc-z56zh
  Mar  7 23:20:19.061: INFO: Created: latency-svc-cqg2f
  Mar  7 23:20:19.069: INFO: Created: latency-svc-nb6s9
  Mar  7 23:20:19.078: INFO: Created: latency-svc-498nk
  Mar  7 23:20:19.091: INFO: Got endpoints: latency-svc-lc9gt [355.533845ms]
  Mar  7 23:20:19.092: INFO: Created: latency-svc-zsgfl
  Mar  7 23:20:19.105: INFO: Created: latency-svc-66zf8
  Mar  7 23:20:19.105: INFO: Created: latency-svc-wc7ct
  Mar  7 23:20:19.113: INFO: Created: latency-svc-75g6v
  Mar  7 23:20:19.122: INFO: Created: latency-svc-zp6wp
  Mar  7 23:20:19.135: INFO: Created: latency-svc-9rjjt
  Mar  7 23:20:19.140: INFO: Got endpoints: latency-svc-mqk27 [386.526262ms]
  Mar  7 23:20:19.146: INFO: Created: latency-svc-57x49
  Mar  7 23:20:19.158: INFO: Created: latency-svc-t7z7z
  Mar  7 23:20:19.166: INFO: Created: latency-svc-q89nj
  Mar  7 23:20:19.201: INFO: Got endpoints: latency-svc-m4wxj [421.027871ms]
  Mar  7 23:20:19.262: INFO: Got endpoints: latency-svc-v6cbf [470.750504ms]
  Mar  7 23:20:19.268: INFO: Created: latency-svc-pz5gm
  Mar  7 23:20:19.314: INFO: Got endpoints: latency-svc-z56zh [504.96557ms]
  Mar  7 23:20:19.345: INFO: Created: latency-svc-ml228
  Mar  7 23:20:19.361: INFO: Got endpoints: latency-svc-cqg2f [528.686843ms]
  Mar  7 23:20:19.388: INFO: Created: latency-svc-7hmn4
  Mar  7 23:20:19.419: INFO: Got endpoints: latency-svc-nb6s9 [568.709738ms]
  Mar  7 23:20:19.426: INFO: Created: latency-svc-t64ck
  Mar  7 23:20:19.463: INFO: Got endpoints: latency-svc-498nk [598.164401ms]
  Mar  7 23:20:19.471: INFO: Created: latency-svc-v4x76
  Mar  7 23:20:19.513: INFO: Created: latency-svc-kdqq4
  Mar  7 23:20:19.519: INFO: Got endpoints: latency-svc-zsgfl [628.803877ms]
  Mar  7 23:20:19.567: INFO: Got endpoints: latency-svc-66zf8 [649.130802ms]
  Mar  7 23:20:19.582: INFO: Created: latency-svc-b6gw5
  E0307 23:20:19.607937      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:20:19.617: INFO: Got endpoints: latency-svc-wc7ct [676.484664ms]
  Mar  7 23:20:19.625: INFO: Created: latency-svc-4p52q
  Mar  7 23:20:19.660: INFO: Got endpoints: latency-svc-75g6v [696.072508ms]
  Mar  7 23:20:19.680: INFO: Created: latency-svc-xsl9f
  Mar  7 23:20:19.736: INFO: Got endpoints: latency-svc-zp6wp [750.399524ms]
  Mar  7 23:20:19.748: INFO: Created: latency-svc-httth
  Mar  7 23:20:19.760: INFO: Got endpoints: latency-svc-9rjjt [763.63522ms]
  Mar  7 23:20:19.789: INFO: Created: latency-svc-rmv9f
  Mar  7 23:20:19.816: INFO: Got endpoints: latency-svc-57x49 [775.580678ms]
  Mar  7 23:20:19.842: INFO: Created: latency-svc-t9kwz
  Mar  7 23:20:19.860: INFO: Got endpoints: latency-svc-t7z7z [768.193006ms]
  Mar  7 23:20:19.917: INFO: Created: latency-svc-t5fvv
  Mar  7 23:20:19.939: INFO: Got endpoints: latency-svc-q89nj [798.358696ms]
  Mar  7 23:20:19.956: INFO: Got endpoints: latency-svc-pz5gm [754.743493ms]
  Mar  7 23:20:19.975: INFO: Created: latency-svc-q2jzn
  Mar  7 23:20:19.993: INFO: Created: latency-svc-ccbqj
  Mar  7 23:20:20.019: INFO: Got endpoints: latency-svc-ml228 [755.5812ms]
  Mar  7 23:20:20.024: INFO: Created: latency-svc-jmvdh
  Mar  7 23:20:20.049: INFO: Got endpoints: latency-svc-7hmn4 [735.206832ms]
  Mar  7 23:20:20.069: INFO: Created: latency-svc-nlwmf
  Mar  7 23:20:20.087: INFO: Created: latency-svc-562jk
  Mar  7 23:20:20.105: INFO: Got endpoints: latency-svc-t64ck [744.179264ms]
  Mar  7 23:20:20.143: INFO: Created: latency-svc-mrzv4
  Mar  7 23:20:20.164: INFO: Got endpoints: latency-svc-v4x76 [744.898565ms]
  Mar  7 23:20:20.223: INFO: Got endpoints: latency-svc-kdqq4 [760.410364ms]
  Mar  7 23:20:20.241: INFO: Created: latency-svc-4tlbd
  Mar  7 23:20:20.256: INFO: Got endpoints: latency-svc-b6gw5 [736.613354ms]
  Mar  7 23:20:20.269: INFO: Created: latency-svc-kvxlv
  Mar  7 23:20:20.280: INFO: Created: latency-svc-w2tz6
  Mar  7 23:20:20.288: INFO: Got endpoints: latency-svc-4p52q [720.308418ms]
  Mar  7 23:20:20.309: INFO: Created: latency-svc-p65x2
  Mar  7 23:20:20.340: INFO: Got endpoints: latency-svc-xsl9f [722.442647ms]
  Mar  7 23:20:20.357: INFO: Created: latency-svc-bgp8r
  Mar  7 23:20:20.390: INFO: Got endpoints: latency-svc-httth [730.600396ms]
  Mar  7 23:20:20.406: INFO: Created: latency-svc-2d8bw
  Mar  7 23:20:20.438: INFO: Got endpoints: latency-svc-rmv9f [700.450932ms]
  Mar  7 23:20:20.456: INFO: Created: latency-svc-q48cg
  Mar  7 23:20:20.494: INFO: Got endpoints: latency-svc-t9kwz [733.806255ms]
  Mar  7 23:20:20.512: INFO: Created: latency-svc-8qhqp
  Mar  7 23:20:20.539: INFO: Got endpoints: latency-svc-t5fvv [722.765642ms]
  Mar  7 23:20:20.552: INFO: Created: latency-svc-28llq
  Mar  7 23:20:20.601: INFO: Got endpoints: latency-svc-q2jzn [740.908654ms]
  E0307 23:20:20.608351      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:20:20.631: INFO: Created: latency-svc-jr9rk
  Mar  7 23:20:20.663: INFO: Got endpoints: latency-svc-ccbqj [718.046982ms]
  Mar  7 23:20:20.699: INFO: Created: latency-svc-ws9dr
  Mar  7 23:20:20.719: INFO: Got endpoints: latency-svc-jmvdh [763.093221ms]
  Mar  7 23:20:20.753: INFO: Got endpoints: latency-svc-nlwmf [734.083017ms]
  Mar  7 23:20:20.777: INFO: Created: latency-svc-kpz79
  Mar  7 23:20:20.794: INFO: Created: latency-svc-xt57h
  Mar  7 23:20:20.816: INFO: Got endpoints: latency-svc-562jk [766.203188ms]
  Mar  7 23:20:20.857: INFO: Created: latency-svc-sq62z
  Mar  7 23:20:20.872: INFO: Got endpoints: latency-svc-mrzv4 [766.803369ms]
  Mar  7 23:20:20.913: INFO: Got endpoints: latency-svc-4tlbd [748.83999ms]
  Mar  7 23:20:20.921: INFO: Created: latency-svc-bwpq8
  Mar  7 23:20:20.954: INFO: Got endpoints: latency-svc-kvxlv [730.093573ms]
  Mar  7 23:20:20.962: INFO: Created: latency-svc-rfzz6
  Mar  7 23:20:20.993: INFO: Created: latency-svc-wkpqm
  Mar  7 23:20:21.017: INFO: Got endpoints: latency-svc-w2tz6 [761.036969ms]
  Mar  7 23:20:21.053: INFO: Got endpoints: latency-svc-p65x2 [765.740401ms]
  Mar  7 23:20:21.062: INFO: Created: latency-svc-gs8qb
  Mar  7 23:20:21.101: INFO: Created: latency-svc-x9m89
  Mar  7 23:20:21.109: INFO: Got endpoints: latency-svc-bgp8r [769.064072ms]
  Mar  7 23:20:21.152: INFO: Created: latency-svc-4xjh8
  Mar  7 23:20:21.159: INFO: Got endpoints: latency-svc-2d8bw [768.989459ms]
  Mar  7 23:20:21.194: INFO: Created: latency-svc-tgbvs
  Mar  7 23:20:21.204: INFO: Got endpoints: latency-svc-q48cg [765.763772ms]
  Mar  7 23:20:21.242: INFO: Created: latency-svc-c9tlp
  Mar  7 23:20:21.272: INFO: Got endpoints: latency-svc-8qhqp [777.874046ms]
  Mar  7 23:20:21.324: INFO: Got endpoints: latency-svc-28llq [784.428252ms]
  Mar  7 23:20:21.339: INFO: Created: latency-svc-gzpjm
  Mar  7 23:20:21.370: INFO: Got endpoints: latency-svc-jr9rk [769.045352ms]
  Mar  7 23:20:21.375: INFO: Created: latency-svc-cvg2r
  Mar  7 23:20:21.403: INFO: Got endpoints: latency-svc-ws9dr [739.459526ms]
  Mar  7 23:20:21.411: INFO: Created: latency-svc-c279d
  Mar  7 23:20:21.430: INFO: Created: latency-svc-gczxw
  Mar  7 23:20:21.446: INFO: Got endpoints: latency-svc-kpz79 [726.646112ms]
  Mar  7 23:20:21.477: INFO: Created: latency-svc-bwr49
  Mar  7 23:20:21.504: INFO: Got endpoints: latency-svc-xt57h [751.399272ms]
  Mar  7 23:20:21.530: INFO: Created: latency-svc-sktmh
  Mar  7 23:20:21.552: INFO: Got endpoints: latency-svc-sq62z [736.311692ms]
  Mar  7 23:20:21.582: INFO: Created: latency-svc-f2vtx
  Mar  7 23:20:21.604: INFO: Got endpoints: latency-svc-bwpq8 [731.926053ms]
  E0307 23:20:21.608746      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:20:21.632: INFO: Created: latency-svc-6wkzz
  Mar  7 23:20:21.652: INFO: Got endpoints: latency-svc-rfzz6 [739.646592ms]
  Mar  7 23:20:21.682: INFO: Created: latency-svc-b6q6v
  Mar  7 23:20:21.705: INFO: Got endpoints: latency-svc-wkpqm [751.302321ms]
  Mar  7 23:20:21.731: INFO: Created: latency-svc-6ndbw
  Mar  7 23:20:21.746: INFO: Got endpoints: latency-svc-gs8qb [729.0889ms]
  Mar  7 23:20:21.779: INFO: Created: latency-svc-lbppd
  Mar  7 23:20:21.797: INFO: Got endpoints: latency-svc-x9m89 [743.663974ms]
  Mar  7 23:20:21.825: INFO: Created: latency-svc-njkth
  Mar  7 23:20:21.849: INFO: Got endpoints: latency-svc-4xjh8 [740.358378ms]
  Mar  7 23:20:21.879: INFO: Created: latency-svc-8pn82
  Mar  7 23:20:21.899: INFO: Got endpoints: latency-svc-tgbvs [738.930096ms]
  Mar  7 23:20:21.925: INFO: Created: latency-svc-tzps8
  Mar  7 23:20:21.958: INFO: Got endpoints: latency-svc-c9tlp [753.238771ms]
  Mar  7 23:20:21.984: INFO: Created: latency-svc-ldljb
  Mar  7 23:20:21.996: INFO: Got endpoints: latency-svc-gzpjm [724.087279ms]
  Mar  7 23:20:22.042: INFO: Created: latency-svc-btmgb
  Mar  7 23:20:22.054: INFO: Got endpoints: latency-svc-cvg2r [729.804893ms]
  Mar  7 23:20:22.089: INFO: Created: latency-svc-txz2z
  Mar  7 23:20:22.113: INFO: Got endpoints: latency-svc-c279d [743.215625ms]
  Mar  7 23:20:22.156: INFO: Created: latency-svc-g9b6g
  Mar  7 23:20:22.157: INFO: Got endpoints: latency-svc-gczxw [754.318877ms]
  Mar  7 23:20:22.180: INFO: Created: latency-svc-mqrl8
  Mar  7 23:20:22.190: INFO: Got endpoints: latency-svc-bwr49 [743.979486ms]
  Mar  7 23:20:22.209: INFO: Created: latency-svc-lm92w
  Mar  7 23:20:22.239: INFO: Got endpoints: latency-svc-sktmh [734.279158ms]
  Mar  7 23:20:22.252: INFO: Created: latency-svc-jcpng
  Mar  7 23:20:22.295: INFO: Got endpoints: latency-svc-f2vtx [739.245561ms]
  Mar  7 23:20:22.333: INFO: Created: latency-svc-5884k
  Mar  7 23:20:22.361: INFO: Got endpoints: latency-svc-6wkzz [756.628803ms]
  Mar  7 23:20:22.398: INFO: Created: latency-svc-zv6vl
  Mar  7 23:20:22.417: INFO: Got endpoints: latency-svc-b6q6v [764.731254ms]
  Mar  7 23:20:22.464: INFO: Got endpoints: latency-svc-6ndbw [758.72063ms]
  Mar  7 23:20:22.475: INFO: Created: latency-svc-4rcqr
  Mar  7 23:20:22.518: INFO: Got endpoints: latency-svc-lbppd [766.029739ms]
  Mar  7 23:20:22.530: INFO: Created: latency-svc-sdzf7
  Mar  7 23:20:22.586: INFO: Got endpoints: latency-svc-njkth [788.278947ms]
  Mar  7 23:20:22.595: INFO: Created: latency-svc-wtl69
  E0307 23:20:22.610201      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:20:22.614: INFO: Got endpoints: latency-svc-8pn82 [764.405415ms]
  Mar  7 23:20:22.660: INFO: Created: latency-svc-9mdwq
  Mar  7 23:20:22.670: INFO: Got endpoints: latency-svc-tzps8 [771.17647ms]
  Mar  7 23:20:22.684: INFO: Created: latency-svc-dpgfw
  Mar  7 23:20:22.693: INFO: Got endpoints: latency-svc-ldljb [735.499584ms]
  Mar  7 23:20:22.705: INFO: Created: latency-svc-mbhjs
  Mar  7 23:20:22.721: INFO: Created: latency-svc-t9qb8
  Mar  7 23:20:22.752: INFO: Got endpoints: latency-svc-btmgb [755.955126ms]
  Mar  7 23:20:22.777: INFO: Created: latency-svc-ttsgq
  Mar  7 23:20:22.792: INFO: Got endpoints: latency-svc-txz2z [737.849052ms]
  Mar  7 23:20:22.809: INFO: Created: latency-svc-99mjs
  Mar  7 23:20:22.848: INFO: Got endpoints: latency-svc-g9b6g [734.453212ms]
  Mar  7 23:20:22.870: INFO: Created: latency-svc-jm4gl
  Mar  7 23:20:22.892: INFO: Got endpoints: latency-svc-mqrl8 [735.152845ms]
  Mar  7 23:20:22.938: INFO: Created: latency-svc-bjlk6
  Mar  7 23:20:22.950: INFO: Got endpoints: latency-svc-lm92w [754.096349ms]
  Mar  7 23:20:22.977: INFO: Created: latency-svc-2h4jz
  Mar  7 23:20:22.999: INFO: Got endpoints: latency-svc-jcpng [760.568303ms]
  Mar  7 23:20:23.037: INFO: Created: latency-svc-4kp6r
  Mar  7 23:20:23.057: INFO: Got endpoints: latency-svc-5884k [761.452251ms]
  Mar  7 23:20:23.107: INFO: Created: latency-svc-5ggxb
  Mar  7 23:20:23.120: INFO: Got endpoints: latency-svc-zv6vl [759.330509ms]
  Mar  7 23:20:23.153: INFO: Got endpoints: latency-svc-4rcqr [736.171409ms]
  Mar  7 23:20:23.171: INFO: Created: latency-svc-hmtj5
  Mar  7 23:20:23.193: INFO: Created: latency-svc-tdjdr
  Mar  7 23:20:23.202: INFO: Got endpoints: latency-svc-sdzf7 [738.562667ms]
  Mar  7 23:20:23.240: INFO: Created: latency-svc-dtb69
  Mar  7 23:20:23.259: INFO: Got endpoints: latency-svc-wtl69 [740.339473ms]
  Mar  7 23:20:23.300: INFO: Created: latency-svc-c6w8d
  Mar  7 23:20:23.321: INFO: Got endpoints: latency-svc-9mdwq [735.332648ms]
  Mar  7 23:20:23.377: INFO: Got endpoints: latency-svc-dpgfw [763.020916ms]
  Mar  7 23:20:23.385: INFO: Created: latency-svc-27j9w
  Mar  7 23:20:23.407: INFO: Got endpoints: latency-svc-mbhjs [736.724978ms]
  Mar  7 23:20:23.432: INFO: Created: latency-svc-p4xfj
  Mar  7 23:20:23.460: INFO: Got endpoints: latency-svc-t9qb8 [767.107955ms]
  Mar  7 23:20:23.469: INFO: Created: latency-svc-9rszf
  Mar  7 23:20:23.502: INFO: Created: latency-svc-9dch8
  Mar  7 23:20:23.512: INFO: Got endpoints: latency-svc-ttsgq [759.46059ms]
  Mar  7 23:20:23.552: INFO: Created: latency-svc-tcpkc
  Mar  7 23:20:23.574: INFO: Got endpoints: latency-svc-99mjs [782.41366ms]
  Mar  7 23:20:23.608: INFO: Got endpoints: latency-svc-jm4gl [760.675836ms]
  E0307 23:20:23.610858      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:20:23.624: INFO: Created: latency-svc-8hwbn
  Mar  7 23:20:23.649: INFO: Created: latency-svc-thxkp
  Mar  7 23:20:23.663: INFO: Got endpoints: latency-svc-bjlk6 [770.293103ms]
  Mar  7 23:20:23.703: INFO: Got endpoints: latency-svc-2h4jz [752.443927ms]
  Mar  7 23:20:23.710: INFO: Created: latency-svc-7b84h
  Mar  7 23:20:23.743: INFO: Created: latency-svc-h96ct
  Mar  7 23:20:23.764: INFO: Got endpoints: latency-svc-4kp6r [764.373491ms]
  Mar  7 23:20:23.807: INFO: Got endpoints: latency-svc-5ggxb [742.805924ms]
  Mar  7 23:20:23.832: INFO: Created: latency-svc-62tvr
  Mar  7 23:20:23.857: INFO: Got endpoints: latency-svc-hmtj5 [736.793291ms]
  Mar  7 23:20:23.886: INFO: Created: latency-svc-7xw8v
  Mar  7 23:20:23.916: INFO: Got endpoints: latency-svc-tdjdr [762.354026ms]
  Mar  7 23:20:23.927: INFO: Created: latency-svc-hctfh
  Mar  7 23:20:23.969: INFO: Got endpoints: latency-svc-dtb69 [766.704561ms]
  Mar  7 23:20:23.979: INFO: Created: latency-svc-zj9xh
  Mar  7 23:20:24.011: INFO: Got endpoints: latency-svc-c6w8d [752.208279ms]
  Mar  7 23:20:24.046: INFO: Created: latency-svc-25svs
  Mar  7 23:20:24.076: INFO: Got endpoints: latency-svc-27j9w [754.702139ms]
  Mar  7 23:20:24.083: INFO: Created: latency-svc-7xtw6
  Mar  7 23:20:24.109: INFO: Got endpoints: latency-svc-p4xfj [732.263371ms]
  Mar  7 23:20:24.143: INFO: Created: latency-svc-sxckx
  Mar  7 23:20:24.164: INFO: Got endpoints: latency-svc-9rszf [757.658673ms]
  Mar  7 23:20:24.204: INFO: Got endpoints: latency-svc-9dch8 [743.602104ms]
  Mar  7 23:20:24.252: INFO: Got endpoints: latency-svc-tcpkc [740.213314ms]
  Mar  7 23:20:24.317: INFO: Got endpoints: latency-svc-8hwbn [742.746388ms]
  Mar  7 23:20:24.353: INFO: Got endpoints: latency-svc-thxkp [745.104035ms]
  Mar  7 23:20:24.390: INFO: Got endpoints: latency-svc-7b84h [727.025921ms]
  Mar  7 23:20:24.476: INFO: Got endpoints: latency-svc-h96ct [772.6488ms]
  Mar  7 23:20:24.492: INFO: Got endpoints: latency-svc-62tvr [728.404721ms]
  Mar  7 23:20:24.552: INFO: Got endpoints: latency-svc-7xw8v [744.214264ms]
  Mar  7 23:20:24.600: INFO: Got endpoints: latency-svc-hctfh [742.872527ms]
  E0307 23:20:24.611759      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:20:24.661: INFO: Got endpoints: latency-svc-zj9xh [744.589348ms]
  Mar  7 23:20:24.700: INFO: Got endpoints: latency-svc-25svs [731.033093ms]
  Mar  7 23:20:24.752: INFO: Got endpoints: latency-svc-7xtw6 [740.225964ms]
  Mar  7 23:20:24.804: INFO: Got endpoints: latency-svc-sxckx [727.993934ms]
  Mar  7 23:20:24.804: INFO: Latencies: [25.123494ms 38.937153ms 72.233241ms 83.348901ms 93.083208ms 106.213395ms 149.253506ms 165.781931ms 171.856839ms 177.624099ms 177.752579ms 180.28482ms 183.233523ms 191.870234ms 194.449603ms 209.268045ms 213.615608ms 246.168202ms 288.939214ms 292.075873ms 301.231469ms 301.55788ms 308.446507ms 309.465238ms 311.327093ms 313.211126ms 315.2257ms 328.694198ms 333.073693ms 334.02255ms 344.967257ms 345.900411ms 355.533845ms 373.23893ms 382.510494ms 386.526262ms 393.152547ms 396.306711ms 400.652382ms 401.397157ms 421.027871ms 423.396468ms 427.250682ms 437.939634ms 440.072104ms 445.427639ms 445.997093ms 459.634265ms 470.750504ms 482.006957ms 493.850236ms 504.96557ms 506.474254ms 509.211338ms 524.451605ms 526.802049ms 528.686843ms 530.093097ms 563.116012ms 564.34476ms 568.709738ms 574.085125ms 583.731059ms 587.438021ms 598.164401ms 620.183922ms 628.171604ms 628.803877ms 635.883753ms 649.130802ms 670.362833ms 674.427947ms 676.484664ms 677.897519ms 685.412527ms 689.252586ms 690.20408ms 696.072508ms 700.450932ms 701.226406ms 710.715148ms 716.460092ms 718.046982ms 720.308418ms 721.261514ms 721.716549ms 722.442647ms 722.765642ms 723.395533ms 724.087279ms 724.675926ms 726.646112ms 727.025921ms 727.993934ms 728.404721ms 729.0889ms 729.804893ms 730.093573ms 730.600396ms 731.033093ms 731.627816ms 731.926053ms 732.263371ms 733.806255ms 734.083017ms 734.279158ms 734.453212ms 735.152845ms 735.16541ms 735.206832ms 735.332648ms 735.499584ms 736.171409ms 736.311692ms 736.410257ms 736.613354ms 736.724978ms 736.793291ms 737.395932ms 737.849052ms 738.562667ms 738.930096ms 739.245561ms 739.459526ms 739.646592ms 740.213314ms 740.225964ms 740.339473ms 740.358378ms 740.807928ms 740.908654ms 742.746388ms 742.805924ms 742.872527ms 743.215625ms 743.602104ms 743.663974ms 743.979486ms 744.179264ms 744.214264ms 744.589348ms 744.898565ms 745.104035ms 746.474734ms 747.270366ms 748.83999ms 750.399524ms 751.302321ms 751.399272ms 752.208279ms 752.443927ms 753.238771ms 754.096349ms 754.318877ms 754.702139ms 754.743493ms 755.5812ms 755.955126ms 756.628803ms 757.658673ms 758.72063ms 759.330509ms 759.46059ms 760.410364ms 760.568303ms 760.675836ms 761.036969ms 761.452251ms 762.354026ms 763.020916ms 763.093221ms 763.63522ms 764.373491ms 764.405415ms 764.731254ms 765.740401ms 765.763772ms 766.029739ms 766.203188ms 766.704561ms 766.803369ms 767.107955ms 768.013085ms 768.193006ms 768.989459ms 769.045352ms 769.064072ms 770.293103ms 771.17647ms 772.6488ms 775.580678ms 776.124734ms 777.874046ms 782.41366ms 784.428252ms 788.278947ms 798.358696ms 828.378047ms 847.593933ms 890.96831ms]
  Mar  7 23:20:24.804: INFO: 50 %ile: 731.627816ms
  Mar  7 23:20:24.804: INFO: 90 %ile: 766.803369ms
  Mar  7 23:20:24.804: INFO: 99 %ile: 847.593933ms
  Mar  7 23:20:24.804: INFO: Total sample count: 200
  Mar  7 23:20:24.805: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svc-latency-9426" for this suite. @ 03/07/24 23:20:24.82
• [9.845 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/init_container.go:335
  STEP: Creating a kubernetes client @ 03/07/24 23:20:24.843
  Mar  7 23:20:24.843: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename init-container @ 03/07/24 23:20:24.845
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:20:24.898
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:20:24.906
  STEP: creating the pod @ 03/07/24 23:20:24.914
  Mar  7 23:20:24.914: INFO: PodSpec: initContainers in spec.initContainers
  E0307 23:20:25.612497      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:26.613719      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:27.614049      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:28.614093      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:29.614527      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:30.614581      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:31.615229      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:32.615517      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:33.615878      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:34.616040      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:35.616298      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:36.616691      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:37.617765      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:38.617963      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:39.618392      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:40.618887      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:41.619136      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:42.619834      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:43.620861      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:44.621540      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:45.621627      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:46.622120      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:47.622705      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:48.622793      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:49.623249      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:50.623355      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:51.623613      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:52.623967      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:53.624225      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:54.624903      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:55.624972      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:56.624982      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:57.625480      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:58.626045      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:20:59.626301      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:00.626882      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:01.626962      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:02.627515      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:03.627935      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:04.628428      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:05.628811      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:06.629752      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:07.139: INFO: init container has failed twice: &v1.Pod{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"pod-init-94b86fa6-549e-4007-ba9d-2f9d28ad3b79", GenerateName:"", Namespace:"init-container-8111", SelfLink:"", UID:"0513db03-113a-42a2-9931-04bd19ae367b", ResourceVersion:"120863", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 20, 24, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"name":"foo", "time":"914437833"}, Annotations:map[string]string{"cni.projectcalico.org/containerID":"fbbda18437533e407d0fcae19045c741f110e5526c3786a75a936fd3558b1252", "cni.projectcalico.org/podIP":"10.1.51.89/32", "cni.projectcalico.org/podIPs":"10.1.51.89/32"}, OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 20, 24, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0064bc060), Subresource:""}, v1.ManagedFieldsEntry{Manager:"calico", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 20, 25, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0064bc090), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 21, 7, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0064bc0c0), Subresource:"status"}}}, Spec:v1.PodSpec{Volumes:[]v1.Volume{v1.Volume{Name:"kube-api-access-cxzr2", VolumeSource:v1.VolumeSource{HostPath:(*v1.HostPathVolumeSource)(nil), EmptyDir:(*v1.EmptyDirVolumeSource)(nil), GCEPersistentDisk:(*v1.GCEPersistentDiskVolumeSource)(nil), AWSElasticBlockStore:(*v1.AWSElasticBlockStoreVolumeSource)(nil), GitRepo:(*v1.GitRepoVolumeSource)(nil), Secret:(*v1.SecretVolumeSource)(nil), NFS:(*v1.NFSVolumeSource)(nil), ISCSI:(*v1.ISCSIVolumeSource)(nil), Glusterfs:(*v1.GlusterfsVolumeSource)(nil), PersistentVolumeClaim:(*v1.PersistentVolumeClaimVolumeSource)(nil), RBD:(*v1.RBDVolumeSource)(nil), FlexVolume:(*v1.FlexVolumeSource)(nil), Cinder:(*v1.CinderVolumeSource)(nil), CephFS:(*v1.CephFSVolumeSource)(nil), Flocker:(*v1.FlockerVolumeSource)(nil), DownwardAPI:(*v1.DownwardAPIVolumeSource)(nil), FC:(*v1.FCVolumeSource)(nil), AzureFile:(*v1.AzureFileVolumeSource)(nil), ConfigMap:(*v1.ConfigMapVolumeSource)(nil), VsphereVolume:(*v1.VsphereVirtualDiskVolumeSource)(nil), Quobyte:(*v1.QuobyteVolumeSource)(nil), AzureDisk:(*v1.AzureDiskVolumeSource)(nil), PhotonPersistentDisk:(*v1.PhotonPersistentDiskVolumeSource)(nil), Projected:(*v1.ProjectedVolumeSource)(0xc000ed6340), PortworxVolume:(*v1.PortworxVolumeSource)(nil), ScaleIO:(*v1.ScaleIOVolumeSource)(nil), StorageOS:(*v1.StorageOSVolumeSource)(nil), CSI:(*v1.CSIVolumeSource)(nil), Ephemeral:(*v1.EphemeralVolumeSource)(nil)}}}, InitContainers:[]v1.Container{v1.Container{Name:"init1", Image:"registry.k8s.io/e2e-test-images/busybox:1.36.1-1", Command:[]string{"/bin/false"}, Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), Requests:v1.ResourceList(nil), Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-cxzr2", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}, v1.Container{Name:"init2", Image:"registry.k8s.io/e2e-test-images/busybox:1.36.1-1", Command:[]string{"/bin/true"}, Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), Requests:v1.ResourceList(nil), Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-cxzr2", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}}, Containers:[]v1.Container{v1.Container{Name:"run1", Image:"registry.k8s.io/pause:3.9", Command:[]string(nil), Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:100, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"100m", Format:"DecimalSI"}}, Requests:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:100, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"100m", Format:"DecimalSI"}}, Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-cxzr2", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}}, EphemeralContainers:[]v1.EphemeralContainer(nil), RestartPolicy:"Always", TerminationGracePeriodSeconds:(*int64)(0xc0037e01b0), ActiveDeadlineSeconds:(*int64)(nil), DNSPolicy:"ClusterFirst", NodeSelector:map[string]string(nil), ServiceAccountName:"default", DeprecatedServiceAccount:"default", AutomountServiceAccountToken:(*bool)(nil), NodeName:"whiskas-1", HostNetwork:false, HostPID:false, HostIPC:false, ShareProcessNamespace:(*bool)(nil), SecurityContext:(*v1.PodSecurityContext)(0xc0002a8000), ImagePullSecrets:[]v1.LocalObjectReference(nil), Hostname:"", Subdomain:"", Affinity:(*v1.Affinity)(nil), SchedulerName:"default-scheduler", Tolerations:[]v1.Toleration{v1.Toleration{Key:"node.kubernetes.io/not-ready", Operator:"Exists", Value:"", Effect:"NoExecute", TolerationSeconds:(*int64)(0xc0037e0230)}, v1.Toleration{Key:"node.kubernetes.io/unreachable", Operator:"Exists", Value:"", Effect:"NoExecute", TolerationSeconds:(*int64)(0xc0037e0260)}}, HostAliases:[]v1.HostAlias(nil), PriorityClassName:"", Priority:(*int32)(0xc0037e0268), DNSConfig:(*v1.PodDNSConfig)(nil), ReadinessGates:[]v1.PodReadinessGate(nil), RuntimeClassName:(*string)(nil), EnableServiceLinks:(*bool)(0xc0037e026c), PreemptionPolicy:(*v1.PreemptionPolicy)(0xc0013a2220), Overhead:v1.ResourceList(nil), TopologySpreadConstraints:[]v1.TopologySpreadConstraint(nil), SetHostnameAsFQDN:(*bool)(nil), OS:(*v1.PodOS)(nil), HostUsers:(*bool)(nil), SchedulingGates:[]v1.PodSchedulingGate(nil), ResourceClaims:[]v1.PodResourceClaim(nil)}, Status:v1.PodStatus{Phase:"Pending", Conditions:[]v1.PodCondition{v1.PodCondition{Type:"PodReadyToStartContainers", Status:"True", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.March, 7, 23, 20, 25, 0, time.Local), Reason:"", Message:""}, v1.PodCondition{Type:"Initialized", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.March, 7, 23, 20, 24, 0, time.Local), Reason:"ContainersNotInitialized", Message:"containers with incomplete status: [init1 init2]"}, v1.PodCondition{Type:"Ready", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.March, 7, 23, 20, 24, 0, time.Local), Reason:"ContainersNotReady", Message:"containers with unready status: [run1]"}, v1.PodCondition{Type:"ContainersReady", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.March, 7, 23, 20, 24, 0, time.Local), Reason:"ContainersNotReady", Message:"containers with unready status: [run1]"}, v1.PodCondition{Type:"PodScheduled", Status:"True", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.March, 7, 23, 20, 24, 0, time.Local), Reason:"", Message:""}}, Message:"", Reason:"", NominatedNodeName:"", HostIP:"10.100.138.205", HostIPs:[]v1.HostIP{v1.HostIP{IP:"10.100.138.205"}}, PodIP:"10.1.51.89", PodIPs:[]v1.PodIP{v1.PodIP{IP:"10.1.51.89"}}, StartTime:time.Date(2024, time.March, 7, 23, 20, 24, 0, time.Local), InitContainerStatuses:[]v1.ContainerStatus{v1.ContainerStatus{Name:"init1", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(0xc0064bc108), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(0xc0002a80e0)}, Ready:false, RestartCount:3, Image:"registry.k8s.io/e2e-test-images/busybox:1.36.1-1", ImageID:"registry.k8s.io/e2e-test-images/busybox@sha256:a9155b13325b2abef48e71de77bb8ac015412a566829f621d06bfae5c699b1b9", ContainerID:"containerd://798f445f0385c686e05456bb9e0929a362afa81b3f97e6a6124cdd21860a1f2c", Started:(*bool)(0xc0037e0305), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}, v1.ContainerStatus{Name:"init2", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(0xc000ed6420), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, Ready:false, RestartCount:0, Image:"registry.k8s.io/e2e-test-images/busybox:1.36.1-1", ImageID:"", ContainerID:"", Started:(*bool)(0xc0037e030b), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}}, ContainerStatuses:[]v1.ContainerStatus{v1.ContainerStatus{Name:"run1", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(0xc000ed63e0), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, Ready:false, RestartCount:0, Image:"registry.k8s.io/pause:3.9", ImageID:"", ContainerID:"", Started:(*bool)(0xc0037e02ef), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}}, QOSClass:"Burstable", EphemeralContainerStatuses:[]v1.ContainerStatus(nil), Resize:"", ResourceClaimStatuses:[]v1.PodResourceClaimStatus(nil)}}
  Mar  7 23:21:07.139: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-8111" for this suite. @ 03/07/24 23:21:07.144
• [42.310 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should delete a collection of pods [Conformance] [sig-node, Conformance]
test/e2e/common/node/pods.go:846
  STEP: Creating a kubernetes client @ 03/07/24 23:21:07.154
  Mar  7 23:21:07.154: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pods @ 03/07/24 23:21:07.154
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:21:07.18
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:21:07.183
  STEP: Create set of pods @ 03/07/24 23:21:07.185
  Mar  7 23:21:07.193: INFO: created test-pod-1
  Mar  7 23:21:07.206: INFO: created test-pod-2
  Mar  7 23:21:07.214: INFO: created test-pod-3
  STEP: waiting for all 3 pods to be running @ 03/07/24 23:21:07.214
  E0307 23:21:07.630078      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:08.630536      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: waiting for all pods to be deleted @ 03/07/24 23:21:09.323
  Mar  7 23:21:09.332: INFO: Pod quantity 3 is different from expected quantity 0
  E0307 23:21:09.631772      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:10.329: INFO: Pod quantity 3 is different from expected quantity 0
  E0307 23:21:10.632485      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:11.337: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-8473" for this suite. @ 03/07/24 23:21:11.345
• [4.206 seconds]
------------------------------
[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:132
  STEP: Creating a kubernetes client @ 03/07/24 23:21:11.361
  Mar  7 23:21:11.361: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 23:21:11.362
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:21:11.389
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:21:11.391
  STEP: Creating the pod @ 03/07/24 23:21:11.394
  E0307 23:21:11.632710      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:12.633006      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:13.633349      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:13.974: INFO: Successfully updated pod "labelsupdate6bb53841-553d-4d36-b6a8-1cf5ab414443"
  E0307 23:21:14.633638      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:15.634432      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:16.634428      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:17.634581      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:18.014: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1044" for this suite. @ 03/07/24 23:21:18.025
• [6.690 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a GRPC liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:527
  STEP: Creating a kubernetes client @ 03/07/24 23:21:18.052
  Mar  7 23:21:18.052: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-probe @ 03/07/24 23:21:18.054
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:21:18.104
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:21:18.108
  STEP: Creating pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066 @ 03/07/24 23:21:18.112
  E0307 23:21:18.635449      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:19.635876      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking the pod's current state and verifying that restartCount is present @ 03/07/24 23:21:20.134
  Mar  7 23:21:20.143: INFO: Initial restart count of pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 is 0
  Mar  7 23:21:20.150: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:20.636818      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:21.637103      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:22.153: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:22.638157      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:23.638166      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:24.171: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:24.638429      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:25.638832      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:26.183: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:26.639368      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:27.640071      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:28.193: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:28.640334      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:29.641044      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:30.202: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:30.642229      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:31.643075      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:32.205: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:32.643596      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:33.643885      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:34.214: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:34.644179      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:35.645332      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:36.225: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:36.645564      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:37.646178      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:38.235: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:38.647027      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:39.648228      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:40.244: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:40.648426      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:41.648820      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:42.254: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:42.649575      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:43.650202      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:44.264: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:44.651278      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:45.652292      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:46.273: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:46.652392      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:47.653611      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:48.284: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:48.654103      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:49.654611      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:50.294: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:50.655141      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:51.655501      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:52.304: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:52.655794      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:53.656456      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:54.313: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:54.656698      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:55.657872      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:56.323: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:56.658049      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:57.659097      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:21:58.334: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:21:58.659259      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:21:59.659714      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:00.343: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:00.660511      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:01.661829      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:02.353: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:02.662629      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:03.663583      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:04.361: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:04.664672      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:05.665284      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:06.371: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:06.665742      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:07.666326      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:08.382: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:08.667019      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:09.667646      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:10.391: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:10.668027      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:11.668997      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:12.394: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:12.669204      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:13.669823      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:14.397: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:14.669991      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:15.670978      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:16.406: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:16.671343      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:17.671923      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:18.417: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:18.672644      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:19.673182      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:20.422: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:20.673609      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:21.673670      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:22.442: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:22.673868      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:23.674334      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:24.451: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:24.675338      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:25.675398      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:26.461: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:26.675540      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:27.676159      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:28.471: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:28.677251      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:29.677873      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:30.481: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:30.678530      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:31.678818      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:32.490: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:32.679484      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:33.680176      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:34.500: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:34.680828      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:35.682019      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:36.510: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:36.682713      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:37.683179      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:38.522: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:38.684075      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:39.684417      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:40.532: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:40.685107      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:41.686230      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:42.543: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:42.686366      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:43.686977      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:44.552: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:44.687060      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:45.687160      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:46.559: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:46.688311      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:47.688953      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:48.565: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:48.689950      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:49.690546      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:50.575: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:50.691524      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:51.692620      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:52.584: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:52.693489      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:53.694353      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:54.594: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:54.695273      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:55.696499      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:56.604: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:56.696940      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:57.697574      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:22:58.608: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:22:58.698630      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:22:59.699192      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:00.617: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:00.700073      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:01.700278      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:02.628: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:02.700775      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:03.701920      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:04.638: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:04.702887      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:05.703954      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:06.648: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:06.704224      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:07.704214      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:08.654: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:08.705316      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:09.705757      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:10.663: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:10.706401      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:11.707303      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:12.674: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:12.708453      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:13.709045      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:14.683: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:14.710127      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:15.711081      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:16.692: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:16.711133      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:17.711594      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:18.703: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:18.712260      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:19.713330      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:20.713: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:20.713632      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:21.714564      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:22.715523      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:22.722: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:23.715813      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:24.716454      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:24.733: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:25.717626      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:26.717796      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:26.742: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:27.718664      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:28.719209      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:28.752: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:29.720199      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:30.720955      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:30.762: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:31.721274      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:32.721889      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:32.771: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:33.722245      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:34.723277      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:34.781: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:35.724433      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:36.725380      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:36.789: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:37.725975      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:38.725924      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:38.800: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:39.726084      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:40.726534      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:40.810: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:41.726891      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:42.727834      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:42.821: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:43.728264      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:44.729518      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:44.828: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:45.729689      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:46.730045      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:46.838: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:47.730238      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:48.730847      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:48.851: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:49.731594      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:50.732433      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:50.862: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:51.733502      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:52.734176      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:52.872: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:53.734284      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:54.734947      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:54.875: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:55.735301      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:56.736324      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:56.886: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:57.736721      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:23:58.737426      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:23:58.899: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:23:59.737976      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:00.738406      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:00.909: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:01.739277      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:02.739439      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:02.928: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:03.739900      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:04.740400      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:04.933: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:05.740700      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:06.740995      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:06.945: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:07.741009      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:08.741709      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:08.956: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:09.742019      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:10.742711      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:10.967: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:11.743047      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:12.743356      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:12.977: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:13.744376      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:14.744917      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:14.986: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:15.745765      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:16.746452      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:16.996: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:17.746855      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:18.747458      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:19.008: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:19.747883      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:20.748483      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:21.019: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:21.749008      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:22.749718      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:23.028: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:23.750771      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:24.751412      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:25.031: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:25.751593      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:26.751815      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:27.041: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:27.752223      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:28.752864      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:29.052: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:29.752931      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:30.753568      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:31.062: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:31.753774      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:32.754412      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:33.072: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:33.755160      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:34.755528      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:35.082: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:35.755685      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:36.756663      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:37.093: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:37.757514      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:38.758108      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:39.104: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:39.758673      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:40.758926      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:41.114: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:41.760154      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:42.760795      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:43.170: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:43.761797      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:44.762365      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:45.180: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:45.762786      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:46.763966      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:47.190: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:47.764325      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:48.765126      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:49.201: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:49.765776      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:50.766144      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:51.211: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:51.766724      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:52.767287      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:53.221: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:53.767964      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:54.768651      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:55.230: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:55.769593      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:56.769862      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:57.241: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:57.770870      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:24:58.771041      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:24:59.252: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:24:59.771478      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:00.772197      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:25:01.255: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:25:01.772445      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:02.772795      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:25:03.265: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:25:03.773826      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:04.774480      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:25:05.274: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:25:05.775111      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:06.775621      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:25:07.283: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:25:07.775615      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:08.775886      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:25:09.295: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:25:09.776299      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:10.777478      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:25:11.305: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:25:11.778019      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:12.779009      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:25:13.315: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:25:13.780145      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:14.780928      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:25:15.325: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:25:15.781149      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:16.781828      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:25:17.334: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:25:17.782630      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:18.783464      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:25:19.345: INFO: Get pod test-grpc-327e5c66-871f-4984-ae2a-3e0f03e897a7 in namespace container-probe-2066
  E0307 23:25:19.784419      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:20.784538      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: deleting the pod @ 03/07/24 23:25:21.346
  Mar  7 23:25:21.397: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-2066" for this suite. @ 03/07/24 23:25:21.434
• [243.391 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:889
  STEP: Creating a kubernetes client @ 03/07/24 23:25:21.443
  Mar  7 23:25:21.443: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename resourcequota @ 03/07/24 23:25:21.444
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:25:21.459
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:25:21.461
  STEP: Creating a ResourceQuota @ 03/07/24 23:25:21.464
  STEP: Getting a ResourceQuota @ 03/07/24 23:25:21.469
  STEP: Updating a ResourceQuota @ 03/07/24 23:25:21.471
  STEP: Verifying a ResourceQuota was modified @ 03/07/24 23:25:21.48
  STEP: Deleting a ResourceQuota @ 03/07/24 23:25:21.484
  STEP: Verifying the deleted ResourceQuota @ 03/07/24 23:25:21.492
  Mar  7 23:25:21.494: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-971" for this suite. @ 03/07/24 23:25:21.498
• [0.063 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:163
  STEP: Creating a kubernetes client @ 03/07/24 23:25:21.507
  Mar  7 23:25:21.507: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename resourcequota @ 03/07/24 23:25:21.507
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:25:21.53
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:25:21.534
  STEP: Discovering how many secrets are in namespace by default @ 03/07/24 23:25:21.536
  E0307 23:25:21.785293      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:22.785422      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:23.785674      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:24.786633      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:25.787024      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Counting existing ResourceQuota @ 03/07/24 23:25:26.54
  E0307 23:25:26.787202      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:27.787253      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:28.788456      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:29.789558      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:30.789895      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota @ 03/07/24 23:25:31.551
  STEP: Ensuring resource quota status is calculated @ 03/07/24 23:25:31.575
  E0307 23:25:31.790261      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:32.790623      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a Secret @ 03/07/24 23:25:33.585
  STEP: Ensuring resource quota status captures secret creation @ 03/07/24 23:25:33.627
  E0307 23:25:33.791694      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:34.792281      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting a secret @ 03/07/24 23:25:35.637
  STEP: Ensuring resource quota status released usage @ 03/07/24 23:25:35.657
  E0307 23:25:35.793468      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:36.794052      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:25:37.666: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-9121" for this suite. @ 03/07/24 23:25:37.677
• [16.197 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for pods for Hostname [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:244
  STEP: Creating a kubernetes client @ 03/07/24 23:25:37.705
  Mar  7 23:25:37.705: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename dns @ 03/07/24 23:25:37.707
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:25:37.761
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:25:37.766
  STEP: Creating a test headless service @ 03/07/24 23:25:37.769
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-2.dns-test-service-2.dns-8670.svc.cluster.local)" && echo OK > /results/wheezy_hosts@dns-querier-2.dns-test-service-2.dns-8670.svc.cluster.local;test -n "$$(getent hosts dns-querier-2)" && echo OK > /results/wheezy_hosts@dns-querier-2;sleep 1; done
   @ 03/07/24 23:25:37.778
  STEP: Running these commands on jessie: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-2.dns-test-service-2.dns-8670.svc.cluster.local)" && echo OK > /results/jessie_hosts@dns-querier-2.dns-test-service-2.dns-8670.svc.cluster.local;test -n "$$(getent hosts dns-querier-2)" && echo OK > /results/jessie_hosts@dns-querier-2;sleep 1; done
   @ 03/07/24 23:25:37.778
  STEP: creating a pod to probe DNS @ 03/07/24 23:25:37.778
  STEP: submitting the pod to kubernetes @ 03/07/24 23:25:37.778
  E0307 23:25:37.795041      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:38.795594      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:39.796048      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: retrieving the pod @ 03/07/24 23:25:39.811
  STEP: looking for the results for each expected name from probers @ 03/07/24 23:25:39.82
  Mar  7 23:25:39.857: INFO: Unable to read jessie_hosts@dns-querier-2 from pod dns-8670/dns-test-b9b31afd-08ee-4ef3-ad76-a2f4b26739b8: the server could not find the requested resource (get pods dns-test-b9b31afd-08ee-4ef3-ad76-a2f4b26739b8)
  Mar  7 23:25:39.857: INFO: Lookups using dns-8670/dns-test-b9b31afd-08ee-4ef3-ad76-a2f4b26739b8 failed for: [jessie_hosts@dns-querier-2]

  Mar  7 23:25:39.884: INFO: Pod client logs for webserver: 
  Mar  7 23:25:39.890: INFO: Pod client logs for querier: 
  Mar  7 23:25:39.896: INFO: Pod client logs for jessie-querier: 
  E0307 23:25:40.796902      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:41.798009      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:42.798433      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:43.798925      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:44.799533      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:25:44.842: INFO: DNS probes using dns-8670/dns-test-b9b31afd-08ee-4ef3-ad76-a2f4b26739b8 succeeded

  STEP: deleting the pod @ 03/07/24 23:25:44.842
  STEP: deleting the test headless service @ 03/07/24 23:25:44.869
  Mar  7 23:25:44.919: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-8670" for this suite. @ 03/07/24 23:25:44.928
• [7.231 seconds]
------------------------------
[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/downwardapi.go:269
  STEP: Creating a kubernetes client @ 03/07/24 23:25:44.936
  Mar  7 23:25:44.936: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename downward-api @ 03/07/24 23:25:44.936
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:25:44.95
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:25:44.952
  STEP: Creating a pod to test downward api env vars @ 03/07/24 23:25:44.954
  E0307 23:25:45.800609      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:46.800957      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:47.801474      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:48.801838      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 03/07/24 23:25:48.982
  Mar  7 23:25:48.990: INFO: Trying to get logs from node whiskas-1 pod downward-api-632be61b-c475-4837-a9dc-e6817fce2a86 container dapi-container: <nil>
  STEP: delete the pod @ 03/07/24 23:25:49.008
  Mar  7 23:25:49.053: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1469" for this suite. @ 03/07/24 23:25:49.061
• [4.145 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:403
  STEP: Creating a kubernetes client @ 03/07/24 23:25:49.082
  Mar  7 23:25:49.082: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 23:25:49.083
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:25:49.114
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:25:49.117
  STEP: Setting up server cert @ 03/07/24 23:25:49.155
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 23:25:49.579
  STEP: Deploying the webhook pod @ 03/07/24 23:25:49.594
  STEP: Wait for the deployment to be ready @ 03/07/24 23:25:49.614
  Mar  7 23:25:49.622: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  E0307 23:25:49.802308      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:50.803419      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 03/07/24 23:25:51.649
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 23:25:51.687
  E0307 23:25:51.804323      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:25:52.689: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Creating a validating webhook configuration @ 03/07/24 23:25:52.705
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 03/07/24 23:25:52.739
  STEP: Updating a validating webhook configuration's rules to not include the create operation @ 03/07/24 23:25:52.746
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 03/07/24 23:25:52.758
  STEP: Patching a validating webhook configuration's rules to include the create operation @ 03/07/24 23:25:52.769
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 03/07/24 23:25:52.777
  E0307 23:25:52.808543      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:25:52.833: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-8896" for this suite. @ 03/07/24 23:25:52.84
  STEP: Destroying namespace "webhook-markers-9470" for this suite. @ 03/07/24 23:25:52.853
• [3.780 seconds]
------------------------------
SSSS
------------------------------
[sig-apps] Job should delete a job [Conformance] [sig-apps, Conformance]
test/e2e/apps/job.go:627
  STEP: Creating a kubernetes client @ 03/07/24 23:25:52.862
  Mar  7 23:25:52.862: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename job @ 03/07/24 23:25:52.862
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:25:52.877
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:25:52.879
  STEP: Creating a job @ 03/07/24 23:25:52.882
  STEP: Ensuring active pods == parallelism @ 03/07/24 23:25:52.887
  E0307 23:25:53.809016      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:54.810077      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete a job @ 03/07/24 23:25:54.89
  STEP: deleting Job.batch foo in namespace job-8029, will wait for the garbage collector to delete the pods @ 03/07/24 23:25:54.89
  Mar  7 23:25:54.964: INFO: Deleting Job.batch foo took: 20.987968ms
  Mar  7 23:25:55.065: INFO: Terminating Job.batch foo pods took: 100.607186ms
  E0307 23:25:55.810089      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:56.810943      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring job was deleted @ 03/07/24 23:25:57.266
  Mar  7 23:25:57.274: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-8029" for this suite. @ 03/07/24 23:25:57.284
• [4.443 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-apps] ReplicationController should serve a basic image on each replica with a public image [Conformance] [sig-apps, Conformance]
test/e2e/apps/rc.go:70
  STEP: Creating a kubernetes client @ 03/07/24 23:25:57.305
  Mar  7 23:25:57.305: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename replication-controller @ 03/07/24 23:25:57.307
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:25:57.354
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:25:57.358
  STEP: Creating replication controller my-hostname-basic-06e895f3-5bd9-4def-b163-8478c577526d @ 03/07/24 23:25:57.362
  Mar  7 23:25:57.373: INFO: Pod name my-hostname-basic-06e895f3-5bd9-4def-b163-8478c577526d: Found 0 pods out of 1
  E0307 23:25:57.811067      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:58.811714      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:25:59.812335      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:00.812565      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:01.813194      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:26:02.383: INFO: Pod name my-hostname-basic-06e895f3-5bd9-4def-b163-8478c577526d: Found 1 pods out of 1
  Mar  7 23:26:02.383: INFO: Ensuring all pods for ReplicationController "my-hostname-basic-06e895f3-5bd9-4def-b163-8478c577526d" are running
  Mar  7 23:26:02.392: INFO: Pod "my-hostname-basic-06e895f3-5bd9-4def-b163-8478c577526d-cqpmm" is running and ready(conditions: [{Type:PodReadyToStartContainers Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-03-07 23:25:58 +0000 UTC Reason: Message:} {Type:Initialized Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-03-07 23:25:57 +0000 UTC Reason: Message:} {Type:Ready Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-03-07 23:25:58 +0000 UTC Reason: Message:} {Type:ContainersReady Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-03-07 23:25:58 +0000 UTC Reason: Message:} {Type:PodScheduled Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-03-07 23:25:57 +0000 UTC Reason: Message:}])
  Mar  7 23:26:02.392: INFO: Trying to dial the pod
  STEP: trying to dial each unique pod @ 03/07/24 23:26:02.393
  Mar  7 23:26:02.408: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-5344" for this suite. @ 03/07/24 23:26:02.412
• [5.116 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/pods.go:227
  STEP: Creating a kubernetes client @ 03/07/24 23:26:02.422
  Mar  7 23:26:02.422: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pods @ 03/07/24 23:26:02.422
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:26:02.441
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:26:02.443
  STEP: creating the pod @ 03/07/24 23:26:02.445
  STEP: setting up watch @ 03/07/24 23:26:02.445
  STEP: submitting the pod to kubernetes @ 03/07/24 23:26:02.55
  STEP: verifying the pod is in kubernetes @ 03/07/24 23:26:02.558
  STEP: verifying pod creation was observed @ 03/07/24 23:26:02.56
  E0307 23:26:02.813930      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:03.814204      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: deleting the pod gracefully @ 03/07/24 23:26:04.582
  STEP: verifying pod deletion was observed @ 03/07/24 23:26:04.608
  E0307 23:26:04.814253      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:05.815143      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:06.815329      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:26:07.265: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-509" for this suite. @ 03/07/24 23:26:07.269
• [4.855 seconds]
------------------------------
SSSS
------------------------------
[sig-node] PodTemplates should replace a pod template [Conformance] [sig-node, Conformance]
test/e2e/common/node/podtemplates.go:177
  STEP: Creating a kubernetes client @ 03/07/24 23:26:07.277
  Mar  7 23:26:07.277: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename podtemplate @ 03/07/24 23:26:07.277
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:26:07.296
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:26:07.299
  STEP: Create a pod template @ 03/07/24 23:26:07.302
  STEP: Replace a pod template @ 03/07/24 23:26:07.308
  Mar  7 23:26:07.318: INFO: Found updated podtemplate annotation: "true"

  Mar  7 23:26:07.318: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-3017" for this suite. @ 03/07/24 23:26:07.321
• [0.050 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_secret.go:88
  STEP: Creating a kubernetes client @ 03/07/24 23:26:07.331
  Mar  7 23:26:07.331: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 23:26:07.331
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:26:07.346
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:26:07.348
  STEP: Creating projection with secret that has name projected-secret-test-map-a77f68bf-a520-4c9b-aa16-98c44f288796 @ 03/07/24 23:26:07.35
  STEP: Creating a pod to test consume secrets @ 03/07/24 23:26:07.362
  E0307 23:26:07.815643      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:08.816260      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:09.816144      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:10.817104      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 03/07/24 23:26:11.409
  Mar  7 23:26:11.417: INFO: Trying to get logs from node whiskas-1 pod pod-projected-secrets-d11f6c00-1202-4312-a1e9-7ded4d2dbbdf container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 23:26:11.434
  Mar  7 23:26:11.480: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2620" for this suite. @ 03/07/24 23:26:11.485
• [4.166 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:175
  STEP: Creating a kubernetes client @ 03/07/24 23:26:11.497
  Mar  7 23:26:11.498: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 23:26:11.498
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:26:11.525
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:26:11.529
  STEP: Creating configMap with name cm-test-opt-del-160ac0ec-f38a-44d1-ae63-160c697db1b1 @ 03/07/24 23:26:11.538
  STEP: Creating configMap with name cm-test-opt-upd-53fe6565-8ea5-4e1b-8bfa-16fea402e611 @ 03/07/24 23:26:11.546
  STEP: Creating the pod @ 03/07/24 23:26:11.554
  E0307 23:26:11.818081      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:12.818731      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting configmap cm-test-opt-del-160ac0ec-f38a-44d1-ae63-160c697db1b1 @ 03/07/24 23:26:13.64
  STEP: Updating configmap cm-test-opt-upd-53fe6565-8ea5-4e1b-8bfa-16fea402e611 @ 03/07/24 23:26:13.661
  STEP: Creating configMap with name cm-test-opt-create-81efafa2-d879-44d3-9bdb-b29b555cea0d @ 03/07/24 23:26:13.677
  STEP: waiting to observe update in volume @ 03/07/24 23:26:13.689
  E0307 23:26:13.818849      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:14.819481      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:15.820131      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:16.820476      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:26:17.729: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9106" for this suite. @ 03/07/24 23:26:17.732
• [6.241 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance] [sig-apps, Conformance]
test/e2e/apps/disruption.go:108
  STEP: Creating a kubernetes client @ 03/07/24 23:26:17.739
  Mar  7 23:26:17.739: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename disruption @ 03/07/24 23:26:17.74
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:26:17.756
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:26:17.758
  STEP: creating the pdb @ 03/07/24 23:26:17.761
  STEP: Waiting for the pdb to be processed @ 03/07/24 23:26:17.766
  E0307 23:26:17.821309      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:18.821871      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: updating the pdb @ 03/07/24 23:26:19.775
  STEP: Waiting for the pdb to be processed @ 03/07/24 23:26:19.801
  E0307 23:26:19.823077      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:20.824195      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: patching the pdb @ 03/07/24 23:26:21.812
  E0307 23:26:21.825051      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for the pdb to be processed @ 03/07/24 23:26:21.828
  E0307 23:26:22.826432      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:23.827256      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for the pdb to be deleted @ 03/07/24 23:26:23.858
  Mar  7 23:26:23.865: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-3295" for this suite. @ 03/07/24 23:26:23.877
• [6.158 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance] [sig-apps, Conformance]
test/e2e/apps/rc.go:425
  STEP: Creating a kubernetes client @ 03/07/24 23:26:23.898
  Mar  7 23:26:23.898: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename replication-controller @ 03/07/24 23:26:23.9
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:26:23.942
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:26:23.948
  STEP: Creating ReplicationController "e2e-rc-c57ll" @ 03/07/24 23:26:23.952
  Mar  7 23:26:23.961: INFO: Get Replication Controller "e2e-rc-c57ll" to confirm replicas
  E0307 23:26:24.827765      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:26:24.961: INFO: Get Replication Controller "e2e-rc-c57ll" to confirm replicas
  Mar  7 23:26:24.969: INFO: Found 1 replicas for "e2e-rc-c57ll" replication controller
  STEP: Getting scale subresource for ReplicationController "e2e-rc-c57ll" @ 03/07/24 23:26:24.969
  STEP: Updating a scale subresource @ 03/07/24 23:26:24.977
  STEP: Verifying replicas where modified for replication controller "e2e-rc-c57ll" @ 03/07/24 23:26:24.998
  Mar  7 23:26:24.998: INFO: Get Replication Controller "e2e-rc-c57ll" to confirm replicas
  E0307 23:26:25.828242      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:26:25.998: INFO: Get Replication Controller "e2e-rc-c57ll" to confirm replicas
  Mar  7 23:26:26.006: INFO: Found 2 replicas for "e2e-rc-c57ll" replication controller
  Mar  7 23:26:26.007: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-9553" for this suite. @ 03/07/24 23:26:26.018
• [2.143 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance] [sig-scheduling, Conformance]
test/e2e/scheduling/limit_range.go:62
  STEP: Creating a kubernetes client @ 03/07/24 23:26:26.042
  Mar  7 23:26:26.042: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename limitrange @ 03/07/24 23:26:26.044
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:26:26.085
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:26:26.088
  STEP: Creating a LimitRange @ 03/07/24 23:26:26.092
  STEP: Setting up watch @ 03/07/24 23:26:26.092
  STEP: Submitting a LimitRange @ 03/07/24 23:26:26.197
  STEP: Verifying LimitRange creation was observed @ 03/07/24 23:26:26.215
  STEP: Fetching the LimitRange to ensure it has proper values @ 03/07/24 23:26:26.215
  Mar  7 23:26:26.222: INFO: Verifying requests: expected map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}] with actual map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}]
  Mar  7 23:26:26.223: INFO: Verifying limits: expected map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Creating a Pod with no resource requirements @ 03/07/24 23:26:26.223
  STEP: Ensuring Pod has resource requirements applied from LimitRange @ 03/07/24 23:26:26.241
  Mar  7 23:26:26.251: INFO: Verifying requests: expected map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}] with actual map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}]
  Mar  7 23:26:26.251: INFO: Verifying limits: expected map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Creating a Pod with partial resource requirements @ 03/07/24 23:26:26.252
  STEP: Ensuring Pod has merged resource requirements applied from LimitRange @ 03/07/24 23:26:26.268
  Mar  7 23:26:26.272: INFO: Verifying requests: expected map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{161061273600 0} {<nil>} 150Gi BinarySI} memory:{{157286400 0} {<nil>} 150Mi BinarySI}] with actual map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{161061273600 0} {<nil>} 150Gi BinarySI} memory:{{157286400 0} {<nil>} 150Mi BinarySI}]
  Mar  7 23:26:26.272: INFO: Verifying limits: expected map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Failing to create a Pod with less than min resources @ 03/07/24 23:26:26.272
  STEP: Failing to create a Pod with more than max resources @ 03/07/24 23:26:26.274
  STEP: Updating a LimitRange @ 03/07/24 23:26:26.28
  STEP: Verifying LimitRange updating is effective @ 03/07/24 23:26:26.288
  E0307 23:26:26.828424      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:27.829207      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a Pod with less than former min resources @ 03/07/24 23:26:28.291
  STEP: Failing to create a Pod with more than max resources @ 03/07/24 23:26:28.302
  STEP: Deleting a LimitRange @ 03/07/24 23:26:28.304
  STEP: Verifying the LimitRange was deleted @ 03/07/24 23:26:28.317
  E0307 23:26:28.829823      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:29.830116      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:30.831319      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:31.831428      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:32.831915      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:26:33.331: INFO: limitRange is already deleted
  STEP: Creating a Pod with more than former max resources @ 03/07/24 23:26:33.331
  Mar  7 23:26:33.364: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "limitrange-8715" for this suite. @ 03/07/24 23:26:33.378
• [7.355 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/daemon_set.go:305
  STEP: Creating a kubernetes client @ 03/07/24 23:26:33.398
  Mar  7 23:26:33.398: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename daemonsets @ 03/07/24 23:26:33.399
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:26:33.425
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:26:33.431
  STEP: Creating a simple DaemonSet "daemon-set" @ 03/07/24 23:26:33.474
  STEP: Check that daemon pods launch on every node of the cluster. @ 03/07/24 23:26:33.481
  Mar  7 23:26:33.488: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 23:26:33.488: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  E0307 23:26:33.832453      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:26:34.510: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Mar  7 23:26:34.510: INFO: Node whiskas-2 is running 0 daemon pod, expected 1
  E0307 23:26:34.833353      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:26:35.503: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Mar  7 23:26:35.503: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Set a daemon pod's phase to 'Failed', check that the daemon pod is revived. @ 03/07/24 23:26:35.512
  Mar  7 23:26:35.575: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Mar  7 23:26:35.575: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Wait for the failed daemon pod to be completely deleted. @ 03/07/24 23:26:35.575
  E0307 23:26:35.834594      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting DaemonSet "daemon-set" @ 03/07/24 23:26:36.585
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-5946, will wait for the garbage collector to delete the pods @ 03/07/24 23:26:36.585
  Mar  7 23:26:36.647: INFO: Deleting DaemonSet.extensions daemon-set took: 7.82864ms
  Mar  7 23:26:36.747: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.624998ms
  E0307 23:26:36.835729      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:37.835748      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:38.836275      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:26:39.461: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Mar  7 23:26:39.461: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Mar  7 23:26:39.472: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"122127"},"items":null}

  Mar  7 23:26:39.484: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"122127"},"items":null}

  Mar  7 23:26:39.513: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-5946" for this suite. @ 03/07/24 23:26:39.524
• [6.147 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should provide secure master service [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:775
  STEP: Creating a kubernetes client @ 03/07/24 23:26:39.548
  Mar  7 23:26:39.548: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 23:26:39.55
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:26:39.592
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:26:39.594
  Mar  7 23:26:39.599: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-2994" for this suite. @ 03/07/24 23:26:39.602
• [0.063 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/table_conversion.go:154
  STEP: Creating a kubernetes client @ 03/07/24 23:26:39.613
  Mar  7 23:26:39.613: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename tables @ 03/07/24 23:26:39.613
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:26:39.646
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:26:39.649
  Mar  7 23:26:39.655: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "tables-4372" for this suite. @ 03/07/24 23:26:39.659
• [0.054 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/custom_resource_definition.go:146
  STEP: Creating a kubernetes client @ 03/07/24 23:26:39.667
  Mar  7 23:26:39.667: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename custom-resource-definition @ 03/07/24 23:26:39.668
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:26:39.691
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:26:39.694
  Mar  7 23:26:39.696: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  E0307 23:26:39.837005      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:26:40.318: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-699" for this suite. @ 03/07/24 23:26:40.33
• [0.686 seconds]
------------------------------
S
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:110
  STEP: Creating a kubernetes client @ 03/07/24 23:26:40.353
  Mar  7 23:26:40.353: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 23:26:40.355
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:26:40.382
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:26:40.384
  STEP: Creating configMap with name projected-configmap-test-volume-map-799ab829-15ae-42a5-ac12-a3d8022fe272 @ 03/07/24 23:26:40.387
  STEP: Creating a pod to test consume configMaps @ 03/07/24 23:26:40.392
  E0307 23:26:40.836977      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:41.837974      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:42.838294      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:43.838956      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 03/07/24 23:26:44.418
  Mar  7 23:26:44.427: INFO: Trying to get logs from node whiskas-1 pod pod-projected-configmaps-9f3abcd0-3793-4ffa-8712-861b671f468f container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 23:26:44.444
  Mar  7 23:26:44.500: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3884" for this suite. @ 03/07/24 23:26:44.506
• [4.166 seconds]
------------------------------
SSS
------------------------------
[sig-node] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:71
  STEP: Creating a kubernetes client @ 03/07/24 23:26:44.519
  Mar  7 23:26:44.519: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-probe @ 03/07/24 23:26:44.52
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:26:44.561
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:26:44.564
  E0307 23:26:44.839496      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:45.840095      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:46.841044      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:47.841398      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:48.841993      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:49.842453      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:50.843633      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:51.844335      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:52.844516      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:53.845127      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:54.845776      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:55.846507      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:56.847650      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:57.848084      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:58.848416      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:26:59.849035      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:00.849116      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:01.849721      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:02.850570      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:03.851718      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:04.852578      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:05.853948      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:06.695: INFO: Container started at 2024-03-07 23:26:45 +0000 UTC, pod became ready at 2024-03-07 23:27:04 +0000 UTC
  Mar  7 23:27:06.695: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-4709" for this suite. @ 03/07/24 23:27:06.706
• [22.216 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl logs logs should be able to retrieve and filter logs [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/logs.go:114
  STEP: Creating a kubernetes client @ 03/07/24 23:27:06.735
  Mar  7 23:27:06.736: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl-logs @ 03/07/24 23:27:06.737
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:27:06.789
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:27:06.794
  STEP: creating an pod @ 03/07/24 23:27:06.798
  Mar  7 23:27:06.798: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-logs-6944 run logs-generator --image=registry.k8s.io/e2e-test-images/agnhost:2.45 --restart=Never --pod-running-timeout=2m0s -- logs-generator --log-lines-total 100 --run-duration 20s'
  E0307 23:27:06.853953      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:06.862: INFO: stderr: ""
  Mar  7 23:27:06.862: INFO: stdout: "pod/logs-generator created\n"
  STEP: Waiting for log generator to start. @ 03/07/24 23:27:06.862
  Mar  7 23:27:06.862: INFO: Waiting up to 5m0s for 1 pods to be running and ready, or succeeded: [logs-generator]
  E0307 23:27:07.855091      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:08.855774      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:08.874: INFO: Wanted all 1 pods to be running and ready, or succeeded. Result: true. Pods: [logs-generator]
  STEP: checking for a matching strings @ 03/07/24 23:27:08.874
  Mar  7 23:27:08.874: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-logs-6944 logs logs-generator logs-generator'
  Mar  7 23:27:08.975: INFO: stderr: ""
  Mar  7 23:27:08.975: INFO: stdout: "I0307 23:27:07.496146       1 logs_generator.go:76] 0 PUT /api/v1/namespaces/default/pods/6jzp 415\nI0307 23:27:07.696720       1 logs_generator.go:76] 1 POST /api/v1/namespaces/kube-system/pods/bnn 383\nI0307 23:27:07.897306       1 logs_generator.go:76] 2 PUT /api/v1/namespaces/kube-system/pods/xnm8 276\nI0307 23:27:08.096922       1 logs_generator.go:76] 3 POST /api/v1/namespaces/ns/pods/qbk 429\nI0307 23:27:08.296429       1 logs_generator.go:76] 4 GET /api/v1/namespaces/kube-system/pods/qk48 329\nI0307 23:27:08.497098       1 logs_generator.go:76] 5 PUT /api/v1/namespaces/default/pods/gwc 511\nI0307 23:27:08.696797       1 logs_generator.go:76] 6 PUT /api/v1/namespaces/ns/pods/24mv 573\nI0307 23:27:08.896286       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/ns/pods/x9w4 200\n"
  STEP: limiting log lines @ 03/07/24 23:27:08.975
  Mar  7 23:27:08.975: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-logs-6944 logs logs-generator logs-generator --tail=1'
  Mar  7 23:27:09.020: INFO: stderr: ""
  Mar  7 23:27:09.020: INFO: stdout: "I0307 23:27:08.896286       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/ns/pods/x9w4 200\n"
  Mar  7 23:27:09.020: INFO: got output "I0307 23:27:08.896286       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/ns/pods/x9w4 200\n"
  STEP: limiting log bytes @ 03/07/24 23:27:09.02
  Mar  7 23:27:09.020: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-logs-6944 logs logs-generator logs-generator --limit-bytes=1'
  Mar  7 23:27:09.065: INFO: stderr: ""
  Mar  7 23:27:09.065: INFO: stdout: "I"
  Mar  7 23:27:09.065: INFO: got output "I"
  STEP: exposing timestamps @ 03/07/24 23:27:09.065
  Mar  7 23:27:09.065: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-logs-6944 logs logs-generator logs-generator --tail=1 --timestamps'
  Mar  7 23:27:09.110: INFO: stderr: ""
  Mar  7 23:27:09.110: INFO: stdout: "2024-03-07T23:27:09.096883719Z I0307 23:27:09.096718       1 logs_generator.go:76] 8 PUT /api/v1/namespaces/ns/pods/k2gt 550\n"
  Mar  7 23:27:09.110: INFO: got output "2024-03-07T23:27:09.096883719Z I0307 23:27:09.096718       1 logs_generator.go:76] 8 PUT /api/v1/namespaces/ns/pods/k2gt 550\n"
  STEP: restricting to a time range @ 03/07/24 23:27:09.11
  E0307 23:27:09.856136      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:10.856852      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:11.611: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-logs-6944 logs logs-generator logs-generator --since=1s'
  Mar  7 23:27:11.719: INFO: stderr: ""
  Mar  7 23:27:11.719: INFO: stdout: "I0307 23:27:10.896764       1 logs_generator.go:76] 17 POST /api/v1/namespaces/ns/pods/nnk 380\nI0307 23:27:11.096294       1 logs_generator.go:76] 18 GET /api/v1/namespaces/ns/pods/ztt 468\nI0307 23:27:11.296829       1 logs_generator.go:76] 19 PUT /api/v1/namespaces/ns/pods/cn6 242\nI0307 23:27:11.497254       1 logs_generator.go:76] 20 GET /api/v1/namespaces/kube-system/pods/fbgs 288\nI0307 23:27:11.696694       1 logs_generator.go:76] 21 GET /api/v1/namespaces/kube-system/pods/9xj 328\n"
  Mar  7 23:27:11.719: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-logs-6944 logs logs-generator logs-generator --since=24h'
  Mar  7 23:27:11.788: INFO: stderr: ""
  Mar  7 23:27:11.788: INFO: stdout: "I0307 23:27:07.496146       1 logs_generator.go:76] 0 PUT /api/v1/namespaces/default/pods/6jzp 415\nI0307 23:27:07.696720       1 logs_generator.go:76] 1 POST /api/v1/namespaces/kube-system/pods/bnn 383\nI0307 23:27:07.897306       1 logs_generator.go:76] 2 PUT /api/v1/namespaces/kube-system/pods/xnm8 276\nI0307 23:27:08.096922       1 logs_generator.go:76] 3 POST /api/v1/namespaces/ns/pods/qbk 429\nI0307 23:27:08.296429       1 logs_generator.go:76] 4 GET /api/v1/namespaces/kube-system/pods/qk48 329\nI0307 23:27:08.497098       1 logs_generator.go:76] 5 PUT /api/v1/namespaces/default/pods/gwc 511\nI0307 23:27:08.696797       1 logs_generator.go:76] 6 PUT /api/v1/namespaces/ns/pods/24mv 573\nI0307 23:27:08.896286       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/ns/pods/x9w4 200\nI0307 23:27:09.096718       1 logs_generator.go:76] 8 PUT /api/v1/namespaces/ns/pods/k2gt 550\nI0307 23:27:09.297321       1 logs_generator.go:76] 9 PUT /api/v1/namespaces/ns/pods/2bxb 266\nI0307 23:27:09.496919       1 logs_generator.go:76] 10 GET /api/v1/namespaces/kube-system/pods/vr2 275\nI0307 23:27:09.696404       1 logs_generator.go:76] 11 POST /api/v1/namespaces/kube-system/pods/vdxj 502\nI0307 23:27:09.896943       1 logs_generator.go:76] 12 GET /api/v1/namespaces/ns/pods/4bkw 316\nI0307 23:27:10.096307       1 logs_generator.go:76] 13 POST /api/v1/namespaces/ns/pods/xbc6 598\nI0307 23:27:10.296982       1 logs_generator.go:76] 14 GET /api/v1/namespaces/kube-system/pods/fkr6 381\nI0307 23:27:10.496444       1 logs_generator.go:76] 15 GET /api/v1/namespaces/ns/pods/bcj2 381\nI0307 23:27:10.697108       1 logs_generator.go:76] 16 POST /api/v1/namespaces/ns/pods/n69 596\nI0307 23:27:10.896764       1 logs_generator.go:76] 17 POST /api/v1/namespaces/ns/pods/nnk 380\nI0307 23:27:11.096294       1 logs_generator.go:76] 18 GET /api/v1/namespaces/ns/pods/ztt 468\nI0307 23:27:11.296829       1 logs_generator.go:76] 19 PUT /api/v1/namespaces/ns/pods/cn6 242\nI0307 23:27:11.497254       1 logs_generator.go:76] 20 GET /api/v1/namespaces/kube-system/pods/fbgs 288\nI0307 23:27:11.696694       1 logs_generator.go:76] 21 GET /api/v1/namespaces/kube-system/pods/9xj 328\n"
  Mar  7 23:27:11.788: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-logs-6944 delete pod logs-generator'
  E0307 23:27:11.856812      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:12.546: INFO: stderr: ""
  Mar  7 23:27:12.546: INFO: stdout: "pod \"logs-generator\" deleted\n"
  Mar  7 23:27:12.547: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-logs-6944" for this suite. @ 03/07/24 23:27:12.551
• [5.828 seconds]
------------------------------
SSS
------------------------------
[sig-node] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/init_container.go:459
  STEP: Creating a kubernetes client @ 03/07/24 23:27:12.564
  Mar  7 23:27:12.564: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename init-container @ 03/07/24 23:27:12.564
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:27:12.581
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:27:12.583
  STEP: creating the pod @ 03/07/24 23:27:12.585
  Mar  7 23:27:12.585: INFO: PodSpec: initContainers in spec.initContainers
  E0307 23:27:12.857890      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:13.859032      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:14.859613      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:15.738: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-6608" for this suite. @ 03/07/24 23:27:15.743
• [3.186 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Guestbook application should create and stop a working application [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:399
  STEP: Creating a kubernetes client @ 03/07/24 23:27:15.75
  Mar  7 23:27:15.750: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 23:27:15.75
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:27:15.813
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:27:15.824
  STEP: creating all guestbook components @ 03/07/24 23:27:15.831
  Mar  7 23:27:15.831: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: agnhost-replica
    labels:
      app: agnhost
      role: replica
      tier: backend
  spec:
    ports:
    - port: 6379
    selector:
      app: agnhost
      role: replica
      tier: backend

  Mar  7 23:27:15.831: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7669 create -f -'
  E0307 23:27:15.860046      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:15.963: INFO: stderr: ""
  Mar  7 23:27:15.963: INFO: stdout: "service/agnhost-replica created\n"
  Mar  7 23:27:15.964: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: agnhost-primary
    labels:
      app: agnhost
      role: primary
      tier: backend
  spec:
    ports:
    - port: 6379
      targetPort: 6379
    selector:
      app: agnhost
      role: primary
      tier: backend

  Mar  7 23:27:15.965: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7669 create -f -'
  Mar  7 23:27:16.077: INFO: stderr: ""
  Mar  7 23:27:16.077: INFO: stdout: "service/agnhost-primary created\n"
  Mar  7 23:27:16.077: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: frontend
    labels:
      app: guestbook
      tier: frontend
  spec:
    # if your cluster supports it, uncomment the following to automatically create
    # an external load-balanced IP for the frontend service.
    # type: LoadBalancer
    ports:
    - port: 80
    selector:
      app: guestbook
      tier: frontend

  Mar  7 23:27:16.077: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7669 create -f -'
  Mar  7 23:27:16.163: INFO: stderr: ""
  Mar  7 23:27:16.163: INFO: stdout: "service/frontend created\n"
  Mar  7 23:27:16.163: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: frontend
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: guestbook
        tier: frontend
    template:
      metadata:
        labels:
          app: guestbook
          tier: frontend
      spec:
        containers:
        - name: guestbook-frontend
          image: registry.k8s.io/e2e-test-images/agnhost:2.45
          args: [ "guestbook", "--backend-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 80

  Mar  7 23:27:16.164: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7669 create -f -'
  Mar  7 23:27:16.226: INFO: stderr: ""
  Mar  7 23:27:16.226: INFO: stdout: "deployment.apps/frontend created\n"
  Mar  7 23:27:16.226: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: agnhost-primary
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: agnhost
        role: primary
        tier: backend
    template:
      metadata:
        labels:
          app: agnhost
          role: primary
          tier: backend
      spec:
        containers:
        - name: primary
          image: registry.k8s.io/e2e-test-images/agnhost:2.45
          args: [ "guestbook", "--http-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 6379

  Mar  7 23:27:16.226: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7669 create -f -'
  Mar  7 23:27:16.333: INFO: stderr: ""
  Mar  7 23:27:16.333: INFO: stdout: "deployment.apps/agnhost-primary created\n"
  Mar  7 23:27:16.333: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: agnhost-replica
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: agnhost
        role: replica
        tier: backend
    template:
      metadata:
        labels:
          app: agnhost
          role: replica
          tier: backend
      spec:
        containers:
        - name: replica
          image: registry.k8s.io/e2e-test-images/agnhost:2.45
          args: [ "guestbook", "--replicaof", "agnhost-primary", "--http-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 6379

  Mar  7 23:27:16.333: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7669 create -f -'
  Mar  7 23:27:16.406: INFO: stderr: ""
  Mar  7 23:27:16.406: INFO: stdout: "deployment.apps/agnhost-replica created\n"
  STEP: validating guestbook app @ 03/07/24 23:27:16.406
  Mar  7 23:27:16.406: INFO: Waiting for all frontend pods to be Running.
  E0307 23:27:16.860918      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:17.861144      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:18.864400      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:19.861879      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:20.862726      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:21.457: INFO: Waiting for frontend to serve content.
  Mar  7 23:27:21.479: INFO: Trying to add a new entry to the guestbook.
  Mar  7 23:27:21.504: INFO: Verifying that added entry can be retrieved.
  STEP: using delete to clean up resources @ 03/07/24 23:27:21.523
  Mar  7 23:27:21.523: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7669 delete --grace-period=0 --force -f -'
  Mar  7 23:27:21.602: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Mar  7 23:27:21.602: INFO: stdout: "service \"agnhost-replica\" force deleted\n"
  STEP: using delete to clean up resources @ 03/07/24 23:27:21.602
  Mar  7 23:27:21.602: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7669 delete --grace-period=0 --force -f -'
  Mar  7 23:27:21.664: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Mar  7 23:27:21.664: INFO: stdout: "service \"agnhost-primary\" force deleted\n"
  STEP: using delete to clean up resources @ 03/07/24 23:27:21.665
  Mar  7 23:27:21.665: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7669 delete --grace-period=0 --force -f -'
  Mar  7 23:27:21.724: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Mar  7 23:27:21.724: INFO: stdout: "service \"frontend\" force deleted\n"
  STEP: using delete to clean up resources @ 03/07/24 23:27:21.724
  Mar  7 23:27:21.724: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7669 delete --grace-period=0 --force -f -'
  Mar  7 23:27:21.774: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Mar  7 23:27:21.774: INFO: stdout: "deployment.apps \"frontend\" force deleted\n"
  STEP: using delete to clean up resources @ 03/07/24 23:27:21.774
  Mar  7 23:27:21.774: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7669 delete --grace-period=0 --force -f -'
  E0307 23:27:21.863782      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:21.904: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Mar  7 23:27:21.904: INFO: stdout: "deployment.apps \"agnhost-primary\" force deleted\n"
  STEP: using delete to clean up resources @ 03/07/24 23:27:21.905
  Mar  7 23:27:21.905: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-7669 delete --grace-period=0 --force -f -'
  Mar  7 23:27:22.058: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Mar  7 23:27:22.058: INFO: stdout: "deployment.apps \"agnhost-replica\" force deleted\n"
  Mar  7 23:27:22.058: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-7669" for this suite. @ 03/07/24 23:27:22.063
• [6.326 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Slow] [Conformance] [sig-node, Slow, Conformance]
test/e2e/common/node/expansion.go:189
  STEP: Creating a kubernetes client @ 03/07/24 23:27:22.076
  Mar  7 23:27:22.076: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename var-expansion @ 03/07/24 23:27:22.077
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:27:22.117
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:27:22.125
  E0307 23:27:22.863928      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:23.864386      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:24.166: INFO: Deleting pod "var-expansion-d0394982-d2fe-4428-8daa-c02121832e78" in namespace "var-expansion-470"
  Mar  7 23:27:24.192: INFO: Wait up to 5m0s for pod "var-expansion-d0394982-d2fe-4428-8daa-c02121832e78" to be fully deleted
  E0307 23:27:24.865234      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:25.866255      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:26.866819      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:27.867891      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:28.224: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-470" for this suite. @ 03/07/24 23:27:28.235
• [6.184 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Sysctls [LinuxOnly] [NodeConformance] should reject invalid sysctls [MinimumKubeletVersion:1.21] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/sysctl.go:125
  STEP: Creating a kubernetes client @ 03/07/24 23:27:28.266
  Mar  7 23:27:28.266: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename sysctl @ 03/07/24 23:27:28.268
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:27:28.316
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:27:28.324
  STEP: Creating a pod with one valid and two invalid sysctls @ 03/07/24 23:27:28.331
  Mar  7 23:27:28.341: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sysctl-1947" for this suite. @ 03/07/24 23:27:28.347
• [0.092 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a exec "cat /tmp/health" liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:151
  STEP: Creating a kubernetes client @ 03/07/24 23:27:28.358
  Mar  7 23:27:28.358: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-probe @ 03/07/24 23:27:28.359
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:27:28.382
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:27:28.385
  STEP: Creating pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074 @ 03/07/24 23:27:28.389
  E0307 23:27:28.868098      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:29.868730      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking the pod's current state and verifying that restartCount is present @ 03/07/24 23:27:30.416
  Mar  7 23:27:30.425: INFO: Initial restart count of pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 is 0
  Mar  7 23:27:30.432: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:27:30.868934      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:31.869308      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:32.441: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:27:32.869481      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:33.870129      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:34.450: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:27:34.870061      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:35.871108      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:36.461: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:27:36.871643      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:37.871911      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:38.470: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:27:38.872807      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:39.873474      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:40.481: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:27:40.874342      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:41.874732      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:42.490: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:27:42.875092      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:43.875766      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:44.499: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:27:44.876027      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:45.877174      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:46.509: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:27:46.877591      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:47.878228      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:48.521: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:27:48.878963      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:49.879370      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:50.529: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:27:50.880053      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:51.880689      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:52.539: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:27:52.880936      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:53.881582      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:54.548: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:27:54.882113      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:55.882366      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:56.552: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:27:56.882835      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:57.883435      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:27:58.555: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:27:58.883545      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:27:59.884293      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:00.565: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:00.885165      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:01.885531      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:02.574: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:02.886329      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:03.886877      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:04.583: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:04.886968      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:05.888346      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:06.594: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:06.889006      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:07.889519      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:08.599: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:08.890352      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:09.891220      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:10.604: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:10.892383      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:11.892946      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:12.613: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:12.894212      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:13.894284      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:14.623: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:14.894268      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:15.895586      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:16.633: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:16.896346      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:17.896979      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:18.636: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:18.897157      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:19.897500      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:20.646: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:20.898417      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:21.898805      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:22.655: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:22.899563      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:23.899886      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:24.665: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:24.899834      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:25.901255      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:26.677: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:26.901626      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:27.902288      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:28.686: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:28.903466      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:29.904154      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:30.696: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:30.905168      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:31.905522      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:32.700: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:32.906195      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:33.906798      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:34.710: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:34.907499      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:35.907724      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:36.721: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:36.907804      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:37.908718      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:38.732: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:38.909548      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:39.909983      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:40.742: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:40.910208      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:41.910803      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:42.751: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:42.911452      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:43.912050      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:44.771: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:44.912979      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:45.913729      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:46.783: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:46.913915      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:47.914503      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:48.786: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:48.915198      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:49.916062      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:50.793: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:50.916280      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:51.916862      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:52.804: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:52.917446      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:53.918137      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:54.813: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:54.919041      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:55.919946      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:56.825: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:56.920667      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:57.921246      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:28:58.830: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:28:58.922152      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:28:59.922740      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:00.841: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:00.923677      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:01.924641      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:02.843: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:02.925045      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:03.925518      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:04.848: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:04.926391      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:05.927693      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:06.860: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:06.928399      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:07.929393      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:08.864: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:08.929591      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:09.929578      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:10.875: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:10.930677      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:11.931604      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:12.885: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:12.932660      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:13.933011      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:14.888: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:14.933149      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:15.933396      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:16.899: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:16.934171      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:17.934718      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:18.906: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:18.935286      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:19.936361      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:20.917: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:20.937408      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:21.938509      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:22.926: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:22.938713      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:23.939329      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:24.937: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:24.940083      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:25.940769      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:26.941947      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:26.948: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:27.942951      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:28.943626      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:28.959: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:29.944205      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:30.944269      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:30.969: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:31.944537      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:32.945518      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:32.980: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:33.946314      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:34.946657      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:34.990: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:35.947765      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:36.948470      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:37.000: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:37.949072      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:38.950293      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:39.008: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:39.950803      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:40.952020      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:41.018: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:41.952374      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:42.952979      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:43.028: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:43.953479      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:44.954163      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:45.038: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:45.954992      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:46.955618      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:47.049: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:47.956429      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:48.957099      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:49.060: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:49.958125      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:50.959274      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:51.070: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:51.959666      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:52.960334      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:53.080: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:53.961261      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:54.962161      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:55.090: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:55.963057      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:56.964070      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:57.101: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:57.964306      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:29:58.965111      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:29:59.111: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:29:59.965467      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:00.966465      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:01.121: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:01.967487      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:02.968220      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:03.130: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:03.968459      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:04.969104      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:05.140: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:05.969308      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:06.969955      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:07.152: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:07.970108      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:08.970464      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:09.162: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:09.971027      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:10.971100      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:11.171: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:11.971868      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:12.972577      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:13.181: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:13.972979      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:14.973635      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:15.191: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:15.974610      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:16.975353      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:17.202: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:17.976563      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:18.977216      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:19.212: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:19.978111      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:20.979296      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:21.221: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:21.979842      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:22.980277      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:23.231: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:23.980605      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:24.981272      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:25.241: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:25.981428      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:26.982185      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:27.252: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:27.982573      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:28.983200      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:29.262: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:29.984044      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:30.984896      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:31.271: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:31.985440      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:32.986021      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:33.282: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:33.986764      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:34.987397      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:35.292: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:35.988188      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:36.988813      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:37.302: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:37.989344      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:38.989965      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:39.313: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:39.991129      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:40.991446      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:41.323: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:41.992484      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:42.992814      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:43.333: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:43.993200      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:44.994340      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:45.343: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:45.994611      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:46.995247      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:47.354: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:47.995861      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:48.996650      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:49.363: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:49.997625      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:50.998777      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:51.375: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:51.998964      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:52.999345      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:53.385: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:54.000368      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:55.000620      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:55.394: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:56.001698      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:57.002314      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:57.405: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:30:58.002910      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:30:59.003523      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:30:59.414: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:00.003892      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:01.004126      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:01.424: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:02.006238      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:03.006341      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:03.434: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:04.006954      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:05.007377      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:05.444: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:06.008674      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:07.008980      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:07.455: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:08.009344      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:09.009962      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:09.464: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:10.010674      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:11.011801      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:11.474: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:12.012129      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:13.012643      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:13.484: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:14.013695      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:15.014255      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:15.494: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:16.014702      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:17.015045      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:17.504: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:18.015464      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:19.015852      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:19.515: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:20.016898      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:21.018111      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:21.525: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:22.018395      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:23.018623      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:23.533: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:24.019901      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:25.020206      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:25.543: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:26.020396      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:27.020978      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:27.554: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:28.022028      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:29.022578      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:29.563: INFO: Get pod busybox-b6aa2a21-5fc4-4598-be35-52bb49c7b119 in namespace container-probe-8074
  E0307 23:31:30.022987      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:31.023099      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: deleting the pod @ 03/07/24 23:31:31.564
  Mar  7 23:31:31.594: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-8074" for this suite. @ 03/07/24 23:31:31.598
• [243.251 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply changes to a namespace status [Conformance] [sig-api-machinery, Serial, Conformance]
test/e2e/apimachinery/namespace.go:305
  STEP: Creating a kubernetes client @ 03/07/24 23:31:31.609
  Mar  7 23:31:31.609: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename namespaces @ 03/07/24 23:31:31.61
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:31:31.627
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:31:31.629
  STEP: Read namespace status @ 03/07/24 23:31:31.631
  Mar  7 23:31:31.634: INFO: Status: v1.NamespaceStatus{Phase:"Active", Conditions:[]v1.NamespaceCondition(nil)}
  STEP: Patch namespace status @ 03/07/24 23:31:31.634
  Mar  7 23:31:31.641: INFO: Status.Condition: v1.NamespaceCondition{Type:"StatusPatch", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Patched by an e2e test"}
  STEP: Update namespace status @ 03/07/24 23:31:31.641
  Mar  7 23:31:31.650: INFO: Status.Condition: v1.NamespaceCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Updated by an e2e test"}
  Mar  7 23:31:31.650: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-3577" for this suite. @ 03/07/24 23:31:31.655
• [0.053 seconds]
------------------------------
[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance] [sig-storage, Conformance]
test/e2e/storage/csistoragecapacity.go:50
  STEP: Creating a kubernetes client @ 03/07/24 23:31:31.662
  Mar  7 23:31:31.662: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename csistoragecapacity @ 03/07/24 23:31:31.662
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:31:31.682
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:31:31.684
  STEP: getting /apis @ 03/07/24 23:31:31.686
  STEP: getting /apis/storage.k8s.io @ 03/07/24 23:31:31.689
  STEP: getting /apis/storage.k8s.io/v1 @ 03/07/24 23:31:31.69
  STEP: creating @ 03/07/24 23:31:31.69
  STEP: watching @ 03/07/24 23:31:31.705
  Mar  7 23:31:31.705: INFO: starting watch
  STEP: getting @ 03/07/24 23:31:31.717
  STEP: listing in namespace @ 03/07/24 23:31:31.719
  STEP: listing across namespaces @ 03/07/24 23:31:31.721
  STEP: patching @ 03/07/24 23:31:31.723
  STEP: updating @ 03/07/24 23:31:31.731
  Mar  7 23:31:31.737: INFO: waiting for watch events with expected annotations in namespace
  Mar  7 23:31:31.737: INFO: waiting for watch events with expected annotations across namespace
  STEP: deleting @ 03/07/24 23:31:31.737
  STEP: deleting a collection @ 03/07/24 23:31:31.747
  Mar  7 23:31:31.764: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csistoragecapacity-4160" for this suite. @ 03/07/24 23:31:31.767
• [0.111 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:241
  STEP: Creating a kubernetes client @ 03/07/24 23:31:31.776
  Mar  7 23:31:31.776: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename configmap @ 03/07/24 23:31:31.777
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:31:31.796
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:31:31.798
  STEP: Creating configMap with name cm-test-opt-del-91944550-5101-4382-9302-ca4de58fa399 @ 03/07/24 23:31:31.803
  STEP: Creating configMap with name cm-test-opt-upd-0403ba2f-63dd-4fa5-b83e-f25a056df7d3 @ 03/07/24 23:31:31.81
  STEP: Creating the pod @ 03/07/24 23:31:31.815
  E0307 23:31:32.023225      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:33.023522      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting configmap cm-test-opt-del-91944550-5101-4382-9302-ca4de58fa399 @ 03/07/24 23:31:33.9
  STEP: Updating configmap cm-test-opt-upd-0403ba2f-63dd-4fa5-b83e-f25a056df7d3 @ 03/07/24 23:31:33.91
  STEP: Creating configMap with name cm-test-opt-create-4a28b526-2d79-4fe9-bfbd-9a08a8df104f @ 03/07/24 23:31:33.918
  STEP: waiting to observe update in volume @ 03/07/24 23:31:33.926
  E0307 23:31:34.024306      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:35.025199      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:36.025431      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:37.026040      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:38.004: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-4658" for this suite. @ 03/07/24 23:31:38.016
  E0307 23:31:38.025979      20 retrywatcher.go:129] "Watch failed" err="context canceled"
• [6.263 seconds]
------------------------------
[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/controller_revision.go:126
  STEP: Creating a kubernetes client @ 03/07/24 23:31:38.04
  Mar  7 23:31:38.040: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename controllerrevisions @ 03/07/24 23:31:38.042
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:31:38.082
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:31:38.086
  STEP: Creating DaemonSet "e2e-s7zng-daemon-set" @ 03/07/24 23:31:38.111
  STEP: Check that daemon pods launch on every node of the cluster. @ 03/07/24 23:31:38.121
  Mar  7 23:31:38.130: INFO: Number of nodes with available pods controlled by daemonset e2e-s7zng-daemon-set: 0
  Mar  7 23:31:38.130: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  E0307 23:31:39.027300      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:39.142: INFO: Number of nodes with available pods controlled by daemonset e2e-s7zng-daemon-set: 1
  Mar  7 23:31:39.143: INFO: Node whiskas-1 is running 0 daemon pod, expected 1
  E0307 23:31:40.027842      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:40.141: INFO: Number of nodes with available pods controlled by daemonset e2e-s7zng-daemon-set: 2
  Mar  7 23:31:40.141: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset e2e-s7zng-daemon-set
  STEP: Confirm DaemonSet "e2e-s7zng-daemon-set" successfully created with "daemonset-name=e2e-s7zng-daemon-set" label @ 03/07/24 23:31:40.148
  STEP: Listing all ControllerRevisions with label "daemonset-name=e2e-s7zng-daemon-set" @ 03/07/24 23:31:40.167
  Mar  7 23:31:40.177: INFO: Located ControllerRevision: "e2e-s7zng-daemon-set-75944bfc5b"
  STEP: Patching ControllerRevision "e2e-s7zng-daemon-set-75944bfc5b" @ 03/07/24 23:31:40.186
  Mar  7 23:31:40.212: INFO: e2e-s7zng-daemon-set-75944bfc5b has been patched
  STEP: Create a new ControllerRevision @ 03/07/24 23:31:40.213
  Mar  7 23:31:40.231: INFO: Created ControllerRevision: e2e-s7zng-daemon-set-7cc4fcd654
  STEP: Confirm that there are two ControllerRevisions @ 03/07/24 23:31:40.232
  Mar  7 23:31:40.232: INFO: Requesting list of ControllerRevisions to confirm quantity
  Mar  7 23:31:40.240: INFO: Found 2 ControllerRevisions
  STEP: Deleting ControllerRevision "e2e-s7zng-daemon-set-75944bfc5b" @ 03/07/24 23:31:40.24
  STEP: Confirm that there is only one ControllerRevision @ 03/07/24 23:31:40.262
  Mar  7 23:31:40.262: INFO: Requesting list of ControllerRevisions to confirm quantity
  Mar  7 23:31:40.270: INFO: Found 1 ControllerRevisions
  STEP: Updating ControllerRevision "e2e-s7zng-daemon-set-7cc4fcd654" @ 03/07/24 23:31:40.277
  Mar  7 23:31:40.304: INFO: e2e-s7zng-daemon-set-7cc4fcd654 has been updated
  STEP: Generate another ControllerRevision by patching the Daemonset @ 03/07/24 23:31:40.304
  W0307 23:31:40.325504      20 warnings.go:70] unknown field "updateStrategy"
  STEP: Confirm that there are two ControllerRevisions @ 03/07/24 23:31:40.325
  Mar  7 23:31:40.325: INFO: Requesting list of ControllerRevisions to confirm quantity
  E0307 23:31:41.028516      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:41.326: INFO: Requesting list of ControllerRevisions to confirm quantity
  Mar  7 23:31:41.334: INFO: Found 2 ControllerRevisions
  STEP: Removing a ControllerRevision via 'DeleteCollection' with labelSelector: "e2e-s7zng-daemon-set-7cc4fcd654=updated" @ 03/07/24 23:31:41.334
  STEP: Confirm that there is only one ControllerRevision @ 03/07/24 23:31:41.36
  Mar  7 23:31:41.361: INFO: Requesting list of ControllerRevisions to confirm quantity
  Mar  7 23:31:41.368: INFO: Found 1 ControllerRevisions
  Mar  7 23:31:41.376: INFO: ControllerRevision "e2e-s7zng-daemon-set-67df55957f" has revision 3
  STEP: Deleting DaemonSet "e2e-s7zng-daemon-set" @ 03/07/24 23:31:41.385
  STEP: deleting DaemonSet.extensions e2e-s7zng-daemon-set in namespace controllerrevisions-24, will wait for the garbage collector to delete the pods @ 03/07/24 23:31:41.385
  Mar  7 23:31:41.464: INFO: Deleting DaemonSet.extensions e2e-s7zng-daemon-set took: 17.431467ms
  Mar  7 23:31:41.565: INFO: Terminating DaemonSet.extensions e2e-s7zng-daemon-set pods took: 101.096193ms
  E0307 23:31:42.029030      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:42.577: INFO: Number of nodes with available pods controlled by daemonset e2e-s7zng-daemon-set: 0
  Mar  7 23:31:42.577: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset e2e-s7zng-daemon-set
  Mar  7 23:31:42.588: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"123188"},"items":null}

  Mar  7 23:31:42.599: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"123188"},"items":null}

  Mar  7 23:31:42.623: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "controllerrevisions-24" for this suite. @ 03/07/24 23:31:42.628
• [4.604 seconds]
------------------------------
[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Slow] [Conformance] [sig-node, Slow, Conformance]
test/e2e/common/node/expansion.go:155
  STEP: Creating a kubernetes client @ 03/07/24 23:31:42.644
  Mar  7 23:31:42.644: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename var-expansion @ 03/07/24 23:31:42.645
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:31:42.667
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:31:42.671
  E0307 23:31:43.029492      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:44.029993      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:44.699: INFO: Deleting pod "var-expansion-912da67c-ae2a-43a5-93b7-28140e9038db" in namespace "var-expansion-3955"
  Mar  7 23:31:44.729: INFO: Wait up to 5m0s for pod "var-expansion-912da67c-ae2a-43a5-93b7-28140e9038db" to be fully deleted
  E0307 23:31:45.030695      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:46.031525      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:46.746: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-3955" for this suite. @ 03/07/24 23:31:46.757
• [4.136 seconds]
------------------------------
SS
------------------------------
[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance] [sig-node, Conformance]
test/e2e/node/security_context.go:170
  STEP: Creating a kubernetes client @ 03/07/24 23:31:46.78
  Mar  7 23:31:46.780: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename security-context @ 03/07/24 23:31:46.783
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:31:46.83
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:31:46.837
  STEP: Creating a pod to test pod.Spec.SecurityContext.RunAsUser @ 03/07/24 23:31:46.841
  E0307 23:31:47.032614      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:48.033483      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:49.034509      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:50.034880      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 03/07/24 23:31:50.87
  Mar  7 23:31:50.878: INFO: Trying to get logs from node whiskas-1 pod security-context-c35993e9-3daf-4235-a424-b70b1d1d8929 container test-container: <nil>
  STEP: delete the pod @ 03/07/24 23:31:50.894
  Mar  7 23:31:50.954: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-7582" for this suite. @ 03/07/24 23:31:50.965
• [4.207 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:1533
  STEP: Creating a kubernetes client @ 03/07/24 23:31:50.988
  Mar  7 23:31:50.988: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 23:31:50.989
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:31:51.026
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:31:51.031
  E0307 23:31:51.034820      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: creating a service nodeport-service with the type=NodePort in namespace services-1485 @ 03/07/24 23:31:51.037
  STEP: Creating active service to test reachability when its FQDN is referred as externalName for another service @ 03/07/24 23:31:51.074
  STEP: creating service externalsvc in namespace services-1485 @ 03/07/24 23:31:51.088
  STEP: creating replication controller externalsvc in namespace services-1485 @ 03/07/24 23:31:51.108
  I0307 23:31:51.126396      20 runners.go:197] Created replication controller with name: externalsvc, namespace: services-1485, replica count: 2
  E0307 23:31:52.039109      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:53.039329      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:54.039675      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0307 23:31:54.177019      20 runners.go:197] externalsvc Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  STEP: changing the NodePort service to type=ExternalName @ 03/07/24 23:31:54.185
  Mar  7 23:31:54.243: INFO: Creating new exec pod
  E0307 23:31:55.040061      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:56.040388      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:56.279: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-1485 exec execpodlxz2p -- /bin/sh -x -c nslookup nodeport-service.services-1485.svc.cluster.local'
  Mar  7 23:31:56.371: INFO: stderr: "+ nslookup nodeport-service.services-1485.svc.cluster.local\n"
  Mar  7 23:31:56.371: INFO: stdout: "Server:\t\t10.152.183.10\nAddress:\t10.152.183.10#53\n\nnodeport-service.services-1485.svc.cluster.local\tcanonical name = externalsvc.services-1485.svc.cluster.local.\nName:\texternalsvc.services-1485.svc.cluster.local\nAddress: 10.152.183.39\n\n"
  STEP: deleting ReplicationController externalsvc in namespace services-1485, will wait for the garbage collector to delete the pods @ 03/07/24 23:31:56.371
  Mar  7 23:31:56.438: INFO: Deleting ReplicationController externalsvc took: 13.618509ms
  Mar  7 23:31:56.539: INFO: Terminating ReplicationController externalsvc pods took: 101.119371ms
  E0307 23:31:57.041641      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:58.042318      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:31:59.042397      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:31:59.703: INFO: Cleaning up the NodePort to ExternalName test service
  Mar  7 23:31:59.721: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-1485" for this suite. @ 03/07/24 23:31:59.725
• [8.746 seconds]
------------------------------
SS
------------------------------
[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance] [sig-node, Conformance]
test/e2e/common/node/runtimeclass.go:191
  STEP: Creating a kubernetes client @ 03/07/24 23:31:59.734
  Mar  7 23:31:59.734: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename runtimeclass @ 03/07/24 23:31:59.734
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:31:59.752
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:31:59.754
  STEP: getting /apis @ 03/07/24 23:31:59.756
  STEP: getting /apis/node.k8s.io @ 03/07/24 23:31:59.758
  STEP: getting /apis/node.k8s.io/v1 @ 03/07/24 23:31:59.759
  STEP: creating @ 03/07/24 23:31:59.76
  STEP: watching @ 03/07/24 23:31:59.773
  Mar  7 23:31:59.773: INFO: starting watch
  STEP: getting @ 03/07/24 23:31:59.78
  STEP: listing @ 03/07/24 23:31:59.782
  STEP: patching @ 03/07/24 23:31:59.784
  STEP: updating @ 03/07/24 23:31:59.79
  Mar  7 23:31:59.795: INFO: waiting for watch events with expected annotations
  STEP: deleting @ 03/07/24 23:31:59.795
  STEP: deleting a collection @ 03/07/24 23:31:59.805
  Mar  7 23:31:59.820: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-2128" for this suite. @ 03/07/24 23:31:59.824
• [0.098 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:100
  STEP: Creating a kubernetes client @ 03/07/24 23:31:59.832
  Mar  7 23:31:59.832: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename configmap @ 03/07/24 23:31:59.833
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:31:59.849
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:31:59.851
  STEP: Creating configMap with name configmap-test-volume-map-5b386f78-9c87-4d34-a5c1-17c9afdfd511 @ 03/07/24 23:31:59.855
  STEP: Creating a pod to test consume configMaps @ 03/07/24 23:31:59.861
  E0307 23:32:00.043158      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:01.044354      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:02.044299      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:03.044460      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 03/07/24 23:32:03.893
  Mar  7 23:32:03.902: INFO: Trying to get logs from node whiskas-1 pod pod-configmaps-2a12c6b2-0b1d-452f-8866-40d1fd5f3593 container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 23:32:03.921
  Mar  7 23:32:03.967: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-3875" for this suite. @ 03/07/24 23:32:03.971
• [4.147 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance] [sig-node, Conformance]
test/e2e/common/node/configmap.go:170
  STEP: Creating a kubernetes client @ 03/07/24 23:32:03.979
  Mar  7 23:32:03.979: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename configmap @ 03/07/24 23:32:03.98
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:32:04.001
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:32:04.004
  STEP: creating a ConfigMap @ 03/07/24 23:32:04.007
  STEP: fetching the ConfigMap @ 03/07/24 23:32:04.014
  STEP: patching the ConfigMap @ 03/07/24 23:32:04.016
  STEP: listing all ConfigMaps in all namespaces with a label selector @ 03/07/24 23:32:04.024
  STEP: deleting the ConfigMap by collection with a label selector @ 03/07/24 23:32:04.028
  E0307 23:32:04.044866      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: listing all ConfigMaps in test namespace @ 03/07/24 23:32:04.054
  Mar  7 23:32:04.057: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-6007" for this suite. @ 03/07/24 23:32:04.06
• [0.089 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance] [sig-apps, Conformance]
test/e2e/apps/replica_set.go:166
  STEP: Creating a kubernetes client @ 03/07/24 23:32:04.068
  Mar  7 23:32:04.068: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename replicaset @ 03/07/24 23:32:04.069
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:32:04.092
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:32:04.095
  STEP: Create a ReplicaSet @ 03/07/24 23:32:04.097
  STEP: Verify that the required pods have come up @ 03/07/24 23:32:04.104
  Mar  7 23:32:04.108: INFO: Pod name sample-pod: Found 0 pods out of 3
  E0307 23:32:05.047329      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:06.048551      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:07.049621      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:08.050300      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:09.050691      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:32:09.112: INFO: Pod name sample-pod: Found 3 pods out of 3
  STEP: ensuring each pod is running @ 03/07/24 23:32:09.112
  Mar  7 23:32:09.114: INFO: Replica Status: {Replicas:3 FullyLabeledReplicas:3 ReadyReplicas:3 AvailableReplicas:3 ObservedGeneration:1 Conditions:[]}
  STEP: Listing all ReplicaSets @ 03/07/24 23:32:09.114
  STEP: DeleteCollection of the ReplicaSets @ 03/07/24 23:32:09.117
  STEP: After DeleteCollection verify that ReplicaSets have been deleted @ 03/07/24 23:32:09.125
  Mar  7 23:32:09.152: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-6853" for this suite. @ 03/07/24 23:32:09.156
• [5.122 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for services [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:137
  STEP: Creating a kubernetes client @ 03/07/24 23:32:09.191
  Mar  7 23:32:09.191: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename dns @ 03/07/24 23:32:09.192
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:32:09.298
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:32:09.302
  STEP: Creating a test headless service @ 03/07/24 23:32:09.305
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service.dns-319.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-319.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-319.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-319.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-319.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.dns-test-service.dns-319.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-319.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.dns-test-service.dns-319.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-319.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.test-service-2.dns-319.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-319.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.test-service-2.dns-319.svc.cluster.local;check="$$(dig +notcp +noall +answer +search 63.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.63_udp@PTR;check="$$(dig +tcp +noall +answer +search 63.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.63_tcp@PTR;sleep 1; done
   @ 03/07/24 23:32:09.343
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service.dns-319.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-319.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-319.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-319.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-319.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.dns-test-service.dns-319.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-319.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.dns-test-service.dns-319.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-319.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.test-service-2.dns-319.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-319.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.test-service-2.dns-319.svc.cluster.local;check="$$(dig +notcp +noall +answer +search 63.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.63_udp@PTR;check="$$(dig +tcp +noall +answer +search 63.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.63_tcp@PTR;sleep 1; done
   @ 03/07/24 23:32:09.343
  STEP: creating a pod to probe DNS @ 03/07/24 23:32:09.343
  STEP: submitting the pod to kubernetes @ 03/07/24 23:32:09.343
  E0307 23:32:10.051153      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:11.051403      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: retrieving the pod @ 03/07/24 23:32:11.385
  STEP: looking for the results for each expected name from probers @ 03/07/24 23:32:11.392
  Mar  7 23:32:11.397: INFO: Unable to read wheezy_udp@dns-test-service.dns-319.svc.cluster.local from pod dns-319/dns-test-918e02fd-df32-41e0-b157-42427934895e: the server could not find the requested resource (get pods dns-test-918e02fd-df32-41e0-b157-42427934895e)
  Mar  7 23:32:11.401: INFO: Unable to read wheezy_tcp@dns-test-service.dns-319.svc.cluster.local from pod dns-319/dns-test-918e02fd-df32-41e0-b157-42427934895e: the server could not find the requested resource (get pods dns-test-918e02fd-df32-41e0-b157-42427934895e)
  Mar  7 23:32:11.405: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-319.svc.cluster.local from pod dns-319/dns-test-918e02fd-df32-41e0-b157-42427934895e: the server could not find the requested resource (get pods dns-test-918e02fd-df32-41e0-b157-42427934895e)
  Mar  7 23:32:11.409: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-319.svc.cluster.local from pod dns-319/dns-test-918e02fd-df32-41e0-b157-42427934895e: the server could not find the requested resource (get pods dns-test-918e02fd-df32-41e0-b157-42427934895e)
  Mar  7 23:32:11.423: INFO: Unable to read jessie_udp@dns-test-service.dns-319.svc.cluster.local from pod dns-319/dns-test-918e02fd-df32-41e0-b157-42427934895e: the server could not find the requested resource (get pods dns-test-918e02fd-df32-41e0-b157-42427934895e)
  Mar  7 23:32:11.429: INFO: Unable to read jessie_tcp@dns-test-service.dns-319.svc.cluster.local from pod dns-319/dns-test-918e02fd-df32-41e0-b157-42427934895e: the server could not find the requested resource (get pods dns-test-918e02fd-df32-41e0-b157-42427934895e)
  Mar  7 23:32:11.432: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-319.svc.cluster.local from pod dns-319/dns-test-918e02fd-df32-41e0-b157-42427934895e: the server could not find the requested resource (get pods dns-test-918e02fd-df32-41e0-b157-42427934895e)
  Mar  7 23:32:11.434: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-319.svc.cluster.local from pod dns-319/dns-test-918e02fd-df32-41e0-b157-42427934895e: the server could not find the requested resource (get pods dns-test-918e02fd-df32-41e0-b157-42427934895e)
  Mar  7 23:32:11.443: INFO: Lookups using dns-319/dns-test-918e02fd-df32-41e0-b157-42427934895e failed for: [wheezy_udp@dns-test-service.dns-319.svc.cluster.local wheezy_tcp@dns-test-service.dns-319.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-319.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-319.svc.cluster.local jessie_udp@dns-test-service.dns-319.svc.cluster.local jessie_tcp@dns-test-service.dns-319.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-319.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-319.svc.cluster.local]

  Mar  7 23:32:11.447: INFO: Pod client logs for webserver: 
  Mar  7 23:32:11.451: INFO: Pod client logs for querier: 
  Mar  7 23:32:11.454: INFO: Pod client logs for jessie-querier: 
  E0307 23:32:12.052174      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:13.052708      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:14.053271      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:15.053980      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:16.054862      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:32:16.471: INFO: DNS probes using dns-319/dns-test-918e02fd-df32-41e0-b157-42427934895e succeeded

  STEP: deleting the pod @ 03/07/24 23:32:16.472
  STEP: deleting the test service @ 03/07/24 23:32:16.513
  STEP: deleting the test headless service @ 03/07/24 23:32:16.567
  Mar  7 23:32:16.579: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-319" for this suite. @ 03/07/24 23:32:16.582
• [7.399 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance] [sig-apps, Conformance]
test/e2e/apps/job.go:572
  STEP: Creating a kubernetes client @ 03/07/24 23:32:16.589
  Mar  7 23:32:16.589: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename job @ 03/07/24 23:32:16.59
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:32:16.608
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:32:16.61
  STEP: Creating a job @ 03/07/24 23:32:16.611
  STEP: Ensuring job reaches completions @ 03/07/24 23:32:16.617
  E0307 23:32:17.054919      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:18.055511      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:19.056035      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:20.056420      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:21.057103      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:22.057546      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:23.057667      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:24.058317      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:25.058774      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:26.060022      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:32:26.627: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-4774" for this suite. @ 03/07/24 23:32:26.638
• [10.076 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment deployment should delete old replica sets [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:122
  STEP: Creating a kubernetes client @ 03/07/24 23:32:26.667
  Mar  7 23:32:26.667: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename deployment @ 03/07/24 23:32:26.669
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:32:26.719
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:32:26.725
  Mar  7 23:32:26.752: INFO: Pod name cleanup-pod: Found 0 pods out of 1
  E0307 23:32:27.060423      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:28.061066      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:29.061648      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:30.062296      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:31.062845      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:32:31.757: INFO: Pod name cleanup-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 03/07/24 23:32:31.757
  Mar  7 23:32:31.757: INFO: Creating deployment test-cleanup-deployment
  STEP: Waiting for deployment test-cleanup-deployment history to be cleaned up @ 03/07/24 23:32:31.768
  Mar  7 23:32:31.777: INFO: Deployment "test-cleanup-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=23) "test-cleanup-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-685",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a79f6b71-855f-4daf-99b3-80ae26a6cede",
      ResourceVersion: (string) (len=6) "123840",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845451151,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451151,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=637) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 61  67 6e 68 6f 73 74 5c 22  |me\":\"agnhost\"|
              00000160  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000170  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000180  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000190  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              000001a0  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              000001b0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001c0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              000001d0  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              000001e0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001f0  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000200  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              00000210  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              00000220  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              00000230  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000270  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(0),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 0,
      Replicas: (int32) 0,
      UpdatedReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) <nil>,
      CollisionCount: (*int32)(<nil>)
    }
  }


  Mar  7 23:32:31.781: INFO: New ReplicaSet of Deployment "test-cleanup-deployment" is nil.
  Mar  7 23:32:31.781: INFO: All old ReplicaSets of Deployment "test-cleanup-deployment":
  Mar  7 23:32:31.781: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=23) "test-cleanup-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-685",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "70997993-de96-45c8-a943-7f6ce65257a0",
      ResourceVersion: (string) (len=6) "123842",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845451146,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=23) "test-cleanup-deployment",
          UID: (types.UID) (len=36) "a79f6b71-855f-4daf-99b3-80ae26a6cede",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451146,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=483) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              00000030  3a 70 6f 64 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |:pod":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  72 65 70 6c 69 63 61 73  |ec":{"f:replicas|
              00000050  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000060  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000070  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000080  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              00000090  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              000000a0  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              000000b0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              000000c0  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              000000d0  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              000000e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              000000f0  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000100  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000110  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000120  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |rces":{},"f:term|
              00000130  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000140  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000160  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000170  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              00000180  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              00000190  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              000001a0  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000001b0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              000001c0  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              000001d0  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              000001e0  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451147,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451151,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=103) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6f 77 6e 65 72 52  65 66 65 72 65 6e 63 65  |f:ownerReference|
              00000020  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 6b 3a 7b 5c  |s":{".":{},"k:{\|
              00000030  22 75 69 64 5c 22 3a 5c  22 61 37 39 66 36 62 37  |"uid\":\"a79f6b7|
              00000040  31 2d 38 35 35 66 2d 34  64 61 66 2d 39 39 62 33  |1-855f-4daf-99b3|
              00000050  2d 38 30 61 65 32 36 61  36 63 65 64 65 5c 22 7d  |-80ae26a6cede\"}|
              00000060  22 3a 7b 7d 7d 7d 7d                              |":{}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Mar  7 23:32:31.785: INFO: Pod "test-cleanup-controller-fr6s4" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=29) "test-cleanup-controller-fr6s4",
      GenerateName: (string) (len=24) "test-cleanup-controller-",
      Namespace: (string) (len=14) "deployment-685",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "81b2f0fc-01db-4be6-956b-528ff33810c5",
      ResourceVersion: (string) (len=6) "123829",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845451146,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=13) "10.1.51.80/32",
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "453beb83156fd53b2bfb8210f962ae329dd64d1dedfa5b876353efa04a4fa58a",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=13) "10.1.51.80/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=23) "test-cleanup-controller",
          UID: (types.UID) (len=36) "70997993-de96-45c8-a943-7f6ce65257a0",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451146,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=500) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  22 3a 7b 7d 7d 2c 22 66  |},"f:pod":{}},"f|
              00000050  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000060  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000070  75 69 64 5c 22 3a 5c 22  37 30 39 39 37 39 39 33  |uid\":\"70997993|
              00000080  2d 64 65 39 36 2d 34 35  63 38 2d 61 39 34 33 2d  |-de96-45c8-a943-|
              00000090  37 66 36 63 65 36 35 32  35 37 61 30 5c 22 7d 22  |7f6ce65257a0\"}"|
              000000a0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000b0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000c0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 68  |"k:{\"name\":\"h|
              000000d0  74 74 70 64 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |ttpd\"}":{".":{}|
              000000e0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              000000f0  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000100  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000110  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000120  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000130  4d 65 73 73 61 67 65 50  61 74 68 22 3a 7b 7d 2c  |MessagePath":{},|
              00000140  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000150  73 73 61 67 65 50 6f 6c  69 63 79 22 3a 7b 7d 7d  |ssagePolicy":{}}|
              00000160  7d 2c 22 66 3a 64 6e 73  50 6f 6c 69 63 79 22 3a  |},"f:dnsPolicy":|
              00000170  7b 7d 2c 22 66 3a 65 6e  61 62 6c 65 53 65 72 76  |{},"f:enableServ|
              00000180  69 63 65 4c 69 6e 6b 73  22 3a 7b 7d 2c 22 66 3a  |iceLinks":{},"f:|
              00000190  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000001a0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000001b0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000001c0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              000001d0  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              000001e0  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              000001f0  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451147,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451147,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=659) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 30  |,"k:{\"ip\":\"10|
              00000260  2e 31 2e 35 31 2e 38 30  5c 22 7d 22 3a 7b 22 2e  |.1.51.80\"}":{".|
              00000270  22 3a 7b 7d 2c 22 66 3a  69 70 22 3a 7b 7d 7d 7d  |":{},"f:ip":{}}}|
              00000280  2c 22 66 3a 73 74 61 72  74 54 69 6d 65 22 3a 7b  |,"f:startTime":{|
              00000290  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-7zlcx",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-7zlcx",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)(<nil>),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451147,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451146,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451147,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451147,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451146,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) (len=10) "10.1.51.80",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=10) "10.1.51.80"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845451146,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63845451147,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://5da934c3728e4e3f85551064d88fce78b9159f47e7e7dd851770a2de81fea532",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:32:31.785: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-685" for this suite. @ 03/07/24 23:32:31.79
• [5.143 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtimeclass.go:131
  STEP: Creating a kubernetes client @ 03/07/24 23:32:31.811
  Mar  7 23:32:31.811: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename runtimeclass @ 03/07/24 23:32:31.812
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:32:31.855
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:32:31.857
  E0307 23:32:32.062803      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:33.063328      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:32:33.908: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-9360" for this suite. @ 03/07/24 23:32:33.92
• [2.130 seconds]
------------------------------
S
------------------------------
[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/security_context.go:530
  STEP: Creating a kubernetes client @ 03/07/24 23:32:33.941
  Mar  7 23:32:33.941: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename security-context-test @ 03/07/24 23:32:33.943
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:32:33.993
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:32:33.997
  E0307 23:32:34.064031      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:35.064529      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:32:36.022: INFO: Got logs for pod "busybox-privileged-false-895fc6e6-b370-4d8d-b42d-c70f10e90d9c": "ip: RTNETLINK answers: Operation not permitted\n"
  Mar  7 23:32:36.022: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-0" for this suite. @ 03/07/24 23:32:36.026
• [2.096 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance] [sig-network, Conformance]
test/e2e/network/endpointslicemirroring.go:55
  STEP: Creating a kubernetes client @ 03/07/24 23:32:36.039
  Mar  7 23:32:36.039: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename endpointslicemirroring @ 03/07/24 23:32:36.04
  E0307 23:32:36.065244      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:32:36.067
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:32:36.07
  STEP: mirroring a new custom Endpoint @ 03/07/24 23:32:36.092
  Mar  7 23:32:36.105: INFO: Waiting for at least 1 EndpointSlice to exist, got 0
  E0307 23:32:37.066123      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:38.067185      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: mirroring an update to a custom Endpoint @ 03/07/24 23:32:38.117
  Mar  7 23:32:38.143: INFO: Expected EndpointSlice to have 10.2.3.4 as address, got 10.1.2.3
  E0307 23:32:39.067783      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:40.068401      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: mirroring deletion of a custom Endpoint @ 03/07/24 23:32:40.152
  Mar  7 23:32:40.187: INFO: Waiting for 0 EndpointSlices to exist, got 1
  E0307 23:32:41.069484      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:42.070217      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:32:42.195: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslicemirroring-3291" for this suite. @ 03/07/24 23:32:42.199
• [6.171 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance] [sig-apps, Conformance]
test/e2e/apps/rc.go:86
  STEP: Creating a kubernetes client @ 03/07/24 23:32:42.21
  Mar  7 23:32:42.210: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename replication-controller @ 03/07/24 23:32:42.211
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:32:42.234
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:32:42.237
  Mar  7 23:32:42.240: INFO: Creating quota "condition-test" that allows only two pods to run in the current namespace
  E0307 23:32:43.070591      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating rc "condition-test" that asks for more than the allowed pod quota @ 03/07/24 23:32:43.261
  STEP: Checking rc "condition-test" has the desired failure condition set @ 03/07/24 23:32:43.283
  E0307 23:32:44.071472      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Scaling down rc "condition-test" to satisfy pod quota @ 03/07/24 23:32:44.299
  Mar  7 23:32:44.331: INFO: Updating replication controller "condition-test"
  STEP: Checking rc "condition-test" has no failure condition set @ 03/07/24 23:32:44.336
  E0307 23:32:45.071744      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:32:45.355: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-8621" for this suite. @ 03/07/24 23:32:45.365
• [3.170 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should test the lifecycle of an Endpoint [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:3154
  STEP: Creating a kubernetes client @ 03/07/24 23:32:45.381
  Mar  7 23:32:45.381: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 23:32:45.382
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:32:45.403
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:32:45.405
  STEP: creating an Endpoint @ 03/07/24 23:32:45.408
  STEP: waiting for available Endpoint @ 03/07/24 23:32:45.414
  STEP: listing all Endpoints @ 03/07/24 23:32:45.415
  STEP: updating the Endpoint @ 03/07/24 23:32:45.418
  STEP: fetching the Endpoint @ 03/07/24 23:32:45.424
  STEP: patching the Endpoint @ 03/07/24 23:32:45.426
  STEP: fetching the Endpoint @ 03/07/24 23:32:45.432
  STEP: deleting the Endpoint by Collection @ 03/07/24 23:32:45.434
  STEP: waiting for Endpoint deletion @ 03/07/24 23:32:45.443
  STEP: fetching the Endpoint @ 03/07/24 23:32:45.444
  Mar  7 23:32:45.445: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-2769" for this suite. @ 03/07/24 23:32:45.448
• [0.073 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:301
  STEP: Creating a kubernetes client @ 03/07/24 23:32:45.455
  Mar  7 23:32:45.455: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename webhook @ 03/07/24 23:32:45.455
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:32:45.474
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:32:45.477
  STEP: Setting up server cert @ 03/07/24 23:32:45.505
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 03/07/24 23:32:45.678
  STEP: Deploying the webhook pod @ 03/07/24 23:32:45.686
  STEP: Wait for the deployment to be ready @ 03/07/24 23:32:45.701
  Mar  7 23:32:45.705: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  E0307 23:32:46.072319      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:47.072436      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 03/07/24 23:32:47.733
  STEP: Verifying the service has paired with the endpoint @ 03/07/24 23:32:47.776
  E0307 23:32:48.073464      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:32:48.777: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the crd webhook via the AdmissionRegistration API @ 03/07/24 23:32:48.794
  E0307 23:32:49.073817      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:50.074446      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:51.074540      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:52.075098      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:53.075482      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:54.076119      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:55.076501      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:56.077267      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:57.077891      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:32:58.078498      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:32:58.855: INFO: Waiting for webhook configuration to be ready...
  STEP: Creating a custom resource definition that should be denied by the webhook @ 03/07/24 23:32:58.977
  Mar  7 23:32:58.977: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  E0307 23:32:59.078640      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:32:59.088: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-9312" for this suite. @ 03/07/24 23:32:59.091
  STEP: Destroying namespace "webhook-markers-6094" for this suite. @ 03/07/24 23:32:59.106
• [13.659 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:125
  STEP: Creating a kubernetes client @ 03/07/24 23:32:59.114
  Mar  7 23:32:59.114: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 23:32:59.115
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:32:59.143
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:32:59.152
  STEP: Creating projection with configMap that has name projected-configmap-test-upd-bad3b858-23be-48bb-bfde-c7bee92e7197 @ 03/07/24 23:32:59.174
  STEP: Creating the pod @ 03/07/24 23:32:59.194
  E0307 23:33:00.079114      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:01.079263      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Updating configmap projected-configmap-test-upd-bad3b858-23be-48bb-bfde-c7bee92e7197 @ 03/07/24 23:33:01.272
  STEP: waiting to observe update in volume @ 03/07/24 23:33:01.293
  E0307 23:33:02.079511      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:03.080066      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:04.080307      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:05.080613      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:33:05.343: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2555" for this suite. @ 03/07/24 23:33:05.354
• [6.268 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:113
  STEP: Creating a kubernetes client @ 03/07/24 23:33:05.384
  Mar  7 23:33:05.384: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename deployment @ 03/07/24 23:33:05.386
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:33:05.433
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:33:05.445
  Mar  7 23:33:05.453: INFO: Creating deployment "test-recreate-deployment"
  Mar  7 23:33:05.470: INFO: Waiting deployment "test-recreate-deployment" to be updated to revision 1
  Mar  7 23:33:05.486: INFO: new replicaset for deployment "test-recreate-deployment" is yet to be created
  E0307 23:33:06.080902      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:07.081714      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:33:07.504: INFO: Waiting deployment "test-recreate-deployment" to complete
  Mar  7 23:33:07.512: INFO: Triggering a new rollout for deployment "test-recreate-deployment"
  Mar  7 23:33:07.544: INFO: Updating deployment test-recreate-deployment
  Mar  7 23:33:07.544: INFO: Watching deployment "test-recreate-deployment" to verify that new pods will not run with olds pods
  Mar  7 23:33:07.691: INFO: Deployment "test-recreate-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-recreate-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-8741",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "1e08d5d8-6444-45ce-82b0-6d530efadeae",
      ResourceVersion: (string) (len=6) "124263",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845451185,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=570) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |":{"f:type":{}},|
              000000b0  22 66 3a 74 65 6d 70 6c  61 74 65 22 3a 7b 22 66  |"f:template":{"f|
              000000c0  3a 6d 65 74 61 64 61 74  61 22 3a 7b 22 66 3a 6c  |:metadata":{"f:l|
              000000d0  61 62 65 6c 73 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |abels":{".":{},"|
              000000e0  66 3a 6e 61 6d 65 22 3a  7b 7d 7d 7d 2c 22 66 3a  |f:name":{}}},"f:|
              000000f0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              00000100  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              00000110  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              00000120  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              00000130  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000140  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000150  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000160  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 73 65 63 75  |rces":{},"f:secu|
              00000170  72 69 74 79 43 6f 6e 74  65 78 74 22 3a 7b 7d 2c  |rityContext":{},|
              00000180  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000190  73 73 61 67 65 50 61 74  68 22 3a 7b 7d 2c 22 66  |ssagePath":{},"f|
              000001a0  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 4d 65 73 73  |:terminationMess|
              000001b0  61 67 65 50 6f 6c 69 63  79 22 3a 7b 7d 7d 7d 2c  |agePolicy":{}}},|
              000001c0  22 66 3a 64 6e 73 50 6f  6c 69 63 79 22 3a 7b 7d  |"f:dnsPolicy":{}|
              000001d0  2c 22 66 3a 72 65 73 74  61 72 74 50 6f 6c 69 63  |,"f:restartPolic|
              000001e0  79 22 3a 7b 7d 2c 22 66  3a 73 63 68 65 64 75 6c  |y":{},"f:schedul|
              000001f0  65 72 4e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 73 65  |erName":{},"f:se|
              00000200  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000210  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000220  47 72 61 63 65 50 65 72  69 6f 64 53 65 63 6f 6e  |GracePeriodSecon|
              00000230  64 73 22 3a 7b 7d 7d 7d  7d 7d                    |ds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=495) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 63 6f 6e 64 69 74 69  6f 6e 73 22 3a 7b 22 2e  |:conditions":{".|
              00000070  22 3a 7b 7d 2c 22 6b 3a  7b 5c 22 74 79 70 65 5c  |":{},"k:{\"type\|
              00000080  22 3a 5c 22 41 76 61 69  6c 61 62 6c 65 5c 22 7d  |":\"Available\"}|
              00000090  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |":{".":{},"f:las|
              000000a0  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              000000b0  3a 7b 7d 2c 22 66 3a 6c  61 73 74 55 70 64 61 74  |:{},"f:lastUpdat|
              000000c0  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6d 65 73  |eTime":{},"f:mes|
              000000d0  73 61 67 65 22 3a 7b 7d  2c 22 66 3a 72 65 61 73  |sage":{},"f:reas|
              000000e0  6f 6e 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |on":{},"f:status|
              000000f0  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000100  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000110  22 50 72 6f 67 72 65 73  73 69 6e 67 5c 22 7d 22  |"Progressing\"}"|
              00000120  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              00000130  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000140  7b 7d 2c 22 66 3a 6c 61  73 74 55 70 64 61 74 65  |{},"f:lastUpdate|
              00000150  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6d 65 73 73  |Time":{},"f:mess|
              00000160  61 67 65 22 3a 7b 7d 2c  22 66 3a 72 65 61 73 6f  |age":{},"f:reaso|
              00000170  6e 22 3a 7b 7d 2c 22 66  3a 73 74 61 74 75 73 22  |n":{},"f:status"|
              00000180  3a 7b 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |:{},"f:type":{}}|
              00000190  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              000001a0  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              000001b0  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 75  |eplicas":{},"f:u|
              000001c0  6e 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |navailableReplic|
              000001d0  61 73 22 3a 7b 7d 2c 22  66 3a 75 70 64 61 74 65  |as":{},"f:update|
              000001e0  64 52 65 70 6c 69 63 61  73 22 3a 7b 7d 7d 7d     |dReplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=8) "Recreate",
        RollingUpdate: (*v1.RollingUpdateDeployment)(<nil>)
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 2,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      UnavailableReplicas: (int32) 1,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=26) "MinimumReplicasUnavailable",
          Message: (string) (len=46) "Deployment does not have minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451185,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=17) "ReplicaSetUpdated",
          Message: (string) (len=63) "ReplicaSet \"test-recreate-deployment-76fb77d45\" is progressing."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Mar  7 23:33:07.693: INFO: New ReplicaSet "test-recreate-deployment-76fb77d45" of Deployment "test-recreate-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=34) "test-recreate-deployment-76fb77d45",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-8741",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "f1e85b29-b763-4657-a0a3-2104c73b2e74",
      ResourceVersion: (string) (len=6) "124260",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845451187,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "1",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-recreate-deployment",
          UID: (types.UID) (len=36) "1e08d5d8-6444-45ce-82b0-6d530efadeae",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 31 65 30 38 64 35  64 38 2d 36 34 34 34 2d  |\"1e08d5d8-6444-|
              00000120  34 35 63 65 2d 38 32 62  30 2d 36 64 35 33 30 65  |45ce-82b0-6d530e|
              00000130  66 61 64 65 61 65 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |fadeae\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=84) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  66 75 6c 6c 79 4c 61 62  65 6c 65 64 52 65 70 6c  |fullyLabeledRepl|
              00000020  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |icas":{},"f:obse|
              00000030  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              00000040  7b 7d 2c 22 66 3a 72 65  70 6c 69 63 61 73 22 3a  |{},"f:replicas":|
              00000050  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3",
          (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3",
            (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Mar  7 23:33:07.694: INFO: All old ReplicaSets of Deployment "test-recreate-deployment":
  Mar  7 23:33:07.694: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=34) "test-recreate-deployment-dd4bc9d6d",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-8741",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "60a1e3d0-09c0-4720-9d32-d5091a8a1e16",
      ResourceVersion: (string) (len=6) "124251",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845451185,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=9) "dd4bc9d6d"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "1",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-recreate-deployment",
          UID: (types.UID) (len=36) "1e08d5d8-6444-45ce-82b0-6d530efadeae",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 31 65 30 38 64 35  64 38 2d 36 34 34 34 2d  |\"1e08d5d8-6444-|
              00000120  34 35 63 65 2d 38 32 62  30 2d 36 64 35 33 30 65  |45ce-82b0-6d530e|
              00000130  66 61 64 65 61 65 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |fadeae\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3",
          (string) (len=17) "pod-template-hash": (string) (len=9) "dd4bc9d6d"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3",
            (string) (len=17) "pod-template-hash": (string) (len=9) "dd4bc9d6d"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Mar  7 23:33:07.697: INFO: Pod "test-recreate-deployment-76fb77d45-55pwq" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=40) "test-recreate-deployment-76fb77d45-55pwq",
      GenerateName: (string) (len=35) "test-recreate-deployment-76fb77d45-",
      Namespace: (string) (len=15) "deployment-8741",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d4028a3a-64d0-40d3-aa19-00273f1a038c",
      ResourceVersion: (string) (len=6) "124262",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845451187,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=34) "test-recreate-deployment-76fb77d45",
          UID: (types.UID) (len=36) "f1e85b29-b763-4657-a0a3-2104c73b2e74",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 31  65 38 35 62 32 39 2d 62  |d\":\"f1e85b29-b|
              00000090  37 36 33 2d 34 36 35 37  2d 61 30 61 33 2d 32 31  |763-4657-a0a3-21|
              000000a0  30 34 63 37 33 62 32 65  37 34 5c 22 7d 22 3a 7b  |04c73b2e74\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-985rc",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-985rc",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=9) "whiskas-1",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63845451187,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.205",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=14) "10.100.138.205"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63845451187,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Mar  7 23:33:07.697: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-8741" for this suite. @ 03/07/24 23:33:07.7
• [2.324 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:58
  STEP: Creating a kubernetes client @ 03/07/24 23:33:07.708
  Mar  7 23:33:07.708: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 23:33:07.709
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:33:07.722
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:33:07.724
  STEP: Creating configMap with name projected-configmap-test-volume-7d897be2-fb01-489c-bb8f-2d7a4d7feada @ 03/07/24 23:33:07.726
  STEP: Creating a pod to test consume configMaps @ 03/07/24 23:33:07.733
  E0307 23:33:08.081860      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:09.082477      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:10.083317      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:11.083885      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 03/07/24 23:33:11.769
  Mar  7 23:33:11.777: INFO: Trying to get logs from node whiskas-1 pod pod-projected-configmaps-5421f9de-c586-4ac3-bf86-e7cb88691816 container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 23:33:11.792
  Mar  7 23:33:11.845: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3177" for this suite. @ 03/07/24 23:33:11.855
• [4.161 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtime.go:248
  STEP: Creating a kubernetes client @ 03/07/24 23:33:11.87
  Mar  7 23:33:11.870: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-runtime @ 03/07/24 23:33:11.872
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:33:11.913
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:33:11.919
  STEP: create the container @ 03/07/24 23:33:11.928
  W0307 23:33:11.942239      20 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 03/07/24 23:33:11.942
  E0307 23:33:12.083824      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:13.084258      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:14.085325      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:15.085316      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: get the container status @ 03/07/24 23:33:15.979
  STEP: the container should be terminated @ 03/07/24 23:33:15.986
  STEP: the termination message should be set @ 03/07/24 23:33:15.986
  Mar  7 23:33:15.986: INFO: Expected: &{OK} to match Container's Termination Message: OK --
  STEP: delete the container @ 03/07/24 23:33:15.986
  Mar  7 23:33:16.015: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-9451" for this suite. @ 03/07/24 23:33:16.02
• [4.159 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/lifecycle_hook.go:214
  STEP: Creating a kubernetes client @ 03/07/24 23:33:16.029
  Mar  7 23:33:16.029: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 03/07/24 23:33:16.03
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:33:16.051
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:33:16.054
  STEP: create the container to handle the HTTPGet hook request. @ 03/07/24 23:33:16.06
  E0307 23:33:16.085782      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:17.086013      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:18.086911      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: create the pod with lifecycle hook @ 03/07/24 23:33:18.091
  E0307 23:33:19.087935      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:20.088297      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the pod with lifecycle hook @ 03/07/24 23:33:20.149
  E0307 23:33:21.088477      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:22.088648      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:23.089698      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:24.090343      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: check prestop hook @ 03/07/24 23:33:24.199
  Mar  7 23:33:24.240: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-4228" for this suite. @ 03/07/24 23:33:24.25
• [8.241 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/flowcontrol.go:270
  STEP: Creating a kubernetes client @ 03/07/24 23:33:24.271
  Mar  7 23:33:24.271: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename apf @ 03/07/24 23:33:24.273
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:33:24.314
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:33:24.317
  STEP: getting /apis @ 03/07/24 23:33:24.319
  STEP: getting /apis/flowcontrol.apiserver.k8s.io @ 03/07/24 23:33:24.323
  STEP: getting /apis/flowcontrol.apiserver.k8s.io/v1 @ 03/07/24 23:33:24.324
  STEP: creating @ 03/07/24 23:33:24.325
  STEP: getting @ 03/07/24 23:33:24.347
  STEP: listing @ 03/07/24 23:33:24.349
  STEP: watching @ 03/07/24 23:33:24.353
  Mar  7 23:33:24.353: INFO: starting watch
  STEP: patching @ 03/07/24 23:33:24.354
  STEP: updating @ 03/07/24 23:33:24.361
  Mar  7 23:33:24.388: INFO: waiting for watch events with expected annotations
  STEP: getting /status @ 03/07/24 23:33:24.388
  STEP: patching /status @ 03/07/24 23:33:24.39
  STEP: updating /status @ 03/07/24 23:33:24.395
  STEP: deleting @ 03/07/24 23:33:24.423
  STEP: deleting a collection @ 03/07/24 23:33:24.435
  Mar  7 23:33:24.453: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "apf-6062" for this suite. @ 03/07/24 23:33:24.456
• [0.192 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/chunking.go:83
  STEP: Creating a kubernetes client @ 03/07/24 23:33:24.463
  Mar  7 23:33:24.463: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename chunking @ 03/07/24 23:33:24.463
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:33:24.48
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:33:24.485
  STEP: creating a large number of resources @ 03/07/24 23:33:24.487
  E0307 23:33:25.090976      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:26.091938      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:27.092574      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:28.092967      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:29.093144      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:30.093962      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:31.094111      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:32.094051      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:33.095342      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:34.096380      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:35.097408      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:36.098621      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:37.098558      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:38.098756      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:39.099087      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:40.100163      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:41.100689      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:42.101487      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: retrieving those results in paged fashion several times @ 03/07/24 23:33:42.176
  Mar  7 23:33:42.237: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAwMTZcdTAwMDAifQ
  Mar  7 23:33:42.285: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAwMzNcdTAwMDAifQ
  Mar  7 23:33:42.334: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAwNTBcdTAwMDAifQ
  Mar  7 23:33:42.384: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAwNjdcdTAwMDAifQ
  Mar  7 23:33:42.422: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAwODRcdTAwMDAifQ
  Mar  7 23:33:42.483: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAxMDFcdTAwMDAifQ
  Mar  7 23:33:42.533: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAxMThcdTAwMDAifQ
  Mar  7 23:33:42.578: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAxMzVcdTAwMDAifQ
  Mar  7 23:33:42.651: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAxNTJcdTAwMDAifQ
  Mar  7 23:33:42.682: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAxNjlcdTAwMDAifQ
  Mar  7 23:33:42.730: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAxODZcdTAwMDAifQ
  Mar  7 23:33:42.779: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAyMDNcdTAwMDAifQ
  Mar  7 23:33:42.830: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAyMjBcdTAwMDAifQ
  Mar  7 23:33:42.878: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAyMzdcdTAwMDAifQ
  Mar  7 23:33:42.929: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAyNTRcdTAwMDAifQ
  Mar  7 23:33:42.979: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAyNzFcdTAwMDAifQ
  Mar  7 23:33:43.029: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAyODhcdTAwMDAifQ
  Mar  7 23:33:43.078: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAzMDVcdTAwMDAifQ
  E0307 23:33:43.102763      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:33:43.127: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAzMjJcdTAwMDAifQ
  Mar  7 23:33:43.215: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAzMzlcdTAwMDAifQ
  Mar  7 23:33:43.234: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAzNTZcdTAwMDAifQ
  Mar  7 23:33:43.267: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAzNzNcdTAwMDAifQ
  Mar  7 23:33:43.317: INFO: Retrieved 17/17 results with rv 124899 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0ODk5LCJzdGFydCI6InRlbXBsYXRlLTAzOTBcdTAwMDAifQ
  Mar  7 23:33:43.366: INFO: Retrieved 9/17 results with rv 124899 and continue 
  Mar  7 23:33:43.418: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAwMTZcdTAwMDAifQ
  Mar  7 23:33:43.477: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAwMzNcdTAwMDAifQ
  Mar  7 23:33:43.533: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAwNTBcdTAwMDAifQ
  Mar  7 23:33:43.577: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAwNjdcdTAwMDAifQ
  Mar  7 23:33:43.628: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAwODRcdTAwMDAifQ
  Mar  7 23:33:43.677: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAxMDFcdTAwMDAifQ
  Mar  7 23:33:43.741: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAxMThcdTAwMDAifQ
  Mar  7 23:33:43.771: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAxMzVcdTAwMDAifQ
  Mar  7 23:33:43.832: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAxNTJcdTAwMDAifQ
  Mar  7 23:33:43.881: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAxNjlcdTAwMDAifQ
  Mar  7 23:33:43.932: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAxODZcdTAwMDAifQ
  Mar  7 23:33:43.980: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAyMDNcdTAwMDAifQ
  Mar  7 23:33:44.033: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAyMjBcdTAwMDAifQ
  Mar  7 23:33:44.080: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAyMzdcdTAwMDAifQ
  E0307 23:33:44.103209      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:33:44.130: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAyNTRcdTAwMDAifQ
  Mar  7 23:33:44.175: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAyNzFcdTAwMDAifQ
  Mar  7 23:33:44.224: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAyODhcdTAwMDAifQ
  Mar  7 23:33:44.276: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAzMDVcdTAwMDAifQ
  Mar  7 23:33:44.324: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAzMjJcdTAwMDAifQ
  Mar  7 23:33:44.373: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAzMzlcdTAwMDAifQ
  Mar  7 23:33:44.425: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAzNTZcdTAwMDAifQ
  Mar  7 23:33:44.472: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAzNzNcdTAwMDAifQ
  Mar  7 23:33:44.523: INFO: Retrieved 17/17 results with rv 124901 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAxLCJzdGFydCI6InRlbXBsYXRlLTAzOTBcdTAwMDAifQ
  Mar  7 23:33:44.571: INFO: Retrieved 9/17 results with rv 124901 and continue 
  Mar  7 23:33:44.628: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAwMTZcdTAwMDAifQ
  Mar  7 23:33:44.678: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAwMzNcdTAwMDAifQ
  Mar  7 23:33:44.728: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAwNTBcdTAwMDAifQ
  Mar  7 23:33:44.789: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAwNjdcdTAwMDAifQ
  Mar  7 23:33:44.821: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAwODRcdTAwMDAifQ
  Mar  7 23:33:44.868: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAxMDFcdTAwMDAifQ
  Mar  7 23:33:44.921: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAxMThcdTAwMDAifQ
  Mar  7 23:33:44.982: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAxMzVcdTAwMDAifQ
  Mar  7 23:33:45.033: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAxNTJcdTAwMDAifQ
  Mar  7 23:33:45.081: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAxNjlcdTAwMDAifQ
  E0307 23:33:45.103812      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:33:45.133: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAxODZcdTAwMDAifQ
  Mar  7 23:33:45.180: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAyMDNcdTAwMDAifQ
  Mar  7 23:33:45.233: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAyMjBcdTAwMDAifQ
  Mar  7 23:33:45.280: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAyMzdcdTAwMDAifQ
  Mar  7 23:33:45.329: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAyNTRcdTAwMDAifQ
  Mar  7 23:33:45.380: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAyNzFcdTAwMDAifQ
  Mar  7 23:33:45.430: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAyODhcdTAwMDAifQ
  Mar  7 23:33:45.478: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAzMDVcdTAwMDAifQ
  Mar  7 23:33:45.528: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAzMjJcdTAwMDAifQ
  Mar  7 23:33:45.578: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAzMzlcdTAwMDAifQ
  Mar  7 23:33:45.628: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAzNTZcdTAwMDAifQ
  Mar  7 23:33:45.677: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAzNzNcdTAwMDAifQ
  Mar  7 23:33:45.727: INFO: Retrieved 17/17 results with rv 124903 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTI0OTAzLCJzdGFydCI6InRlbXBsYXRlLTAzOTBcdTAwMDAifQ
  Mar  7 23:33:45.775: INFO: Retrieved 9/17 results with rv 124903 and continue 
  STEP: retrieving those results all at once @ 03/07/24 23:33:45.775
  Mar  7 23:33:45.865: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "chunking-1300" for this suite. @ 03/07/24 23:33:45.87
• [21.460 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance] [sig-apps, Conformance]
test/e2e/apps/statefulset.go:321
  STEP: Creating a kubernetes client @ 03/07/24 23:33:45.923
  Mar  7 23:33:45.923: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename statefulset @ 03/07/24 23:33:45.924
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:33:45.965
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:33:45.969
  STEP: Creating service test in namespace statefulset-9416 @ 03/07/24 23:33:45.972
  STEP: Creating a new StatefulSet @ 03/07/24 23:33:45.988
  Mar  7 23:33:46.005: INFO: Found 0 stateful pods, waiting for 3
  E0307 23:33:46.104662      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:47.104992      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:48.105391      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:49.105681      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:50.105948      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:51.107008      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:52.107529      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:53.107938      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:54.108181      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:55.108392      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:33:56.003: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Mar  7 23:33:56.003: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Mar  7 23:33:56.003: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  Mar  7 23:33:56.010: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-9416 exec ss2-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Mar  7 23:33:56.087: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Mar  7 23:33:56.087: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Mar  7 23:33:56.087: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss2-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  E0307 23:33:56.109240      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:57.109794      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:58.110375      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:33:59.110326      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:00.110762      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:01.112071      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:02.112125      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:03.112618      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:04.112955      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:05.113764      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Updating StatefulSet template: update image from registry.k8s.io/e2e-test-images/httpd:2.4.38-4 to registry.k8s.io/e2e-test-images/httpd:2.4.39-4 @ 03/07/24 23:34:06.108
  E0307 23:34:06.114381      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:34:06.147: INFO: Updating stateful set ss2
  STEP: Creating a new revision @ 03/07/24 23:34:06.147
  E0307 23:34:07.114695      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:08.115307      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:09.116031      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:10.116648      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:11.116782      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:12.117608      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:13.117824      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:14.118262      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:15.118899      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:16.119374      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Updating Pods in reverse ordinal order @ 03/07/24 23:34:16.168
  Mar  7 23:34:16.178: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-9416 exec ss2-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Mar  7 23:34:16.299: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Mar  7 23:34:16.299: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Mar  7 23:34:16.299: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss2-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  E0307 23:34:17.119404      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:18.120032      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:19.120738      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:20.121382      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:21.122300      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:22.122437      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:23.122659      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:24.123148      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:25.123691      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:26.124726      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Rolling back to a previous revision @ 03/07/24 23:34:26.339
  Mar  7 23:34:26.339: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-9416 exec ss2-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Mar  7 23:34:26.479: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Mar  7 23:34:26.479: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Mar  7 23:34:26.479: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss2-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  E0307 23:34:27.124955      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:28.125534      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:29.126210      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:30.126940      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:31.127119      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:32.127478      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:33.128077      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:34.128490      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:35.128924      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:36.129293      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:34:36.539: INFO: Updating stateful set ss2
  E0307 23:34:37.129910      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:38.130624      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:39.131273      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:40.131690      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:41.132917      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:42.133277      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:43.133760      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:44.134269      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:45.134838      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:46.135320      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Rolling back update in reverse ordinal order @ 03/07/24 23:34:46.559
  Mar  7 23:34:46.570: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=statefulset-9416 exec ss2-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Mar  7 23:34:46.702: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Mar  7 23:34:46.702: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Mar  7 23:34:46.702: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss2-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  E0307 23:34:47.135527      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:48.136185      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:49.136556      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:50.137438      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:51.138096      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:52.138259      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:53.138686      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:54.139276      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:55.139856      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:56.140220      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:34:56.743: INFO: Deleting all statefulset in ns statefulset-9416
  Mar  7 23:34:56.751: INFO: Scaling statefulset ss2 to 0
  E0307 23:34:57.140535      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:58.141093      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:34:59.142136      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:00.142612      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:01.143473      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:02.143857      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:03.144304      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:04.144516      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:05.145062      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:06.146285      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:35:06.796: INFO: Waiting for statefulset status.replicas updated to 0
  Mar  7 23:35:06.804: INFO: Deleting statefulset ss2
  Mar  7 23:35:06.852: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-9416" for this suite. @ 03/07/24 23:35:06.862
• [80.954 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should adopt matching pods on creation [Conformance] [sig-apps, Conformance]
test/e2e/apps/rc.go:95
  STEP: Creating a kubernetes client @ 03/07/24 23:35:06.877
  Mar  7 23:35:06.877: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename replication-controller @ 03/07/24 23:35:06.878
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:35:06.893
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:35:06.896
  STEP: Given a Pod with a 'name' label pod-adoption is created @ 03/07/24 23:35:06.898
  E0307 23:35:07.146254      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:08.146864      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: When a replication controller with a matching selector is created @ 03/07/24 23:35:08.925
  STEP: Then the orphan pod is adopted @ 03/07/24 23:35:08.949
  E0307 23:35:09.148120      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:35:09.968: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-3674" for this suite. @ 03/07/24 23:35:09.98
• [3.121 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/watch.go:257
  STEP: Creating a kubernetes client @ 03/07/24 23:35:09.999
  Mar  7 23:35:09.999: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename watch @ 03/07/24 23:35:10.001
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:35:10.029
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:35:10.033
  STEP: creating a watch on configmaps with a certain label @ 03/07/24 23:35:10.036
  STEP: creating a new configmap @ 03/07/24 23:35:10.037
  STEP: modifying the configmap once @ 03/07/24 23:35:10.044
  STEP: changing the label value of the configmap @ 03/07/24 23:35:10.053
  STEP: Expecting to observe a delete notification for the watched object @ 03/07/24 23:35:10.065
  Mar  7 23:35:10.065: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-4809  b1d2713d-0a8c-4e22-aaac-bbb14de44a1b 125866 0 2024-03-07 23:35:10 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-03-07 23:35:10 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 23:35:10.065: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-4809  b1d2713d-0a8c-4e22-aaac-bbb14de44a1b 125867 0 2024-03-07 23:35:10 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-03-07 23:35:10 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 23:35:10.065: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-4809  b1d2713d-0a8c-4e22-aaac-bbb14de44a1b 125868 0 2024-03-07 23:35:10 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-03-07 23:35:10 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying the configmap a second time @ 03/07/24 23:35:10.065
  STEP: Expecting not to observe a notification because the object no longer meets the selector's requirements @ 03/07/24 23:35:10.075
  E0307 23:35:10.148988      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:11.149111      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:12.149470      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:13.149988      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:14.150540      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:15.151351      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:16.151838      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:17.152392      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:18.153072      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:19.153575      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: changing the label value of the configmap back @ 03/07/24 23:35:20.075
  STEP: modifying the configmap a third time @ 03/07/24 23:35:20.084
  STEP: deleting the configmap @ 03/07/24 23:35:20.093
  STEP: Expecting to observe an add notification for the watched object when the label value was restored @ 03/07/24 23:35:20.1
  Mar  7 23:35:20.100: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-4809  b1d2713d-0a8c-4e22-aaac-bbb14de44a1b 125965 0 2024-03-07 23:35:10 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-03-07 23:35:20 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 23:35:20.100: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-4809  b1d2713d-0a8c-4e22-aaac-bbb14de44a1b 125966 0 2024-03-07 23:35:10 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-03-07 23:35:20 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 3,},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 23:35:20.100: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-4809  b1d2713d-0a8c-4e22-aaac-bbb14de44a1b 125968 0 2024-03-07 23:35:10 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-03-07 23:35:20 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 3,},BinaryData:map[string][]byte{},Immutable:nil,}
  Mar  7 23:35:20.100: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-4809" for this suite. @ 03/07/24 23:35:20.103
• [10.110 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/pods.go:445
  STEP: Creating a kubernetes client @ 03/07/24 23:35:20.11
  Mar  7 23:35:20.110: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename pods @ 03/07/24 23:35:20.11
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:35:20.129
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:35:20.131
  E0307 23:35:20.153708      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:21.154853      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:22.155842      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:23.156030      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:24.156444      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:25.157208      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:26.158490      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 03/07/24 23:35:26.215
  Mar  7 23:35:26.223: INFO: Trying to get logs from node whiskas-1 pod client-envvars-315374f0-7f0b-4cc0-bb26-118b0ba2e1d6 container env3cont: <nil>
  STEP: delete the pod @ 03/07/24 23:35:26.26
  Mar  7 23:35:26.314: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-7044" for this suite. @ 03/07/24 23:35:26.326
• [6.236 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:1015
  STEP: Creating a kubernetes client @ 03/07/24 23:35:26.346
  Mar  7 23:35:26.346: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename resourcequota @ 03/07/24 23:35:26.349
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:35:26.396
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:35:26.399
  STEP: Creating resourceQuota "e2e-rq-status-s4hqp" @ 03/07/24 23:35:26.405
  Mar  7 23:35:26.415: INFO: Resource quota "e2e-rq-status-s4hqp" reports spec: hard cpu limit of 500m
  Mar  7 23:35:26.415: INFO: Resource quota "e2e-rq-status-s4hqp" reports spec: hard memory limit of 500Mi
  STEP: Updating resourceQuota "e2e-rq-status-s4hqp" /status @ 03/07/24 23:35:26.415
  STEP: Confirm /status for "e2e-rq-status-s4hqp" resourceQuota via watch @ 03/07/24 23:35:26.457
  Mar  7 23:35:26.461: INFO: observed resourceQuota "e2e-rq-status-s4hqp" in namespace "resourcequota-8070" with hard status: v1.ResourceList(nil)
  Mar  7 23:35:26.461: INFO: Found resourceQuota "e2e-rq-status-s4hqp" in namespace "resourcequota-8070" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:500, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500m", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:524288000, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500Mi", Format:"BinarySI"}}
  Mar  7 23:35:26.461: INFO: ResourceQuota "e2e-rq-status-s4hqp" /status was updated
  STEP: Patching hard spec values for cpu & memory @ 03/07/24 23:35:26.468
  Mar  7 23:35:26.485: INFO: Resource quota "e2e-rq-status-s4hqp" reports spec: hard cpu limit of 1
  Mar  7 23:35:26.485: INFO: Resource quota "e2e-rq-status-s4hqp" reports spec: hard memory limit of 1Gi
  STEP: Patching "e2e-rq-status-s4hqp" /status @ 03/07/24 23:35:26.485
  STEP: Confirm /status for "e2e-rq-status-s4hqp" resourceQuota via watch @ 03/07/24 23:35:26.495
  Mar  7 23:35:26.497: INFO: observed resourceQuota "e2e-rq-status-s4hqp" in namespace "resourcequota-8070" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:500, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500m", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:524288000, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500Mi", Format:"BinarySI"}}
  Mar  7 23:35:26.497: INFO: Found resourceQuota "e2e-rq-status-s4hqp" in namespace "resourcequota-8070" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}
  Mar  7 23:35:26.497: INFO: ResourceQuota "e2e-rq-status-s4hqp" /status was patched
  STEP: Get "e2e-rq-status-s4hqp" /status @ 03/07/24 23:35:26.497
  Mar  7 23:35:26.501: INFO: Resourcequota "e2e-rq-status-s4hqp" reports status: hard cpu of 1
  Mar  7 23:35:26.501: INFO: Resourcequota "e2e-rq-status-s4hqp" reports status: hard memory of 1Gi
  STEP: Repatching "e2e-rq-status-s4hqp" /status before checking Spec is unchanged @ 03/07/24 23:35:26.505
  Mar  7 23:35:26.513: INFO: Resourcequota "e2e-rq-status-s4hqp" reports status: hard cpu of 2
  Mar  7 23:35:26.513: INFO: Resourcequota "e2e-rq-status-s4hqp" reports status: hard memory of 2Gi
  Mar  7 23:35:26.515: INFO: Found resourceQuota "e2e-rq-status-s4hqp" in namespace "resourcequota-8070" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}
  Mar  7 23:35:26.518: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000801950), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000801980), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0008019e0), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:35:27.159653      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:28.160318      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:29.160939      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:30.161631      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:31.162675      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:35:31.518: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000801e90), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000801ec0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000801f38), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:35:32.163555      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:33.164153      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:34.165085      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:35.165742      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:36.166543      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:35:36.523: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00474a468), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00474a4c8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00474a570), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:35:37.167083      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:38.168067      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:39.168522      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:40.169292      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:41.169466      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:35:41.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00474abe8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00474ac48), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00474aca8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:35:42.169441      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:43.169937      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:44.170508      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:45.171045      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:46.171527      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:35:46.523: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005353aa0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005353ad0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005353b18), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:35:47.172313      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:48.172990      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:49.173599      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:50.173959      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:51.174122      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:35:51.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005353f98), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004214018), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004214060), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:35:52.174494      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:53.175661      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:54.176300      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:55.176910      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:56.177192      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:35:56.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0042145b8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004214600), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004214648), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:35:57.177625      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:58.178255      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:35:59.178918      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:00.179548      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:01.179730      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:36:01.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004214d08), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004214dc8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004214e10), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:36:02.179797      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:03.180328      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:04.181004      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:05.181632      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:06.181807      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:36:06.519: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00474b800), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00474b878), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00474b908), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:36:07.182510      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:08.183176      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:09.183835      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:10.184417      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:11.184656      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:36:11.523: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00474be30), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00474bed8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00474bf38), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:36:12.185234      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:13.185786      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:14.186542      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:15.186779      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:16.187609      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:36:16.525: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004215758), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004215788), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004215818), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:36:17.188067      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:18.188711      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:19.189367      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:20.190412      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:21.190670      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:36:21.523: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004215e30), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004215ea8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004215ed8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:36:22.191376      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:23.191949      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:24.192542      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:25.192933      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:26.193300      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:36:26.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be84f8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be8528), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be8558), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:36:27.193480      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:28.194070      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:29.194674      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:30.195092      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:31.196218      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:36:31.518: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c84438), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c84498), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c844e0), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:36:32.196267      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:33.196775      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:34.197349      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:35.197713      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:36.198297      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:36:36.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00491c498), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00491c4c8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00491c558), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:36:37.198518      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:38.199203      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:39.199831      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:40.200514      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:41.200687      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:36:41.525: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00491c9a8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00491c9d8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00491ca20), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:36:42.201226      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:43.201510      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:44.202006      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:45.202239      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:46.202437      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:36:46.523: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00491cd08), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00491cd80), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00491ce28), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:36:47.202586      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:48.202896      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:49.203635      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:50.204281      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:51.204324      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:36:51.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00491d290), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00491d2d8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00491d350), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:36:52.204569      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:53.205197      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:54.205712      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:55.206741      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:56.207688      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:36:56.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be8be8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be8c18), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be8cc0), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:36:57.208779      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:58.209287      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:36:59.210254      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:00.211266      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:01.211480      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:37:01.523: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be90c8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be9110), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be9140), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:37:02.212623      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:03.213010      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:04.213565      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:05.214216      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:06.215077      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:37:06.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be82e8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be8330), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be8360), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:37:07.215905      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:08.216227      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:09.216808      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:10.217433      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:11.217705      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:37:11.522: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c841c8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c841f8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c84288), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:37:12.218641      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:13.219116      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:14.219684      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:15.220276      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:16.220548      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:37:16.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be8780), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be8810), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be8840), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:37:17.220698      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:18.221315      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:19.221793      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:20.222386      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:21.222467      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:37:21.523: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c84780), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c847e0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c84810), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:37:22.223644      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:23.224238      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:24.224806      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:25.225358      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:26.225454      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:37:26.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004ff67b0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004ff6870), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004ff68e8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:37:27.226552      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:28.227160      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:29.227732      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:30.228311      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:31.228436      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:37:31.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004ff6ed0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004ff6f00), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004ff6f60), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:37:32.228857      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:33.229430      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:34.230395      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:35.230744      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:36.231351      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:37:36.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c84e28), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c84e70), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c84f48), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:37:37.232238      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:38.232799      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:39.233179      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:40.233765      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:41.234668      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:37:41.525: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c85368), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c85398), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c853f8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:37:42.235094      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:43.235700      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:44.236662      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:45.237201      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:46.237555      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:37:46.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c85680), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c856c8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c85740), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:37:47.237741      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:48.238321      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:49.238712      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:50.239288      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:51.239687      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:37:51.523: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c85b90), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c85bd8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000c85c08), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:37:52.240423      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:53.240781      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:54.241258      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:55.241226      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:56.241741      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:37:56.523: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004ff7770), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004ff77d0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004ff7830), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:37:57.242915      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:58.243276      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:37:59.244271      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:00.244677      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:01.245933      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:38:01.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004ff7d40), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004ff7da0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004ff7e30), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:38:02.246105      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:03.246747      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:04.246959      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:05.247859      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:06.248369      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:38:06.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be9188), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be92d8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be93b0), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:38:07.249512      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:08.250098      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:09.250680      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:10.251024      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:11.252183      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:38:11.523: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be97b8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be9818), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be9860), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:38:12.252576      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:13.253195      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:14.253522      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:15.253872      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:16.254937      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:38:16.525: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be9cb0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be9ce0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004be9d88), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:38:17.255330      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:18.256241      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:19.257301      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:20.257864      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:21.259082      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:38:21.524: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005728030), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005728060), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005728090), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:38:22.259587      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:23.260240      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:24.260824      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:25.261364      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:26.261729      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:38:26.526: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-s4hqp", GenerateName:"", Namespace:"resourcequota-8070", SelfLink:"", UID:"814d26fb-86e0-4d03-add2-a1c561458041", ResourceVersion:"126030", Generation:0, CreationTimestamp:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-s4hqp"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00491c600), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00491c648), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.March, 7, 23, 35, 26, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00491c678), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E0307 23:38:27.263435      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:28.264033      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:29.264642      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:30.265330      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:31.265631      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:38:31.523: INFO: ResourceQuota "e2e-rq-status-s4hqp" Spec was unchanged and /status reset
  Mar  7 23:38:31.523: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-8070" for this suite. @ 03/07/24 23:38:31.535
• [185.215 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance] [sig-storage, Conformance]
test/e2e/common/storage/empty_dir.go:230
  STEP: Creating a kubernetes client @ 03/07/24 23:38:31.562
  Mar  7 23:38:31.563: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir @ 03/07/24 23:38:31.565
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:38:31.618
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:38:31.624
  STEP: Creating Pod @ 03/07/24 23:38:31.63
  E0307 23:38:32.266092      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:33.266323      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Reading file content from the nginx-container @ 03/07/24 23:38:33.672
  Mar  7 23:38:33.672: INFO: ExecWithOptions {Command:[/bin/sh -c cat /usr/share/volumeshare/shareddata.txt] Namespace:emptydir-7366 PodName:pod-sharedvolume-1cbeaaf5-7015-42c8-89dc-f4fe0d705a3c ContainerName:busybox-main-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Mar  7 23:38:33.672: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  Mar  7 23:38:33.673: INFO: ExecWithOptions: Clientset creation
  Mar  7 23:38:33.674: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/emptydir-7366/pods/pod-sharedvolume-1cbeaaf5-7015-42c8-89dc-f4fe0d705a3c/exec?command=%2Fbin%2Fsh&command=-c&command=cat+%2Fusr%2Fshare%2Fvolumeshare%2Fshareddata.txt&container=busybox-main-container&container=busybox-main-container&stderr=true&stdout=true)
  Mar  7 23:38:33.757: INFO: Exec stderr: ""
  Mar  7 23:38:33.757: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-7366" for this suite. @ 03/07/24 23:38:33.761
• [2.209 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/preemption.go:130
  STEP: Creating a kubernetes client @ 03/07/24 23:38:33.771
  Mar  7 23:38:33.771: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename sched-preemption @ 03/07/24 23:38:33.772
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:38:33.793
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:38:33.796
  Mar  7 23:38:33.822: INFO: Waiting up to 1m0s for all nodes to be ready
  E0307 23:38:34.267043      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:35.267647      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:36.268763      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:37.269113      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:38.269255      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:39.269191      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:40.269604      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:41.270572      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:42.271615      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:43.272310      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:44.272419      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:45.273108      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:46.273414      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:47.274098      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:48.274819      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:49.275727      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:50.276296      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:51.276661      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:52.277199      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:53.277842      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:54.278981      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:55.279582      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:56.279631      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:57.280631      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:58.280797      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:38:59.281387      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:00.282254      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:01.282375      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:02.282362      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:03.282823      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:04.283817      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:05.284347      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:06.285393      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:07.285473      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:08.286242      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:09.286598      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:10.287709      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:11.287762      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:12.288175      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:13.288790      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:14.288822      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:15.289202      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:16.289748      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:17.290111      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:18.290563      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:19.290879      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:20.292054      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:21.292144      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:22.292955      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:23.293594      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:24.294189      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:25.294511      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:26.295084      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:27.295643      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:28.295965      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:29.296320      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:30.297507      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:31.297621      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:32.298467      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:33.298837      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:39:33.834: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Create pods that use 4/5 of node resources. @ 03/07/24 23:39:33.843
  Mar  7 23:39:33.908: INFO: Created pod: pod0-0-sched-preemption-low-priority
  Mar  7 23:39:33.925: INFO: Created pod: pod0-1-sched-preemption-medium-priority
  Mar  7 23:39:33.974: INFO: Created pod: pod1-0-sched-preemption-medium-priority
  Mar  7 23:39:33.984: INFO: Created pod: pod1-1-sched-preemption-medium-priority
  STEP: Wait for pods to be scheduled. @ 03/07/24 23:39:33.984
  E0307 23:39:34.301218      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:35.302215      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Run a high priority pod that has same requirements as that of lower priority pod @ 03/07/24 23:39:36.027
  E0307 23:39:36.303528      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:37.303891      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:38.304827      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:39.305456      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:40.305812      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:41.306938      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:39:42.130: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-8451" for this suite. @ 03/07/24 23:39:42.133
• [68.371 seconds]
------------------------------
[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:99
  STEP: Creating a kubernetes client @ 03/07/24 23:39:42.142
  Mar  7 23:39:42.142: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename secrets @ 03/07/24 23:39:42.143
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:39:42.157
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:39:42.159
  STEP: Creating secret with name secret-test-80ab9cd4-1693-4e67-9c1d-f593418536b5 @ 03/07/24 23:39:42.184
  STEP: Creating a pod to test consume secrets @ 03/07/24 23:39:42.196
  E0307 23:39:42.307810      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:43.308456      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:44.309115      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:45.309336      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 03/07/24 23:39:46.232
  Mar  7 23:39:46.235: INFO: Trying to get logs from node whiskas-1 pod pod-secrets-f81dca6b-33a6-46d4-bdd6-fe9731027935 container secret-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 23:39:46.243
  Mar  7 23:39:46.289: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-8764" for this suite. @ 03/07/24 23:39:46.303
  E0307 23:39:46.309793      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "secret-namespace-6278" for this suite. @ 03/07/24 23:39:46.327
• [4.204 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:209
  STEP: Creating a kubernetes client @ 03/07/24 23:39:46.347
  Mar  7 23:39:46.347: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 23:39:46.349
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:39:46.393
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:39:46.397
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 23:39:46.4
  E0307 23:39:47.310090      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:48.310570      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:49.310948      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:50.311330      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 03/07/24 23:39:50.43
  Mar  7 23:39:50.439: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-936c4c5b-5e05-4700-9aaa-2a186c13f70d container client-container: <nil>
  STEP: delete the pod @ 03/07/24 23:39:50.455
  Mar  7 23:39:50.514: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-207" for this suite. @ 03/07/24 23:39:50.525
• [4.194 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:160
  STEP: Creating a kubernetes client @ 03/07/24 23:39:50.542
  Mar  7 23:39:50.542: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir @ 03/07/24 23:39:50.544
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:39:50.578
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:39:50.583
  STEP: Creating a pod to test emptydir volume type on node default medium @ 03/07/24 23:39:50.587
  E0307 23:39:51.312259      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:52.312759      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:53.312995      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:54.313447      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 03/07/24 23:39:54.633
  Mar  7 23:39:54.642: INFO: Trying to get logs from node whiskas-1 pod pod-7fb3d125-3908-47a5-846b-20683d69eff6 container test-container: <nil>
  STEP: delete the pod @ 03/07/24 23:39:54.658
  Mar  7 23:39:54.713: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-6942" for this suite. @ 03/07/24 23:39:54.724
• [4.205 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/predicates.go:334
  STEP: Creating a kubernetes client @ 03/07/24 23:39:54.751
  Mar  7 23:39:54.751: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename sched-pred @ 03/07/24 23:39:54.752
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:39:54.776
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:39:54.779
  Mar  7 23:39:54.782: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Mar  7 23:39:54.793: INFO: Waiting for terminating namespaces to be deleted...
  Mar  7 23:39:54.797: INFO: 
  Logging pods the apiserver thinks is on node whiskas-1 before test
  Mar  7 23:39:54.802: INFO: calico-node-qn97s from kube-system started at 2024-03-07 16:43:41 +0000 UTC (1 container statuses recorded)
  Mar  7 23:39:54.802: INFO: 	Container calico-node ready: true, restart count 0
  Mar  7 23:39:54.802: INFO: sonobuoy-systemd-logs-daemon-set-e0190a7af8074a44-5wrn6 from sonobuoy started at 2024-03-07 21:55:24 +0000 UTC (2 container statuses recorded)
  Mar  7 23:39:54.802: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Mar  7 23:39:54.802: INFO: 	Container systemd-logs ready: true, restart count 0
  Mar  7 23:39:54.802: INFO: 
  Logging pods the apiserver thinks is on node whiskas-2 before test
  Mar  7 23:39:54.807: INFO: calico-kube-controllers-77bd7c5b-fdpjv from kube-system started at 2024-03-07 22:08:21 +0000 UTC (1 container statuses recorded)
  Mar  7 23:39:54.807: INFO: 	Container calico-kube-controllers ready: true, restart count 0
  Mar  7 23:39:54.807: INFO: calico-node-dqm6m from kube-system started at 2024-03-07 16:43:45 +0000 UTC (1 container statuses recorded)
  Mar  7 23:39:54.807: INFO: 	Container calico-node ready: true, restart count 0
  Mar  7 23:39:54.807: INFO: coredns-864597b5fd-8rq6f from kube-system started at 2024-03-07 22:08:21 +0000 UTC (1 container statuses recorded)
  Mar  7 23:39:54.807: INFO: 	Container coredns ready: true, restart count 0
  Mar  7 23:39:54.807: INFO: sonobuoy from sonobuoy started at 2024-03-07 21:55:23 +0000 UTC (1 container statuses recorded)
  Mar  7 23:39:54.807: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Mar  7 23:39:54.807: INFO: sonobuoy-e2e-job-2fc5b94cf9844ccc from sonobuoy started at 2024-03-07 21:55:24 +0000 UTC (2 container statuses recorded)
  Mar  7 23:39:54.807: INFO: 	Container e2e ready: true, restart count 0
  Mar  7 23:39:54.807: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Mar  7 23:39:54.807: INFO: sonobuoy-systemd-logs-daemon-set-e0190a7af8074a44-fx8dw from sonobuoy started at 2024-03-07 21:55:24 +0000 UTC (2 container statuses recorded)
  Mar  7 23:39:54.807: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Mar  7 23:39:54.807: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: verifying the node has the label node whiskas-1 @ 03/07/24 23:39:54.821
  STEP: verifying the node has the label node whiskas-2 @ 03/07/24 23:39:54.832
  Mar  7 23:39:54.841: INFO: Pod calico-kube-controllers-77bd7c5b-fdpjv requesting resource cpu=0m on Node whiskas-2
  Mar  7 23:39:54.841: INFO: Pod calico-node-dqm6m requesting resource cpu=250m on Node whiskas-2
  Mar  7 23:39:54.841: INFO: Pod calico-node-qn97s requesting resource cpu=250m on Node whiskas-1
  Mar  7 23:39:54.841: INFO: Pod coredns-864597b5fd-8rq6f requesting resource cpu=100m on Node whiskas-2
  Mar  7 23:39:54.841: INFO: Pod sonobuoy requesting resource cpu=0m on Node whiskas-2
  Mar  7 23:39:54.841: INFO: Pod sonobuoy-e2e-job-2fc5b94cf9844ccc requesting resource cpu=0m on Node whiskas-2
  Mar  7 23:39:54.841: INFO: Pod sonobuoy-systemd-logs-daemon-set-e0190a7af8074a44-5wrn6 requesting resource cpu=0m on Node whiskas-1
  Mar  7 23:39:54.841: INFO: Pod sonobuoy-systemd-logs-daemon-set-e0190a7af8074a44-fx8dw requesting resource cpu=0m on Node whiskas-2
  STEP: Starting Pods to consume most of the cluster CPU. @ 03/07/24 23:39:54.841
  Mar  7 23:39:54.841: INFO: Creating a pod which consumes cpu=2625m on Node whiskas-1
  Mar  7 23:39:54.851: INFO: Creating a pod which consumes cpu=2555m on Node whiskas-2
  E0307 23:39:55.314065      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:56.314723      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating another pod that requires unavailable amount of CPU. @ 03/07/24 23:39:56.881
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-a934e9ed-7b0a-4327-b86b-f831c73239a1.17ba9fe0714099cb], Reason = [Scheduled], Message = [Successfully assigned sched-pred-9432/filler-pod-a934e9ed-7b0a-4327-b86b-f831c73239a1 to whiskas-1] @ 03/07/24 23:39:56.891
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-a934e9ed-7b0a-4327-b86b-f831c73239a1.17ba9fe091bc48da], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 03/07/24 23:39:56.891
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-a934e9ed-7b0a-4327-b86b-f831c73239a1.17ba9fe0932aa57a], Reason = [Created], Message = [Created container filler-pod-a934e9ed-7b0a-4327-b86b-f831c73239a1] @ 03/07/24 23:39:56.891
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-a934e9ed-7b0a-4327-b86b-f831c73239a1.17ba9fe095f0f618], Reason = [Started], Message = [Started container filler-pod-a934e9ed-7b0a-4327-b86b-f831c73239a1] @ 03/07/24 23:39:56.891
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b9147021-fb3d-41f4-8d68-4d0a0ab51400.17ba9fe0716d5a98], Reason = [Scheduled], Message = [Successfully assigned sched-pred-9432/filler-pod-b9147021-fb3d-41f4-8d68-4d0a0ab51400 to whiskas-2] @ 03/07/24 23:39:56.891
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b9147021-fb3d-41f4-8d68-4d0a0ab51400.17ba9fe0914a3863], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 03/07/24 23:39:56.891
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b9147021-fb3d-41f4-8d68-4d0a0ab51400.17ba9fe092792d8c], Reason = [Created], Message = [Created container filler-pod-b9147021-fb3d-41f4-8d68-4d0a0ab51400] @ 03/07/24 23:39:56.891
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b9147021-fb3d-41f4-8d68-4d0a0ab51400.17ba9fe09559a85a], Reason = [Started], Message = [Started container filler-pod-b9147021-fb3d-41f4-8d68-4d0a0ab51400] @ 03/07/24 23:39:56.891
  STEP: Considering event: 
  Type = [Warning], Name = [additional-pod.17ba9fe0eb776b7f], Reason = [FailedScheduling], Message = [0/2 nodes are available: 2 Insufficient cpu. preemption: 0/2 nodes are available: 2 No preemption victims found for incoming pod.] @ 03/07/24 23:39:56.93
  E0307 23:39:57.315528      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: removing the label node off the node whiskas-1 @ 03/07/24 23:39:57.928
  STEP: verifying the node doesn't have the label node @ 03/07/24 23:39:57.968
  STEP: removing the label node off the node whiskas-2 @ 03/07/24 23:39:57.978
  STEP: verifying the node doesn't have the label node @ 03/07/24 23:39:57.997
  Mar  7 23:39:58.001: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-9432" for this suite. @ 03/07/24 23:39:58.005
• [3.260 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl version should check is all data is printed [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1731
  STEP: Creating a kubernetes client @ 03/07/24 23:39:58.011
  Mar  7 23:39:58.011: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubectl @ 03/07/24 23:39:58.012
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:39:58.03
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:39:58.032
  Mar  7 23:39:58.033: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=kubectl-5376 version'
  Mar  7 23:39:58.070: INFO: stderr: ""
  Mar  7 23:39:58.070: INFO: stdout: "Client Version: v1.29.0\nKustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3\nServer Version: v1.29.2\n"
  Mar  7 23:39:58.070: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-5376" for this suite. @ 03/07/24 23:39:58.073
• [0.068 seconds]
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:90
  STEP: Creating a kubernetes client @ 03/07/24 23:39:58.079
  Mar  7 23:39:58.079: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 23:39:58.079
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:39:58.095
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:39:58.098
  STEP: Creating configMap with name projected-configmap-test-volume-map-cbe7551b-7dd8-4e8b-83a5-f9f460cc098f @ 03/07/24 23:39:58.1
  STEP: Creating a pod to test consume configMaps @ 03/07/24 23:39:58.105
  E0307 23:39:58.315543      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:39:59.316388      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:00.317355      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:01.317293      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 03/07/24 23:40:02.129
  Mar  7 23:40:02.131: INFO: Trying to get logs from node whiskas-1 pod pod-projected-configmaps-58bb4a9e-cb29-4775-b2c2-4acd4d13bfd5 container agnhost-container: <nil>
  STEP: delete the pod @ 03/07/24 23:40:02.135
  Mar  7 23:40:02.151: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9160" for this suite. @ 03/07/24 23:40:02.154
• [4.086 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling an agnhost Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/kubelet.go:147
  STEP: Creating a kubernetes client @ 03/07/24 23:40:02.165
  Mar  7 23:40:02.165: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename kubelet-test @ 03/07/24 23:40:02.165
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:40:02.182
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:40:02.184
  STEP: Waiting for pod completion @ 03/07/24 23:40:02.193
  E0307 23:40:02.317597      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:03.317884      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:04.318477      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:05.319578      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:06.225: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-5718" for this suite. @ 03/07/24 23:40:06.236
• [4.091 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] server version should find the server version [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/server_version.go:41
  STEP: Creating a kubernetes client @ 03/07/24 23:40:06.257
  Mar  7 23:40:06.257: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename server-version @ 03/07/24 23:40:06.259
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:40:06.309
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:40:06.317
  E0307 23:40:06.320377      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Request ServerVersion @ 03/07/24 23:40:06.322
  STEP: Confirm major version @ 03/07/24 23:40:06.324
  Mar  7 23:40:06.324: INFO: Major version: 1
  STEP: Confirm minor version @ 03/07/24 23:40:06.324
  Mar  7 23:40:06.324: INFO: cleanMinorVersion: 29
  Mar  7 23:40:06.324: INFO: Minor version: 29
  Mar  7 23:40:06.324: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "server-version-71" for this suite. @ 03/07/24 23:40:06.329
• [0.083 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_secret.go:67
  STEP: Creating a kubernetes client @ 03/07/24 23:40:06.341
  Mar  7 23:40:06.341: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 23:40:06.342
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:40:06.406
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:40:06.41
  STEP: Creating projection with secret that has name projected-secret-test-9767e0b6-0561-4149-b90c-d3bf7f97ea75 @ 03/07/24 23:40:06.413
  STEP: Creating a pod to test consume secrets @ 03/07/24 23:40:06.422
  E0307 23:40:07.321423      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:08.322191      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:09.322948      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:10.323933      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 03/07/24 23:40:10.457
  Mar  7 23:40:10.466: INFO: Trying to get logs from node whiskas-1 pod pod-projected-secrets-8fdffcb6-6109-4406-b6d2-46e597f71d2c container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 03/07/24 23:40:10.482
  Mar  7 23:40:10.537: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-587" for this suite. @ 03/07/24 23:40:10.545
• [4.218 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance] [sig-storage, Serial, Conformance]
test/e2e/storage/empty_dir_wrapper.go:188
  STEP: Creating a kubernetes client @ 03/07/24 23:40:10.571
  Mar  7 23:40:10.571: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename emptydir-wrapper @ 03/07/24 23:40:10.572
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:40:10.596
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:40:10.599
  STEP: Creating 50 configmaps @ 03/07/24 23:40:10.602
  STEP: Creating RC which spawns configmap-volume pods @ 03/07/24 23:40:11.231
  Mar  7 23:40:11.271: INFO: Pod name wrapped-volume-race-51b5579a-9d86-4e2a-b9fe-4627bca7b993: Found 0 pods out of 5
  E0307 23:40:11.324116      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:12.324148      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:13.324962      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:14.325531      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:15.326662      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:16.297: INFO: Pod name wrapped-volume-race-51b5579a-9d86-4e2a-b9fe-4627bca7b993: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 03/07/24 23:40:16.297
  E0307 23:40:16.327231      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating RC which spawns configmap-volume pods @ 03/07/24 23:40:16.361
  Mar  7 23:40:16.390: INFO: Pod name wrapped-volume-race-90c713fa-2c74-460b-83f3-712dd707c5b0: Found 0 pods out of 5
  E0307 23:40:17.327753      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:18.328174      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:19.328647      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:20.329746      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:21.329821      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:21.408: INFO: Pod name wrapped-volume-race-90c713fa-2c74-460b-83f3-712dd707c5b0: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 03/07/24 23:40:21.408
  STEP: Creating RC which spawns configmap-volume pods @ 03/07/24 23:40:21.444
  Mar  7 23:40:21.480: INFO: Pod name wrapped-volume-race-fff62938-bcd7-4c95-9c4c-5b81ca0bbda9: Found 0 pods out of 5
  E0307 23:40:22.330560      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:23.331102      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:24.331650      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:25.332130      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:26.332926      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:26.520: INFO: Pod name wrapped-volume-race-fff62938-bcd7-4c95-9c4c-5b81ca0bbda9: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 03/07/24 23:40:26.52
  STEP: deleting ReplicationController wrapped-volume-race-fff62938-bcd7-4c95-9c4c-5b81ca0bbda9 in namespace emptydir-wrapper-2093, will wait for the garbage collector to delete the pods @ 03/07/24 23:40:26.554
  Mar  7 23:40:26.631: INFO: Deleting ReplicationController wrapped-volume-race-fff62938-bcd7-4c95-9c4c-5b81ca0bbda9 took: 21.662463ms
  Mar  7 23:40:26.831: INFO: Terminating ReplicationController wrapped-volume-race-fff62938-bcd7-4c95-9c4c-5b81ca0bbda9 pods took: 200.915472ms
  E0307 23:40:27.333540      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: deleting ReplicationController wrapped-volume-race-90c713fa-2c74-460b-83f3-712dd707c5b0 in namespace emptydir-wrapper-2093, will wait for the garbage collector to delete the pods @ 03/07/24 23:40:28.133
  Mar  7 23:40:28.224: INFO: Deleting ReplicationController wrapped-volume-race-90c713fa-2c74-460b-83f3-712dd707c5b0 took: 29.553459ms
  E0307 23:40:28.334117      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:28.425: INFO: Terminating ReplicationController wrapped-volume-race-90c713fa-2c74-460b-83f3-712dd707c5b0 pods took: 200.897528ms
  E0307 23:40:29.335387      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: deleting ReplicationController wrapped-volume-race-51b5579a-9d86-4e2a-b9fe-4627bca7b993 in namespace emptydir-wrapper-2093, will wait for the garbage collector to delete the pods @ 03/07/24 23:40:29.926
  Mar  7 23:40:29.991: INFO: Deleting ReplicationController wrapped-volume-race-51b5579a-9d86-4e2a-b9fe-4627bca7b993 took: 10.275067ms
  Mar  7 23:40:30.092: INFO: Terminating ReplicationController wrapped-volume-race-51b5579a-9d86-4e2a-b9fe-4627bca7b993 pods took: 100.987537ms
  E0307 23:40:30.335455      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Cleaning up the configMaps @ 03/07/24 23:40:31.293
  E0307 23:40:31.336636      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:32.046: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-wrapper-2093" for this suite. @ 03/07/24 23:40:32.049
• [21.485 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:236
  STEP: Creating a kubernetes client @ 03/07/24 23:40:32.056
  Mar  7 23:40:32.056: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename crd-publish-openapi @ 03/07/24 23:40:32.057
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:40:32.079
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:40:32.083
  Mar  7 23:40:32.086: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  E0307 23:40:32.337807      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 03/07/24 23:40:33.32
  Mar  7 23:40:33.320: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-2263 --namespace=crd-publish-openapi-2263 create -f -'
  E0307 23:40:33.338242      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:34.338711      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:35.338977      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:35.408: INFO: stderr: ""
  Mar  7 23:40:35.408: INFO: stdout: "e2e-test-crd-publish-openapi-533-crd.crd-publish-openapi-test-unknown-in-nested.example.com/test-cr created\n"
  Mar  7 23:40:35.408: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-2263 --namespace=crd-publish-openapi-2263 delete e2e-test-crd-publish-openapi-533-crds test-cr'
  Mar  7 23:40:35.495: INFO: stderr: ""
  Mar  7 23:40:35.495: INFO: stdout: "e2e-test-crd-publish-openapi-533-crd.crd-publish-openapi-test-unknown-in-nested.example.com \"test-cr\" deleted\n"
  Mar  7 23:40:35.495: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-2263 --namespace=crd-publish-openapi-2263 apply -f -'
  Mar  7 23:40:35.548: INFO: stderr: ""
  Mar  7 23:40:35.548: INFO: stdout: "e2e-test-crd-publish-openapi-533-crd.crd-publish-openapi-test-unknown-in-nested.example.com/test-cr created\n"
  Mar  7 23:40:35.548: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-2263 --namespace=crd-publish-openapi-2263 delete e2e-test-crd-publish-openapi-533-crds test-cr'
  Mar  7 23:40:35.598: INFO: stderr: ""
  Mar  7 23:40:35.598: INFO: stdout: "e2e-test-crd-publish-openapi-533-crd.crd-publish-openapi-test-unknown-in-nested.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR @ 03/07/24 23:40:35.598
  Mar  7 23:40:35.598: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=crd-publish-openapi-2263 explain e2e-test-crd-publish-openapi-533-crds'
  Mar  7 23:40:35.640: INFO: stderr: ""
  Mar  7 23:40:35.640: INFO: stdout: "GROUP:      crd-publish-openapi-test-unknown-in-nested.example.com\nKIND:       e2e-test-crd-publish-openapi-533-crd\nVERSION:    v1\n\nDESCRIPTION:\n    preserve-unknown-properties in nested field for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Waldo\n\n  status\t<Object>\n    Status of Waldo\n\n\n"
  E0307 23:40:36.339429      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:36.878: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-2263" for this suite. @ 03/07/24 23:40:36.883
• [4.844 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:55
  STEP: Creating a kubernetes client @ 03/07/24 23:40:36.901
  Mar  7 23:40:36.902: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename projected @ 03/07/24 23:40:36.904
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:40:36.949
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:40:36.953
  STEP: Creating a pod to test downward API volume plugin @ 03/07/24 23:40:36.957
  E0307 23:40:37.340402      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:38.341650      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:39.342549      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:40.342922      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 03/07/24 23:40:41.001
  Mar  7 23:40:41.010: INFO: Trying to get logs from node whiskas-1 pod downwardapi-volume-16b01d17-ce7b-4d16-976a-973af73fab5b container client-container: <nil>
  STEP: delete the pod @ 03/07/24 23:40:41.029
  Mar  7 23:40:41.085: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9909" for this suite. @ 03/07/24 23:40:41.095
• [4.207 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-storage] StorageClasses CSI Conformance should run through the lifecycle of a StorageClass [Conformance] [sig-storage, Conformance]
test/e2e/storage/storageclass.go:53
  STEP: Creating a kubernetes client @ 03/07/24 23:40:41.109
  Mar  7 23:40:41.109: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename csi-storageclass @ 03/07/24 23:40:41.11
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:40:41.136
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:40:41.139
  STEP: Creating a StorageClass @ 03/07/24 23:40:41.141
  STEP: Get StorageClass "e2e-m54s9" @ 03/07/24 23:40:41.149
  STEP: Patching the StorageClass "e2e-m54s9" @ 03/07/24 23:40:41.151
  STEP: Delete StorageClass "e2e-m54s9" @ 03/07/24 23:40:41.161
  STEP: Confirm deletion of StorageClass "e2e-m54s9" @ 03/07/24 23:40:41.169
  STEP: Create a replacement StorageClass @ 03/07/24 23:40:41.172
  STEP: Updating StorageClass "e2e-v2-rghqb" @ 03/07/24 23:40:41.178
  STEP: Listing all StorageClass with the labelSelector: "e2e-v2-rghqb=updated" @ 03/07/24 23:40:41.189
  STEP: Deleting StorageClass "e2e-v2-rghqb" via DeleteCollection @ 03/07/24 23:40:41.191
  STEP: Confirm deletion of StorageClass "e2e-v2-rghqb" @ 03/07/24 23:40:41.2
  Mar  7 23:40:41.204: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csi-storageclass-8411" for this suite. @ 03/07/24 23:40:41.207
• [0.108 seconds]
------------------------------
SSS
------------------------------
[sig-node] Probing container should be restarted with a exec "cat /tmp/health" liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:134
  STEP: Creating a kubernetes client @ 03/07/24 23:40:41.217
  Mar  7 23:40:41.217: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename container-probe @ 03/07/24 23:40:41.218
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:40:41.241
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:40:41.243
  STEP: Creating pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472 @ 03/07/24 23:40:41.246
  E0307 23:40:41.343289      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:42.344405      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking the pod's current state and verifying that restartCount is present @ 03/07/24 23:40:43.269
  Mar  7 23:40:43.278: INFO: Initial restart count of pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f is 0
  Mar  7 23:40:43.287: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:40:43.344936      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:44.345623      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:45.296: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:40:45.346722      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:46.347133      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:47.306: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:40:47.348049      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:48.348623      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:49.316: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:40:49.349788      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:50.350438      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:51.325: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:40:51.350887      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:52.351531      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:53.336: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:40:53.352511      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:54.353167      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:55.345: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:40:55.353702      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:56.354071      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:57.354238      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:57.354: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:40:58.354607      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:40:59.355076      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:40:59.363: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:00.355474      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:01.355687      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:01.373: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:02.356516      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:03.357072      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:03.384: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:04.357447      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:05.358170      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:05.393: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:06.358953      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:07.359622      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:07.403: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:08.360456      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:09.361433      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:09.412: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:10.361742      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:11.362382      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:11.417: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:12.363410      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:13.363760      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:13.426: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:14.364809      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:15.365839      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:15.435: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:16.366311      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:17.366591      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:17.445: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:18.367703      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:19.368174      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:19.454: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:20.368751      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:21.368880      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:21.464: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:22.369710      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:23.370360      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:23.476: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:24.371043      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:25.371123      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:25.485: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:26.371361      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:27.371884      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:27.495: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:28.372453      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:29.372857      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:29.505: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:30.373365      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:31.373556      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:31.515: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  E0307 23:41:32.373994      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:33.374531      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:33.526: INFO: Get pod busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f in namespace container-probe-1472
  Mar  7 23:41:33.526: INFO: Restart count of pod container-probe-1472/busybox-5c44f624-b729-4ed3-aa5e-c9f1a11b3f9f is now 1 (50.247259682s elapsed)
  STEP: deleting the pod @ 03/07/24 23:41:33.526
  Mar  7 23:41:33.575: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-1472" for this suite. @ 03/07/24 23:41:33.582
• [52.375 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-network] Services should delete a collection of services [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:3565
  STEP: Creating a kubernetes client @ 03/07/24 23:41:33.592
  Mar  7 23:41:33.592: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 23:41:33.593
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:41:33.612
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:41:33.616
  STEP: creating a collection of services @ 03/07/24 23:41:33.62
  Mar  7 23:41:33.620: INFO: Creating e2e-svc-a-r8q9f
  Mar  7 23:41:33.633: INFO: Creating e2e-svc-b-d5pb5
  Mar  7 23:41:33.648: INFO: Creating e2e-svc-c-nvhd2
  STEP: deleting service collection @ 03/07/24 23:41:33.69
  Mar  7 23:41:33.729: INFO: Collection of services has been deleted
  Mar  7 23:41:33.729: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-6341" for this suite. @ 03/07/24 23:41:33.732
• [0.145 seconds]
------------------------------
SSSSS
------------------------------
[sig-network] Services should serve multiport endpoints from pods [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:846
  STEP: Creating a kubernetes client @ 03/07/24 23:41:33.738
  Mar  7 23:41:33.738: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename services @ 03/07/24 23:41:33.738
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:41:33.756
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:41:33.758
  STEP: creating service multi-endpoint-test in namespace services-3487 @ 03/07/24 23:41:33.76
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-3487 to expose endpoints map[] @ 03/07/24 23:41:33.771
  Mar  7 23:41:33.774: INFO: Failed go get Endpoints object: endpoints "multi-endpoint-test" not found
  E0307 23:41:34.374940      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:34.794: INFO: successfully validated that service multi-endpoint-test in namespace services-3487 exposes endpoints map[]
  STEP: Creating pod pod1 in namespace services-3487 @ 03/07/24 23:41:34.794
  E0307 23:41:35.375803      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:36.375880      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-3487 to expose endpoints map[pod1:[100]] @ 03/07/24 23:41:36.854
  Mar  7 23:41:36.880: INFO: successfully validated that service multi-endpoint-test in namespace services-3487 exposes endpoints map[pod1:[100]]
  STEP: Creating pod pod2 in namespace services-3487 @ 03/07/24 23:41:36.881
  E0307 23:41:37.375943      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:38.376416      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-3487 to expose endpoints map[pod1:[100] pod2:[101]] @ 03/07/24 23:41:38.919
  Mar  7 23:41:38.944: INFO: successfully validated that service multi-endpoint-test in namespace services-3487 exposes endpoints map[pod1:[100] pod2:[101]]
  STEP: Checking if the Service forwards traffic to pods @ 03/07/24 23:41:38.944
  Mar  7 23:41:38.944: INFO: Creating new exec pod
  E0307 23:41:39.377056      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:40.377568      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:41.378057      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:41.975: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-3487 exec execpodvkfkq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 multi-endpoint-test 80'
  Mar  7 23:41:42.101: INFO: stderr: "+ nc -v -t -w 2 multi-endpoint-test 80\n+ echo hostName\nConnection to multi-endpoint-test 80 port [tcp/http] succeeded!\n"
  Mar  7 23:41:42.101: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 23:41:42.101: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-3487 exec execpodvkfkq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.160 80'
  Mar  7 23:41:42.178: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.160 80\nConnection to 10.152.183.160 80 port [tcp/http] succeeded!\n"
  Mar  7 23:41:42.178: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 23:41:42.178: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-3487 exec execpodvkfkq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 multi-endpoint-test 81'
  Mar  7 23:41:42.260: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 multi-endpoint-test 81\nConnection to multi-endpoint-test 81 port [tcp/*] succeeded!\n"
  Mar  7 23:41:42.260: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Mar  7 23:41:42.260: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-3300937439 --namespace=services-3487 exec execpodvkfkq -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.160 81'
  Mar  7 23:41:42.330: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.160 81\nConnection to 10.152.183.160 81 port [tcp/*] succeeded!\n"
  Mar  7 23:41:42.330: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod1 in namespace services-3487 @ 03/07/24 23:41:42.33
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-3487 to expose endpoints map[pod2:[101]] @ 03/07/24 23:41:42.359
  E0307 23:41:42.378423      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:43.378896      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:43.394: INFO: successfully validated that service multi-endpoint-test in namespace services-3487 exposes endpoints map[pod2:[101]]
  STEP: Deleting pod pod2 in namespace services-3487 @ 03/07/24 23:41:43.394
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-3487 to expose endpoints map[] @ 03/07/24 23:41:43.427
  E0307 23:41:44.379813      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:44.460: INFO: successfully validated that service multi-endpoint-test in namespace services-3487 exposes endpoints map[]
  Mar  7 23:41:44.488: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-3487" for this suite. @ 03/07/24 23:41:44.492
• [10.760 seconds]
------------------------------
SS
------------------------------
[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance] [sig-apps, Conformance]
test/e2e/apps/replica_set.go:177
  STEP: Creating a kubernetes client @ 03/07/24 23:41:44.498
  Mar  7 23:41:44.498: INFO: >>> kubeConfig: /tmp/kubeconfig-3300937439
  STEP: Building a namespace api object, basename replicaset @ 03/07/24 23:41:44.499
  STEP: Waiting for a default service account to be provisioned in namespace @ 03/07/24 23:41:44.514
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 03/07/24 23:41:44.516
  STEP: Create a Replicaset @ 03/07/24 23:41:44.52
  STEP: Verify that the required pods have come up. @ 03/07/24 23:41:44.527
  Mar  7 23:41:44.529: INFO: Pod name sample-pod: Found 0 pods out of 1
  E0307 23:41:45.379963      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:46.380115      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:47.380569      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:48.381038      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0307 23:41:49.381690      20 retrywatcher.go:129] "Watch failed" err="context canceled"
  Mar  7 23:41:49.538: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 03/07/24 23:41:49.538
  STEP: Getting /status @ 03/07/24 23:41:49.538
  Mar  7 23:41:49.547: INFO: Replicaset test-rs has Conditions: []
  STEP: updating the Replicaset Status @ 03/07/24 23:41:49.548
  Mar  7 23:41:49.563: INFO: updatedStatus.Conditions: []v1.ReplicaSetCondition{v1.ReplicaSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the ReplicaSet status to be updated @ 03/07/24 23:41:49.563
  Mar  7 23:41:49.565: INFO: Observed &ReplicaSet event: ADDED
  Mar  7 23:41:49.565: INFO: Observed &ReplicaSet event: MODIFIED
  Mar  7 23:41:49.565: INFO: Observed &ReplicaSet event: MODIFIED
  Mar  7 23:41:49.566: INFO: Observed &ReplicaSet event: MODIFIED
  Mar  7 23:41:49.566: INFO: Found replicaset test-rs in namespace replicaset-3827 with labels: map[name:sample-pod pod:httpd] annotations: map[] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Mar  7 23:41:49.566: INFO: Replicaset test-rs has an updated status
  STEP: patching the Replicaset Status @ 03/07/24 23:41:49.566
  Mar  7 23:41:49.566: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Mar  7 23:41:49.574: INFO: Patched status conditions: []v1.ReplicaSetCondition{v1.ReplicaSetCondition{Type:"StatusPatched", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Replicaset status to be patched @ 03/07/24 23:41:49.574
  Mar  7 23:41:49.576: INFO: Observed &ReplicaSet event: ADDED
  Mar  7 23:41:49.576: INFO: Observed &ReplicaSet event: MODIFIED
  Mar  7 23:41:49.576: INFO: Observed &ReplicaSet event: MODIFIED
  Mar  7 23:41:49.576: INFO: Observed &ReplicaSet event: MODIFIED
  Mar  7 23:41:49.576: INFO: Observed replicaset test-rs in namespace replicaset-3827 with annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Mar  7 23:41:49.576: INFO: Observed &ReplicaSet event: MODIFIED
  Mar  7 23:41:49.576: INFO: Found replicaset test-rs in namespace replicaset-3827 with labels: map[name:sample-pod pod:httpd] annotations: map[] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC  }
  Mar  7 23:41:49.576: INFO: Replicaset test-rs has a patched status
  Mar  7 23:41:49.576: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-3827" for this suite. @ 03/07/24 23:41:49.58
• [5.099 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[SynchronizedAfterSuite] 
test/e2e/e2e.go:88
  Mar  7 23:41:49.598: INFO: Running AfterSuite actions on node 1
  Mar  7 23:41:49.598: INFO: Skipping dumping logs from cluster
[SynchronizedAfterSuite] PASSED [0.000 seconds]
------------------------------
[ReportAfterSuite] Kubernetes e2e suite report
test/e2e/e2e_test.go:161
[ReportAfterSuite] PASSED [0.000 seconds]
------------------------------
[ReportAfterSuite] Kubernetes e2e JUnit report
test/e2e/framework/test_context.go:621
[ReportAfterSuite] PASSED [0.037 seconds]
------------------------------

Ran 388 of 7407 Specs in 6383.676 seconds
SUCCESS! -- 388 Passed | 0 Failed | 0 Pending | 7019 Skipped
PASS

Ginkgo ran 1 suite in 1h46m24.447536234s
Test Suite Passed
