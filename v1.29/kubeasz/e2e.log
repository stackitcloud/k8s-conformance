  I1231 06:08:31.566910      23 e2e.go:117] Starting e2e run "26b22d90-e7df-4dd4-82fc-4df9026db335" on Ginkgo node 1
Running Suite: Kubernetes e2e suite - /usr/local/bin
====================================================
Random Seed: 1704002911 - will randomize all specs

Will run 388 of 7407 specs
------------------------------
[ReportBeforeSuite] 
test/e2e/e2e_test.go:157
[ReportBeforeSuite] PASSED [0.000 seconds]
------------------------------
[SynchronizedBeforeSuite] 
test/e2e/e2e.go:77
  Dec 31 06:08:31.710: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:08:31.711: INFO: Waiting up to 30m0s for all (but 0) nodes to be schedulable
  Dec 31 06:08:31.727: INFO: Waiting up to 5m0s for all daemonsets in namespace 'kube-system' to start
  Dec 31 06:08:31.732: INFO: 3 / 3 pods ready in namespace 'kube-system' in daemonset 'calico-node' (0 seconds elapsed)
  Dec 31 06:08:31.732: INFO: 3 / 3 pods ready in namespace 'kube-system' in daemonset 'node-local-dns' (0 seconds elapsed)
  Dec 31 06:08:31.732: INFO: e2e test version: v1.29.0
  Dec 31 06:08:31.732: INFO: kube-apiserver version: v1.29.0
  Dec 31 06:08:31.732: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:08:31.734: INFO: Cluster IP family: ipv4
[SynchronizedBeforeSuite] PASSED [0.024 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should adopt matching pods on creation [Conformance] [sig-apps, Conformance]
test/e2e/apps/rc.go:95
  STEP: Creating a kubernetes client @ 12/31/23 06:08:31.849
  Dec 31 06:08:31.849: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename replication-controller @ 12/31/23 06:08:31.85
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:08:31.858
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:08:31.859
  STEP: Given a Pod with a 'name' label pod-adoption is created @ 12/31/23 06:08:31.861
  STEP: When a replication controller with a matching selector is created @ 12/31/23 06:08:39.875
  STEP: Then the orphan pod is adopted @ 12/31/23 06:08:39.877
  Dec 31 06:08:40.880: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-8950" for this suite. @ 12/31/23 06:08:40.881
• [9.035 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance] [sig-apps, Conformance]
test/e2e/apps/statefulset.go:321
  STEP: Creating a kubernetes client @ 12/31/23 06:08:40.884
  Dec 31 06:08:40.884: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename statefulset @ 12/31/23 06:08:40.885
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:08:40.891
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:08:40.893
  STEP: Creating service test in namespace statefulset-4785 @ 12/31/23 06:08:40.894
  STEP: Creating a new StatefulSet @ 12/31/23 06:08:40.896
  Dec 31 06:08:40.910: INFO: Found 0 stateful pods, waiting for 3
  Dec 31 06:08:50.905: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Dec 31 06:08:50.905: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Dec 31 06:08:50.905: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Pending - Ready=false
  Dec 31 06:09:00.905: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Dec 31 06:09:00.905: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Dec 31 06:09:00.905: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  Dec 31 06:09:00.908: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-4785 exec ss2-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Dec 31 06:09:00.996: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Dec 31 06:09:00.996: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Dec 31 06:09:00.996: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss2-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  STEP: Updating StatefulSet template: update image from registry.k8s.io/e2e-test-images/httpd:2.4.38-4 to registry.k8s.io/e2e-test-images/httpd:2.4.39-4 @ 12/31/23 06:09:11.002
  Dec 31 06:09:11.017: INFO: Updating stateful set ss2
  STEP: Creating a new revision @ 12/31/23 06:09:11.017
  STEP: Updating Pods in reverse ordinal order @ 12/31/23 06:09:21.021
  Dec 31 06:09:21.022: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-4785 exec ss2-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Dec 31 06:09:21.103: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Dec 31 06:09:21.103: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Dec 31 06:09:21.103: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss2-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Dec 31 06:09:41.111: INFO: Waiting for StatefulSet statefulset-4785/ss2 to complete update
  STEP: Rolling back to a previous revision @ 12/31/23 06:09:51.114
  Dec 31 06:09:51.114: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-4785 exec ss2-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Dec 31 06:09:51.202: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Dec 31 06:09:51.202: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Dec 31 06:09:51.202: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss2-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Dec 31 06:10:01.220: INFO: Updating stateful set ss2
  STEP: Rolling back update in reverse ordinal order @ 12/31/23 06:10:11.223
  Dec 31 06:10:11.224: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-4785 exec ss2-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Dec 31 06:10:11.305: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Dec 31 06:10:11.305: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Dec 31 06:10:11.305: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss2-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Dec 31 06:10:21.310: INFO: Deleting all statefulset in ns statefulset-4785
  Dec 31 06:10:21.311: INFO: Scaling statefulset ss2 to 0
  Dec 31 06:10:31.317: INFO: Waiting for statefulset status.replicas updated to 0
  Dec 31 06:10:31.318: INFO: Deleting statefulset ss2
  Dec 31 06:10:31.322: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-4785" for this suite. @ 12/31/23 06:10:31.323
• [110.442 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl version should check is all data is printed [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1731
  STEP: Creating a kubernetes client @ 12/31/23 06:10:31.326
  Dec 31 06:10:31.326: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 06:10:31.326
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:10:31.339
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:10:31.341
  Dec 31 06:10:31.342: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-5878 version'
  Dec 31 06:10:31.376: INFO: stderr: ""
  Dec 31 06:10:31.376: INFO: stdout: "Client Version: v1.29.0\nKustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3\nServer Version: v1.29.0\n"
  Dec 31 06:10:31.377: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-5878" for this suite. @ 12/31/23 06:10:31.378
• [0.054 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-storage] PersistentVolumes CSI Conformance should apply changes to a pv/pvc status [Conformance] [sig-storage, Conformance]
test/e2e/storage/persistent_volumes.go:669
  STEP: Creating a kubernetes client @ 12/31/23 06:10:31.38
  Dec 31 06:10:31.380: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pv @ 12/31/23 06:10:31.381
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:10:31.385
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:10:31.387
  STEP: Creating initial PV and PVC @ 12/31/23 06:10:31.389
  Dec 31 06:10:31.389: INFO: Creating a PV followed by a PVC
  STEP: Listing all PVs with the labelSelector: "e2e-pv-pool=pv-7745" @ 12/31/23 06:10:31.394
  STEP: Listing PVCs in namespace "pv-7745" @ 12/31/23 06:10:31.397
  STEP: Reading "pvc-85xr8" Status @ 12/31/23 06:10:31.399
  STEP: Reading "pv-7745-lqlsm" Status @ 12/31/23 06:10:31.4
  STEP: Patching "pvc-85xr8" Status @ 12/31/23 06:10:31.402
  STEP: Patching "pv-7745-lqlsm" Status @ 12/31/23 06:10:31.404
  STEP: Updating "pvc-85xr8" Status @ 12/31/23 06:10:31.411
  STEP: Updating "pv-7745-lqlsm" Status @ 12/31/23 06:10:31.414
  Dec 31 06:10:31.418: INFO: AfterEach: deleting 1 PVCs and 1 PVs...
  Dec 31 06:10:31.419: INFO: Deleting PersistentVolumeClaim "pvc-85xr8"
  Dec 31 06:10:31.421: INFO: Deleting PersistentVolume "pv-7745-lqlsm"
  Dec 31 06:10:31.424: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pv-7745" for this suite. @ 12/31/23 06:10:31.425
• [0.048 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:160
  STEP: Creating a kubernetes client @ 12/31/23 06:10:31.428
  Dec 31 06:10:31.428: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir @ 12/31/23 06:10:31.429
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:10:31.435
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:10:31.436
  STEP: Creating a pod to test emptydir volume type on node default medium @ 12/31/23 06:10:31.439
  STEP: Saw pod success @ 12/31/23 06:10:39.453
  Dec 31 06:10:39.454: INFO: Trying to get logs from node worker3 pod pod-38c46e7b-7710-4b26-bbc1-0b5c40659d22 container test-container: <nil>
  STEP: delete the pod @ 12/31/23 06:10:39.462
  Dec 31 06:10:39.468: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-9821" for this suite. @ 12/31/23 06:10:39.469
• [8.043 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply changes to a namespace status [Conformance] [sig-api-machinery, Serial, Conformance]
test/e2e/apimachinery/namespace.go:305
  STEP: Creating a kubernetes client @ 12/31/23 06:10:39.472
  Dec 31 06:10:39.472: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename namespaces @ 12/31/23 06:10:39.472
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:10:39.478
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:10:39.479
  STEP: Read namespace status @ 12/31/23 06:10:39.48
  Dec 31 06:10:39.483: INFO: Status: v1.NamespaceStatus{Phase:"Active", Conditions:[]v1.NamespaceCondition(nil)}
  STEP: Patch namespace status @ 12/31/23 06:10:39.483
  Dec 31 06:10:39.485: INFO: Status.Condition: v1.NamespaceCondition{Type:"StatusPatch", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Patched by an e2e test"}
  STEP: Update namespace status @ 12/31/23 06:10:39.485
  Dec 31 06:10:39.488: INFO: Status.Condition: v1.NamespaceCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Updated by an e2e test"}
  Dec 31 06:10:39.488: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-770" for this suite. @ 12/31/23 06:10:39.492
• [0.023 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:120
  STEP: Creating a kubernetes client @ 12/31/23 06:10:39.494
  Dec 31 06:10:39.494: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir @ 12/31/23 06:10:39.495
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:10:39.499
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:10:39.501
  STEP: Creating a pod to test emptydir 0777 on tmpfs @ 12/31/23 06:10:39.503
  STEP: Saw pod success @ 12/31/23 06:10:41.509
  Dec 31 06:10:41.510: INFO: Trying to get logs from node worker3 pod pod-e5a907d4-fa7d-44da-bfc5-ab681a12f451 container test-container: <nil>
  STEP: delete the pod @ 12/31/23 06:10:41.512
  Dec 31 06:10:41.517: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-782" for this suite. @ 12/31/23 06:10:41.518
• [2.026 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance] [sig-node, Conformance]
test/e2e/common/node/podtemplates.go:54
  STEP: Creating a kubernetes client @ 12/31/23 06:10:41.521
  Dec 31 06:10:41.521: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename podtemplate @ 12/31/23 06:10:41.521
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:10:41.527
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:10:41.529
  Dec 31 06:10:41.540: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-8246" for this suite. @ 12/31/23 06:10:41.541
• [0.023 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_secret.go:119
  STEP: Creating a kubernetes client @ 12/31/23 06:10:41.543
  Dec 31 06:10:41.543: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:10:41.544
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:10:41.55
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:10:41.551
  STEP: Creating secret with name projected-secret-test-60f653d2-dea0-40cc-ad71-569b078df743 @ 12/31/23 06:10:41.552
  STEP: Creating a pod to test consume secrets @ 12/31/23 06:10:41.554
  STEP: Saw pod success @ 12/31/23 06:10:43.56
  Dec 31 06:10:43.561: INFO: Trying to get logs from node worker3 pod pod-projected-secrets-89af946e-796a-41fe-b6a4-8d953564e8a5 container secret-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 06:10:43.563
  Dec 31 06:10:43.569: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8020" for this suite. @ 12/31/23 06:10:43.57
• [2.029 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/discovery.go:126
  STEP: Creating a kubernetes client @ 12/31/23 06:10:43.573
  Dec 31 06:10:43.573: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename discovery @ 12/31/23 06:10:43.573
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:10:43.579
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:10:43.581
  STEP: Setting up server cert @ 12/31/23 06:10:43.583
  Dec 31 06:10:43.901: INFO: Checking APIGroup: apiregistration.k8s.io
  Dec 31 06:10:43.901: INFO: PreferredVersion.GroupVersion: apiregistration.k8s.io/v1
  Dec 31 06:10:43.901: INFO: Versions found [{apiregistration.k8s.io/v1 v1}]
  Dec 31 06:10:43.901: INFO: apiregistration.k8s.io/v1 matches apiregistration.k8s.io/v1
  Dec 31 06:10:43.901: INFO: Checking APIGroup: apps
  Dec 31 06:10:43.902: INFO: PreferredVersion.GroupVersion: apps/v1
  Dec 31 06:10:43.902: INFO: Versions found [{apps/v1 v1}]
  Dec 31 06:10:43.902: INFO: apps/v1 matches apps/v1
  Dec 31 06:10:43.902: INFO: Checking APIGroup: events.k8s.io
  Dec 31 06:10:43.902: INFO: PreferredVersion.GroupVersion: events.k8s.io/v1
  Dec 31 06:10:43.902: INFO: Versions found [{events.k8s.io/v1 v1}]
  Dec 31 06:10:43.902: INFO: events.k8s.io/v1 matches events.k8s.io/v1
  Dec 31 06:10:43.902: INFO: Checking APIGroup: authentication.k8s.io
  Dec 31 06:10:43.903: INFO: PreferredVersion.GroupVersion: authentication.k8s.io/v1
  Dec 31 06:10:43.903: INFO: Versions found [{authentication.k8s.io/v1 v1}]
  Dec 31 06:10:43.903: INFO: authentication.k8s.io/v1 matches authentication.k8s.io/v1
  Dec 31 06:10:43.903: INFO: Checking APIGroup: authorization.k8s.io
  Dec 31 06:10:43.903: INFO: PreferredVersion.GroupVersion: authorization.k8s.io/v1
  Dec 31 06:10:43.903: INFO: Versions found [{authorization.k8s.io/v1 v1}]
  Dec 31 06:10:43.903: INFO: authorization.k8s.io/v1 matches authorization.k8s.io/v1
  Dec 31 06:10:43.903: INFO: Checking APIGroup: autoscaling
  Dec 31 06:10:43.904: INFO: PreferredVersion.GroupVersion: autoscaling/v2
  Dec 31 06:10:43.904: INFO: Versions found [{autoscaling/v2 v2} {autoscaling/v1 v1}]
  Dec 31 06:10:43.904: INFO: autoscaling/v2 matches autoscaling/v2
  Dec 31 06:10:43.904: INFO: Checking APIGroup: batch
  Dec 31 06:10:43.904: INFO: PreferredVersion.GroupVersion: batch/v1
  Dec 31 06:10:43.904: INFO: Versions found [{batch/v1 v1}]
  Dec 31 06:10:43.904: INFO: batch/v1 matches batch/v1
  Dec 31 06:10:43.904: INFO: Checking APIGroup: certificates.k8s.io
  Dec 31 06:10:43.904: INFO: PreferredVersion.GroupVersion: certificates.k8s.io/v1
  Dec 31 06:10:43.904: INFO: Versions found [{certificates.k8s.io/v1 v1}]
  Dec 31 06:10:43.904: INFO: certificates.k8s.io/v1 matches certificates.k8s.io/v1
  Dec 31 06:10:43.904: INFO: Checking APIGroup: networking.k8s.io
  Dec 31 06:10:43.905: INFO: PreferredVersion.GroupVersion: networking.k8s.io/v1
  Dec 31 06:10:43.905: INFO: Versions found [{networking.k8s.io/v1 v1}]
  Dec 31 06:10:43.905: INFO: networking.k8s.io/v1 matches networking.k8s.io/v1
  Dec 31 06:10:43.905: INFO: Checking APIGroup: policy
  Dec 31 06:10:43.905: INFO: PreferredVersion.GroupVersion: policy/v1
  Dec 31 06:10:43.905: INFO: Versions found [{policy/v1 v1}]
  Dec 31 06:10:43.905: INFO: policy/v1 matches policy/v1
  Dec 31 06:10:43.905: INFO: Checking APIGroup: rbac.authorization.k8s.io
  Dec 31 06:10:43.905: INFO: PreferredVersion.GroupVersion: rbac.authorization.k8s.io/v1
  Dec 31 06:10:43.905: INFO: Versions found [{rbac.authorization.k8s.io/v1 v1}]
  Dec 31 06:10:43.905: INFO: rbac.authorization.k8s.io/v1 matches rbac.authorization.k8s.io/v1
  Dec 31 06:10:43.905: INFO: Checking APIGroup: storage.k8s.io
  Dec 31 06:10:43.906: INFO: PreferredVersion.GroupVersion: storage.k8s.io/v1
  Dec 31 06:10:43.906: INFO: Versions found [{storage.k8s.io/v1 v1}]
  Dec 31 06:10:43.906: INFO: storage.k8s.io/v1 matches storage.k8s.io/v1
  Dec 31 06:10:43.906: INFO: Checking APIGroup: admissionregistration.k8s.io
  Dec 31 06:10:43.906: INFO: PreferredVersion.GroupVersion: admissionregistration.k8s.io/v1
  Dec 31 06:10:43.906: INFO: Versions found [{admissionregistration.k8s.io/v1 v1}]
  Dec 31 06:10:43.906: INFO: admissionregistration.k8s.io/v1 matches admissionregistration.k8s.io/v1
  Dec 31 06:10:43.906: INFO: Checking APIGroup: apiextensions.k8s.io
  Dec 31 06:10:43.907: INFO: PreferredVersion.GroupVersion: apiextensions.k8s.io/v1
  Dec 31 06:10:43.907: INFO: Versions found [{apiextensions.k8s.io/v1 v1}]
  Dec 31 06:10:43.907: INFO: apiextensions.k8s.io/v1 matches apiextensions.k8s.io/v1
  Dec 31 06:10:43.907: INFO: Checking APIGroup: scheduling.k8s.io
  Dec 31 06:10:43.907: INFO: PreferredVersion.GroupVersion: scheduling.k8s.io/v1
  Dec 31 06:10:43.907: INFO: Versions found [{scheduling.k8s.io/v1 v1}]
  Dec 31 06:10:43.907: INFO: scheduling.k8s.io/v1 matches scheduling.k8s.io/v1
  Dec 31 06:10:43.907: INFO: Checking APIGroup: coordination.k8s.io
  Dec 31 06:10:43.907: INFO: PreferredVersion.GroupVersion: coordination.k8s.io/v1
  Dec 31 06:10:43.907: INFO: Versions found [{coordination.k8s.io/v1 v1}]
  Dec 31 06:10:43.907: INFO: coordination.k8s.io/v1 matches coordination.k8s.io/v1
  Dec 31 06:10:43.907: INFO: Checking APIGroup: node.k8s.io
  Dec 31 06:10:43.908: INFO: PreferredVersion.GroupVersion: node.k8s.io/v1
  Dec 31 06:10:43.908: INFO: Versions found [{node.k8s.io/v1 v1}]
  Dec 31 06:10:43.908: INFO: node.k8s.io/v1 matches node.k8s.io/v1
  Dec 31 06:10:43.908: INFO: Checking APIGroup: discovery.k8s.io
  Dec 31 06:10:43.908: INFO: PreferredVersion.GroupVersion: discovery.k8s.io/v1
  Dec 31 06:10:43.908: INFO: Versions found [{discovery.k8s.io/v1 v1}]
  Dec 31 06:10:43.908: INFO: discovery.k8s.io/v1 matches discovery.k8s.io/v1
  Dec 31 06:10:43.908: INFO: Checking APIGroup: flowcontrol.apiserver.k8s.io
  Dec 31 06:10:43.908: INFO: PreferredVersion.GroupVersion: flowcontrol.apiserver.k8s.io/v1
  Dec 31 06:10:43.908: INFO: Versions found [{flowcontrol.apiserver.k8s.io/v1 v1} {flowcontrol.apiserver.k8s.io/v1beta3 v1beta3}]
  Dec 31 06:10:43.908: INFO: flowcontrol.apiserver.k8s.io/v1 matches flowcontrol.apiserver.k8s.io/v1
  Dec 31 06:10:43.908: INFO: Checking APIGroup: metrics.k8s.io
  Dec 31 06:10:43.909: INFO: PreferredVersion.GroupVersion: metrics.k8s.io/v1beta1
  Dec 31 06:10:43.909: INFO: Versions found [{metrics.k8s.io/v1beta1 v1beta1}]
  Dec 31 06:10:43.909: INFO: metrics.k8s.io/v1beta1 matches metrics.k8s.io/v1beta1
  Dec 31 06:10:43.909: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "discovery-557" for this suite. @ 12/31/23 06:10:43.91
• [0.340 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:889
  STEP: Creating a kubernetes client @ 12/31/23 06:10:43.913
  Dec 31 06:10:43.913: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename resourcequota @ 12/31/23 06:10:43.913
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:10:43.919
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:10:43.921
  STEP: Creating a ResourceQuota @ 12/31/23 06:10:43.922
  STEP: Getting a ResourceQuota @ 12/31/23 06:10:43.924
  STEP: Updating a ResourceQuota @ 12/31/23 06:10:43.925
  STEP: Verifying a ResourceQuota was modified @ 12/31/23 06:10:43.929
  STEP: Deleting a ResourceQuota @ 12/31/23 06:10:43.93
  STEP: Verifying the deleted ResourceQuota @ 12/31/23 06:10:43.933
  Dec 31 06:10:43.934: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-282" for this suite. @ 12/31/23 06:10:43.935
• [0.024 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should serve a basic image on each replica with a public image [Conformance] [sig-apps, Conformance]
test/e2e/apps/rc.go:70
  STEP: Creating a kubernetes client @ 12/31/23 06:10:43.937
  Dec 31 06:10:43.937: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename replication-controller @ 12/31/23 06:10:43.938
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:10:43.943
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:10:43.944
  STEP: Creating replication controller my-hostname-basic-c47d3748-b20d-43d5-9fa7-6b0c306285bd @ 12/31/23 06:10:43.946
  Dec 31 06:10:43.955: INFO: Pod name my-hostname-basic-c47d3748-b20d-43d5-9fa7-6b0c306285bd: Found 0 pods out of 1
  Dec 31 06:10:48.957: INFO: Pod name my-hostname-basic-c47d3748-b20d-43d5-9fa7-6b0c306285bd: Found 1 pods out of 1
  Dec 31 06:10:48.957: INFO: Ensuring all pods for ReplicationController "my-hostname-basic-c47d3748-b20d-43d5-9fa7-6b0c306285bd" are running
  Dec 31 06:10:48.958: INFO: Pod "my-hostname-basic-c47d3748-b20d-43d5-9fa7-6b0c306285bd-dxk54" is running and ready(conditions: [{Type:PodReadyToStartContainers Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-12-31 06:10:45 +0000 UTC Reason: Message:} {Type:Initialized Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-12-31 06:10:43 +0000 UTC Reason: Message:} {Type:Ready Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-12-31 06:10:45 +0000 UTC Reason: Message:} {Type:ContainersReady Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-12-31 06:10:45 +0000 UTC Reason: Message:} {Type:PodScheduled Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-12-31 06:10:43 +0000 UTC Reason: Message:}])
  Dec 31 06:10:48.958: INFO: Trying to dial the pod
  STEP: trying to dial each unique pod @ 12/31/23 06:10:48.958
  Dec 31 06:10:48.962: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-1909" for this suite. @ 12/31/23 06:10:48.964
• [5.030 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:110
  STEP: Creating a kubernetes client @ 12/31/23 06:10:48.967
  Dec 31 06:10:48.967: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename configmap @ 12/31/23 06:10:48.967
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:10:48.976
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:10:48.977
  STEP: Creating configMap with name configmap-test-volume-map-474ca14d-25bf-47ad-9573-b454ea48a9ca @ 12/31/23 06:10:48.979
  STEP: Creating a pod to test consume configMaps @ 12/31/23 06:10:48.981
  STEP: Saw pod success @ 12/31/23 06:10:52.993
  Dec 31 06:10:52.994: INFO: Trying to get logs from node worker3 pod pod-configmaps-6933af98-2b03-4492-826b-d1ae044017e2 container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 06:10:52.996
  Dec 31 06:10:53.003: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-2903" for this suite. @ 12/31/23 06:10:53.004
• [4.040 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:90
  STEP: Creating a kubernetes client @ 12/31/23 06:10:53.007
  Dec 31 06:10:53.007: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename configmap @ 12/31/23 06:10:53.007
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:10:53.013
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:10:53.014
  STEP: Creating configMap with name configmap-test-volume-map-9c406754-019b-42c3-8412-ed68326c7dff @ 12/31/23 06:10:53.016
  STEP: Creating a pod to test consume configMaps @ 12/31/23 06:10:53.017
  STEP: Saw pod success @ 12/31/23 06:11:03.033
  Dec 31 06:11:03.034: INFO: Trying to get logs from node worker2 pod pod-configmaps-f2f23197-dca7-452f-ac90-3baa4313d19c container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 06:11:03.042
  Dec 31 06:11:03.048: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-1505" for this suite. @ 12/31/23 06:11:03.049
• [10.045 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should test the lifecycle of an Endpoint [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:3154
  STEP: Creating a kubernetes client @ 12/31/23 06:11:03.052
  Dec 31 06:11:03.052: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 06:11:03.053
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:11:03.059
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:11:03.061
  STEP: creating an Endpoint @ 12/31/23 06:11:03.064
  STEP: waiting for available Endpoint @ 12/31/23 06:11:03.066
  STEP: listing all Endpoints @ 12/31/23 06:11:03.066
  STEP: updating the Endpoint @ 12/31/23 06:11:03.067
  STEP: fetching the Endpoint @ 12/31/23 06:11:03.069
  STEP: patching the Endpoint @ 12/31/23 06:11:03.07
  STEP: fetching the Endpoint @ 12/31/23 06:11:03.073
  STEP: deleting the Endpoint by Collection @ 12/31/23 06:11:03.074
  STEP: waiting for Endpoint deletion @ 12/31/23 06:11:03.076
  STEP: fetching the Endpoint @ 12/31/23 06:11:03.077
  Dec 31 06:11:03.078: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-1818" for this suite. @ 12/31/23 06:11:03.079
• [0.030 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-apps] Deployment deployment should support proportional scaling [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:160
  STEP: Creating a kubernetes client @ 12/31/23 06:11:03.082
  Dec 31 06:11:03.082: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename deployment @ 12/31/23 06:11:03.083
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:11:03.139
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:11:03.14
  Dec 31 06:11:03.141: INFO: Creating deployment "webserver-deployment"
  Dec 31 06:11:03.144: INFO: Waiting for observed generation 1
  Dec 31 06:11:05.147: INFO: Waiting for all required pods to come up
  Dec 31 06:11:05.152: INFO: Pod name httpd: Found 10 pods out of 10
  STEP: ensuring each pod is running @ 12/31/23 06:11:05.152
  Dec 31 06:11:07.155: INFO: Waiting for deployment "webserver-deployment" to complete
  Dec 31 06:11:07.158: INFO: Updating deployment "webserver-deployment" with a non-existent image
  Dec 31 06:11:07.161: INFO: Updating deployment webserver-deployment
  Dec 31 06:11:07.161: INFO: Waiting for observed generation 2
  Dec 31 06:11:09.165: INFO: Waiting for the first rollout's replicaset to have .status.availableReplicas = 8
  Dec 31 06:11:09.166: INFO: Waiting for the first rollout's replicaset to have .spec.replicas = 8
  Dec 31 06:11:09.167: INFO: Waiting for the first rollout's replicaset of deployment "webserver-deployment" to have desired number of replicas
  Dec 31 06:11:09.170: INFO: Verifying that the second rollout's replicaset has .status.availableReplicas = 0
  Dec 31 06:11:09.170: INFO: Waiting for the second rollout's replicaset to have .spec.replicas = 5
  Dec 31 06:11:09.170: INFO: Waiting for the second rollout's replicaset of deployment "webserver-deployment" to have desired number of replicas
  Dec 31 06:11:09.172: INFO: Verifying that deployment "webserver-deployment" has minimum required number of available replicas
  Dec 31 06:11:09.172: INFO: Scaling up the deployment "webserver-deployment" from 10 to 30
  Dec 31 06:11:09.176: INFO: Updating deployment webserver-deployment
  Dec 31 06:11:09.176: INFO: Waiting for the replicasets of deployment "webserver-deployment" to have desired number of replicas
  Dec 31 06:11:09.178: INFO: Verifying that first rollout's replicaset has .spec.replicas = 20
  Dec 31 06:11:09.181: INFO: Verifying that second rollout's replicaset has .spec.replicas = 13
  Dec 31 06:11:11.184: INFO: Deployment "webserver-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=20) "webserver-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "db04d400-bc4c-467a-bace-e42c249bd67f",
      ResourceVersion: (string) (len=4) "2976",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=635) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 68  74 74 70 64 5c 22 7d 22  |me\":\"httpd\"}"|
              00000160  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000170  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000180  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000190  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              000001a0  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              000001b0  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              000001c0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001d0  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000001e0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000001f0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              00000200  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              00000210  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              00000220  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              00000230  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000270  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=541) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 6e 61  |licas":{},"f:una|
              000001f0  76 61 69 6c 61 62 6c 65  52 65 70 6c 69 63 61 73  |vailableReplicas|
              00000200  22 3a 7b 7d 2c 22 66 3a  75 70 64 61 74 65 64 52  |":{},"f:updatedR|
              00000210  65 70 6c 69 63 61 73 22  3a 7b 7d 7d 7d           |eplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(30),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=13) "webserver:404",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 2,
            StrVal: (string) ""
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 3,
            StrVal: (string) ""
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 3,
      Replicas: (int32) 33,
      UpdatedReplicas: (int32) 13,
      ReadyReplicas: (int32) 20,
      AvailableReplicas: (int32) 20,
      UnavailableReplicas: (int32) 13,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=26) "MinimumReplicasUnavailable",
          Message: (string) (len=46) "Deployment does not have minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=17) "ReplicaSetUpdated",
          Message: (string) (len=59) "ReplicaSet \"webserver-deployment-9b4f5bf69\" is progressing."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Dec 31 06:11:11.186: INFO: New ReplicaSet "webserver-deployment-9b4f5bf69" of Deployment "webserver-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d1d81b01-b6a2-4e8d-a5a8-6cc0446daf38",
      ResourceVersion: (string) (len=4) "2832",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599867,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=2) "30",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=2) "33",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=20) "webserver-deployment",
          UID: (types.UID) (len=36) "db04d400-bc4c-467a-bace-e42c249bd67f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 64 62 30 34 64 34  30 30 2d 62 63 34 63 2d  |\"db04d400-bc4c-|
              00000120  34 36 37 61 2d 62 61 63  65 2d 65 34 32 63 32 34  |467a-bace-e42c24|
              00000130  39 62 64 36 37 66 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |9bd67f\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=84) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  66 75 6c 6c 79 4c 61 62  65 6c 65 64 52 65 70 6c  |fullyLabeledRepl|
              00000020  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |icas":{},"f:obse|
              00000030  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              00000040  7b 7d 2c 22 66 3a 72 65  70 6c 69 63 61 73 22 3a  |{},"f:replicas":|
              00000050  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(13),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69",
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=13) "webserver:404",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 13,
      FullyLabeledReplicas: (int32) 13,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Dec 31 06:11:11.187: INFO: All old ReplicaSets of Deployment "webserver-deployment":
  Dec 31 06:11:11.187: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "webserver-deployment-557759b7c7",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
      ResourceVersion: (string) (len=4) "2975",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=2) "30",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=2) "33",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=20) "webserver-deployment",
          UID: (types.UID) (len=36) "db04d400-bc4c-467a-bace-e42c249bd67f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 64 62 30 34 64 34  30 30 2d 62 63 34 63 2d  |\"db04d400-bc4c-|
              00000120  34 36 37 61 2d 62 61 63  65 2d 65 34 32 63 32 34  |467a-bace-e42c24|
              00000130  39 62 64 36 37 66 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |9bd67f\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(20),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 20,
      FullyLabeledReplicas: (int32) 20,
      ReadyReplicas: (int32) 20,
      AvailableReplicas: (int32) 20,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Dec 31 06:11:11.190: INFO: Pod "webserver-deployment-557759b7c7-4m8fq" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-4m8fq",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3915ee7b-ff72-4a60-8ae4-5259f3aeaaec",
      ResourceVersion: (string) (len=4) "2615",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599865,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 35 32  2e 31 33 36 5c 22 7d 22  |2.20.152.136\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-nw7zc",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-nw7zc",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=12) "10.255.0.202",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599865,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599865,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599865,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.202",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.202"
        }
      },
      PodIP: (string) (len=14) "172.20.152.136",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.152.136"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599864,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://6df2aa30cd764fa3d9507c8b5906f01ccbc3bbe40bd03f2bb579767de89af490",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.191: INFO: Pod "webserver-deployment-557759b7c7-4sk9p" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-4sk9p",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "5b8ae2ce-56d7-4ab3-8462-baad387ba86c",
      ResourceVersion: (string) (len=4) "2568",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 36 39  2e 31 34 32 5c 22 7d 22  |2.20.169.142\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-lb5vz",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-lb5vz",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) (len=14) "172.20.169.142",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.169.142"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599863,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://be86f0f87770dd80c99cc3ce7c8e0ce115e9cb1440398acc87018c8713ce8fa9",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.193: INFO: Pod "webserver-deployment-557759b7c7-6c77l" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-6c77l",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3195f3a7-5a98-424b-b39c-016b9d3c5088",
      ResourceVersion: (string) (len=4) "2583",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=661) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 36 39 2e  37 31 5c 22 7d 22 3a 7b  |2.20.69.71\"}":{|
              00000270  22 2e 22 3a 7b 7d 2c 22  66 3a 69 70 22 3a 7b 7d  |".":{},"f:ip":{}|
              00000280  7d 7d 2c 22 66 3a 73 74  61 72 74 54 69 6d 65 22  |}},"f:startTime"|
              00000290  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-9mj5l",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-9mj5l",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.203",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.203"
        }
      },
      PodIP: (string) (len=12) "172.20.69.71",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "172.20.69.71"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599863,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://53331a086e66ae2b576bc5dd07250504701183592d0d2ed5af2abb2222bff261",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.194: INFO: Pod "webserver-deployment-557759b7c7-74sd4" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-74sd4",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "4edf3bc4-1e64-4892-a52c-39cf6483052c",
      ResourceVersion: (string) (len=4) "2953",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 36 39  2e 31 34 36 5c 22 7d 22  |2.20.169.146\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-bwr2j",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-bwr2j",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) (len=14) "172.20.169.146",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.169.146"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599870,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://1d92476545851945278165a46055613dcfc2e2b7d0ccd5963d8ac664fc935e89",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.196: INFO: Pod "webserver-deployment-557759b7c7-cjdnj" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-cjdnj",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "fa022676-3f9f-4f97-91b5-83544b1d9a1c",
      ResourceVersion: (string) (len=4) "2580",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=661) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 36 39 2e  37 30 5c 22 7d 22 3a 7b  |2.20.69.70\"}":{|
              00000270  22 2e 22 3a 7b 7d 2c 22  66 3a 69 70 22 3a 7b 7d  |".":{},"f:ip":{}|
              00000280  7d 7d 2c 22 66 3a 73 74  61 72 74 54 69 6d 65 22  |}},"f:startTime"|
              00000290  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-ph9pj",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-ph9pj",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.203",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.203"
        }
      },
      PodIP: (string) (len=12) "172.20.69.70",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "172.20.69.70"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599863,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://e1e662901bd3e16071254a8eddba6f07c3f615aac26db37c81125f4966fab003",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.197: INFO: Pod "webserver-deployment-557759b7c7-d52md" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-d52md",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3d00ca38-aca4-4412-9b83-c60da7bcd083",
      ResourceVersion: (string) (len=4) "2574",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 36 39  2e 31 34 30 5c 22 7d 22  |2.20.169.140\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-mjqjt",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-mjqjt",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) (len=14) "172.20.169.140",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.169.140"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599863,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://09999045a11c8491d0fe4af19eb621e4e606a0bb10e5cbd7bc5edf6539702c8d",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.199: INFO: Pod "webserver-deployment-557759b7c7-g2xjg" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-g2xjg",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e661ca7d-99de-4cfe-9fe8-844d0c4837a5",
      ResourceVersion: (string) (len=4) "2612",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599865,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 35 32  2e 31 33 38 5c 22 7d 22  |2.20.152.138\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-js7pk",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-js7pk",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=12) "10.255.0.202",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599865,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599865,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599865,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.202",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.202"
        }
      },
      PodIP: (string) (len=14) "172.20.152.138",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.152.138"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599864,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://719749703076e04120f717fe54f675af7e532fabf4305cf27dc4ec12bdb93603",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.200: INFO: Pod "webserver-deployment-557759b7c7-hkr58" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-hkr58",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "2f448409-f4a6-4416-adb5-4f52adfb1498",
      ResourceVersion: (string) (len=4) "2970",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 35 32  2e 31 34 31 5c 22 7d 22  |2.20.152.141\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-km444",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-km444",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=12) "10.255.0.202",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.202",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.202"
        }
      },
      PodIP: (string) (len=14) "172.20.152.141",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.152.141"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599870,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://d0f15821c63d4eb065cf4ad6ce58c350fb5890b3fe78ed8b0b896e2ad1716a64",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.202: INFO: Pod "webserver-deployment-557759b7c7-jpz4w" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-jpz4w",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "bfb4e06f-676f-40d1-bd06-d3c65249e8c2",
      ResourceVersion: (string) (len=4) "2948",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=661) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 36 39 2e  38 30 5c 22 7d 22 3a 7b  |2.20.69.80\"}":{|
              00000270  22 2e 22 3a 7b 7d 2c 22  66 3a 69 70 22 3a 7b 7d  |".":{},"f:ip":{}|
              00000280  7d 7d 2c 22 66 3a 73 74  61 72 74 54 69 6d 65 22  |}},"f:startTime"|
              00000290  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-2w7zm",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-2w7zm",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.203",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.203"
        }
      },
      PodIP: (string) (len=12) "172.20.69.80",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "172.20.69.80"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599870,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://3a5de46ada345e661eb3eb2f95a0bd12825f21451cef68bb084b996f04d9e99e",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.203: INFO: Pod "webserver-deployment-557759b7c7-jqf56" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-jqf56",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3e936abf-a70b-40ec-8bd0-75adf09f1b41",
      ResourceVersion: (string) (len=4) "2946",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 36 39  2e 31 34 37 5c 22 7d 22  |2.20.169.147\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-h9qrq",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-h9qrq",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) (len=14) "172.20.169.147",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.169.147"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599870,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://ac1f8b44fc5b874453ee5761f12dbb2c983a607690278943bb221773ee234f35",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.204: INFO: Pod "webserver-deployment-557759b7c7-kjgvf" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-kjgvf",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d7e4f3fa-4840-4deb-832b-af36f4f39020",
      ResourceVersion: (string) (len=4) "2949",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 36 39  2e 31 34 38 5c 22 7d 22  |2.20.169.148\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-m7pwp",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-m7pwp",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) (len=14) "172.20.169.148",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.169.148"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599870,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://d980eadf34b1d1c88a8b4f74405fe04d1d98934254584bf39ba9127ee91ac1ba",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.205: INFO: Pod "webserver-deployment-557759b7c7-ldztw" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-ldztw",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "50932a10-d1f3-42a3-87e6-bcc196073033",
      ResourceVersion: (string) (len=4) "2956",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=661) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 36 39 2e  37 36 5c 22 7d 22 3a 7b  |2.20.69.76\"}":{|
              00000270  22 2e 22 3a 7b 7d 2c 22  66 3a 69 70 22 3a 7b 7d  |".":{},"f:ip":{}|
              00000280  7d 7d 2c 22 66 3a 73 74  61 72 74 54 69 6d 65 22  |}},"f:startTime"|
              00000290  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-p8crr",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-p8crr",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.203",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.203"
        }
      },
      PodIP: (string) (len=12) "172.20.69.76",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "172.20.69.76"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599870,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://e56c017ca8f86234780cc9754ae9c9afbba2d5988f556164c683d3db56cdf739",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.206: INFO: Pod "webserver-deployment-557759b7c7-lftmx" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-lftmx",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "cc4dc136-a377-4e8e-9515-8eeb1075616f",
      ResourceVersion: (string) (len=4) "2955",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 36 39  2e 31 34 39 5c 22 7d 22  |2.20.169.149\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-ws9v4",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-ws9v4",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) (len=14) "172.20.169.149",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.169.149"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599870,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://766ae4c767dea2a13e7009199d19823a7f09f83b416921de5d15a86d9bce0355",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.208: INFO: Pod "webserver-deployment-557759b7c7-mfpjp" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-mfpjp",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "0f4e7ff6-11f6-4bd2-97ab-d8e00735f416",
      ResourceVersion: (string) (len=4) "2968",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 35 32  2e 31 34 32 5c 22 7d 22  |2.20.152.142\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-kzg8x",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-kzg8x",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=12) "10.255.0.202",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.202",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.202"
        }
      },
      PodIP: (string) (len=14) "172.20.152.142",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.152.142"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599870,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://efb7e6d4a0b9fb8cc763327b6939154afffe9becb6e38203a9fa424e550d0c69",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.209: INFO: Pod "webserver-deployment-557759b7c7-mtdnd" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-mtdnd",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "0443bbb8-171a-4b21-84d2-47ff12ac1715",
      ResourceVersion: (string) (len=4) "2950",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=661) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 36 39 2e  37 38 5c 22 7d 22 3a 7b  |2.20.69.78\"}":{|
              00000270  22 2e 22 3a 7b 7d 2c 22  66 3a 69 70 22 3a 7b 7d  |".":{},"f:ip":{}|
              00000280  7d 7d 2c 22 66 3a 73 74  61 72 74 54 69 6d 65 22  |}},"f:startTime"|
              00000290  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-mq7kq",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-mq7kq",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.203",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.203"
        }
      },
      PodIP: (string) (len=12) "172.20.69.78",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "172.20.69.78"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599870,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://773d37f492239a65dff6fa487434dba5b3a96049407559def6a24b65a7b98cd3",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.211: INFO: Pod "webserver-deployment-557759b7c7-p929w" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-p929w",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a8e15a2a-b659-430d-929d-f43c1a55dcdb",
      ResourceVersion: (string) (len=4) "2940",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 36 39  2e 31 34 35 5c 22 7d 22  |2.20.169.145\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-p4c7z",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-p4c7z",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) (len=14) "172.20.169.145",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.169.145"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599870,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://2818a73a798d29908ed5a888078c996a8d4b1bd6195e9c7aa0caa47998cade9b",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.212: INFO: Pod "webserver-deployment-557759b7c7-pd2jn" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-pd2jn",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7f63b8eb-0583-47e5-b243-811691d1db85",
      ResourceVersion: (string) (len=4) "2610",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599865,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 35 32  2e 31 33 37 5c 22 7d 22  |2.20.152.137\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-qhxxf",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-qhxxf",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=12) "10.255.0.202",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599865,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599865,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599865,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.202",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.202"
        }
      },
      PodIP: (string) (len=14) "172.20.152.137",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.152.137"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599864,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://034f779968b4a62ef4d1203b7b9305fa757a5a6b126ce303e92b50f9e935b2a0",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.214: INFO: Pod "webserver-deployment-557759b7c7-t82bx" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-t82bx",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "297de508-b3ca-4d75-8154-44b7862c1932",
      ResourceVersion: (string) (len=4) "2973",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 35 32  2e 31 34 33 5c 22 7d 22  |2.20.152.143\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-g29dt",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-g29dt",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=12) "10.255.0.202",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.202",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.202"
        }
      },
      PodIP: (string) (len=14) "172.20.152.143",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.152.143"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599870,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://84e18ca3b77d54179ced163bb7121b717a373b544dfc3b7ea0df970a87e82c3b",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.215: INFO: Pod "webserver-deployment-557759b7c7-vphwz" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-vphwz",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ac913d47-a406-4f96-bb98-6502e297a8b7",
      ResourceVersion: (string) (len=4) "2575",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=661) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 36 39 2e  37 32 5c 22 7d 22 3a 7b  |2.20.69.72\"}":{|
              00000270  22 2e 22 3a 7b 7d 2c 22  66 3a 69 70 22 3a 7b 7d  |".":{},"f:ip":{}|
              00000280  7d 7d 2c 22 66 3a 73 74  61 72 74 54 69 6d 65 22  |}},"f:startTime"|
              00000290  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-dxh87",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-dxh87",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599864,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599863,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.203",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.203"
        }
      },
      PodIP: (string) (len=12) "172.20.69.72",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "172.20.69.72"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599863,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599863,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://01fc2117609664a4f655e38b7f8b214fd34553e3f15d3594db033df1ef5fea41",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.217: INFO: Pod "webserver-deployment-557759b7c7-xmfsn" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-xmfsn",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "9594b407-43ab-4861-94b7-fb012f141ec9",
      ResourceVersion: (string) (len=4) "2944",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "acc03a39-cf71-4648-8687-e87ee538ab90",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 61 63  63 30 33 61 33 39 2d 63  |d\":\"acc03a39-c|
              00000090  66 37 31 2d 34 36 34 38  2d 38 36 38 37 2d 65 38  |f71-4648-8687-e8|
              000000a0  37 65 65 35 33 38 61 62  39 30 5c 22 7d 22 3a 7b  |7ee538ab90\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=661) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 36 39 2e  37 35 5c 22 7d 22 3a 7b  |2.20.69.75\"}":{|
              00000270  22 2e 22 3a 7b 7d 2c 22  66 3a 69 70 22 3a 7b 7d  |".":{},"f:ip":{}|
              00000280  7d 7d 2c 22 66 3a 73 74  61 72 74 54 69 6d 65 22  |}},"f:startTime"|
              00000290  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-m59gn",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-m59gn",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.203",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.203"
        }
      },
      PodIP: (string) (len=12) "172.20.69.75",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "172.20.69.75"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839599869,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://fd566487efb1fccdbbe08407f0ae07f2e42f0d552932b3e8722ab2255d486963",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.218: INFO: Pod "webserver-deployment-9b4f5bf69-4l2k7" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-4l2k7",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "679a9a74-9530-49bd-a208-b38fba4852c3",
      ResourceVersion: (string) (len=4) "2828",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "d1d81b01-b6a2-4e8d-a5a8-6cc0446daf38",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 64 31  64 38 31 62 30 31 2d 62  |d\":\"d1d81b01-b|
              00000090  36 61 32 2d 34 65 38 64  2d 61 35 61 38 2d 36 63  |6a2-4e8d-a5a8-6c|
              000000a0  63 30 34 34 36 64 61 66  33 38 5c 22 7d 22 3a 7b  |c0446daf38\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-lcg4s",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-lcg4s",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.219: INFO: Pod "webserver-deployment-9b4f5bf69-6rgzs" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-6rgzs",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "af000284-f305-4b82-acb4-7abeb373e832",
      ResourceVersion: (string) (len=4) "2820",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599867,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "d1d81b01-b6a2-4e8d-a5a8-6cc0446daf38",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 64 31  64 38 31 62 30 31 2d 62  |d\":\"d1d81b01-b|
              00000090  36 61 32 2d 34 65 38 64  2d 61 35 61 38 2d 36 63  |6a2-4e8d-a5a8-6c|
              000000a0  63 30 34 34 36 64 61 66  33 38 5c 22 7d 22 3a 7b  |c0446daf38\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=708) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 70 6f 64 49 50 22 3a  7b 7d 2c 22 66 3a 70 6f  |:podIP":{},"f:po|
              00000270  64 49 50 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |dIPs":{".":{},"k|
              00000280  3a 7b 5c 22 69 70 5c 22  3a 5c 22 31 37 32 2e 32  |:{\"ip\":\"172.2|
              00000290  30 2e 31 36 39 2e 31 34  33 5c 22 7d 22 3a 7b 22  |0.169.143\"}":{"|
              000002a0  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              000002b0  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              000002c0  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-5szz7",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-5szz7",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) (len=14) "172.20.169.143",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.169.143"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599867,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.221: INFO: Pod "webserver-deployment-9b4f5bf69-gtrrs" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-gtrrs",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "4fa6e558-763c-4eaf-a6c7-f16e52efff74",
      ResourceVersion: (string) (len=4) "2785",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "d1d81b01-b6a2-4e8d-a5a8-6cc0446daf38",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 64 31  64 38 31 62 30 31 2d 62  |d\":\"d1d81b01-b|
              00000090  36 61 32 2d 34 65 38 64  2d 61 35 61 38 2d 36 63  |6a2-4e8d-a5a8-6c|
              000000a0  63 30 34 34 36 64 61 66  33 38 5c 22 7d 22 3a 7b  |c0446daf38\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-s22qs",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-s22qs",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.230: INFO: Pod "webserver-deployment-9b4f5bf69-hhdqs" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-hhdqs",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "617b8c67-4828-42bf-81ea-1398e345f383",
      ResourceVersion: (string) (len=4) "2954",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599867,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "d1d81b01-b6a2-4e8d-a5a8-6cc0446daf38",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 64 31  64 38 31 62 30 31 2d 62  |d\":\"d1d81b01-b|
              00000090  36 61 32 2d 34 65 38 64  2d 61 35 61 38 2d 36 63  |6a2-4e8d-a5a8-6c|
              000000a0  63 30 34 34 36 64 61 66  33 38 5c 22 7d 22 3a 7b  |c0446daf38\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=706) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 70 6f 64 49 50 22 3a  7b 7d 2c 22 66 3a 70 6f  |:podIP":{},"f:po|
              00000270  64 49 50 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |dIPs":{".":{},"k|
              00000280  3a 7b 5c 22 69 70 5c 22  3a 5c 22 31 37 32 2e 32  |:{\"ip\":\"172.2|
              00000290  30 2e 36 39 2e 37 34 5c  22 7d 22 3a 7b 22 2e 22  |0.69.74\"}":{"."|
              000002a0  3a 7b 7d 2c 22 66 3a 69  70 22 3a 7b 7d 7d 7d 2c  |:{},"f:ip":{}}},|
              000002b0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000002c0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-8szdg",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-8szdg",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.203",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.203"
        }
      },
      PodIP: (string) (len=12) "172.20.69.74",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "172.20.69.74"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599867,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.232: INFO: Pod "webserver-deployment-9b4f5bf69-jwqzn" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-jwqzn",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "c260a741-8efc-43a5-8014-b5dfe5ef7e87",
      ResourceVersion: (string) (len=4) "2823",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "d1d81b01-b6a2-4e8d-a5a8-6cc0446daf38",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 64 31  64 38 31 62 30 31 2d 62  |d\":\"d1d81b01-b|
              00000090  36 61 32 2d 34 65 38 64  2d 61 35 61 38 2d 36 63  |6a2-4e8d-a5a8-6c|
              000000a0  63 30 34 34 36 64 61 66  33 38 5c 22 7d 22 3a 7b  |c0446daf38\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-nbgqt",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-nbgqt",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.233: INFO: Pod "webserver-deployment-9b4f5bf69-n4sxb" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-n4sxb",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "537521d9-efb4-432a-a287-c213c040f060",
      ResourceVersion: (string) (len=4) "2821",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "d1d81b01-b6a2-4e8d-a5a8-6cc0446daf38",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 64 31  64 38 31 62 30 31 2d 62  |d\":\"d1d81b01-b|
              00000090  36 61 32 2d 34 65 38 64  2d 61 35 61 38 2d 36 63  |6a2-4e8d-a5a8-6c|
              000000a0  63 30 34 34 36 64 61 66  33 38 5c 22 7d 22 3a 7b  |c0446daf38\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-vm6pq",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-vm6pq",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=12) "10.255.0.202",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.202",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.202"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.234: INFO: Pod "webserver-deployment-9b4f5bf69-pkflv" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-pkflv",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "c63d7c2c-afbd-46ae-872f-29df800dc794",
      ResourceVersion: (string) (len=4) "2850",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599867,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "d1d81b01-b6a2-4e8d-a5a8-6cc0446daf38",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 64 31  64 38 31 62 30 31 2d 62  |d\":\"d1d81b01-b|
              00000090  36 61 32 2d 34 65 38 64  2d 61 35 61 38 2d 36 63  |6a2-4e8d-a5a8-6c|
              000000a0  63 30 34 34 36 64 61 66  33 38 5c 22 7d 22 3a 7b  |c0446daf38\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=708) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 70 6f 64 49 50 22 3a  7b 7d 2c 22 66 3a 70 6f  |:podIP":{},"f:po|
              00000270  64 49 50 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |dIPs":{".":{},"k|
              00000280  3a 7b 5c 22 69 70 5c 22  3a 5c 22 31 37 32 2e 32  |:{\"ip\":\"172.2|
              00000290  30 2e 31 35 32 2e 31 33  39 5c 22 7d 22 3a 7b 22  |0.152.139\"}":{"|
              000002a0  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              000002b0  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              000002c0  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-pbqdb",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-pbqdb",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=12) "10.255.0.202",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.202",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.202"
        }
      },
      PodIP: (string) (len=14) "172.20.152.139",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.152.139"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599867,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.236: INFO: Pod "webserver-deployment-9b4f5bf69-rpbbb" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-rpbbb",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "b66f5339-bf47-41aa-b720-cefc5bda03a0",
      ResourceVersion: (string) (len=4) "2825",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "d1d81b01-b6a2-4e8d-a5a8-6cc0446daf38",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 64 31  64 38 31 62 30 31 2d 62  |d\":\"d1d81b01-b|
              00000090  36 61 32 2d 34 65 38 64  2d 61 35 61 38 2d 36 63  |6a2-4e8d-a5a8-6c|
              000000a0  63 30 34 34 36 64 61 66  33 38 5c 22 7d 22 3a 7b  |c0446daf38\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-n8kfw",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-n8kfw",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.203",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.203"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.238: INFO: Pod "webserver-deployment-9b4f5bf69-s2h57" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-s2h57",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3c094e27-6ba8-4e9f-be30-1d5c98bf49a2",
      ResourceVersion: (string) (len=4) "2805",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "d1d81b01-b6a2-4e8d-a5a8-6cc0446daf38",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 64 31  64 38 31 62 30 31 2d 62  |d\":\"d1d81b01-b|
              00000090  36 61 32 2d 34 65 38 64  2d 61 35 61 38 2d 36 63  |6a2-4e8d-a5a8-6c|
              000000a0  63 30 34 34 36 64 61 66  33 38 5c 22 7d 22 3a 7b  |c0446daf38\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-trkx4",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-trkx4",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.203",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.203"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.239: INFO: Pod "webserver-deployment-9b4f5bf69-scqvc" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-scqvc",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a87ddb18-ddb3-472e-b93d-a7c567cf90be",
      ResourceVersion: (string) (len=4) "2827",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "d1d81b01-b6a2-4e8d-a5a8-6cc0446daf38",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 64 31  64 38 31 62 30 31 2d 62  |d\":\"d1d81b01-b|
              00000090  36 61 32 2d 34 65 38 64  2d 61 35 61 38 2d 36 63  |6a2-4e8d-a5a8-6c|
              000000a0  63 30 34 34 36 64 61 66  33 38 5c 22 7d 22 3a 7b  |c0446daf38\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-2k42r",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-2k42r",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=12) "10.255.0.202",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.202",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.202"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.241: INFO: Pod "webserver-deployment-9b4f5bf69-sz2tz" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-sz2tz",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "dda070c0-0efc-4f6d-a1aa-b704aeb08249",
      ResourceVersion: (string) (len=4) "2942",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599867,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "d1d81b01-b6a2-4e8d-a5a8-6cc0446daf38",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 64 31  64 38 31 62 30 31 2d 62  |d\":\"d1d81b01-b|
              00000090  36 61 32 2d 34 65 38 64  2d 61 35 61 38 2d 36 63  |6a2-4e8d-a5a8-6c|
              000000a0  63 30 34 34 36 64 61 66  33 38 5c 22 7d 22 3a 7b  |c0446daf38\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=708) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 70 6f 64 49 50 22 3a  7b 7d 2c 22 66 3a 70 6f  |:podIP":{},"f:po|
              00000270  64 49 50 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |dIPs":{".":{},"k|
              00000280  3a 7b 5c 22 69 70 5c 22  3a 5c 22 31 37 32 2e 32  |:{\"ip\":\"172.2|
              00000290  30 2e 31 36 39 2e 31 34  34 5c 22 7d 22 3a 7b 22  |0.169.144\"}":{"|
              000002a0  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              000002b0  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              000002c0  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-5kllx",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-5kllx",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599870,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) (len=14) "172.20.169.144",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.169.144"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599867,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.242: INFO: Pod "webserver-deployment-9b4f5bf69-xdz4d" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-xdz4d",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ed0e9034-283e-4971-8d6a-4d38d79a6b4a",
      ResourceVersion: (string) (len=4) "2779",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "d1d81b01-b6a2-4e8d-a5a8-6cc0446daf38",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 64 31  64 38 31 62 30 31 2d 62  |d\":\"d1d81b01-b|
              00000090  36 61 32 2d 34 65 38 64  2d 61 35 61 38 2d 36 63  |6a2-4e8d-a5a8-6c|
              000000a0  63 30 34 34 36 64 61 66  33 38 5c 22 7d 22 3a 7b  |c0446daf38\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-sfbbl",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-sfbbl",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=12) "10.255.0.202",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.202",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.202"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599869,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.243: INFO: Pod "webserver-deployment-9b4f5bf69-z4jx9" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-z4jx9",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-6304",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "32cf964c-4385-49d8-92bb-afa7ce890292",
      ResourceVersion: (string) (len=4) "2822",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599867,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "d1d81b01-b6a2-4e8d-a5a8-6cc0446daf38",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 64 31  64 38 31 62 30 31 2d 62  |d\":\"d1d81b01-b|
              00000090  36 61 32 2d 34 65 38 64  2d 61 35 61 38 2d 36 63  |6a2-4e8d-a5a8-6c|
              000000a0  63 30 34 34 36 64 61 66  33 38 5c 22 7d 22 3a 7b  |c0446daf38\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=706) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 70 6f 64 49 50 22 3a  7b 7d 2c 22 66 3a 70 6f  |:podIP":{},"f:po|
              00000270  64 49 50 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |dIPs":{".":{},"k|
              00000280  3a 7b 5c 22 69 70 5c 22  3a 5c 22 31 37 32 2e 32  |:{\"ip\":\"172.2|
              00000290  30 2e 36 39 2e 37 33 5c  22 7d 22 3a 7b 22 2e 22  |0.69.73\"}":{"."|
              000002a0  3a 7b 7d 2c 22 66 3a 69  70 22 3a 7b 7d 7d 7d 2c  |:{},"f:ip":{}}},|
              000002b0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000002c0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-9fqls",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-9fqls",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599869,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839599867,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.203",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.203"
        }
      },
      PodIP: (string) (len=12) "172.20.69.73",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "172.20.69.73"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839599867,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:11:11.244: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-6304" for this suite. @ 12/31/23 06:11:11.246
• [8.166 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected combined should project all components that make up the projection API [Projection] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_combined.go:44
  STEP: Creating a kubernetes client @ 12/31/23 06:11:11.249
  Dec 31 06:11:11.249: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:11:11.25
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:11:11.256
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:11:11.257
  STEP: Creating configMap with name configmap-projected-all-test-volume-8faed3d1-ec73-47c6-8da8-a0483e8242a5 @ 12/31/23 06:11:11.258
  STEP: Creating secret with name secret-projected-all-test-volume-c5f70300-5d9b-4994-a02f-b363feb6f4c6 @ 12/31/23 06:11:11.26
  STEP: Creating a pod to test Check all projections for projected volume plugin @ 12/31/23 06:11:11.262
  STEP: Saw pod success @ 12/31/23 06:11:15.273
  Dec 31 06:11:15.274: INFO: Trying to get logs from node worker2 pod projected-volume-2ee7bbea-3677-409b-b1ad-68c7685346d5 container projected-all-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 06:11:15.276
  Dec 31 06:11:15.285: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7764" for this suite. @ 12/31/23 06:11:15.286
• [4.039 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/table_conversion.go:154
  STEP: Creating a kubernetes client @ 12/31/23 06:11:15.288
  Dec 31 06:11:15.288: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename tables @ 12/31/23 06:11:15.289
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:11:15.296
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:11:15.298
  Dec 31 06:11:15.300: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "tables-9571" for this suite. @ 12/31/23 06:11:15.302
• [0.015 seconds]
------------------------------
SS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_secret.go:67
  STEP: Creating a kubernetes client @ 12/31/23 06:11:15.303
  Dec 31 06:11:15.303: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:11:15.304
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:11:15.31
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:11:15.311
  STEP: Creating projection with secret that has name projected-secret-test-736abf1e-e82b-4981-b687-611d2a76c860 @ 12/31/23 06:11:15.313
  STEP: Creating a pod to test consume secrets @ 12/31/23 06:11:15.314
  STEP: Saw pod success @ 12/31/23 06:11:19.35
  Dec 31 06:11:19.351: INFO: Trying to get logs from node worker2 pod pod-projected-secrets-47fa4950-e1f7-48de-9751-4b218d662c9c container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 06:11:19.353
  Dec 31 06:11:19.362: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6713" for this suite. @ 12/31/23 06:11:19.363
• [4.062 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/watch.go:60
  STEP: Creating a kubernetes client @ 12/31/23 06:11:19.366
  Dec 31 06:11:19.366: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename watch @ 12/31/23 06:11:19.366
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:11:19.373
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:11:19.374
  STEP: creating a watch on configmaps with label A @ 12/31/23 06:11:19.376
  STEP: creating a watch on configmaps with label B @ 12/31/23 06:11:19.376
  STEP: creating a watch on configmaps with label A or B @ 12/31/23 06:11:19.377
  STEP: creating a configmap with label A and ensuring the correct watchers observe the notification @ 12/31/23 06:11:19.377
  Dec 31 06:11:19.379: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-3177  c9893b4b-bda7-4038-9206-adf65cadfaf5 3460 0 2023-12-31 06:11:19 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-12-31 06:11:19 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:11:19.379: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-3177  c9893b4b-bda7-4038-9206-adf65cadfaf5 3460 0 2023-12-31 06:11:19 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-12-31 06:11:19 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying configmap A and ensuring the correct watchers observe the notification @ 12/31/23 06:11:19.379
  Dec 31 06:11:19.382: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-3177  c9893b4b-bda7-4038-9206-adf65cadfaf5 3461 0 2023-12-31 06:11:19 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-12-31 06:11:19 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:11:19.382: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-3177  c9893b4b-bda7-4038-9206-adf65cadfaf5 3461 0 2023-12-31 06:11:19 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-12-31 06:11:19 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying configmap A again and ensuring the correct watchers observe the notification @ 12/31/23 06:11:19.382
  Dec 31 06:11:19.384: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-3177  c9893b4b-bda7-4038-9206-adf65cadfaf5 3462 0 2023-12-31 06:11:19 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-12-31 06:11:19 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:11:19.385: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-3177  c9893b4b-bda7-4038-9206-adf65cadfaf5 3462 0 2023-12-31 06:11:19 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-12-31 06:11:19 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: deleting configmap A and ensuring the correct watchers observe the notification @ 12/31/23 06:11:19.385
  Dec 31 06:11:19.387: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-3177  c9893b4b-bda7-4038-9206-adf65cadfaf5 3463 0 2023-12-31 06:11:19 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-12-31 06:11:19 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:11:19.387: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-3177  c9893b4b-bda7-4038-9206-adf65cadfaf5 3463 0 2023-12-31 06:11:19 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2023-12-31 06:11:19 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: creating a configmap with label B and ensuring the correct watchers observe the notification @ 12/31/23 06:11:19.387
  Dec 31 06:11:19.388: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-3177  2b1fa8ad-458c-424f-a816-3cd85b423657 3464 0 2023-12-31 06:11:19 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2023-12-31 06:11:19 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:11:19.388: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-3177  2b1fa8ad-458c-424f-a816-3cd85b423657 3464 0 2023-12-31 06:11:19 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2023-12-31 06:11:19 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: deleting configmap B and ensuring the correct watchers observe the notification @ 12/31/23 06:11:29.39
  Dec 31 06:11:29.393: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-3177  2b1fa8ad-458c-424f-a816-3cd85b423657 3510 0 2023-12-31 06:11:19 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2023-12-31 06:11:19 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:11:29.393: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-3177  2b1fa8ad-458c-424f-a816-3cd85b423657 3510 0 2023-12-31 06:11:19 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2023-12-31 06:11:19 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:11:39.395: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-3177" for this suite. @ 12/31/23 06:11:39.397
• [20.034 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/init_container.go:335
  STEP: Creating a kubernetes client @ 12/31/23 06:11:39.399
  Dec 31 06:11:39.399: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename init-container @ 12/31/23 06:11:39.4
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:11:39.407
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:11:39.409
  STEP: creating the pod @ 12/31/23 06:11:39.41
  Dec 31 06:11:39.410: INFO: PodSpec: initContainers in spec.initContainers
  Dec 31 06:12:25.401: INFO: init container has failed twice: &v1.Pod{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"pod-init-e8e56e78-a6d5-4471-bc98-ff262aead8ff", GenerateName:"", Namespace:"init-container-9169", SelfLink:"", UID:"d38bc3e9-4f91-4d47-bcbe-3a70db913491", ResourceVersion:"3638", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 6, 11, 39, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"name":"foo", "time":"410611551"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 6, 11, 39, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0044cae88), Subresource:""}, v1.ManagedFieldsEntry{Manager:"kubelet", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 6, 12, 25, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0044caeb8), Subresource:"status"}}}, Spec:v1.PodSpec{Volumes:[]v1.Volume{v1.Volume{Name:"kube-api-access-fvpfg", VolumeSource:v1.VolumeSource{HostPath:(*v1.HostPathVolumeSource)(nil), EmptyDir:(*v1.EmptyDirVolumeSource)(nil), GCEPersistentDisk:(*v1.GCEPersistentDiskVolumeSource)(nil), AWSElasticBlockStore:(*v1.AWSElasticBlockStoreVolumeSource)(nil), GitRepo:(*v1.GitRepoVolumeSource)(nil), Secret:(*v1.SecretVolumeSource)(nil), NFS:(*v1.NFSVolumeSource)(nil), ISCSI:(*v1.ISCSIVolumeSource)(nil), Glusterfs:(*v1.GlusterfsVolumeSource)(nil), PersistentVolumeClaim:(*v1.PersistentVolumeClaimVolumeSource)(nil), RBD:(*v1.RBDVolumeSource)(nil), FlexVolume:(*v1.FlexVolumeSource)(nil), Cinder:(*v1.CinderVolumeSource)(nil), CephFS:(*v1.CephFSVolumeSource)(nil), Flocker:(*v1.FlockerVolumeSource)(nil), DownwardAPI:(*v1.DownwardAPIVolumeSource)(nil), FC:(*v1.FCVolumeSource)(nil), AzureFile:(*v1.AzureFileVolumeSource)(nil), ConfigMap:(*v1.ConfigMapVolumeSource)(nil), VsphereVolume:(*v1.VsphereVirtualDiskVolumeSource)(nil), Quobyte:(*v1.QuobyteVolumeSource)(nil), AzureDisk:(*v1.AzureDiskVolumeSource)(nil), PhotonPersistentDisk:(*v1.PhotonPersistentDiskVolumeSource)(nil), Projected:(*v1.ProjectedVolumeSource)(0xc005ae4bc0), PortworxVolume:(*v1.PortworxVolumeSource)(nil), ScaleIO:(*v1.ScaleIOVolumeSource)(nil), StorageOS:(*v1.StorageOSVolumeSource)(nil), CSI:(*v1.CSIVolumeSource)(nil), Ephemeral:(*v1.EphemeralVolumeSource)(nil)}}}, InitContainers:[]v1.Container{v1.Container{Name:"init1", Image:"registry.k8s.io/e2e-test-images/busybox:1.36.1-1", Command:[]string{"/bin/false"}, Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), Requests:v1.ResourceList(nil), Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-fvpfg", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}, v1.Container{Name:"init2", Image:"registry.k8s.io/e2e-test-images/busybox:1.36.1-1", Command:[]string{"/bin/true"}, Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), Requests:v1.ResourceList(nil), Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-fvpfg", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}}, Containers:[]v1.Container{v1.Container{Name:"run1", Image:"registry.k8s.io/pause:3.9", Command:[]string(nil), Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:100, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"100m", Format:"DecimalSI"}}, Requests:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:100, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"100m", Format:"DecimalSI"}}, Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-fvpfg", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}}, EphemeralContainers:[]v1.EphemeralContainer(nil), RestartPolicy:"Always", TerminationGracePeriodSeconds:(*int64)(0xc0037f3448), ActiveDeadlineSeconds:(*int64)(nil), DNSPolicy:"ClusterFirst", NodeSelector:map[string]string(nil), ServiceAccountName:"default", DeprecatedServiceAccount:"default", AutomountServiceAccountToken:(*bool)(nil), NodeName:"worker3", HostNetwork:false, HostPID:false, HostIPC:false, ShareProcessNamespace:(*bool)(nil), SecurityContext:(*v1.PodSecurityContext)(0xc0000c3650), ImagePullSecrets:[]v1.LocalObjectReference(nil), Hostname:"", Subdomain:"", Affinity:(*v1.Affinity)(nil), SchedulerName:"default-scheduler", Tolerations:[]v1.Toleration{v1.Toleration{Key:"node.kubernetes.io/not-ready", Operator:"Exists", Value:"", Effect:"NoExecute", TolerationSeconds:(*int64)(0xc0037f34d0)}, v1.Toleration{Key:"node.kubernetes.io/unreachable", Operator:"Exists", Value:"", Effect:"NoExecute", TolerationSeconds:(*int64)(0xc0037f34f0)}}, HostAliases:[]v1.HostAlias(nil), PriorityClassName:"", Priority:(*int32)(0xc0037f34f8), DNSConfig:(*v1.PodDNSConfig)(nil), ReadinessGates:[]v1.PodReadinessGate(nil), RuntimeClassName:(*string)(nil), EnableServiceLinks:(*bool)(0xc0037f34fc), PreemptionPolicy:(*v1.PreemptionPolicy)(0xc000397080), Overhead:v1.ResourceList(nil), TopologySpreadConstraints:[]v1.TopologySpreadConstraint(nil), SetHostnameAsFQDN:(*bool)(nil), OS:(*v1.PodOS)(nil), HostUsers:(*bool)(nil), SchedulingGates:[]v1.PodSchedulingGate(nil), ResourceClaims:[]v1.PodResourceClaim(nil)}, Status:v1.PodStatus{Phase:"Pending", Conditions:[]v1.PodCondition{v1.PodCondition{Type:"PodReadyToStartContainers", Status:"True", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2023, time.December, 31, 6, 11, 41, 0, time.Local), Reason:"", Message:""}, v1.PodCondition{Type:"Initialized", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2023, time.December, 31, 6, 11, 39, 0, time.Local), Reason:"ContainersNotInitialized", Message:"containers with incomplete status: [init1 init2]"}, v1.PodCondition{Type:"Ready", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2023, time.December, 31, 6, 11, 39, 0, time.Local), Reason:"ContainersNotReady", Message:"containers with unready status: [run1]"}, v1.PodCondition{Type:"ContainersReady", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2023, time.December, 31, 6, 11, 39, 0, time.Local), Reason:"ContainersNotReady", Message:"containers with unready status: [run1]"}, v1.PodCondition{Type:"PodScheduled", Status:"True", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2023, time.December, 31, 6, 11, 39, 0, time.Local), Reason:"", Message:""}}, Message:"", Reason:"", NominatedNodeName:"", HostIP:"10.255.0.204", HostIPs:[]v1.HostIP{v1.HostIP{IP:"10.255.0.204"}}, PodIP:"172.20.169.153", PodIPs:[]v1.PodIP{v1.PodIP{IP:"172.20.169.153"}}, StartTime:time.Date(2023, time.December, 31, 6, 11, 39, 0, time.Local), InitContainerStatuses:[]v1.ContainerStatus{v1.ContainerStatus{Name:"init1", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(0xc0000c3730)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(0xc0000c37a0)}, Ready:false, RestartCount:3, Image:"registry.k8s.io/e2e-test-images/busybox:1.36.1-1", ImageID:"registry.k8s.io/e2e-test-images/busybox@sha256:a9155b13325b2abef48e71de77bb8ac015412a566829f621d06bfae5c699b1b9", ContainerID:"containerd://6ddfed46dbd868e5c8f0c6b5933d86f293483cd28cf342f49c5f5fa14d86526b", Started:(*bool)(0xc0037f359a), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}, v1.ContainerStatus{Name:"init2", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(0xc005ae4c40), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, Ready:false, RestartCount:0, Image:"registry.k8s.io/e2e-test-images/busybox:1.36.1-1", ImageID:"", ContainerID:"", Started:(*bool)(0xc0037f35af), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}}, ContainerStatuses:[]v1.ContainerStatus{v1.ContainerStatus{Name:"run1", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(0xc005ae4c20), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, Ready:false, RestartCount:0, Image:"registry.k8s.io/pause:3.9", ImageID:"", ContainerID:"", Started:(*bool)(0xc0037f357f), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}}, QOSClass:"Burstable", EphemeralContainerStatuses:[]v1.ContainerStatus(nil), Resize:"", ResourceClaimStatuses:[]v1.PodResourceClaimStatus(nil)}}
  Dec 31 06:12:25.401: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-9169" for this suite. @ 12/31/23 06:12:25.403
• [46.006 seconds]
------------------------------
SS
------------------------------
[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/daemon_set.go:205
  STEP: Creating a kubernetes client @ 12/31/23 06:12:25.406
  Dec 31 06:12:25.406: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename daemonsets @ 12/31/23 06:12:25.406
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:12:25.414
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:12:25.415
  Dec 31 06:12:25.431: INFO: Creating daemon "daemon-set" with a node selector
  STEP: Initially, daemon pods should not be running on any nodes. @ 12/31/23 06:12:25.434
  Dec 31 06:12:25.442: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 06:12:25.442: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  STEP: Change node label to blue, check that daemon pod is launched. @ 12/31/23 06:12:25.442
  Dec 31 06:12:25.453: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 06:12:25.453: INFO: Node 10.255.0.202 is running 0 daemon pod, expected 1
  Dec 31 06:12:26.453: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 06:12:26.453: INFO: Node 10.255.0.202 is running 0 daemon pod, expected 1
  Dec 31 06:12:27.454: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Dec 31 06:12:27.454: INFO: Number of running nodes: 1, number of available pods: 1 in daemonset daemon-set
  STEP: Update the node label to green, and wait for daemons to be unscheduled @ 12/31/23 06:12:27.455
  Dec 31 06:12:27.465: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Dec 31 06:12:27.465: INFO: Number of running nodes: 0, number of available pods: 1 in daemonset daemon-set
  Dec 31 06:12:28.462: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 06:12:28.462: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  STEP: Update DaemonSet node selector to green, and change its update strategy to RollingUpdate @ 12/31/23 06:12:28.462
  Dec 31 06:12:28.466: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 06:12:28.466: INFO: Node 10.255.0.202 is running 0 daemon pod, expected 1
  Dec 31 06:12:29.467: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 06:12:29.467: INFO: Node 10.255.0.202 is running 0 daemon pod, expected 1
  Dec 31 06:12:30.468: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Dec 31 06:12:30.468: INFO: Number of running nodes: 1, number of available pods: 1 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 12/31/23 06:12:30.47
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-1491, will wait for the garbage collector to delete the pods @ 12/31/23 06:12:30.47
  Dec 31 06:12:30.524: INFO: Deleting DaemonSet.extensions daemon-set took: 2.064313ms
  Dec 31 06:12:30.625: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.680024ms
  Dec 31 06:12:31.936: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 06:12:31.936: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Dec 31 06:12:31.938: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"3738"},"items":null}

  Dec 31 06:12:31.939: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"3738"},"items":null}

  Dec 31 06:12:31.949: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-1491" for this suite. @ 12/31/23 06:12:31.95
• [6.548 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/lifecycle_hook.go:214
  STEP: Creating a kubernetes client @ 12/31/23 06:12:31.955
  Dec 31 06:12:31.955: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 12/31/23 06:12:31.955
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:12:31.963
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:12:31.964
  STEP: create the container to handle the HTTPGet hook request. @ 12/31/23 06:12:31.97
  STEP: create the pod with lifecycle hook @ 12/31/23 06:12:33.98
  STEP: delete the pod with lifecycle hook @ 12/31/23 06:12:35.987
  STEP: check prestop hook @ 12/31/23 06:12:37.993
  Dec 31 06:12:38.000: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-228" for this suite. @ 12/31/23 06:12:38.002
• [6.049 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1698
  STEP: Creating a kubernetes client @ 12/31/23 06:12:38.004
  Dec 31 06:12:38.004: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 06:12:38.005
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:12:38.016
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:12:38.017
  STEP: creating Agnhost RC @ 12/31/23 06:12:38.018
  Dec 31 06:12:38.018: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-2601 create -f -'
  Dec 31 06:12:38.096: INFO: stderr: ""
  Dec 31 06:12:38.096: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 12/31/23 06:12:38.096
  Dec 31 06:12:39.099: INFO: Selector matched 1 pods for map[app:agnhost]
  Dec 31 06:12:39.099: INFO: Found 0 / 1
  Dec 31 06:12:40.098: INFO: Selector matched 1 pods for map[app:agnhost]
  Dec 31 06:12:40.098: INFO: Found 1 / 1
  Dec 31 06:12:40.099: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  STEP: patching all pods @ 12/31/23 06:12:40.099
  Dec 31 06:12:40.100: INFO: Selector matched 1 pods for map[app:agnhost]
  Dec 31 06:12:40.100: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Dec 31 06:12:40.100: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-2601 patch pod agnhost-primary-ck47f -p {"metadata":{"annotations":{"x":"y"}}}'
  Dec 31 06:12:40.142: INFO: stderr: ""
  Dec 31 06:12:40.142: INFO: stdout: "pod/agnhost-primary-ck47f patched\n"
  STEP: checking annotations @ 12/31/23 06:12:40.142
  Dec 31 06:12:40.143: INFO: Selector matched 1 pods for map[app:agnhost]
  Dec 31 06:12:40.143: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Dec 31 06:12:40.143: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-2601" for this suite. @ 12/31/23 06:12:40.145
• [2.142 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:163
  STEP: Creating a kubernetes client @ 12/31/23 06:12:40.147
  Dec 31 06:12:40.147: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename resourcequota @ 12/31/23 06:12:40.147
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:12:40.153
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:12:40.155
  STEP: Discovering how many secrets are in namespace by default @ 12/31/23 06:12:40.156
  STEP: Counting existing ResourceQuota @ 12/31/23 06:12:45.158
  STEP: Creating a ResourceQuota @ 12/31/23 06:12:50.159
  STEP: Ensuring resource quota status is calculated @ 12/31/23 06:12:50.162
  STEP: Creating a Secret @ 12/31/23 06:12:52.165
  STEP: Ensuring resource quota status captures secret creation @ 12/31/23 06:12:52.171
  STEP: Deleting a secret @ 12/31/23 06:12:54.173
  STEP: Ensuring resource quota status released usage @ 12/31/23 06:12:54.175
  Dec 31 06:12:56.177: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-3294" for this suite. @ 12/31/23 06:12:56.178
• [16.035 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/containers.go:41
  STEP: Creating a kubernetes client @ 12/31/23 06:12:56.181
  Dec 31 06:12:56.181: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename containers @ 12/31/23 06:12:56.182
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:12:56.187
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:12:56.189
  Dec 31 06:12:58.199: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-994" for this suite. @ 12/31/23 06:12:58.2
• [2.021 seconds]
------------------------------
SS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/preemption.go:624
  STEP: Creating a kubernetes client @ 12/31/23 06:12:58.202
  Dec 31 06:12:58.202: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename sched-preemption @ 12/31/23 06:12:58.203
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:12:58.209
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:12:58.21
  Dec 31 06:12:58.217: INFO: Waiting up to 1m0s for all nodes to be ready
  Dec 31 06:13:58.219: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Creating a kubernetes client @ 12/31/23 06:13:58.22
  Dec 31 06:13:58.220: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename sched-preemption-path @ 12/31/23 06:13:58.221
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:13:58.228
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:13:58.23
  STEP: Finding an available node @ 12/31/23 06:13:58.231
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 12/31/23 06:13:58.231
  STEP: Explicitly delete pod here to free the resource it takes. @ 12/31/23 06:14:00.239
  Dec 31 06:14:00.243: INFO: found a healthy node: worker3
  Dec 31 06:14:06.272: INFO: pods created so far: [1 1 1]
  Dec 31 06:14:06.272: INFO: length of pods created so far: 3
  Dec 31 06:14:08.277: INFO: pods created so far: [2 2 1]
  Dec 31 06:14:15.305: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-path-9649" for this suite. @ 12/31/23 06:14:15.306
  Dec 31 06:14:15.309: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-5448" for this suite. @ 12/31/23 06:14:15.31
• [77.110 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/custom_resource_definition.go:86
  STEP: Creating a kubernetes client @ 12/31/23 06:14:15.313
  Dec 31 06:14:15.313: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename custom-resource-definition @ 12/31/23 06:14:15.313
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:14:15.32
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:14:15.321
  Dec 31 06:14:15.322: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:14:21.414: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-1132" for this suite. @ 12/31/23 06:14:21.416
• [6.111 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:301
  STEP: Creating a kubernetes client @ 12/31/23 06:14:21.424
  Dec 31 06:14:21.424: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 06:14:21.424
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:14:21.431
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:14:21.432
  STEP: Setting up server cert @ 12/31/23 06:14:21.445
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 06:14:21.69
  STEP: Deploying the webhook pod @ 12/31/23 06:14:21.694
  STEP: Wait for the deployment to be ready @ 12/31/23 06:14:21.699
  Dec 31 06:14:21.702: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 12/31/23 06:14:23.707
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 06:14:23.711
  Dec 31 06:14:24.712: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the crd webhook via the AdmissionRegistration API @ 12/31/23 06:14:24.714
  STEP: Creating a custom resource definition that should be denied by the webhook @ 12/31/23 06:14:24.723
  Dec 31 06:14:24.723: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:14:24.750: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-1569" for this suite. @ 12/31/23 06:14:24.751
  STEP: Destroying namespace "webhook-markers-4224" for this suite. @ 12/31/23 06:14:24.754
• [3.333 seconds]
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:220
  STEP: Creating a kubernetes client @ 12/31/23 06:14:24.757
  Dec 31 06:14:24.757: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir @ 12/31/23 06:14:24.758
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:14:24.764
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:14:24.766
  STEP: Creating a pod to test emptydir 0777 on node default medium @ 12/31/23 06:14:24.768
  STEP: Saw pod success @ 12/31/23 06:14:26.778
  Dec 31 06:14:26.779: INFO: Trying to get logs from node worker3 pod pod-e732102c-b8fe-4efe-bb14-c77b311b0e78 container test-container: <nil>
  STEP: delete the pod @ 12/31/23 06:14:26.781
  Dec 31 06:14:26.787: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-8094" for this suite. @ 12/31/23 06:14:26.788
• [2.033 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance] [sig-apps, Conformance]
test/e2e/apps/job.go:572
  STEP: Creating a kubernetes client @ 12/31/23 06:14:26.79
  Dec 31 06:14:26.790: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename job @ 12/31/23 06:14:26.791
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:14:26.796
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:14:26.798
  STEP: Creating a job @ 12/31/23 06:14:26.799
  STEP: Ensuring job reaches completions @ 12/31/23 06:14:26.802
  Dec 31 06:14:34.804: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-2384" for this suite. @ 12/31/23 06:14:34.806
• [8.019 seconds]
------------------------------
SS
------------------------------
[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance] [sig-auth, Conformance]
test/e2e/auth/service_accounts.go:742
  STEP: Creating a kubernetes client @ 12/31/23 06:14:34.809
  Dec 31 06:14:34.809: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename svcaccounts @ 12/31/23 06:14:34.809
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:14:34.815
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:14:34.817
  Dec 31 06:14:34.819: INFO: Got root ca configmap in namespace "svcaccounts-416"
  Dec 31 06:14:34.821: INFO: Deleted root ca configmap in namespace "svcaccounts-416"
  STEP: waiting for a new root ca configmap created @ 12/31/23 06:14:35.321
  Dec 31 06:14:35.323: INFO: Recreated root ca configmap in namespace "svcaccounts-416"
  Dec 31 06:14:35.325: INFO: Updated root ca configmap in namespace "svcaccounts-416"
  STEP: waiting for the root ca configmap reconciled @ 12/31/23 06:14:35.826
  Dec 31 06:14:35.827: INFO: Reconciled root ca configmap in namespace "svcaccounts-416"
  Dec 31 06:14:35.827: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-416" for this suite. @ 12/31/23 06:14:35.828
• [1.022 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a GRPC liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:527
  STEP: Creating a kubernetes client @ 12/31/23 06:14:35.832
  Dec 31 06:14:35.832: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-probe @ 12/31/23 06:14:35.833
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:14:35.84
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:14:35.842
  STEP: Creating pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671 @ 12/31/23 06:14:35.843
  STEP: checking the pod's current state and verifying that restartCount is present @ 12/31/23 06:14:37.85
  Dec 31 06:14:37.851: INFO: Initial restart count of pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 is 0
  Dec 31 06:14:37.852: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:14:39.854: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:14:41.857: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:14:43.860: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:14:45.861: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:14:47.864: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:14:49.866: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:14:51.869: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:14:53.871: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:14:55.874: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:14:57.876: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:14:59.879: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:01.882: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:03.884: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:05.886: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:07.889: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:09.891: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:11.893: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:13.895: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:15.898: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:17.900: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:19.902: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:21.904: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:23.906: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:25.908: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:27.911: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:29.913: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:31.916: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:33.918: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:35.920: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:37.923: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:39.925: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:41.928: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:43.930: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:45.931: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:47.934: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:49.936: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:51.938: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:53.941: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:55.943: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:57.945: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:15:59.947: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:01.950: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:03.952: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:05.954: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:07.957: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:09.959: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:11.962: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:13.963: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:15.966: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:17.969: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:19.971: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:21.973: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:23.975: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:25.977: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:27.979: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:29.982: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:31.984: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:33.986: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:35.988: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:37.989: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:39.992: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:41.994: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:43.996: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:45.998: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:48.000: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:50.003: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:52.004: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:54.006: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:56.008: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:16:58.011: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:00.013: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:02.016: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:04.017: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:06.020: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:08.023: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:10.025: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:12.027: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:14.029: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:16.032: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:18.034: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:20.037: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:22.038: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:24.040: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:26.042: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:28.044: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:30.046: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:32.048: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:34.050: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:36.053: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:38.055: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:40.057: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:42.059: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:44.061: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:46.062: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:48.065: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:50.067: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:52.069: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:54.071: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:56.073: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:17:58.075: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:00.077: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:02.080: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:04.082: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:06.083: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:08.086: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:10.089: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:12.090: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:14.092: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:16.094: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:18.097: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:20.099: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:22.101: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:24.103: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:26.105: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:28.107: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:30.110: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:32.111: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:34.114: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  Dec 31 06:18:36.116: INFO: Get pod test-grpc-37a840c1-a125-4414-82be-2b7ca902abb5 in namespace container-probe-6671
  STEP: deleting the pod @ 12/31/23 06:18:38.117
  Dec 31 06:18:38.123: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-6671" for this suite. @ 12/31/23 06:18:38.124
• [242.295 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-apps] Job should manage the lifecycle of a job [Conformance] [sig-apps, Conformance]
test/e2e/apps/job.go:855
  STEP: Creating a kubernetes client @ 12/31/23 06:18:38.127
  Dec 31 06:18:38.127: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename job @ 12/31/23 06:18:38.128
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:18:38.138
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:18:38.139
  STEP: Creating a suspended job @ 12/31/23 06:18:38.141
  STEP: Patching the Job @ 12/31/23 06:18:38.143
  STEP: Watching for Job to be patched @ 12/31/23 06:18:38.151
  Dec 31 06:18:38.152: INFO: Event ADDED observed for Job e2e-q4qpc in namespace job-967 with labels: map[e2e-job-label:e2e-q4qpc] and annotations: map[]
  Dec 31 06:18:38.152: INFO: Event MODIFIED observed for Job e2e-q4qpc in namespace job-967 with labels: map[e2e-job-label:e2e-q4qpc] and annotations: map[]
  Dec 31 06:18:38.152: INFO: Event MODIFIED found for Job e2e-q4qpc in namespace job-967 with labels: map[e2e-job-label:e2e-q4qpc e2e-q4qpc:patched] and annotations: map[]
  STEP: Updating the job @ 12/31/23 06:18:38.152
  STEP: Watching for Job to be updated @ 12/31/23 06:18:38.155
  Dec 31 06:18:38.156: INFO: Event MODIFIED found for Job e2e-q4qpc in namespace job-967 with labels: map[e2e-job-label:e2e-q4qpc e2e-q4qpc:patched] and annotations: map[updated:true]
  Dec 31 06:18:38.156: INFO: Found Job annotations: map[string]string{"updated":"true"}
  STEP: Listing all Jobs with LabelSelector @ 12/31/23 06:18:38.156
  Dec 31 06:18:38.157: INFO: Job: e2e-q4qpc as labels: map[e2e-job-label:e2e-q4qpc e2e-q4qpc:patched]
  STEP: Waiting for job to complete @ 12/31/23 06:18:38.157
  STEP: Delete a job collection with a labelselector @ 12/31/23 06:18:44.158
  STEP: Watching for Job to be deleted @ 12/31/23 06:18:44.161
  Dec 31 06:18:44.161: INFO: Event MODIFIED observed for Job e2e-q4qpc in namespace job-967 with labels: map[e2e-job-label:e2e-q4qpc e2e-q4qpc:patched] and annotations: map[updated:true]
  Dec 31 06:18:44.162: INFO: Event MODIFIED observed for Job e2e-q4qpc in namespace job-967 with labels: map[e2e-job-label:e2e-q4qpc e2e-q4qpc:patched] and annotations: map[updated:true]
  Dec 31 06:18:44.162: INFO: Event MODIFIED observed for Job e2e-q4qpc in namespace job-967 with labels: map[e2e-job-label:e2e-q4qpc e2e-q4qpc:patched] and annotations: map[updated:true]
  Dec 31 06:18:44.162: INFO: Event MODIFIED observed for Job e2e-q4qpc in namespace job-967 with labels: map[e2e-job-label:e2e-q4qpc e2e-q4qpc:patched] and annotations: map[updated:true]
  Dec 31 06:18:44.162: INFO: Event MODIFIED observed for Job e2e-q4qpc in namespace job-967 with labels: map[e2e-job-label:e2e-q4qpc e2e-q4qpc:patched] and annotations: map[updated:true]
  Dec 31 06:18:44.162: INFO: Event DELETED found for Job e2e-q4qpc in namespace job-967 with labels: map[e2e-job-label:e2e-q4qpc e2e-q4qpc:patched] and annotations: map[updated:true]
  STEP: Relist jobs to confirm deletion @ 12/31/23 06:18:44.162
  Dec 31 06:18:44.163: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-967" for this suite. @ 12/31/23 06:18:44.164
• [6.040 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1373
  STEP: Creating a kubernetes client @ 12/31/23 06:18:44.167
  Dec 31 06:18:44.167: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 06:18:44.168
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:18:44.178
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:18:44.179
  STEP: validating cluster-info @ 12/31/23 06:18:44.181
  Dec 31 06:18:44.181: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-3963 cluster-info'
  Dec 31 06:18:44.218: INFO: stderr: ""
  Dec 31 06:18:44.218: INFO: stdout: "\x1b[0;32mKubernetes control plane\x1b[0m is running at \x1b[0;33mhttps://10.68.0.1:443\x1b[0m\n\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n"
  Dec 31 06:18:44.218: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-3963" for this suite. @ 12/31/23 06:18:44.219
• [0.054 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment Deployment should have a working scale subresource [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:150
  STEP: Creating a kubernetes client @ 12/31/23 06:18:44.221
  Dec 31 06:18:44.221: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename deployment @ 12/31/23 06:18:44.222
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:18:44.228
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:18:44.229
  Dec 31 06:18:44.231: INFO: Creating simple deployment test-new-deployment
  Dec 31 06:18:44.236: INFO: deployment "test-new-deployment" doesn't have the required revision set
  STEP: getting scale subresource @ 12/31/23 06:18:46.241
  STEP: updating a scale subresource @ 12/31/23 06:18:46.242
  STEP: verifying the deployment Spec.Replicas was modified @ 12/31/23 06:18:46.244
  STEP: Patch a scale subresource @ 12/31/23 06:18:46.245
  Dec 31 06:18:46.259: INFO: Deployment "test-new-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=19) "test-new-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9592",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "f34eb22e-04cb-418f-acd6-574bd5e840e0",
      ResourceVersion: (string) (len=4) "5217",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839600324,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)(<nil>),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=28) {
              00000000  7b 22 66 3a 73 70 65 63  22 3a 7b 22 66 3a 72 65  |{"f:spec":{"f:re|
              00000010  70 6c 69 63 61 73 22 3a  7b 7d 7d 7d              |plicas":{}}}|
            }
          }),
          Subresource: (string) (len=5) "scale"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=619) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |onds":{},"f:revi|
              00000060  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000070  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              00000090  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000a0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000b0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000c0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000d0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000e0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              000000f0  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000100  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000110  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000120  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000130  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000140  6d 65 5c 22 3a 5c 22 68  74 74 70 64 5c 22 7d 22  |me\":\"httpd\"}"|
              00000150  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000160  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000170  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000180  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000190  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              000001a0  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              000001b0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001c0  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000001d0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000001e0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000001f0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              00000200  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              00000210  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              00000220  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000230  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000240  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000250  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000260  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(4),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=72) "ReplicaSet \"test-new-deployment-557759b7c7\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Dec 31 06:18:46.262: INFO: New ReplicaSet "test-new-deployment-557759b7c7" of Deployment "test-new-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-new-deployment-557759b7c7",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9592",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6a294755-474c-499b-ab96-71495e2dc94e",
      ResourceVersion: (string) (len=4) "5222",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839600324,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=19) "test-new-deployment",
          UID: (types.UID) (len=36) "f34eb22e-04cb-418f-acd6-574bd5e840e0",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600326,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 66 33 34 65 62 32  32 65 2d 30 34 63 62 2d  |\"f34eb22e-04cb-|
              00000120  34 31 38 66 2d 61 63 64  36 2d 35 37 34 62 64 35  |418f-acd6-574bd5|
              00000130  65 38 34 30 65 30 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |e840e0\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600326,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(2),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Dec 31 06:18:46.264: INFO: Pod "test-new-deployment-557759b7c7-7mh4f" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "test-new-deployment-557759b7c7-7mh4f",
      GenerateName: (string) (len=31) "test-new-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-9592",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d94a3310-1a9b-43d5-8ee9-e88c562d67a8",
      ResourceVersion: (string) (len=4) "5208",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839600324,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "test-new-deployment-557759b7c7",
          UID: (types.UID) (len=36) "6a294755-474c-499b-ab96-71495e2dc94e",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 36 61  32 39 34 37 35 35 2d 34  |d\":\"6a294755-4|
              00000090  37 34 63 2d 34 39 39 62  2d 61 62 39 36 2d 37 31  |74c-499b-ab96-71|
              000000a0  34 39 35 65 32 64 63 39  34 65 5c 22 7d 22 3a 7b  |495e2dc94e\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 36 39  2e 31 37 31 5c 22 7d 22  |2.20.169.171\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-fpp2h",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-fpp2h",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600324,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) (len=14) "172.20.169.171",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.169.171"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839600324,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839600324,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://32bfd4bd3d8fa5e568ba7b0910ce27b5f5a88ae8a5b01ce1a96e241270315f14",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:18:46.265: INFO: Pod "test-new-deployment-557759b7c7-vsdcd" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "test-new-deployment-557759b7c7-vsdcd",
      GenerateName: (string) (len=31) "test-new-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-9592",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "8c7ae11a-cebb-4b36-981e-ab480e767310",
      ResourceVersion: (string) (len=4) "5221",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839600326,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "test-new-deployment-557759b7c7",
          UID: (types.UID) (len=36) "6a294755-474c-499b-ab96-71495e2dc94e",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600326,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 36 61  32 39 34 37 35 35 2d 34  |d\":\"6a294755-4|
              00000090  37 34 63 2d 34 39 39 62  2d 61 62 39 36 2d 37 31  |74c-499b-ab96-71|
              000000a0  34 39 35 65 32 64 63 39  34 65 5c 22 7d 22 3a 7b  |495e2dc94e\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-xzpfv",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-xzpfv",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600326,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:18:46.266: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-9592" for this suite. @ 12/31/23 06:18:46.269
• [2.051 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-network] DNS should support configurable pod DNS nameservers [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:407
  STEP: Creating a kubernetes client @ 12/31/23 06:18:46.272
  Dec 31 06:18:46.272: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename dns @ 12/31/23 06:18:46.273
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:18:46.28
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:18:46.282
  STEP: Creating a pod with dnsPolicy=None and customized dnsConfig... @ 12/31/23 06:18:46.283
  Dec 31 06:18:46.287: INFO: Created pod &Pod{ObjectMeta:{test-dns-nameservers  dns-5828  01e9cd68-6894-4669-852f-f85742cf7811 5239 0 2023-12-31 06:18:46 +0000 UTC <nil> <nil> map[] map[] [] [] [{e2e.test Update v1 2023-12-31 06:18:46 +0000 UTC FieldsV1 {"f:spec":{"f:containers":{"k:{\"name\":\"agnhost-container\"}":{".":{},"f:args":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsConfig":{".":{},"f:nameservers":{},"f:searches":{}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}} }]},Spec:PodSpec{Volumes:[]Volume{Volume{Name:kube-api-access-57srd,VolumeSource:VolumeSource{HostPath:nil,EmptyDir:nil,GCEPersistentDisk:nil,AWSElasticBlockStore:nil,GitRepo:nil,Secret:nil,NFS:nil,ISCSI:nil,Glusterfs:nil,PersistentVolumeClaim:nil,RBD:nil,FlexVolume:nil,Cinder:nil,CephFS:nil,Flocker:nil,DownwardAPI:nil,FC:nil,AzureFile:nil,ConfigMap:nil,VsphereVolume:nil,Quobyte:nil,AzureDisk:nil,PhotonPersistentDisk:nil,PortworxVolume:nil,ScaleIO:nil,Projected:&ProjectedVolumeSource{Sources:[]VolumeProjection{VolumeProjection{Secret:nil,DownwardAPI:nil,ConfigMap:nil,ServiceAccountToken:&ServiceAccountTokenProjection{Audience:,ExpirationSeconds:*3607,Path:token,},ClusterTrustBundle:nil,},VolumeProjection{Secret:nil,DownwardAPI:nil,ConfigMap:&ConfigMapProjection{LocalObjectReference:LocalObjectReference{Name:kube-root-ca.crt,},Items:[]KeyToPath{KeyToPath{Key:ca.crt,Path:ca.crt,Mode:nil,},},Optional:nil,},ServiceAccountToken:nil,ClusterTrustBundle:nil,},VolumeProjection{Secret:nil,DownwardAPI:&DownwardAPIProjection{Items:[]DownwardAPIVolumeFile{DownwardAPIVolumeFile{Path:namespace,FieldRef:&ObjectFieldSelector{APIVersion:v1,FieldPath:metadata.namespace,},ResourceFieldRef:nil,Mode:nil,},},},ConfigMap:nil,ServiceAccountToken:nil,ClusterTrustBundle:nil,},},DefaultMode:*420,},StorageOS:nil,CSI:nil,Ephemeral:nil,},},},Containers:[]Container{Container{Name:agnhost-container,Image:registry.k8s.io/e2e-test-images/agnhost:2.45,Command:[],Args:[pause],WorkingDir:,Ports:[]ContainerPort{},Env:[]EnvVar{},Resources:ResourceRequirements{Limits:ResourceList{},Requests:ResourceList{},Claims:[]ResourceClaim{},},VolumeMounts:[]VolumeMount{VolumeMount{Name:kube-api-access-57srd,ReadOnly:true,MountPath:/var/run/secrets/kubernetes.io/serviceaccount,SubPath:,MountPropagation:nil,SubPathExpr:,},},LivenessProbe:nil,ReadinessProbe:nil,Lifecycle:nil,TerminationMessagePath:/dev/termination-log,ImagePullPolicy:IfNotPresent,SecurityContext:&SecurityContext{Capabilities:nil,Privileged:nil,SELinuxOptions:nil,RunAsUser:nil,RunAsNonRoot:nil,ReadOnlyRootFilesystem:nil,AllowPrivilegeEscalation:nil,RunAsGroup:nil,ProcMount:nil,WindowsOptions:nil,SeccompProfile:nil,},Stdin:false,StdinOnce:false,TTY:false,EnvFrom:[]EnvFromSource{},TerminationMessagePolicy:File,VolumeDevices:[]VolumeDevice{},StartupProbe:nil,ResizePolicy:[]ContainerResizePolicy{},RestartPolicy:nil,},},RestartPolicy:Always,TerminationGracePeriodSeconds:*0,ActiveDeadlineSeconds:nil,DNSPolicy:None,NodeSelector:map[string]string{},ServiceAccountName:default,DeprecatedServiceAccount:default,NodeName:,HostNetwork:false,HostPID:false,HostIPC:false,SecurityContext:&PodSecurityContext{SELinuxOptions:nil,RunAsUser:nil,RunAsNonRoot:nil,SupplementalGroups:[],FSGroup:nil,RunAsGroup:nil,Sysctls:[]Sysctl{},WindowsOptions:nil,FSGroupChangePolicy:nil,SeccompProfile:nil,},ImagePullSecrets:[]LocalObjectReference{},Hostname:,Subdomain:,Affinity:nil,SchedulerName:default-scheduler,InitContainers:[]Container{},AutomountServiceAccountToken:nil,Tolerations:[]Toleration{Toleration{Key:node.kubernetes.io/not-ready,Operator:Exists,Value:,Effect:NoExecute,TolerationSeconds:*300,},Toleration{Key:node.kubernetes.io/unreachable,Operator:Exists,Value:,Effect:NoExecute,TolerationSeconds:*300,},},HostAliases:[]HostAlias{},PriorityClassName:,Priority:*0,DNSConfig:&PodDNSConfig{Nameservers:[1.1.1.1],Searches:[resolv.conf.local],Options:[]PodDNSConfigOption{},},ShareProcessNamespace:nil,ReadinessGates:[]PodReadinessGate{},RuntimeClassName:nil,EnableServiceLinks:*true,PreemptionPolicy:*PreemptLowerPriority,Overhead:ResourceList{},TopologySpreadConstraints:[]TopologySpreadConstraint{},EphemeralContainers:[]EphemeralContainer{},SetHostnameAsFQDN:nil,OS:nil,HostUsers:nil,SchedulingGates:[]PodSchedulingGate{},ResourceClaims:[]PodResourceClaim{},},Status:PodStatus{Phase:Pending,Conditions:[]PodCondition{},Message:,Reason:,HostIP:,PodIP:,StartTime:<nil>,ContainerStatuses:[]ContainerStatus{},QOSClass:BestEffort,InitContainerStatuses:[]ContainerStatus{},NominatedNodeName:,PodIPs:[]PodIP{},EphemeralContainerStatuses:[]ContainerStatus{},Resize:,ResourceClaimStatuses:[]PodResourceClaimStatus{},HostIPs:[]HostIP{},},}
  STEP: Verifying customized DNS suffix list is configured on pod... @ 12/31/23 06:18:48.291
  Dec 31 06:18:48.291: INFO: ExecWithOptions {Command:[/agnhost dns-suffix] Namespace:dns-5828 PodName:test-dns-nameservers ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:18:48.291: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:18:48.292: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:18:48.292: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/dns-5828/pods/test-dns-nameservers/exec?command=%2Fagnhost&command=dns-suffix&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  STEP: Verifying customized DNS server is configured on pod... @ 12/31/23 06:18:48.349
  Dec 31 06:18:48.349: INFO: ExecWithOptions {Command:[/agnhost dns-server-list] Namespace:dns-5828 PodName:test-dns-nameservers ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:18:48.349: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:18:48.350: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:18:48.350: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/dns-5828/pods/test-dns-nameservers/exec?command=%2Fagnhost&command=dns-server-list&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Dec 31 06:18:48.396: INFO: Deleting pod test-dns-nameservers...
  Dec 31 06:18:48.404: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-5828" for this suite. @ 12/31/23 06:18:48.406
• [2.136 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtime.go:195
  STEP: Creating a kubernetes client @ 12/31/23 06:18:48.408
  Dec 31 06:18:48.408: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-runtime @ 12/31/23 06:18:48.409
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:18:48.414
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:18:48.415
  STEP: create the container @ 12/31/23 06:18:48.417
  W1231 06:18:48.421156      23 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 12/31/23 06:18:48.421
  STEP: get the container status @ 12/31/23 06:18:51.428
  STEP: the container should be terminated @ 12/31/23 06:18:51.429
  STEP: the termination message should be set @ 12/31/23 06:18:51.429
  Dec 31 06:18:51.429: INFO: Expected: &{DONE} to match Container's Termination Message: DONE --
  STEP: delete the container @ 12/31/23 06:18:51.429
  Dec 31 06:18:51.435: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-8280" for this suite. @ 12/31/23 06:18:51.436
• [3.030 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Secrets should fail to create secret due to empty secret key [Conformance] [sig-node, Conformance]
test/e2e/common/node/secrets.go:141
  STEP: Creating a kubernetes client @ 12/31/23 06:18:51.438
  Dec 31 06:18:51.438: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename secrets @ 12/31/23 06:18:51.438
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:18:51.444
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:18:51.446
  STEP: Creating projection with secret that has name secret-emptykey-test-6eefaf9c-62d9-43ef-a27f-26c5d22d762c @ 12/31/23 06:18:51.448
  Dec 31 06:18:51.449: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-8578" for this suite. @ 12/31/23 06:18:51.45
• [0.014 seconds]
------------------------------
SSSS
------------------------------
[sig-cli] Kubectl logs logs should be able to retrieve and filter logs [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/logs.go:114
  STEP: Creating a kubernetes client @ 12/31/23 06:18:51.452
  Dec 31 06:18:51.452: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl-logs @ 12/31/23 06:18:51.452
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:18:51.457
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:18:51.459
  STEP: creating an pod @ 12/31/23 06:18:51.46
  Dec 31 06:18:51.460: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-logs-6783 run logs-generator --image=registry.k8s.io/e2e-test-images/agnhost:2.45 --restart=Never --pod-running-timeout=2m0s -- logs-generator --log-lines-total 100 --run-duration 20s'
  Dec 31 06:18:51.501: INFO: stderr: ""
  Dec 31 06:18:51.501: INFO: stdout: "pod/logs-generator created\n"
  STEP: Waiting for log generator to start. @ 12/31/23 06:18:51.501
  Dec 31 06:18:51.501: INFO: Waiting up to 5m0s for 1 pods to be running and ready, or succeeded: [logs-generator]
  Dec 31 06:18:53.505: INFO: Wanted all 1 pods to be running and ready, or succeeded. Result: true. Pods: [logs-generator]
  STEP: checking for a matching strings @ 12/31/23 06:18:53.505
  Dec 31 06:18:53.505: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-logs-6783 logs logs-generator logs-generator'
  Dec 31 06:18:53.551: INFO: stderr: ""
  Dec 31 06:18:53.551: INFO: stdout: "I1231 06:18:52.112373       1 logs_generator.go:76] 0 POST /api/v1/namespaces/default/pods/7n5 352\nI1231 06:18:52.312477       1 logs_generator.go:76] 1 PUT /api/v1/namespaces/kube-system/pods/8zv 309\nI1231 06:18:52.512979       1 logs_generator.go:76] 2 GET /api/v1/namespaces/kube-system/pods/xxs4 492\nI1231 06:18:52.713262       1 logs_generator.go:76] 3 POST /api/v1/namespaces/kube-system/pods/jvt6 463\nI1231 06:18:52.912487       1 logs_generator.go:76] 4 PUT /api/v1/namespaces/ns/pods/m2d 513\nI1231 06:18:53.112744       1 logs_generator.go:76] 5 PUT /api/v1/namespaces/kube-system/pods/d7lb 316\nI1231 06:18:53.313024       1 logs_generator.go:76] 6 PUT /api/v1/namespaces/kube-system/pods/p7c 368\nI1231 06:18:53.513309       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/kube-system/pods/mhn 204\n"
  STEP: limiting log lines @ 12/31/23 06:18:53.551
  Dec 31 06:18:53.551: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-logs-6783 logs logs-generator logs-generator --tail=1'
  Dec 31 06:18:53.591: INFO: stderr: ""
  Dec 31 06:18:53.591: INFO: stdout: "I1231 06:18:53.513309       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/kube-system/pods/mhn 204\n"
  Dec 31 06:18:53.591: INFO: got output "I1231 06:18:53.513309       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/kube-system/pods/mhn 204\n"
  STEP: limiting log bytes @ 12/31/23 06:18:53.591
  Dec 31 06:18:53.591: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-logs-6783 logs logs-generator logs-generator --limit-bytes=1'
  Dec 31 06:18:53.631: INFO: stderr: ""
  Dec 31 06:18:53.631: INFO: stdout: "I"
  Dec 31 06:18:53.631: INFO: got output "I"
  STEP: exposing timestamps @ 12/31/23 06:18:53.631
  Dec 31 06:18:53.631: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-logs-6783 logs logs-generator logs-generator --tail=1 --timestamps'
  Dec 31 06:18:53.672: INFO: stderr: ""
  Dec 31 06:18:53.672: INFO: stdout: "2023-12-31T14:18:53.513361811+08:00 I1231 06:18:53.513309       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/kube-system/pods/mhn 204\n"
  Dec 31 06:18:53.672: INFO: got output "2023-12-31T14:18:53.513361811+08:00 I1231 06:18:53.513309       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/kube-system/pods/mhn 204\n"
  STEP: restricting to a time range @ 12/31/23 06:18:53.672
  Dec 31 06:18:56.173: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-logs-6783 logs logs-generator logs-generator --since=1s'
  Dec 31 06:18:56.214: INFO: stderr: ""
  Dec 31 06:18:56.214: INFO: stdout: "I1231 06:18:55.313422       1 logs_generator.go:76] 16 GET /api/v1/namespaces/ns/pods/5dn 567\nI1231 06:18:55.512708       1 logs_generator.go:76] 17 POST /api/v1/namespaces/ns/pods/kv5c 472\nI1231 06:18:55.712990       1 logs_generator.go:76] 18 PUT /api/v1/namespaces/default/pods/8l8m 296\nI1231 06:18:55.913288       1 logs_generator.go:76] 19 POST /api/v1/namespaces/default/pods/p77 238\nI1231 06:18:56.112507       1 logs_generator.go:76] 20 POST /api/v1/namespaces/kube-system/pods/nl2 292\n"
  Dec 31 06:18:56.214: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-logs-6783 logs logs-generator logs-generator --since=24h'
  Dec 31 06:18:56.253: INFO: stderr: ""
  Dec 31 06:18:56.253: INFO: stdout: "I1231 06:18:52.112373       1 logs_generator.go:76] 0 POST /api/v1/namespaces/default/pods/7n5 352\nI1231 06:18:52.312477       1 logs_generator.go:76] 1 PUT /api/v1/namespaces/kube-system/pods/8zv 309\nI1231 06:18:52.512979       1 logs_generator.go:76] 2 GET /api/v1/namespaces/kube-system/pods/xxs4 492\nI1231 06:18:52.713262       1 logs_generator.go:76] 3 POST /api/v1/namespaces/kube-system/pods/jvt6 463\nI1231 06:18:52.912487       1 logs_generator.go:76] 4 PUT /api/v1/namespaces/ns/pods/m2d 513\nI1231 06:18:53.112744       1 logs_generator.go:76] 5 PUT /api/v1/namespaces/kube-system/pods/d7lb 316\nI1231 06:18:53.313024       1 logs_generator.go:76] 6 PUT /api/v1/namespaces/kube-system/pods/p7c 368\nI1231 06:18:53.513309       1 logs_generator.go:76] 7 PUT /api/v1/namespaces/kube-system/pods/mhn 204\nI1231 06:18:53.712438       1 logs_generator.go:76] 8 PUT /api/v1/namespaces/ns/pods/cqx 490\nI1231 06:18:53.912719       1 logs_generator.go:76] 9 PUT /api/v1/namespaces/ns/pods/87z 227\nI1231 06:18:54.112999       1 logs_generator.go:76] 10 PUT /api/v1/namespaces/kube-system/pods/t7wc 231\nI1231 06:18:54.313283       1 logs_generator.go:76] 11 PUT /api/v1/namespaces/kube-system/pods/frp 472\nI1231 06:18:54.512506       1 logs_generator.go:76] 12 GET /api/v1/namespaces/ns/pods/s8x5 460\nI1231 06:18:54.712744       1 logs_generator.go:76] 13 PUT /api/v1/namespaces/ns/pods/n6x7 513\nI1231 06:18:54.912856       1 logs_generator.go:76] 14 PUT /api/v1/namespaces/default/pods/542 451\nI1231 06:18:55.113140       1 logs_generator.go:76] 15 PUT /api/v1/namespaces/default/pods/ht5 470\nI1231 06:18:55.313422       1 logs_generator.go:76] 16 GET /api/v1/namespaces/ns/pods/5dn 567\nI1231 06:18:55.512708       1 logs_generator.go:76] 17 POST /api/v1/namespaces/ns/pods/kv5c 472\nI1231 06:18:55.712990       1 logs_generator.go:76] 18 PUT /api/v1/namespaces/default/pods/8l8m 296\nI1231 06:18:55.913288       1 logs_generator.go:76] 19 POST /api/v1/namespaces/default/pods/p77 238\nI1231 06:18:56.112507       1 logs_generator.go:76] 20 POST /api/v1/namespaces/kube-system/pods/nl2 292\n"
  Dec 31 06:18:56.253: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-logs-6783 delete pod logs-generator'
  Dec 31 06:18:57.017: INFO: stderr: ""
  Dec 31 06:18:57.017: INFO: stdout: "pod \"logs-generator\" deleted\n"
  Dec 31 06:18:57.017: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-logs-6783" for this suite. @ 12/31/23 06:18:57.019
• [5.569 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance] [sig-node, Conformance]
test/e2e/node/security_context.go:135
  STEP: Creating a kubernetes client @ 12/31/23 06:18:57.022
  Dec 31 06:18:57.022: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename security-context @ 12/31/23 06:18:57.023
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:18:57.027
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:18:57.029
  STEP: Creating a pod to test pod.Spec.SecurityContext.RunAsUser @ 12/31/23 06:18:57.03
  STEP: Saw pod success @ 12/31/23 06:19:01.04
  Dec 31 06:19:01.041: INFO: Trying to get logs from node worker3 pod security-context-0154956e-1a6c-4810-8e36-2c6b4da38dde container test-container: <nil>
  STEP: delete the pod @ 12/31/23 06:19:01.043
  Dec 31 06:19:01.050: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-5515" for this suite. @ 12/31/23 06:19:01.051
• [4.031 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/expansion.go:76
  STEP: Creating a kubernetes client @ 12/31/23 06:19:01.053
  Dec 31 06:19:01.053: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename var-expansion @ 12/31/23 06:19:01.054
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:19:01.061
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:19:01.062
  STEP: Creating a pod to test substitution in container's command @ 12/31/23 06:19:01.063
  STEP: Saw pod success @ 12/31/23 06:19:05.073
  Dec 31 06:19:05.074: INFO: Trying to get logs from node worker3 pod var-expansion-af6c4e45-4981-42ce-8f0a-b0c646af31a5 container dapi-container: <nil>
  STEP: delete the pod @ 12/31/23 06:19:05.076
  Dec 31 06:19:05.081: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-4072" for this suite. @ 12/31/23 06:19:05.082
• [4.031 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/expansion.go:47
  STEP: Creating a kubernetes client @ 12/31/23 06:19:05.084
  Dec 31 06:19:05.084: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename var-expansion @ 12/31/23 06:19:05.085
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:19:05.089
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:19:05.091
  STEP: Creating a pod to test env composition @ 12/31/23 06:19:05.092
  STEP: Saw pod success @ 12/31/23 06:19:09.101
  Dec 31 06:19:09.102: INFO: Trying to get logs from node worker3 pod var-expansion-1b1e9f42-5b47-44ab-93f7-5e8280ec8c17 container dapi-container: <nil>
  STEP: delete the pod @ 12/31/23 06:19:09.105
  Dec 31 06:19:09.110: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-895" for this suite. @ 12/31/23 06:19:09.112
• [4.030 seconds]
------------------------------
S
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:110
  STEP: Creating a kubernetes client @ 12/31/23 06:19:09.114
  Dec 31 06:19:09.114: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:19:09.115
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:19:09.119
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:19:09.121
  STEP: Creating configMap with name projected-configmap-test-volume-map-95a0fe4f-da86-45c7-ba9e-9e5c54326c1a @ 12/31/23 06:19:09.123
  STEP: Creating a pod to test consume configMaps @ 12/31/23 06:19:09.125
  STEP: Saw pod success @ 12/31/23 06:19:13.135
  Dec 31 06:19:13.136: INFO: Trying to get logs from node worker3 pod pod-projected-configmaps-3d591464-57e0-4d1f-88c5-18558b4036cb container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 06:19:13.139
  Dec 31 06:19:13.145: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9640" for this suite. @ 12/31/23 06:19:13.147
• [4.034 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:47
  STEP: Creating a kubernetes client @ 12/31/23 06:19:13.149
  Dec 31 06:19:13.149: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename secrets @ 12/31/23 06:19:13.149
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:19:13.156
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:19:13.157
  STEP: Creating secret with name secret-test-1f28a4c3-6d66-4e28-b84a-7309d67876d3 @ 12/31/23 06:19:13.159
  STEP: Creating a pod to test consume secrets @ 12/31/23 06:19:13.161
  STEP: Saw pod success @ 12/31/23 06:19:17.169
  Dec 31 06:19:17.170: INFO: Trying to get logs from node worker3 pod pod-secrets-906a3653-7d38-4091-8af3-b7c0cfa87b7d container secret-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 06:19:17.173
  Dec 31 06:19:17.178: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-2055" for this suite. @ 12/31/23 06:19:17.179
• [4.032 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:140
  STEP: Creating a kubernetes client @ 12/31/23 06:19:17.181
  Dec 31 06:19:17.181: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir @ 12/31/23 06:19:17.182
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:19:17.188
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:19:17.19
  STEP: Creating a pod to test emptydir 0666 on tmpfs @ 12/31/23 06:19:17.191
  STEP: Saw pod success @ 12/31/23 06:19:21.2
  Dec 31 06:19:21.201: INFO: Trying to get logs from node worker3 pod pod-326fea78-33c7-4075-a72d-fa6d1ce4faae container test-container: <nil>
  STEP: delete the pod @ 12/31/23 06:19:21.203
  Dec 31 06:19:21.210: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-741" for this suite. @ 12/31/23 06:19:21.212
• [4.032 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/watch.go:257
  STEP: Creating a kubernetes client @ 12/31/23 06:19:21.214
  Dec 31 06:19:21.214: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename watch @ 12/31/23 06:19:21.214
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:19:21.221
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:19:21.223
  STEP: creating a watch on configmaps with a certain label @ 12/31/23 06:19:21.224
  STEP: creating a new configmap @ 12/31/23 06:19:21.225
  STEP: modifying the configmap once @ 12/31/23 06:19:21.226
  STEP: changing the label value of the configmap @ 12/31/23 06:19:21.229
  STEP: Expecting to observe a delete notification for the watched object @ 12/31/23 06:19:21.231
  Dec 31 06:19:21.231: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2334  f8f1e640-15ea-4b12-90f1-a07b3a837fc4 5654 0 2023-12-31 06:19:21 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-12-31 06:19:21 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:19:21.231: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2334  f8f1e640-15ea-4b12-90f1-a07b3a837fc4 5655 0 2023-12-31 06:19:21 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-12-31 06:19:21 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:19:21.231: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2334  f8f1e640-15ea-4b12-90f1-a07b3a837fc4 5656 0 2023-12-31 06:19:21 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-12-31 06:19:21 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying the configmap a second time @ 12/31/23 06:19:21.231
  STEP: Expecting not to observe a notification because the object no longer meets the selector's requirements @ 12/31/23 06:19:21.234
  STEP: changing the label value of the configmap back @ 12/31/23 06:19:31.234
  STEP: modifying the configmap a third time @ 12/31/23 06:19:31.238
  STEP: deleting the configmap @ 12/31/23 06:19:31.241
  STEP: Expecting to observe an add notification for the watched object when the label value was restored @ 12/31/23 06:19:31.243
  Dec 31 06:19:31.243: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2334  f8f1e640-15ea-4b12-90f1-a07b3a837fc4 5694 0 2023-12-31 06:19:21 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-12-31 06:19:31 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:19:31.243: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2334  f8f1e640-15ea-4b12-90f1-a07b3a837fc4 5695 0 2023-12-31 06:19:21 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-12-31 06:19:31 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 3,},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:19:31.243: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-2334  f8f1e640-15ea-4b12-90f1-a07b3a837fc4 5696 0 2023-12-31 06:19:21 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2023-12-31 06:19:31 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 3,},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:19:31.243: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-2334" for this suite. @ 12/31/23 06:19:31.245
• [10.033 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/security_context.go:488
  STEP: Creating a kubernetes client @ 12/31/23 06:19:31.247
  Dec 31 06:19:31.247: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename security-context-test @ 12/31/23 06:19:31.248
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:19:31.254
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:19:31.255
  Dec 31 06:19:33.265: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-6627" for this suite. @ 12/31/23 06:19:33.267
• [2.023 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/custom_resource_definition.go:59
  STEP: Creating a kubernetes client @ 12/31/23 06:19:33.271
  Dec 31 06:19:33.271: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename custom-resource-definition @ 12/31/23 06:19:33.271
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:19:33.279
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:19:33.281
  Dec 31 06:19:33.287: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:19:34.296: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-4483" for this suite. @ 12/31/23 06:19:34.298
• [1.030 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_secret.go:215
  STEP: Creating a kubernetes client @ 12/31/23 06:19:34.3
  Dec 31 06:19:34.300: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:19:34.301
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:19:34.307
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:19:34.309
  STEP: Creating secret with name s-test-opt-del-55fdec46-3bd1-420c-87fd-31b392135a28 @ 12/31/23 06:19:34.311
  STEP: Creating secret with name s-test-opt-upd-6fe74ed2-8160-46d6-a2a8-459b83745f27 @ 12/31/23 06:19:34.313
  STEP: Creating the pod @ 12/31/23 06:19:34.315
  STEP: Deleting secret s-test-opt-del-55fdec46-3bd1-420c-87fd-31b392135a28 @ 12/31/23 06:19:36.33
  STEP: Updating secret s-test-opt-upd-6fe74ed2-8160-46d6-a2a8-459b83745f27 @ 12/31/23 06:19:36.332
  STEP: Creating secret with name s-test-opt-create-385744ba-6341-4c7e-b8d5-efc62e20fc22 @ 12/31/23 06:19:36.333
  STEP: waiting to observe update in volume @ 12/31/23 06:19:36.335
  Dec 31 06:20:58.564: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9460" for this suite. @ 12/31/23 06:20:58.566
• [84.267 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Proxy server should support proxy with --port 0 [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1838
  STEP: Creating a kubernetes client @ 12/31/23 06:20:58.568
  Dec 31 06:20:58.568: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 06:20:58.568
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:20:58.575
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:20:58.576
  STEP: starting the proxy server @ 12/31/23 06:20:58.577
  Dec 31 06:20:58.578: INFO: Asynchronously running '/usr/local/bin/kubectl kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-1835 proxy -p 0 --disable-filter'
  STEP: curling proxy /api/ output @ 12/31/23 06:20:58.608
  Dec 31 06:20:58.612: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-1835" for this suite. @ 12/31/23 06:20:58.614
• [0.048 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_conversion_webhook.go:142
  STEP: Creating a kubernetes client @ 12/31/23 06:20:58.616
  Dec 31 06:20:58.616: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename crd-webhook @ 12/31/23 06:20:58.616
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:20:58.622
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:20:58.624
  STEP: Setting up server cert @ 12/31/23 06:20:58.625
  STEP: Create role binding to let cr conversion webhook read extension-apiserver-authentication @ 12/31/23 06:20:58.88
  STEP: Deploying the custom resource conversion webhook pod @ 12/31/23 06:20:58.884
  STEP: Wait for the deployment to be ready @ 12/31/23 06:20:58.889
  Dec 31 06:20:58.891: INFO: new replicaset for deployment "sample-crd-conversion-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 12/31/23 06:21:00.896
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 06:21:00.901
  Dec 31 06:21:01.901: INFO: Waiting for amount of service:e2e-test-crd-conversion-webhook endpoints to be 1
  Dec 31 06:21:01.904: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Creating a v1 custom resource @ 12/31/23 06:21:04.448
  STEP: v2 custom resource should be converted @ 12/31/23 06:21:04.451
  Dec 31 06:21:04.983: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-webhook-3725" for this suite. @ 12/31/23 06:21:04.985
• [6.374 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:210
  STEP: Creating a kubernetes client @ 12/31/23 06:21:04.99
  Dec 31 06:21:04.990: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir @ 12/31/23 06:21:04.991
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:21:05.002
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:21:05.003
  STEP: Creating a pod to test emptydir 0666 on node default medium @ 12/31/23 06:21:05.005
  STEP: Saw pod success @ 12/31/23 06:21:09.016
  Dec 31 06:21:09.017: INFO: Trying to get logs from node worker3 pod pod-1eee8f30-4134-432a-b837-06d712c34261 container test-container: <nil>
  STEP: delete the pod @ 12/31/23 06:21:09.02
  Dec 31 06:21:09.026: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-9815" for this suite. @ 12/31/23 06:21:09.027
• [4.039 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should complete a service status lifecycle [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:3338
  STEP: Creating a kubernetes client @ 12/31/23 06:21:09.03
  Dec 31 06:21:09.030: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 06:21:09.031
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:21:09.038
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:21:09.04
  STEP: creating a Service @ 12/31/23 06:21:09.043
  STEP: watching for the Service to be added @ 12/31/23 06:21:09.048
  Dec 31 06:21:09.049: INFO: Found Service test-service-kj7pc in namespace services-1798 with labels: map[test-service-static:true] & ports [{http TCP <nil> 80 {0 80 } 30602}]
  Dec 31 06:21:09.049: INFO: Service test-service-kj7pc created
  STEP: Getting /status @ 12/31/23 06:21:09.049
  Dec 31 06:21:09.051: INFO: Service test-service-kj7pc has LoadBalancer: {[]}
  STEP: patching the ServiceStatus @ 12/31/23 06:21:09.051
  STEP: watching for the Service to be patched @ 12/31/23 06:21:09.053
  Dec 31 06:21:09.054: INFO: observed Service test-service-kj7pc in namespace services-1798 with annotations: map[] & LoadBalancer: {[]}
  Dec 31 06:21:09.054: INFO: Found Service test-service-kj7pc in namespace services-1798 with annotations: map[patchedstatus:true] & LoadBalancer: {[{203.0.113.1  <nil> []}]}
  Dec 31 06:21:09.054: INFO: Service test-service-kj7pc has service status patched
  STEP: updating the ServiceStatus @ 12/31/23 06:21:09.054
  Dec 31 06:21:09.059: INFO: updatedStatus.Conditions: []v1.Condition{v1.Condition{Type:"StatusUpdate", Status:"True", ObservedGeneration:0, LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the Service to be updated @ 12/31/23 06:21:09.059
  Dec 31 06:21:09.059: INFO: Observed Service test-service-kj7pc in namespace services-1798 with annotations: map[] & Conditions: {[]}
  Dec 31 06:21:09.059: INFO: Observed event: &Service{ObjectMeta:{test-service-kj7pc  services-1798  cd8e39ad-64ab-4592-b524-faa906461c12 6072 0 2023-12-31 06:21:09 +0000 UTC <nil> <nil> map[test-service-static:true] map[patchedstatus:true] [] [] [{e2e.test Update v1 2023-12-31 06:21:09 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:test-service-static":{}}},"f:spec":{"f:allocateLoadBalancerNodePorts":{},"f:externalTrafficPolicy":{},"f:internalTrafficPolicy":{},"f:loadBalancerClass":{},"f:ports":{".":{},"k:{\"port\":80,\"protocol\":\"TCP\"}":{".":{},"f:name":{},"f:port":{},"f:protocol":{},"f:targetPort":{}}},"f:sessionAffinity":{},"f:type":{}}} } {e2e.test Update v1 2023-12-31 06:21:09 +0000 UTC FieldsV1 {"f:metadata":{"f:annotations":{".":{},"f:patchedstatus":{}}},"f:status":{"f:loadBalancer":{"f:ingress":{}}}} status}]},Spec:ServiceSpec{Ports:[]ServicePort{ServicePort{Name:http,Protocol:TCP,Port:80,TargetPort:{0 80 },NodePort:30602,AppProtocol:nil,},},Selector:map[string]string{},ClusterIP:10.68.198.189,Type:LoadBalancer,ExternalIPs:[],SessionAffinity:None,LoadBalancerIP:,LoadBalancerSourceRanges:[],ExternalName:,ExternalTrafficPolicy:Cluster,HealthCheckNodePort:0,PublishNotReadyAddresses:false,SessionAffinityConfig:nil,IPFamilyPolicy:*SingleStack,ClusterIPs:[10.68.198.189],IPFamilies:[IPv4],AllocateLoadBalancerNodePorts:*true,LoadBalancerClass:*example.com/internal-vip,InternalTrafficPolicy:*Cluster,},Status:ServiceStatus{LoadBalancer:LoadBalancerStatus{Ingress:[]LoadBalancerIngress{LoadBalancerIngress{IP:203.0.113.1,Hostname:,IPMode:nil,Ports:[]PortStatus{},},},},Conditions:[]Condition{},},}
  Dec 31 06:21:09.059: INFO: Found Service test-service-kj7pc in namespace services-1798 with annotations: map[patchedstatus:true] & Conditions: [{StatusUpdate True 0 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Dec 31 06:21:09.059: INFO: Service test-service-kj7pc has service status updated
  STEP: patching the service @ 12/31/23 06:21:09.059
  STEP: watching for the Service to be patched @ 12/31/23 06:21:09.065
  Dec 31 06:21:09.066: INFO: observed Service test-service-kj7pc in namespace services-1798 with labels: map[test-service-static:true]
  Dec 31 06:21:09.066: INFO: observed Service test-service-kj7pc in namespace services-1798 with labels: map[test-service-static:true]
  Dec 31 06:21:09.066: INFO: observed Service test-service-kj7pc in namespace services-1798 with labels: map[test-service-static:true]
  Dec 31 06:21:09.066: INFO: Found Service test-service-kj7pc in namespace services-1798 with labels: map[test-service:patched test-service-static:true]
  Dec 31 06:21:09.066: INFO: Service test-service-kj7pc patched
  STEP: deleting the service @ 12/31/23 06:21:09.066
  STEP: watching for the Service to be deleted @ 12/31/23 06:21:09.072
  Dec 31 06:21:09.073: INFO: Observed event: ADDED
  Dec 31 06:21:09.073: INFO: Observed event: MODIFIED
  Dec 31 06:21:09.073: INFO: Observed event: MODIFIED
  Dec 31 06:21:09.073: INFO: Observed event: MODIFIED
  Dec 31 06:21:09.073: INFO: Found Service test-service-kj7pc in namespace services-1798 with labels: map[test-service:patched test-service-static:true] & annotations: map[patchedstatus:true]
  Dec 31 06:21:09.073: INFO: Service test-service-kj7pc deleted
  Dec 31 06:21:09.073: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-1798" for this suite. @ 12/31/23 06:21:09.075
• [0.047 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:175
  STEP: Creating a kubernetes client @ 12/31/23 06:21:09.077
  Dec 31 06:21:09.077: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:21:09.078
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:21:09.084
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:21:09.087
  STEP: Creating configMap with name cm-test-opt-del-86b721b6-3d4c-4de0-a9c9-2f3aea80e501 @ 12/31/23 06:21:09.089
  STEP: Creating configMap with name cm-test-opt-upd-19c3401c-0271-4528-aba3-ce27bf93b5ad @ 12/31/23 06:21:09.092
  STEP: Creating the pod @ 12/31/23 06:21:09.093
  STEP: Deleting configmap cm-test-opt-del-86b721b6-3d4c-4de0-a9c9-2f3aea80e501 @ 12/31/23 06:21:11.108
  STEP: Updating configmap cm-test-opt-upd-19c3401c-0271-4528-aba3-ce27bf93b5ad @ 12/31/23 06:21:11.11
  STEP: Creating configMap with name cm-test-opt-create-b951eb29-c43b-4fa4-b96c-d6ac6ddd1bdf @ 12/31/23 06:21:11.111
  STEP: waiting to observe update in volume @ 12/31/23 06:21:11.113
  Dec 31 06:22:39.369: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5427" for this suite. @ 12/31/23 06:22:39.371
• [90.296 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:315
  STEP: Creating a kubernetes client @ 12/31/23 06:22:39.373
  Dec 31 06:22:39.373: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 06:22:39.373
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:22:39.379
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:22:39.38
  STEP: Setting up server cert @ 12/31/23 06:22:39.39
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 06:22:39.575
  STEP: Deploying the webhook pod @ 12/31/23 06:22:39.578
  STEP: Wait for the deployment to be ready @ 12/31/23 06:22:39.583
  Dec 31 06:22:39.585: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 12/31/23 06:22:41.589
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 06:22:41.595
  Dec 31 06:22:42.595: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Dec 31 06:22:42.598: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-955-crds.webhook.example.com via the AdmissionRegistration API @ 12/31/23 06:22:43.113
  STEP: Creating a custom resource while v1 is storage version @ 12/31/23 06:22:43.122
  STEP: Patching Custom Resource Definition to set v2 as storage @ 12/31/23 06:22:45.144
  STEP: Patching the custom resource while v2 is storage version @ 12/31/23 06:22:45.18
  Dec 31 06:22:45.743: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-6658" for this suite. @ 12/31/23 06:22:45.745
  STEP: Destroying namespace "webhook-markers-1354" for this suite. @ 12/31/23 06:22:45.747
• [6.376 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:237
  STEP: Creating a kubernetes client @ 12/31/23 06:22:45.749
  Dec 31 06:22:45.749: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 06:22:45.75
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:22:45.755
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:22:45.757
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 06:22:45.758
  STEP: Saw pod success @ 12/31/23 06:22:47.766
  Dec 31 06:22:47.767: INFO: Trying to get logs from node worker3 pod downwardapi-volume-4a7c6b87-0e48-4695-a9e2-780d09960160 container client-container: <nil>
  STEP: delete the pod @ 12/31/23 06:22:47.769
  Dec 31 06:22:47.775: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-4074" for this suite. @ 12/31/23 06:22:47.777
• [2.029 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/controller_revision.go:126
  STEP: Creating a kubernetes client @ 12/31/23 06:22:47.779
  Dec 31 06:22:47.779: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename controllerrevisions @ 12/31/23 06:22:47.779
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:22:47.784
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:22:47.785
  STEP: Creating DaemonSet "e2e-dc6j8-daemon-set" @ 12/31/23 06:22:47.794
  STEP: Check that daemon pods launch on every node of the cluster. @ 12/31/23 06:22:47.796
  Dec 31 06:22:47.799: INFO: Number of nodes with available pods controlled by daemonset e2e-dc6j8-daemon-set: 0
  Dec 31 06:22:47.799: INFO: Node 10.255.0.202 is running 0 daemon pod, expected 1
  Dec 31 06:22:48.799: INFO: Number of nodes with available pods controlled by daemonset e2e-dc6j8-daemon-set: 1
  Dec 31 06:22:48.799: INFO: Node worker2 is running 0 daemon pod, expected 1
  Dec 31 06:22:49.799: INFO: Number of nodes with available pods controlled by daemonset e2e-dc6j8-daemon-set: 3
  Dec 31 06:22:49.799: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset e2e-dc6j8-daemon-set
  STEP: Confirm DaemonSet "e2e-dc6j8-daemon-set" successfully created with "daemonset-name=e2e-dc6j8-daemon-set" label @ 12/31/23 06:22:49.8
  STEP: Listing all ControllerRevisions with label "daemonset-name=e2e-dc6j8-daemon-set" @ 12/31/23 06:22:49.802
  Dec 31 06:22:49.803: INFO: Located ControllerRevision: "e2e-dc6j8-daemon-set-7774df9fd8"
  STEP: Patching ControllerRevision "e2e-dc6j8-daemon-set-7774df9fd8" @ 12/31/23 06:22:49.805
  Dec 31 06:22:49.808: INFO: e2e-dc6j8-daemon-set-7774df9fd8 has been patched
  STEP: Create a new ControllerRevision @ 12/31/23 06:22:49.808
  Dec 31 06:22:49.810: INFO: Created ControllerRevision: e2e-dc6j8-daemon-set-6c5c7bb5fd
  STEP: Confirm that there are two ControllerRevisions @ 12/31/23 06:22:49.81
  Dec 31 06:22:49.810: INFO: Requesting list of ControllerRevisions to confirm quantity
  Dec 31 06:22:49.811: INFO: Found 2 ControllerRevisions
  STEP: Deleting ControllerRevision "e2e-dc6j8-daemon-set-7774df9fd8" @ 12/31/23 06:22:49.811
  STEP: Confirm that there is only one ControllerRevision @ 12/31/23 06:22:49.813
  Dec 31 06:22:49.813: INFO: Requesting list of ControllerRevisions to confirm quantity
  Dec 31 06:22:49.814: INFO: Found 1 ControllerRevisions
  STEP: Updating ControllerRevision "e2e-dc6j8-daemon-set-6c5c7bb5fd" @ 12/31/23 06:22:49.815
  Dec 31 06:22:49.818: INFO: e2e-dc6j8-daemon-set-6c5c7bb5fd has been updated
  STEP: Generate another ControllerRevision by patching the Daemonset @ 12/31/23 06:22:49.818
  W1231 06:22:49.823805      23 warnings.go:70] unknown field "updateStrategy"
  STEP: Confirm that there are two ControllerRevisions @ 12/31/23 06:22:49.823
  Dec 31 06:22:49.823: INFO: Requesting list of ControllerRevisions to confirm quantity
  Dec 31 06:22:50.824: INFO: Requesting list of ControllerRevisions to confirm quantity
  Dec 31 06:22:50.825: INFO: Found 2 ControllerRevisions
  STEP: Removing a ControllerRevision via 'DeleteCollection' with labelSelector: "e2e-dc6j8-daemon-set-6c5c7bb5fd=updated" @ 12/31/23 06:22:50.825
  STEP: Confirm that there is only one ControllerRevision @ 12/31/23 06:22:50.83
  Dec 31 06:22:50.830: INFO: Requesting list of ControllerRevisions to confirm quantity
  Dec 31 06:22:50.831: INFO: Found 1 ControllerRevisions
  Dec 31 06:22:50.833: INFO: ControllerRevision "e2e-dc6j8-daemon-set-7d8f8f67c9" has revision 3
  STEP: Deleting DaemonSet "e2e-dc6j8-daemon-set" @ 12/31/23 06:22:50.834
  STEP: deleting DaemonSet.extensions e2e-dc6j8-daemon-set in namespace controllerrevisions-4844, will wait for the garbage collector to delete the pods @ 12/31/23 06:22:50.834
  Dec 31 06:22:50.888: INFO: Deleting DaemonSet.extensions e2e-dc6j8-daemon-set took: 2.120239ms
  Dec 31 06:22:50.989: INFO: Terminating DaemonSet.extensions e2e-dc6j8-daemon-set pods took: 100.62985ms
  Dec 31 06:22:52.791: INFO: Number of nodes with available pods controlled by daemonset e2e-dc6j8-daemon-set: 0
  Dec 31 06:22:52.791: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset e2e-dc6j8-daemon-set
  Dec 31 06:22:52.792: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"6548"},"items":null}

  Dec 31 06:22:52.801: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"6548"},"items":null}

  Dec 31 06:22:52.806: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "controllerrevisions-4844" for this suite. @ 12/31/23 06:22:52.808
• [5.031 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_conversion_webhook.go:177
  STEP: Creating a kubernetes client @ 12/31/23 06:22:52.811
  Dec 31 06:22:52.811: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename crd-webhook @ 12/31/23 06:22:52.811
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:22:52.818
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:22:52.819
  STEP: Setting up server cert @ 12/31/23 06:22:52.821
  STEP: Create role binding to let cr conversion webhook read extension-apiserver-authentication @ 12/31/23 06:22:53.023
  STEP: Deploying the custom resource conversion webhook pod @ 12/31/23 06:22:53.025
  STEP: Wait for the deployment to be ready @ 12/31/23 06:22:53.03
  Dec 31 06:22:53.033: INFO: deployment "sample-crd-conversion-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 12/31/23 06:22:55.037
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 06:22:55.043
  Dec 31 06:22:56.043: INFO: Waiting for amount of service:e2e-test-crd-conversion-webhook endpoints to be 1
  Dec 31 06:22:56.045: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Creating a v1 custom resource @ 12/31/23 06:22:58.583
  STEP: Create a v2 custom resource @ 12/31/23 06:22:58.591
  STEP: List CRs in v1 @ 12/31/23 06:22:58.609
  STEP: List CRs in v2 @ 12/31/23 06:22:58.611
  Dec 31 06:22:59.144: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-webhook-486" for this suite. @ 12/31/23 06:22:59.146
• [6.341 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:125
  STEP: Creating a kubernetes client @ 12/31/23 06:22:59.152
  Dec 31 06:22:59.152: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename secrets @ 12/31/23 06:22:59.152
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:22:59.161
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:22:59.163
  STEP: Creating secret with name secret-test-c223ba00-619d-42da-9d1d-18ad096f4cb8 @ 12/31/23 06:22:59.164
  STEP: Creating a pod to test consume secrets @ 12/31/23 06:22:59.167
  STEP: Saw pod success @ 12/31/23 06:23:03.178
  Dec 31 06:23:03.179: INFO: Trying to get logs from node worker3 pod pod-secrets-75667607-2644-4b70-abf5-20d3c6ca5f3f container secret-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 06:23:03.181
  Dec 31 06:23:03.187: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-9790" for this suite. @ 12/31/23 06:23:03.189
• [4.039 seconds]
------------------------------
[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/daemon_set.go:385
  STEP: Creating a kubernetes client @ 12/31/23 06:23:03.191
  Dec 31 06:23:03.191: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename daemonsets @ 12/31/23 06:23:03.191
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:23:03.197
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:23:03.2
  Dec 31 06:23:03.208: INFO: Creating simple daemon set daemon-set
  STEP: Check that daemon pods launch on every node of the cluster. @ 12/31/23 06:23:03.21
  Dec 31 06:23:03.220: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 06:23:03.220: INFO: Node 10.255.0.202 is running 0 daemon pod, expected 1
  Dec 31 06:23:04.214: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 06:23:04.214: INFO: Node 10.255.0.202 is running 0 daemon pod, expected 1
  Dec 31 06:23:05.214: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Dec 31 06:23:05.214: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Update daemon pods image. @ 12/31/23 06:23:05.218
  STEP: Check that daemon pods images are updated. @ 12/31/23 06:23:05.222
  Dec 31 06:23:05.223: INFO: Wrong image for pod: daemon-set-rslxc. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Dec 31 06:23:05.223: INFO: Wrong image for pod: daemon-set-v85dn. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Dec 31 06:23:05.223: INFO: Wrong image for pod: daemon-set-wmkgq. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Dec 31 06:23:06.224: INFO: Wrong image for pod: daemon-set-rslxc. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Dec 31 06:23:06.224: INFO: Wrong image for pod: daemon-set-wmkgq. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Dec 31 06:23:06.224: INFO: Pod daemon-set-xfhj9 is not available
  Dec 31 06:23:07.224: INFO: Pod daemon-set-hn4xt is not available
  Dec 31 06:23:07.224: INFO: Wrong image for pod: daemon-set-rslxc. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Dec 31 06:23:08.224: INFO: Pod daemon-set-hn4xt is not available
  Dec 31 06:23:08.224: INFO: Wrong image for pod: daemon-set-rslxc. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Dec 31 06:23:09.224: INFO: Pod daemon-set-hn4xt is not available
  Dec 31 06:23:09.224: INFO: Wrong image for pod: daemon-set-rslxc. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Dec 31 06:23:10.224: INFO: Pod daemon-set-hn4xt is not available
  Dec 31 06:23:10.224: INFO: Wrong image for pod: daemon-set-rslxc. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Dec 31 06:23:11.224: INFO: Pod daemon-set-hn4xt is not available
  Dec 31 06:23:11.224: INFO: Wrong image for pod: daemon-set-rslxc. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Dec 31 06:23:12.224: INFO: Pod daemon-set-hn4xt is not available
  Dec 31 06:23:12.224: INFO: Wrong image for pod: daemon-set-rslxc. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Dec 31 06:23:13.224: INFO: Pod daemon-set-7c2bt is not available
  STEP: Check that daemon pods are still running on every node of the cluster. @ 12/31/23 06:23:13.225
  Dec 31 06:23:13.228: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Dec 31 06:23:13.228: INFO: Node worker2 is running 0 daemon pod, expected 1
  Dec 31 06:23:14.229: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Dec 31 06:23:14.229: INFO: Node worker2 is running 0 daemon pod, expected 1
  Dec 31 06:23:15.229: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Dec 31 06:23:15.229: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 12/31/23 06:23:15.234
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-7198, will wait for the garbage collector to delete the pods @ 12/31/23 06:23:15.234
  Dec 31 06:23:15.288: INFO: Deleting DaemonSet.extensions daemon-set took: 2.125368ms
  Dec 31 06:23:15.388: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.164309ms
  Dec 31 06:23:16.490: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 06:23:16.490: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Dec 31 06:23:16.491: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"6896"},"items":null}

  Dec 31 06:23:16.492: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"6896"},"items":null}

  Dec 31 06:23:16.496: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-7198" for this suite. @ 12/31/23 06:23:16.497
• [13.309 seconds]
------------------------------
[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance] [sig-network, Conformance]
test/e2e/network/endpointslice.go:105
  STEP: Creating a kubernetes client @ 12/31/23 06:23:16.5
  Dec 31 06:23:16.500: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename endpointslice @ 12/31/23 06:23:16.5
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:23:16.505
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:23:16.506
  Dec 31 06:23:18.527: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-4939" for this suite. @ 12/31/23 06:23:18.529
• [2.032 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:150
  STEP: Creating a kubernetes client @ 12/31/23 06:23:18.532
  Dec 31 06:23:18.532: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir @ 12/31/23 06:23:18.532
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:23:18.539
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:23:18.541
  STEP: Creating a pod to test emptydir 0777 on tmpfs @ 12/31/23 06:23:18.542
  STEP: Saw pod success @ 12/31/23 06:23:22.552
  Dec 31 06:23:22.554: INFO: Trying to get logs from node worker3 pod pod-9e63eabe-7a18-41a2-b71c-4c15fe8e2e45 container test-container: <nil>
  STEP: delete the pod @ 12/31/23 06:23:22.556
  Dec 31 06:23:22.562: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-402" for this suite. @ 12/31/23 06:23:22.563
• [4.034 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a exec "cat /tmp/health" liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:151
  STEP: Creating a kubernetes client @ 12/31/23 06:23:22.566
  Dec 31 06:23:22.566: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-probe @ 12/31/23 06:23:22.566
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:23:22.575
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:23:22.576
  STEP: Creating pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573 @ 12/31/23 06:23:22.577
  STEP: checking the pod's current state and verifying that restartCount is present @ 12/31/23 06:23:24.585
  Dec 31 06:23:24.586: INFO: Initial restart count of pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 is 0
  Dec 31 06:23:24.587: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:26.590: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:28.593: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:30.595: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:32.596: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:34.599: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:36.601: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:38.604: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:40.606: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:42.608: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:44.610: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:46.612: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:48.615: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:50.617: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:52.620: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:54.621: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:56.623: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:23:58.626: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:00.628: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:02.631: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:04.633: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:06.635: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:08.637: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:10.640: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:12.642: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:14.645: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:16.647: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:18.648: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:20.650: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:22.652: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:24.654: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:26.656: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:28.658: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:30.660: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:32.662: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:34.665: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:36.668: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:38.670: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:40.672: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:42.675: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:44.677: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:46.679: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:48.680: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:50.683: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:52.685: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:54.688: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:56.690: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:24:58.692: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:00.693: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:02.696: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:04.697: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:06.700: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:08.702: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:10.703: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:12.705: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:14.707: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:16.710: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:18.712: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:20.713: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:22.716: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:24.717: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:26.719: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:28.720: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:30.723: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:32.725: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:34.726: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:36.729: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:38.732: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:40.733: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:42.735: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:44.738: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:46.740: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:48.742: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:50.745: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:52.747: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:54.749: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:56.752: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:25:58.754: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:00.756: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:02.758: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:04.760: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:06.763: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:08.765: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:10.767: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:12.768: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:14.771: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:16.773: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:18.775: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:20.777: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:22.779: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:24.781: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:26.783: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:28.785: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:30.787: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:32.788: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:34.791: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:36.793: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:38.795: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:40.797: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:42.799: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:44.801: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:46.803: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:48.805: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:50.806: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:52.811: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:54.813: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:56.816: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:26:58.818: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:27:00.820: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:27:02.823: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:27:04.824: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:27:06.826: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:27:08.828: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:27:10.830: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:27:12.832: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:27:14.834: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:27:16.837: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:27:18.838: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:27:20.840: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  Dec 31 06:27:22.843: INFO: Get pod busybox-a093e519-dbd7-41d1-ad0f-3a518c3cfed7 in namespace container-probe-5573
  STEP: deleting the pod @ 12/31/23 06:27:24.844
  Dec 31 06:27:24.849: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-5573" for this suite. @ 12/31/23 06:27:24.85
• [242.288 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/downwardapi.go:269
  STEP: Creating a kubernetes client @ 12/31/23 06:27:24.854
  Dec 31 06:27:24.854: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 06:27:24.854
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:27:24.86
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:27:24.862
  STEP: Creating a pod to test downward api env vars @ 12/31/23 06:27:24.864
  STEP: Saw pod success @ 12/31/23 06:27:28.874
  Dec 31 06:27:28.875: INFO: Trying to get logs from node worker3 pod downward-api-a4b48997-cd98-482c-bfa6-459a157cb23b container dapi-container: <nil>
  STEP: delete the pod @ 12/31/23 06:27:28.887
  Dec 31 06:27:28.894: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-4998" for this suite. @ 12/31/23 06:27:28.896
• [4.047 seconds]
------------------------------
S
------------------------------
[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance] [sig-apps, Conformance]
test/e2e/apps/disruption.go:141
  STEP: Creating a kubernetes client @ 12/31/23 06:27:28.901
  Dec 31 06:27:28.901: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename disruption @ 12/31/23 06:27:28.902
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:27:28.912
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:27:28.913
  STEP: Waiting for the pdb to be processed @ 12/31/23 06:27:28.919
  STEP: Waiting for all pods to be running @ 12/31/23 06:27:30.928
  Dec 31 06:27:30.932: INFO: running pods: 0 < 3
  Dec 31 06:27:32.931: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-6433" for this suite. @ 12/31/23 06:27:32.933
• [4.034 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:110
  STEP: Creating a kubernetes client @ 12/31/23 06:27:32.935
  Dec 31 06:27:32.935: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir @ 12/31/23 06:27:32.935
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:27:32.941
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:27:32.944
  STEP: Creating a pod to test emptydir 0666 on tmpfs @ 12/31/23 06:27:32.945
  STEP: Saw pod success @ 12/31/23 06:27:34.951
  Dec 31 06:27:34.952: INFO: Trying to get logs from node worker2 pod pod-252c099e-52ae-43f6-8a5f-cdf285aa74fa container test-container: <nil>
  STEP: delete the pod @ 12/31/23 06:27:34.96
  Dec 31 06:27:34.966: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-9103" for this suite. @ 12/31/23 06:27:34.967
• [2.034 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:105
  STEP: Creating a kubernetes client @ 12/31/23 06:27:34.969
  Dec 31 06:27:34.969: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename deployment @ 12/31/23 06:27:34.97
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:27:34.976
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:27:34.978
  Dec 31 06:27:34.980: INFO: Creating replica set "test-rolling-update-controller" (going to be adopted)
  Dec 31 06:27:34.987: INFO: Pod name sample-pod: Found 0 pods out of 1
  Dec 31 06:27:39.992: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 12/31/23 06:27:39.992
  Dec 31 06:27:39.992: INFO: Creating deployment "test-rolling-update-deployment"
  Dec 31 06:27:39.995: INFO: Ensuring deployment "test-rolling-update-deployment" gets the next revision from the one the adopted replica set "test-rolling-update-controller" has
  Dec 31 06:27:39.997: INFO: new replicaset for deployment "test-rolling-update-deployment" is yet to be created
  Dec 31 06:27:42.001: INFO: Ensuring status for deployment "test-rolling-update-deployment" is the expected
  Dec 31 06:27:42.002: INFO: Ensuring deployment "test-rolling-update-deployment" has one old replica set (the one it adopted)
  Dec 31 06:27:42.005: INFO: Deployment "test-rolling-update-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-rolling-update-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9417",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "4f1b2bc4-8dc0-4f70-bdd5-e4a07b9cd311",
      ResourceVersion: (string) (len=4) "7651",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839600859,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=10) "sample-pod"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305833"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600859,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=637) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 61  67 6e 68 6f 73 74 5c 22  |me\":\"agnhost\"|
              00000160  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000170  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000180  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000190  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              000001a0  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              000001b0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001c0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              000001d0  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              000001e0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001f0  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000200  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              00000210  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              00000220  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              00000230  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000270  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=10) "sample-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=10) "sample-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=82) "ReplicaSet \"test-rolling-update-deployment-7f5c55c64\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Dec 31 06:27:42.007: INFO: New ReplicaSet "test-rolling-update-deployment-7f5c55c64" of Deployment "test-rolling-update-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=40) "test-rolling-update-deployment-7f5c55c64",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9417",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "21e47b64-f3e2-4cb3-bead-70ec0716b8e3",
      ResourceVersion: (string) (len=4) "7641",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839600860,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305833"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=30) "test-rolling-update-deployment",
          UID: (types.UID) (len=36) "4f1b2bc4-8dc0-4f70-bdd5-e4a07b9cd311",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 34 66 31 62 32 62  63 34 2d 38 64 63 30 2d  |\"4f1b2bc4-8dc0-|
              00000120  34 66 37 30 2d 62 64 64  35 2d 65 34 61 30 37 62  |4f70-bdd5-e4a07b|
              00000130  39 63 64 33 31 31 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |9cd311\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=10) "sample-pod",
          (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=10) "sample-pod",
            (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Dec 31 06:27:42.007: INFO: All old ReplicaSets of Deployment "test-rolling-update-deployment":
  Dec 31 06:27:42.008: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-rolling-update-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9417",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "1dd7bad2-3255-4235-9a91-b4102fd69b2b",
      ResourceVersion: (string) (len=4) "7650",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839600854,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305832",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=30) "test-rolling-update-deployment",
          UID: (types.UID) (len=36) "4f1b2bc4-8dc0-4f70-bdd5-e4a07b9cd311",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600854,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=533) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  2c 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |,"f:labels":{"."|
              00000060  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              00000070  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              00000080  73 70 65 63 22 3a 7b 22  66 3a 73 65 6c 65 63 74  |spec":{"f:select|
              00000090  6f 72 22 3a 7b 7d 2c 22  66 3a 74 65 6d 70 6c 61  |or":{},"f:templa|
              000000a0  74 65 22 3a 7b 22 66 3a  6d 65 74 61 64 61 74 61  |te":{"f:metadata|
              000000b0  22 3a 7b 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |":{"f:labels":{"|
              000000c0  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              000000d0  7d 2c 22 66 3a 70 6f 64  22 3a 7b 7d 7d 7d 2c 22  |},"f:pod":{}}},"|
              000000e0  66 3a 73 70 65 63 22 3a  7b 22 66 3a 63 6f 6e 74  |f:spec":{"f:cont|
              000000f0  61 69 6e 65 72 73 22 3a  7b 22 6b 3a 7b 5c 22 6e  |ainers":{"k:{\"n|
              00000100  61 6d 65 5c 22 3a 5c 22  68 74 74 70 64 5c 22 7d  |ame\":\"httpd\"}|
              00000110  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |":{".":{},"f:ima|
              00000120  67 65 22 3a 7b 7d 2c 22  66 3a 69 6d 61 67 65 50  |ge":{},"f:imageP|
              00000130  75 6c 6c 50 6f 6c 69 63  79 22 3a 7b 7d 2c 22 66  |ullPolicy":{},"f|
              00000140  3a 6e 61 6d 65 22 3a 7b  7d 2c 22 66 3a 72 65 73  |:name":{},"f:res|
              00000150  6f 75 72 63 65 73 22 3a  7b 7d 2c 22 66 3a 74 65  |ources":{},"f:te|
              00000160  72 6d 69 6e 61 74 69 6f  6e 4d 65 73 73 61 67 65  |rminationMessage|
              00000170  50 61 74 68 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |Path":{},"f:term|
              00000180  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 6f  |inationMessagePo|
              00000190  6c 69 63 79 22 3a 7b 7d  7d 7d 2c 22 66 3a 64 6e  |licy":{}}},"f:dn|
              000001a0  73 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 72  |sPolicy":{},"f:r|
              000001b0  65 73 74 61 72 74 50 6f  6c 69 63 79 22 3a 7b 7d  |estartPolicy":{}|
              000001c0  2c 22 66 3a 73 63 68 65  64 75 6c 65 72 4e 61 6d  |,"f:schedulerNam|
              000001d0  65 22 3a 7b 7d 2c 22 66  3a 73 65 63 75 72 69 74  |e":{},"f:securit|
              000001e0  79 43 6f 6e 74 65 78 74  22 3a 7b 7d 2c 22 66 3a  |yContext":{},"f:|
              000001f0  74 65 72 6d 69 6e 61 74  69 6f 6e 47 72 61 63 65  |terminationGrace|
              00000200  50 65 72 69 6f 64 53 65  63 6f 6e 64 73 22 3a 7b  |PeriodSeconds":{|
              00000210  7d 7d 7d 7d 7d                                    |}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=242) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 66 3a 64 65 70 6c 6f  79 6d 65 6e 74 2e 6b 75  |"f:deployment.ku|
              00000030  62 65 72 6e 65 74 65 73  2e 69 6f 2f 64 65 73 69  |bernetes.io/desi|
              00000040  72 65 64 2d 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |red-replicas":{}|
              00000050  2c 22 66 3a 64 65 70 6c  6f 79 6d 65 6e 74 2e 6b  |,"f:deployment.k|
              00000060  75 62 65 72 6e 65 74 65  73 2e 69 6f 2f 6d 61 78  |ubernetes.io/max|
              00000070  2d 72 65 70 6c 69 63 61  73 22 3a 7b 7d 7d 2c 22  |-replicas":{}},"|
              00000080  66 3a 6f 77 6e 65 72 52  65 66 65 72 65 6e 63 65  |f:ownerReference|
              00000090  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 6b 3a 7b 5c  |s":{".":{},"k:{\|
              000000a0  22 75 69 64 5c 22 3a 5c  22 34 66 31 62 32 62 63  |"uid\":\"4f1b2bc|
              000000b0  34 2d 38 64 63 30 2d 34  66 37 30 2d 62 64 64 35  |4-8dc0-4f70-bdd5|
              000000c0  2d 65 34 61 30 37 62 39  63 64 33 31 31 5c 22 7d  |-e4a07b9cd311\"}|
              000000d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000000e0  7b 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |{"f:replicas":{}|
              000000f0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=10) "sample-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=10) "sample-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Dec 31 06:27:42.009: INFO: Pod "test-rolling-update-deployment-7f5c55c64-jqdhc" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=46) "test-rolling-update-deployment-7f5c55c64-jqdhc",
      GenerateName: (string) (len=41) "test-rolling-update-deployment-7f5c55c64-",
      Namespace: (string) (len=15) "deployment-9417",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "530cd691-ed85-42b4-9320-98be73a616e5",
      ResourceVersion: (string) (len=4) "7640",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839600860,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=40) "test-rolling-update-deployment-7f5c55c64",
          UID: (types.UID) (len=36) "21e47b64-f3e2-4cb3-bead-70ec0716b8e3",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 32 31  65 34 37 62 36 34 2d 66  |d\":\"21e47b64-f|
              00000090  33 65 32 2d 34 63 62 33  2d 62 65 61 64 2d 37 30  |3e2-4cb3-bead-70|
              000000a0  65 63 30 37 31 36 62 38  65 33 5c 22 7d 22 3a 7b  |ec0716b8e3\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 36 39  2e 31 33 34 5c 22 7d 22  |2.20.169.134\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-wqdfv",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-wqdfv",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839600860,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) (len=14) "172.20.169.134",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.169.134"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839600860,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=7) "agnhost",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839600860,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          ImageID: (string) (len=111) "registry.k8s.io/e2e-test-images/agnhost@sha256:2c5b5b056076334e4cf431d964d102e44cbca8f1e6b16ac1e477a0ffbe6caac4",
          ContainerID: (string) (len=77) "containerd://21ec9cc7568a52cbe19ffaa48665f0f280db27f34d302afd4446bffb6a811f7d",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:27:42.011: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-9417" for this suite. @ 12/31/23 06:27:42.012
• [7.046 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/watch.go:142
  STEP: Creating a kubernetes client @ 12/31/23 06:27:42.015
  Dec 31 06:27:42.015: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename watch @ 12/31/23 06:27:42.015
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:27:42.022
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:27:42.024
  STEP: creating a new configmap @ 12/31/23 06:27:42.025
  STEP: modifying the configmap once @ 12/31/23 06:27:42.026
  STEP: modifying the configmap a second time @ 12/31/23 06:27:42.029
  STEP: deleting the configmap @ 12/31/23 06:27:42.032
  STEP: creating a watch on configmaps from the resource version returned by the first update @ 12/31/23 06:27:42.034
  STEP: Expecting to observe notifications for all changes to the configmap after the first update @ 12/31/23 06:27:42.034
  Dec 31 06:27:42.034: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-resource-version  watch-7002  5e1a6a94-045d-4514-9782-809a047e0643 7666 0 2023-12-31 06:27:42 +0000 UTC <nil> <nil> map[watch-this-configmap:from-resource-version] map[] [] [] [{e2e.test Update v1 2023-12-31 06:27:42 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:27:42.034: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-resource-version  watch-7002  5e1a6a94-045d-4514-9782-809a047e0643 7667 0 2023-12-31 06:27:42 +0000 UTC <nil> <nil> map[watch-this-configmap:from-resource-version] map[] [] [] [{e2e.test Update v1 2023-12-31 06:27:42 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:27:42.034: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-7002" for this suite. @ 12/31/23 06:27:42.036
• [0.023 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1053
  STEP: Creating a kubernetes client @ 12/31/23 06:27:42.038
  Dec 31 06:27:42.038: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 06:27:42.039
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:27:42.044
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:27:42.045
  STEP: create deployment with httpd image @ 12/31/23 06:27:42.046
  Dec 31 06:27:42.046: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-217 create -f -'
  Dec 31 06:27:42.105: INFO: stderr: ""
  Dec 31 06:27:42.105: INFO: stdout: "deployment.apps/httpd-deployment created\n"
  STEP: verify diff finds difference between live and declared image @ 12/31/23 06:27:42.105
  Dec 31 06:27:42.106: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-217 diff -f -'
  Dec 31 06:27:42.181: INFO: rc: 1
  Dec 31 06:27:42.181: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-217 delete -f -'
  Dec 31 06:27:42.223: INFO: stderr: ""
  Dec 31 06:27:42.223: INFO: stdout: "deployment.apps \"httpd-deployment\" deleted\n"
  Dec 31 06:27:42.223: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-217" for this suite. @ 12/31/23 06:27:42.225
• [0.188 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:125
  STEP: Creating a kubernetes client @ 12/31/23 06:27:42.227
  Dec 31 06:27:42.227: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:27:42.227
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:27:42.234
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:27:42.235
  STEP: Creating projection with configMap that has name projected-configmap-test-upd-e815a510-ed8d-47c6-961d-77e45f9aecbd @ 12/31/23 06:27:42.238
  STEP: Creating the pod @ 12/31/23 06:27:42.239
  STEP: Updating configmap projected-configmap-test-upd-e815a510-ed8d-47c6-961d-77e45f9aecbd @ 12/31/23 06:27:44.249
  STEP: waiting to observe update in volume @ 12/31/23 06:27:44.251
  Dec 31 06:27:48.260: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7657" for this suite. @ 12/31/23 06:27:48.261
• [6.037 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/garbage_collector.go:322
  STEP: Creating a kubernetes client @ 12/31/23 06:27:48.264
  Dec 31 06:27:48.264: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename gc @ 12/31/23 06:27:48.264
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:27:48.27
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:27:48.271
  STEP: create the rc @ 12/31/23 06:27:48.272
  W1231 06:27:48.275539      23 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: delete the rc @ 12/31/23 06:27:53.277
  STEP: wait for all pods to be garbage collected @ 12/31/23 06:27:53.28
  STEP: Gathering metrics @ 12/31/23 06:27:58.292
  W1231 06:27:58.295479      23 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Dec 31 06:27:58.295: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Dec 31 06:27:58.295: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-7551" for this suite. @ 12/31/23 06:27:58.296
• [10.035 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/discovery.go:172
  STEP: Creating a kubernetes client @ 12/31/23 06:27:58.299
  Dec 31 06:27:58.299: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename discovery @ 12/31/23 06:27:58.299
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:27:58.306
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:27:58.307
  STEP: Setting up server cert @ 12/31/23 06:27:58.309
  STEP: Requesting APIResourceList from "/api/v1" @ 12/31/23 06:27:58.662
  STEP: Requesting APIResourceList from "/apis/admissionregistration.k8s.io/v1" @ 12/31/23 06:27:58.663
  STEP: Requesting APIResourceList from "/apis/apiextensions.k8s.io/v1" @ 12/31/23 06:27:58.664
  STEP: Requesting APIResourceList from "/apis/apiregistration.k8s.io/v1" @ 12/31/23 06:27:58.664
  STEP: Requesting APIResourceList from "/apis/apps/v1" @ 12/31/23 06:27:58.665
  STEP: Requesting APIResourceList from "/apis/authentication.k8s.io/v1" @ 12/31/23 06:27:58.665
  STEP: Requesting APIResourceList from "/apis/authorization.k8s.io/v1" @ 12/31/23 06:27:58.666
  STEP: Requesting APIResourceList from "/apis/autoscaling/v1" @ 12/31/23 06:27:58.666
  STEP: Requesting APIResourceList from "/apis/autoscaling/v2" @ 12/31/23 06:27:58.667
  STEP: Requesting APIResourceList from "/apis/batch/v1" @ 12/31/23 06:27:58.667
  STEP: Requesting APIResourceList from "/apis/certificates.k8s.io/v1" @ 12/31/23 06:27:58.667
  STEP: Requesting APIResourceList from "/apis/coordination.k8s.io/v1" @ 12/31/23 06:27:58.668
  STEP: Requesting APIResourceList from "/apis/discovery.k8s.io/v1" @ 12/31/23 06:27:58.668
  STEP: Requesting APIResourceList from "/apis/events.k8s.io/v1" @ 12/31/23 06:27:58.669
  STEP: Requesting APIResourceList from "/apis/networking.k8s.io/v1" @ 12/31/23 06:27:58.669
  STEP: Requesting APIResourceList from "/apis/node.k8s.io/v1" @ 12/31/23 06:27:58.669
  STEP: Requesting APIResourceList from "/apis/policy/v1" @ 12/31/23 06:27:58.67
  STEP: Requesting APIResourceList from "/apis/scheduling.k8s.io/v1" @ 12/31/23 06:27:58.67
  STEP: Requesting APIResourceList from "/apis/storage.k8s.io/v1" @ 12/31/23 06:27:58.671
  Dec 31 06:27:58.671: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "discovery-192" for this suite. @ 12/31/23 06:27:58.673
• [0.376 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:86
  STEP: Creating a kubernetes client @ 12/31/23 06:27:58.675
  Dec 31 06:27:58.675: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:27:58.675
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:27:58.682
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:27:58.683
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 06:27:58.685
  STEP: Saw pod success @ 12/31/23 06:28:02.694
  Dec 31 06:28:02.695: INFO: Trying to get logs from node worker3 pod downwardapi-volume-64d39c4f-c3a6-452d-a6dc-2762b7cee234 container client-container: <nil>
  STEP: delete the pod @ 12/31/23 06:28:02.698
  Dec 31 06:28:02.704: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3032" for this suite. @ 12/31/23 06:28:02.705
• [4.032 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Secrets should patch a secret [Conformance] [sig-node, Conformance]
test/e2e/common/node/secrets.go:155
  STEP: Creating a kubernetes client @ 12/31/23 06:28:02.707
  Dec 31 06:28:02.707: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename secrets @ 12/31/23 06:28:02.708
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:28:02.713
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:28:02.714
  STEP: creating a secret @ 12/31/23 06:28:02.716
  STEP: listing secrets in all namespaces to ensure that there are more than zero @ 12/31/23 06:28:02.718
  STEP: patching the secret @ 12/31/23 06:28:02.719
  STEP: deleting the secret using a LabelSelector @ 12/31/23 06:28:02.723
  STEP: listing secrets in all namespaces, searching for label name and value in patch @ 12/31/23 06:28:02.725
  Dec 31 06:28:02.726: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-6659" for this suite. @ 12/31/23 06:28:02.727
• [0.023 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:70
  STEP: Creating a kubernetes client @ 12/31/23 06:28:02.73
  Dec 31 06:28:02.730: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 06:28:02.73
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:28:02.736
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:28:02.738
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 06:28:02.739
  STEP: Saw pod success @ 12/31/23 06:28:06.748
  Dec 31 06:28:06.749: INFO: Trying to get logs from node worker3 pod downwardapi-volume-dcf03460-abca-43dc-ac3b-b385d3629175 container client-container: <nil>
  STEP: delete the pod @ 12/31/23 06:28:06.751
  Dec 31 06:28:06.758: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-5995" for this suite. @ 12/31/23 06:28:06.759
• [4.031 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/garbage_collector.go:639
  STEP: Creating a kubernetes client @ 12/31/23 06:28:06.761
  Dec 31 06:28:06.761: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename gc @ 12/31/23 06:28:06.762
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:28:06.767
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:28:06.769
  STEP: create the rc @ 12/31/23 06:28:06.771
  W1231 06:28:06.774509      23 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: delete the rc @ 12/31/23 06:28:12.776
  STEP: wait for the rc to be deleted @ 12/31/23 06:28:12.778
  Dec 31 06:28:13.799: INFO: 80 pods remaining
  Dec 31 06:28:13.799: INFO: 80 pods has nil DeletionTimestamp
  Dec 31 06:28:13.799: INFO: 
  Dec 31 06:28:14.801: INFO: 73 pods remaining
  Dec 31 06:28:14.802: INFO: 73 pods has nil DeletionTimestamp
  Dec 31 06:28:14.802: INFO: 
  Dec 31 06:28:15.788: INFO: 58 pods remaining
  Dec 31 06:28:15.788: INFO: 58 pods has nil DeletionTimestamp
  Dec 31 06:28:15.788: INFO: 
  Dec 31 06:28:16.786: INFO: 40 pods remaining
  Dec 31 06:28:16.786: INFO: 40 pods has nil DeletionTimestamp
  Dec 31 06:28:16.786: INFO: 
  Dec 31 06:28:17.787: INFO: 33 pods remaining
  Dec 31 06:28:17.787: INFO: 33 pods has nil DeletionTimestamp
  Dec 31 06:28:17.787: INFO: 
  Dec 31 06:28:18.782: INFO: 18 pods remaining
  Dec 31 06:28:18.782: INFO: 18 pods has nil DeletionTimestamp
  Dec 31 06:28:18.782: INFO: 
  STEP: Gathering metrics @ 12/31/23 06:28:19.79
  W1231 06:28:19.795037      23 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Dec 31 06:28:19.795: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Dec 31 06:28:19.795: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-4505" for this suite. @ 12/31/23 06:28:19.802
• [13.050 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/kubelet_etc_hosts.go:64
  STEP: Creating a kubernetes client @ 12/31/23 06:28:19.811
  Dec 31 06:28:19.811: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename e2e-kubelet-etc-hosts @ 12/31/23 06:28:19.812
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:28:19.87
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:28:19.873
  STEP: Setting up the test @ 12/31/23 06:28:19.875
  STEP: Creating hostNetwork=false pod @ 12/31/23 06:28:19.875
  STEP: Creating hostNetwork=true pod @ 12/31/23 06:28:21.895
  STEP: Running the test @ 12/31/23 06:28:23.902
  STEP: Verifying /etc/hosts of container is kubelet-managed for pod with hostNetwork=false @ 12/31/23 06:28:23.903
  Dec 31 06:28:23.903: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-7136 PodName:test-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:28:23.903: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:28:23.903: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:28:23.903: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7136/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Dec 31 06:28:23.949: INFO: Exec stderr: ""
  Dec 31 06:28:23.949: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-7136 PodName:test-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:28:23.949: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:28:23.949: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:28:23.949: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7136/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Dec 31 06:28:23.972: INFO: Exec stderr: ""
  Dec 31 06:28:23.972: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-7136 PodName:test-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:28:23.972: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:28:23.973: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:28:23.973: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7136/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Dec 31 06:28:23.995: INFO: Exec stderr: ""
  Dec 31 06:28:23.995: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-7136 PodName:test-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:28:23.995: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:28:23.996: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:28:23.996: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7136/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Dec 31 06:28:24.045: INFO: Exec stderr: ""
  STEP: Verifying /etc/hosts of container is not kubelet-managed since container specifies /etc/hosts mount @ 12/31/23 06:28:24.045
  Dec 31 06:28:24.045: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-7136 PodName:test-pod ContainerName:busybox-3 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:28:24.045: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:28:24.045: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:28:24.045: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7136/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-3&container=busybox-3&stderr=true&stdout=true)
  Dec 31 06:28:24.068: INFO: Exec stderr: ""
  Dec 31 06:28:24.068: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-7136 PodName:test-pod ContainerName:busybox-3 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:28:24.068: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:28:24.068: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:28:24.068: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7136/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-3&container=busybox-3&stderr=true&stdout=true)
  Dec 31 06:28:24.091: INFO: Exec stderr: ""
  STEP: Verifying /etc/hosts content of container is not kubelet-managed for pod with hostNetwork=true @ 12/31/23 06:28:24.091
  Dec 31 06:28:24.091: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-7136 PodName:test-host-network-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:28:24.091: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:28:24.091: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:28:24.091: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7136/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Dec 31 06:28:24.136: INFO: Exec stderr: ""
  Dec 31 06:28:24.136: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-7136 PodName:test-host-network-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:28:24.136: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:28:24.137: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:28:24.137: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7136/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Dec 31 06:28:24.167: INFO: Exec stderr: ""
  Dec 31 06:28:24.167: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-7136 PodName:test-host-network-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:28:24.167: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:28:24.168: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:28:24.168: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7136/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Dec 31 06:28:24.193: INFO: Exec stderr: ""
  Dec 31 06:28:24.193: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-7136 PodName:test-host-network-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:28:24.193: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:28:24.193: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:28:24.193: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7136/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Dec 31 06:28:24.215: INFO: Exec stderr: ""
  Dec 31 06:28:24.215: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "e2e-kubelet-etc-hosts-7136" for this suite. @ 12/31/23 06:28:24.217
• [4.407 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance] [sig-apps, Conformance]
test/e2e/apps/rc.go:86
  STEP: Creating a kubernetes client @ 12/31/23 06:28:24.219
  Dec 31 06:28:24.219: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename replication-controller @ 12/31/23 06:28:24.219
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:28:24.225
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:28:24.226
  Dec 31 06:28:24.229: INFO: Creating quota "condition-test" that allows only two pods to run in the current namespace
  STEP: Creating rc "condition-test" that asks for more than the allowed pod quota @ 12/31/23 06:28:25.233
  STEP: Checking rc "condition-test" has the desired failure condition set @ 12/31/23 06:28:25.236
  STEP: Scaling down rc "condition-test" to satisfy pod quota @ 12/31/23 06:28:26.239
  Dec 31 06:28:26.243: INFO: Updating replication controller "condition-test"
  STEP: Checking rc "condition-test" has no failure condition set @ 12/31/23 06:28:26.243
  Dec 31 06:28:27.246: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-9283" for this suite. @ 12/31/23 06:28:27.247
• [3.031 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:55
  STEP: Creating a kubernetes client @ 12/31/23 06:28:27.25
  Dec 31 06:28:27.250: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 06:28:27.251
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:28:27.257
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:28:27.259
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 06:28:27.26
  STEP: Saw pod success @ 12/31/23 06:28:31.269
  Dec 31 06:28:31.270: INFO: Trying to get logs from node 10.255.0.202 pod downwardapi-volume-4f61dcb7-c4e9-484a-83d8-7fa818ee2912 container client-container: <nil>
  STEP: delete the pod @ 12/31/23 06:28:31.278
  Dec 31 06:28:31.283: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-3758" for this suite. @ 12/31/23 06:28:31.285
• [4.036 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/configmap.go:94
  STEP: Creating a kubernetes client @ 12/31/23 06:28:31.287
  Dec 31 06:28:31.287: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename configmap @ 12/31/23 06:28:31.288
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:28:31.293
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:28:31.295
  STEP: Creating configMap configmap-7993/configmap-test-6368c559-e970-4572-bd1e-9891f6dbce30 @ 12/31/23 06:28:31.297
  STEP: Creating a pod to test consume configMaps @ 12/31/23 06:28:31.298
  STEP: Saw pod success @ 12/31/23 06:28:33.304
  Dec 31 06:28:33.305: INFO: Trying to get logs from node worker3 pod pod-configmaps-030c80c3-e3ee-424d-b91f-1d87a8365e6e container env-test: <nil>
  STEP: delete the pod @ 12/31/23 06:28:33.307
  Dec 31 06:28:33.312: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-7993" for this suite. @ 12/31/23 06:28:33.314
• [2.029 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-network] DNS should provide DNS for the cluster [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:50
  STEP: Creating a kubernetes client @ 12/31/23 06:28:33.316
  Dec 31 06:28:33.316: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename dns @ 12/31/23 06:28:33.316
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:28:33.322
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:28:33.323
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@kubernetes.default.svc.cluster.local;check="$$(dig +tcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@kubernetes.default.svc.cluster.local;sleep 1; done
   @ 12/31/23 06:28:33.324
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@kubernetes.default.svc.cluster.local;check="$$(dig +tcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@kubernetes.default.svc.cluster.local;sleep 1; done
   @ 12/31/23 06:28:33.324
  STEP: creating a pod to probe DNS @ 12/31/23 06:28:33.324
  STEP: submitting the pod to kubernetes @ 12/31/23 06:28:33.324
  STEP: retrieving the pod @ 12/31/23 06:28:47.344
  STEP: looking for the results for each expected name from probers @ 12/31/23 06:28:47.345
  Dec 31 06:28:47.367: INFO: DNS probes using dns-2612/dns-test-3bc3fc6d-f27f-478a-a5ef-b70a65c28584 succeeded

  STEP: deleting the pod @ 12/31/23 06:28:47.367
  Dec 31 06:28:47.372: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-2612" for this suite. @ 12/31/23 06:28:47.373
• [14.061 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtime.go:216
  STEP: Creating a kubernetes client @ 12/31/23 06:28:47.377
  Dec 31 06:28:47.377: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-runtime @ 12/31/23 06:28:47.377
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:28:47.383
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:28:47.385
  STEP: create the container @ 12/31/23 06:28:47.386
  W1231 06:28:47.389679      23 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Failed @ 12/31/23 06:28:47.389
  STEP: get the container status @ 12/31/23 06:28:51.397
  STEP: the container should be terminated @ 12/31/23 06:28:51.398
  STEP: the termination message should be set @ 12/31/23 06:28:51.398
  Dec 31 06:28:51.398: INFO: Expected: &{DONE} to match Container's Termination Message: DONE --
  STEP: delete the container @ 12/31/23 06:28:51.398
  Dec 31 06:28:51.404: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-9549" for this suite. @ 12/31/23 06:28:51.405
• [4.030 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:424
  STEP: Creating a kubernetes client @ 12/31/23 06:28:51.407
  Dec 31 06:28:51.407: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename configmap @ 12/31/23 06:28:51.408
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:28:51.413
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:28:51.415
  STEP: Creating configMap with name configmap-test-volume-c7696206-7f4b-42e0-8803-48b64bf60ebd @ 12/31/23 06:28:51.417
  STEP: Creating a pod to test consume configMaps @ 12/31/23 06:28:51.419
  STEP: Saw pod success @ 12/31/23 06:28:53.426
  Dec 31 06:28:53.427: INFO: Trying to get logs from node worker3 pod pod-configmaps-37a5ef8e-1fa8-499b-a3f0-44cde4e80e9e container configmap-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 06:28:53.429
  Dec 31 06:28:53.435: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-7903" for this suite. @ 12/31/23 06:28:53.436
• [2.031 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:371
  STEP: Creating a kubernetes client @ 12/31/23 06:28:53.438
  Dec 31 06:28:53.438: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 06:28:53.439
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:28:53.444
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:28:53.446
  STEP: Setting up server cert @ 12/31/23 06:28:53.455
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 06:28:53.59
  STEP: Deploying the webhook pod @ 12/31/23 06:28:53.593
  STEP: Wait for the deployment to be ready @ 12/31/23 06:28:53.598
  Dec 31 06:28:53.601: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 12/31/23 06:28:55.606
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 06:28:55.61
  Dec 31 06:28:56.611: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Setting timeout (1s) shorter than webhook latency (5s) @ 12/31/23 06:28:56.613
  STEP: Registering slow webhook via the AdmissionRegistration API @ 12/31/23 06:28:56.613
  STEP: Request fails when timeout (1s) is shorter than slow webhook latency (5s) @ 12/31/23 06:28:56.621
  STEP: Having no error when timeout is shorter than webhook latency and failure policy is ignore @ 12/31/23 06:28:57.625
  STEP: Registering slow webhook via the AdmissionRegistration API @ 12/31/23 06:28:57.625
  STEP: Having no error when timeout is longer than webhook latency @ 12/31/23 06:28:58.642
  STEP: Registering slow webhook via the AdmissionRegistration API @ 12/31/23 06:28:58.642
  STEP: Having no error when timeout is empty (defaulted to 10s in v1) @ 12/31/23 06:29:03.658
  STEP: Registering slow webhook via the AdmissionRegistration API @ 12/31/23 06:29:03.658
  Dec 31 06:29:08.696: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-5587" for this suite. @ 12/31/23 06:29:08.697
  STEP: Destroying namespace "webhook-markers-8181" for this suite. @ 12/31/23 06:29:08.699
• [15.264 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] Servers with support for API chunking should return chunks of results for list calls [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/chunking.go:83
  STEP: Creating a kubernetes client @ 12/31/23 06:29:08.703
  Dec 31 06:29:08.703: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename chunking @ 12/31/23 06:29:08.703
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:29:08.711
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:29:08.713
  STEP: creating a large number of resources @ 12/31/23 06:29:08.715
  STEP: retrieving those results in paged fashion several times @ 12/31/23 06:29:26.406
  Dec 31 06:29:26.456: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDAxNlx1MDAwMCJ9
  Dec 31 06:29:26.505: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDAzM1x1MDAwMCJ9
  Dec 31 06:29:26.555: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDA1MFx1MDAwMCJ9
  Dec 31 06:29:26.605: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDA2N1x1MDAwMCJ9
  Dec 31 06:29:26.655: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDA4NFx1MDAwMCJ9
  Dec 31 06:29:26.704: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDEwMVx1MDAwMCJ9
  Dec 31 06:29:26.755: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDExOFx1MDAwMCJ9
  Dec 31 06:29:26.805: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDEzNVx1MDAwMCJ9
  Dec 31 06:29:26.855: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDE1Mlx1MDAwMCJ9
  Dec 31 06:29:26.905: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDE2OVx1MDAwMCJ9
  Dec 31 06:29:26.955: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDE4Nlx1MDAwMCJ9
  Dec 31 06:29:27.005: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDIwM1x1MDAwMCJ9
  Dec 31 06:29:27.055: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDIyMFx1MDAwMCJ9
  Dec 31 06:29:27.105: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDIzN1x1MDAwMCJ9
  Dec 31 06:29:27.155: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDI1NFx1MDAwMCJ9
  Dec 31 06:29:27.205: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDI3MVx1MDAwMCJ9
  Dec 31 06:29:27.255: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDI4OFx1MDAwMCJ9
  Dec 31 06:29:27.305: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDMwNVx1MDAwMCJ9
  Dec 31 06:29:27.354: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDMyMlx1MDAwMCJ9
  Dec 31 06:29:27.405: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDMzOVx1MDAwMCJ9
  Dec 31 06:29:27.454: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDM1Nlx1MDAwMCJ9
  Dec 31 06:29:27.505: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDM3M1x1MDAwMCJ9
  Dec 31 06:29:27.555: INFO: Retrieved 17/17 results with rv 10873 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzMsInN0YXJ0IjoidGVtcGxhdGUtMDM5MFx1MDAwMCJ9
  Dec 31 06:29:27.605: INFO: Retrieved 9/17 results with rv 10873 and continue 
  Dec 31 06:29:27.655: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDAxNlx1MDAwMCJ9
  Dec 31 06:29:27.704: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDAzM1x1MDAwMCJ9
  Dec 31 06:29:27.755: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDA1MFx1MDAwMCJ9
  Dec 31 06:29:27.805: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDA2N1x1MDAwMCJ9
  Dec 31 06:29:27.855: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDA4NFx1MDAwMCJ9
  Dec 31 06:29:27.905: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDEwMVx1MDAwMCJ9
  Dec 31 06:29:27.954: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDExOFx1MDAwMCJ9
  Dec 31 06:29:28.005: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDEzNVx1MDAwMCJ9
  Dec 31 06:29:28.055: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDE1Mlx1MDAwMCJ9
  Dec 31 06:29:28.105: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDE2OVx1MDAwMCJ9
  Dec 31 06:29:28.155: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDE4Nlx1MDAwMCJ9
  Dec 31 06:29:28.205: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDIwM1x1MDAwMCJ9
  Dec 31 06:29:28.255: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDIyMFx1MDAwMCJ9
  Dec 31 06:29:28.305: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDIzN1x1MDAwMCJ9
  Dec 31 06:29:28.355: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDI1NFx1MDAwMCJ9
  Dec 31 06:29:28.404: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDI3MVx1MDAwMCJ9
  Dec 31 06:29:28.455: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDI4OFx1MDAwMCJ9
  Dec 31 06:29:28.504: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDMwNVx1MDAwMCJ9
  Dec 31 06:29:28.555: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDMyMlx1MDAwMCJ9
  Dec 31 06:29:28.605: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDMzOVx1MDAwMCJ9
  Dec 31 06:29:28.655: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDM1Nlx1MDAwMCJ9
  Dec 31 06:29:28.704: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDM3M1x1MDAwMCJ9
  Dec 31 06:29:28.755: INFO: Retrieved 17/17 results with rv 10875 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzUsInN0YXJ0IjoidGVtcGxhdGUtMDM5MFx1MDAwMCJ9
  Dec 31 06:29:28.804: INFO: Retrieved 9/17 results with rv 10875 and continue 
  Dec 31 06:29:28.855: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDAxNlx1MDAwMCJ9
  Dec 31 06:29:28.905: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDAzM1x1MDAwMCJ9
  Dec 31 06:29:28.955: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDA1MFx1MDAwMCJ9
  Dec 31 06:29:29.005: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDA2N1x1MDAwMCJ9
  Dec 31 06:29:29.054: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDA4NFx1MDAwMCJ9
  Dec 31 06:29:29.105: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDEwMVx1MDAwMCJ9
  Dec 31 06:29:29.155: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDExOFx1MDAwMCJ9
  Dec 31 06:29:29.205: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDEzNVx1MDAwMCJ9
  Dec 31 06:29:29.255: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDE1Mlx1MDAwMCJ9
  Dec 31 06:29:29.305: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDE2OVx1MDAwMCJ9
  Dec 31 06:29:29.355: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDE4Nlx1MDAwMCJ9
  Dec 31 06:29:29.405: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDIwM1x1MDAwMCJ9
  Dec 31 06:29:29.455: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDIyMFx1MDAwMCJ9
  Dec 31 06:29:29.505: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDIzN1x1MDAwMCJ9
  Dec 31 06:29:29.555: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDI1NFx1MDAwMCJ9
  Dec 31 06:29:29.605: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDI3MVx1MDAwMCJ9
  Dec 31 06:29:29.654: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDI4OFx1MDAwMCJ9
  Dec 31 06:29:29.705: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDMwNVx1MDAwMCJ9
  Dec 31 06:29:29.755: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDMyMlx1MDAwMCJ9
  Dec 31 06:29:29.805: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDMzOVx1MDAwMCJ9
  Dec 31 06:29:29.855: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDM1Nlx1MDAwMCJ9
  Dec 31 06:29:29.904: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDM3M1x1MDAwMCJ9
  Dec 31 06:29:29.955: INFO: Retrieved 17/17 results with rv 10878 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MTA4NzgsInN0YXJ0IjoidGVtcGxhdGUtMDM5MFx1MDAwMCJ9
  Dec 31 06:29:30.004: INFO: Retrieved 9/17 results with rv 10878 and continue 
  STEP: retrieving those results all at once @ 12/31/23 06:29:30.004
  Dec 31 06:29:30.060: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "chunking-8664" for this suite. @ 12/31/23 06:29:30.105
• [21.454 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:132
  STEP: Creating a kubernetes client @ 12/31/23 06:29:30.157
  Dec 31 06:29:30.157: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:29:30.158
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:29:30.164
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:29:30.165
  STEP: Creating the pod @ 12/31/23 06:29:30.167
  Dec 31 06:29:32.682: INFO: Successfully updated pod "labelsupdatef668eda5-bc7f-41ec-91d5-487fd5f7ca81"
  Dec 31 06:29:36.691: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6566" for this suite. @ 12/31/23 06:29:36.693
• [6.538 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance] [sig-storage, Conformance]
test/e2e/storage/subpath.go:59
  STEP: Creating a kubernetes client @ 12/31/23 06:29:36.695
  Dec 31 06:29:36.695: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename subpath @ 12/31/23 06:29:36.696
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:29:36.702
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:29:36.704
  STEP: Setting up data @ 12/31/23 06:29:36.705
  STEP: Creating pod pod-subpath-test-secret-nz8t @ 12/31/23 06:29:36.708
  STEP: Creating a pod to test atomic-volume-subpath @ 12/31/23 06:29:36.708
  STEP: Saw pod success @ 12/31/23 06:30:00.742
  Dec 31 06:30:00.743: INFO: Trying to get logs from node worker3 pod pod-subpath-test-secret-nz8t container test-container-subpath-secret-nz8t: <nil>
  STEP: delete the pod @ 12/31/23 06:30:00.746
  STEP: Deleting pod pod-subpath-test-secret-nz8t @ 12/31/23 06:30:00.752
  Dec 31 06:30:00.752: INFO: Deleting pod "pod-subpath-test-secret-nz8t" in namespace "subpath-5070"
  Dec 31 06:30:00.753: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-5070" for this suite. @ 12/31/23 06:30:00.754
• [24.061 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:238
  STEP: Creating a kubernetes client @ 12/31/23 06:30:00.756
  Dec 31 06:30:00.756: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 06:30:00.756
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:30:00.766
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:30:00.768
  STEP: Setting up server cert @ 12/31/23 06:30:00.778
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 06:30:01.024
  STEP: Deploying the webhook pod @ 12/31/23 06:30:01.027
  STEP: Wait for the deployment to be ready @ 12/31/23 06:30:01.032
  Dec 31 06:30:01.036: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 12/31/23 06:30:03.041
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 06:30:03.046
  Dec 31 06:30:04.046: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering a webhook that server cannot talk to, with fail closed policy, via the AdmissionRegistration API @ 12/31/23 06:30:04.049
  STEP: create a namespace for the webhook @ 12/31/23 06:30:04.058
  STEP: create a configmap should be unconditionally rejected by the webhook @ 12/31/23 06:30:04.064
  Dec 31 06:30:04.094: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-3836" for this suite. @ 12/31/23 06:30:04.096
  STEP: Destroying namespace "webhook-markers-9678" for this suite. @ 12/31/23 06:30:04.099
  STEP: Destroying namespace "fail-closed-namespace-2090" for this suite. @ 12/31/23 06:30:04.102
• [3.348 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:132
  STEP: Creating a kubernetes client @ 12/31/23 06:30:04.106
  Dec 31 06:30:04.106: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 06:30:04.106
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:30:04.112
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:30:04.113
  STEP: Creating the pod @ 12/31/23 06:30:04.116
  Dec 31 06:30:06.634: INFO: Successfully updated pod "labelsupdatea4eb1f77-2966-4525-bcc2-31b6598ac801"
  Dec 31 06:30:10.645: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-6293" for this suite. @ 12/31/23 06:30:10.646
• [6.544 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance] [sig-apps, Slow, Conformance]
test/e2e/apps/cronjob.go:97
  STEP: Creating a kubernetes client @ 12/31/23 06:30:10.649
  Dec 31 06:30:10.649: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename cronjob @ 12/31/23 06:30:10.65
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:30:10.656
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:30:10.658
  STEP: Creating a suspended cronjob @ 12/31/23 06:30:10.659
  STEP: Ensuring no jobs are scheduled @ 12/31/23 06:30:10.662
  STEP: Ensuring no job exists by listing jobs explicitly @ 12/31/23 06:35:10.666
  STEP: Removing cronjob @ 12/31/23 06:35:10.667
  Dec 31 06:35:10.669: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-356" for this suite. @ 12/31/23 06:35:10.67
• [300.023 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Proxy version v1 should proxy through a service and a pod [Conformance] [sig-network, Conformance]
test/e2e/network/proxy.go:101
  STEP: Creating a kubernetes client @ 12/31/23 06:35:10.672
  Dec 31 06:35:10.672: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename proxy @ 12/31/23 06:35:10.673
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:35:10.681
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:35:10.682
  STEP: starting an echo server on multiple ports @ 12/31/23 06:35:10.688
  STEP: creating replication controller proxy-service-w6cjj in namespace proxy-9980 @ 12/31/23 06:35:10.688
  I1231 06:35:10.691870      23 runners.go:197] Created replication controller with name: proxy-service-w6cjj, namespace: proxy-9980, replica count: 1
  I1231 06:35:11.743685      23 runners.go:197] proxy-service-w6cjj Pods: 1 out of 1 created, 0 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 1 runningButNotReady 
  I1231 06:35:12.744168      23 runners.go:197] proxy-service-w6cjj Pods: 1 out of 1 created, 1 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Dec 31 06:35:12.745: INFO: setup took 2.061208329s, starting test cases
  STEP: running 16 cases, 20 attempts per case, 320 total attempts @ 12/31/23 06:35:12.745
  Dec 31 06:35:12.748: INFO: (0) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 2.728127ms)
  Dec 31 06:35:12.749: INFO: (0) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.496374ms)
  Dec 31 06:35:12.750: INFO: (0) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 4.445459ms)
  Dec 31 06:35:12.751: INFO: (0) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 6.3546ms)
  Dec 31 06:35:12.752: INFO: (0) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 7.216849ms)
  Dec 31 06:35:12.752: INFO: (0) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 7.172306ms)
  Dec 31 06:35:12.752: INFO: (0) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 7.291175ms)
  Dec 31 06:35:12.752: INFO: (0) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 7.343447ms)
  Dec 31 06:35:12.752: INFO: (0) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 7.361815ms)
  Dec 31 06:35:12.753: INFO: (0) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 7.794406ms)
  Dec 31 06:35:12.753: INFO: (0) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 7.893458ms)
  Dec 31 06:35:12.753: INFO: (0) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 7.889168ms)
  Dec 31 06:35:12.753: INFO: (0) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 7.910362ms)
  Dec 31 06:35:12.753: INFO: (0) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 7.993122ms)
  Dec 31 06:35:12.754: INFO: (0) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 9.203369ms)
  Dec 31 06:35:12.754: INFO: (0) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 9.128638ms)
  Dec 31 06:35:12.756: INFO: (1) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 1.732979ms)
  Dec 31 06:35:12.756: INFO: (1) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 1.848661ms)
  Dec 31 06:35:12.756: INFO: (1) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 2.015223ms)
  Dec 31 06:35:12.757: INFO: (1) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.170629ms)
  Dec 31 06:35:12.757: INFO: (1) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.140261ms)
  Dec 31 06:35:12.758: INFO: (1) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 3.124937ms)
  Dec 31 06:35:12.758: INFO: (1) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 3.128457ms)
  Dec 31 06:35:12.758: INFO: (1) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 3.326569ms)
  Dec 31 06:35:12.758: INFO: (1) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 3.323584ms)
  Dec 31 06:35:12.758: INFO: (1) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 3.368467ms)
  Dec 31 06:35:12.758: INFO: (1) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.661948ms)
  Dec 31 06:35:12.758: INFO: (1) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 3.753305ms)
  Dec 31 06:35:12.758: INFO: (1) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 3.82141ms)
  Dec 31 06:35:12.758: INFO: (1) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 3.844257ms)
  Dec 31 06:35:12.758: INFO: (1) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 3.905606ms)
  Dec 31 06:35:12.768: INFO: (1) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 13.329398ms)
  Dec 31 06:35:12.770: INFO: (2) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 2.354027ms)
  Dec 31 06:35:12.770: INFO: (2) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 2.59948ms)
  Dec 31 06:35:12.770: INFO: (2) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 2.66553ms)
  Dec 31 06:35:12.770: INFO: (2) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 2.757051ms)
  Dec 31 06:35:12.771: INFO: (2) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 2.78639ms)
  Dec 31 06:35:12.771: INFO: (2) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 2.885617ms)
  Dec 31 06:35:12.771: INFO: (2) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 3.088852ms)
  Dec 31 06:35:12.771: INFO: (2) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 3.115277ms)
  Dec 31 06:35:12.771: INFO: (2) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 3.093675ms)
  Dec 31 06:35:12.771: INFO: (2) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 3.319884ms)
  Dec 31 06:35:12.771: INFO: (2) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 3.267134ms)
  Dec 31 06:35:12.771: INFO: (2) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 3.221518ms)
  Dec 31 06:35:12.771: INFO: (2) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 3.676429ms)
  Dec 31 06:35:12.771: INFO: (2) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 3.795601ms)
  Dec 31 06:35:12.771: INFO: (2) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 3.766479ms)
  Dec 31 06:35:12.772: INFO: (2) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 3.807536ms)
  Dec 31 06:35:12.774: INFO: (3) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 2.428273ms)
  Dec 31 06:35:12.774: INFO: (3) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 2.494565ms)
  Dec 31 06:35:12.774: INFO: (3) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 2.534614ms)
  Dec 31 06:35:12.774: INFO: (3) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 2.610299ms)
  Dec 31 06:35:12.774: INFO: (3) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 2.627545ms)
  Dec 31 06:35:12.774: INFO: (3) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 2.873324ms)
  Dec 31 06:35:12.775: INFO: (3) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 2.899989ms)
  Dec 31 06:35:12.775: INFO: (3) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 2.955722ms)
  Dec 31 06:35:12.775: INFO: (3) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 3.006563ms)
  Dec 31 06:35:12.776: INFO: (3) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 4.247515ms)
  Dec 31 06:35:12.776: INFO: (3) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 4.21916ms)
  Dec 31 06:35:12.776: INFO: (3) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 4.250275ms)
  Dec 31 06:35:12.776: INFO: (3) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 4.242664ms)
  Dec 31 06:35:12.776: INFO: (3) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 4.465532ms)
  Dec 31 06:35:12.776: INFO: (3) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 4.555418ms)
  Dec 31 06:35:12.776: INFO: (3) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 4.683234ms)
  Dec 31 06:35:12.779: INFO: (4) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 2.5692ms)
  Dec 31 06:35:12.779: INFO: (4) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 2.468373ms)
  Dec 31 06:35:12.779: INFO: (4) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 2.833448ms)
  Dec 31 06:35:12.779: INFO: (4) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 2.949581ms)
  Dec 31 06:35:12.779: INFO: (4) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 2.933791ms)
  Dec 31 06:35:12.779: INFO: (4) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 2.975498ms)
  Dec 31 06:35:12.780: INFO: (4) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 3.158426ms)
  Dec 31 06:35:12.780: INFO: (4) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 3.52662ms)
  Dec 31 06:35:12.780: INFO: (4) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 3.897755ms)
  Dec 31 06:35:12.780: INFO: (4) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 3.838975ms)
  Dec 31 06:35:12.782: INFO: (4) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 5.179664ms)
  Dec 31 06:35:12.782: INFO: (4) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 5.107224ms)
  Dec 31 06:35:12.782: INFO: (4) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 5.084043ms)
  Dec 31 06:35:12.782: INFO: (4) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 5.204809ms)
  Dec 31 06:35:12.782: INFO: (4) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 5.230024ms)
  Dec 31 06:35:12.782: INFO: (4) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 5.372112ms)
  Dec 31 06:35:12.785: INFO: (5) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.407778ms)
  Dec 31 06:35:12.785: INFO: (5) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.662635ms)
  Dec 31 06:35:12.785: INFO: (5) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.641451ms)
  Dec 31 06:35:12.785: INFO: (5) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 3.461643ms)
  Dec 31 06:35:12.786: INFO: (5) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 3.666032ms)
  Dec 31 06:35:12.786: INFO: (5) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 3.785147ms)
  Dec 31 06:35:12.793: INFO: (5) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 11.026364ms)
  Dec 31 06:35:12.793: INFO: (5) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 11.055299ms)
  Dec 31 06:35:12.793: INFO: (5) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 11.098225ms)
  Dec 31 06:35:12.794: INFO: (5) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 11.732072ms)
  Dec 31 06:35:12.794: INFO: (5) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 11.681096ms)
  Dec 31 06:35:12.794: INFO: (5) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 11.938613ms)
  Dec 31 06:35:12.794: INFO: (5) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 11.61825ms)
  Dec 31 06:35:12.794: INFO: (5) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 11.964019ms)
  Dec 31 06:35:12.794: INFO: (5) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 11.843449ms)
  Dec 31 06:35:12.794: INFO: (5) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 11.874437ms)
  Dec 31 06:35:12.796: INFO: (6) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 1.713887ms)
  Dec 31 06:35:12.796: INFO: (6) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 2.122784ms)
  Dec 31 06:35:12.798: INFO: (6) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.417167ms)
  Dec 31 06:35:12.798: INFO: (6) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 3.556331ms)
  Dec 31 06:35:12.798: INFO: (6) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.461725ms)
  Dec 31 06:35:12.798: INFO: (6) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 3.755902ms)
  Dec 31 06:35:12.798: INFO: (6) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 3.670074ms)
  Dec 31 06:35:12.798: INFO: (6) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 3.73552ms)
  Dec 31 06:35:12.798: INFO: (6) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 3.816036ms)
  Dec 31 06:35:12.798: INFO: (6) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 3.932233ms)
  Dec 31 06:35:12.798: INFO: (6) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 3.898604ms)
  Dec 31 06:35:12.798: INFO: (6) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.909281ms)
  Dec 31 06:35:12.798: INFO: (6) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 3.972192ms)
  Dec 31 06:35:12.798: INFO: (6) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.953309ms)
  Dec 31 06:35:12.798: INFO: (6) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 3.966037ms)
  Dec 31 06:35:12.798: INFO: (6) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 3.941601ms)
  Dec 31 06:35:12.801: INFO: (7) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 2.640262ms)
  Dec 31 06:35:12.801: INFO: (7) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 3.207417ms)
  Dec 31 06:35:12.801: INFO: (7) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.221805ms)
  Dec 31 06:35:12.802: INFO: (7) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 3.430237ms)
  Dec 31 06:35:12.802: INFO: (7) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.305938ms)
  Dec 31 06:35:12.802: INFO: (7) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 3.327425ms)
  Dec 31 06:35:12.802: INFO: (7) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 3.378561ms)
  Dec 31 06:35:12.802: INFO: (7) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.301969ms)
  Dec 31 06:35:12.802: INFO: (7) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 3.430145ms)
  Dec 31 06:35:12.802: INFO: (7) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 3.531026ms)
  Dec 31 06:35:12.802: INFO: (7) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.838265ms)
  Dec 31 06:35:12.802: INFO: (7) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 3.933674ms)
  Dec 31 06:35:12.802: INFO: (7) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 3.923317ms)
  Dec 31 06:35:12.802: INFO: (7) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 3.867113ms)
  Dec 31 06:35:12.802: INFO: (7) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 4.136116ms)
  Dec 31 06:35:12.803: INFO: (7) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 4.521589ms)
  Dec 31 06:35:12.807: INFO: (8) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 4.080279ms)
  Dec 31 06:35:12.807: INFO: (8) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 4.66845ms)
  Dec 31 06:35:12.808: INFO: (8) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 4.810078ms)
  Dec 31 06:35:12.808: INFO: (8) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 4.707959ms)
  Dec 31 06:35:12.808: INFO: (8) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 4.806256ms)
  Dec 31 06:35:12.808: INFO: (8) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 4.938168ms)
  Dec 31 06:35:12.808: INFO: (8) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 4.964491ms)
  Dec 31 06:35:12.808: INFO: (8) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 4.985213ms)
  Dec 31 06:35:12.809: INFO: (8) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 6.461455ms)
  Dec 31 06:35:12.809: INFO: (8) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 6.422248ms)
  Dec 31 06:35:12.810: INFO: (8) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 6.96379ms)
  Dec 31 06:35:12.810: INFO: (8) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 6.993156ms)
  Dec 31 06:35:12.810: INFO: (8) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 7.110625ms)
  Dec 31 06:35:12.811: INFO: (8) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 7.720081ms)
  Dec 31 06:35:12.811: INFO: (8) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 7.795842ms)
  Dec 31 06:35:12.811: INFO: (8) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 8.037374ms)
  Dec 31 06:35:12.814: INFO: (9) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 3.587851ms)
  Dec 31 06:35:12.815: INFO: (9) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 4.179461ms)
  Dec 31 06:35:12.815: INFO: (9) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 4.223032ms)
  Dec 31 06:35:12.815: INFO: (9) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 4.238404ms)
  Dec 31 06:35:12.815: INFO: (9) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 4.205797ms)
  Dec 31 06:35:12.815: INFO: (9) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 4.232406ms)
  Dec 31 06:35:12.817: INFO: (9) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 5.618405ms)
  Dec 31 06:35:12.817: INFO: (9) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 6.204568ms)
  Dec 31 06:35:12.817: INFO: (9) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 6.128425ms)
  Dec 31 06:35:12.817: INFO: (9) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 6.28249ms)
  Dec 31 06:35:12.817: INFO: (9) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 6.321453ms)
  Dec 31 06:35:12.818: INFO: (9) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 7.078817ms)
  Dec 31 06:35:12.818: INFO: (9) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 7.230553ms)
  Dec 31 06:35:12.818: INFO: (9) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 7.161231ms)
  Dec 31 06:35:12.818: INFO: (9) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 7.459474ms)
  Dec 31 06:35:12.818: INFO: (9) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 7.648985ms)
  Dec 31 06:35:12.822: INFO: (10) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 3.832222ms)
  Dec 31 06:35:12.823: INFO: (10) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 4.308548ms)
  Dec 31 06:35:12.823: INFO: (10) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 4.339712ms)
  Dec 31 06:35:12.823: INFO: (10) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 4.362654ms)
  Dec 31 06:35:12.824: INFO: (10) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 5.119123ms)
  Dec 31 06:35:12.824: INFO: (10) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 5.241634ms)
  Dec 31 06:35:12.824: INFO: (10) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 5.467403ms)
  Dec 31 06:35:12.824: INFO: (10) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 5.512276ms)
  Dec 31 06:35:12.824: INFO: (10) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 5.650582ms)
  Dec 31 06:35:12.824: INFO: (10) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 5.662272ms)
  Dec 31 06:35:12.825: INFO: (10) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 6.82757ms)
  Dec 31 06:35:12.826: INFO: (10) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 6.872455ms)
  Dec 31 06:35:12.826: INFO: (10) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 6.934443ms)
  Dec 31 06:35:12.826: INFO: (10) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 7.039297ms)
  Dec 31 06:35:12.826: INFO: (10) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 7.008086ms)
  Dec 31 06:35:12.826: INFO: (10) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 7.073091ms)
  Dec 31 06:35:12.829: INFO: (11) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.014319ms)
  Dec 31 06:35:12.829: INFO: (11) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 3.108904ms)
  Dec 31 06:35:12.829: INFO: (11) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 3.203114ms)
  Dec 31 06:35:12.829: INFO: (11) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 3.334967ms)
  Dec 31 06:35:12.829: INFO: (11) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 3.413637ms)
  Dec 31 06:35:12.829: INFO: (11) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 3.455537ms)
  Dec 31 06:35:12.829: INFO: (11) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.568567ms)
  Dec 31 06:35:12.829: INFO: (11) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 3.531673ms)
  Dec 31 06:35:12.829: INFO: (11) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 3.528587ms)
  Dec 31 06:35:12.829: INFO: (11) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.632067ms)
  Dec 31 06:35:12.829: INFO: (11) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 3.613757ms)
  Dec 31 06:35:12.829: INFO: (11) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 3.723785ms)
  Dec 31 06:35:12.829: INFO: (11) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.70127ms)
  Dec 31 06:35:12.830: INFO: (11) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 4.128735ms)
  Dec 31 06:35:12.830: INFO: (11) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 4.076146ms)
  Dec 31 06:35:12.830: INFO: (11) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 4.167905ms)
  Dec 31 06:35:12.833: INFO: (12) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.224008ms)
  Dec 31 06:35:12.833: INFO: (12) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 3.178997ms)
  Dec 31 06:35:12.833: INFO: (12) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 3.125757ms)
  Dec 31 06:35:12.833: INFO: (12) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.393232ms)
  Dec 31 06:35:12.834: INFO: (12) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 3.306303ms)
  Dec 31 06:35:12.834: INFO: (12) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 3.522718ms)
  Dec 31 06:35:12.834: INFO: (12) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 3.650653ms)
  Dec 31 06:35:12.834: INFO: (12) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 3.60783ms)
  Dec 31 06:35:12.834: INFO: (12) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 3.549965ms)
  Dec 31 06:35:12.834: INFO: (12) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 3.606692ms)
  Dec 31 06:35:12.834: INFO: (12) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.542915ms)
  Dec 31 06:35:12.834: INFO: (12) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 3.431545ms)
  Dec 31 06:35:12.834: INFO: (12) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.379886ms)
  Dec 31 06:35:12.834: INFO: (12) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 3.465317ms)
  Dec 31 06:35:12.834: INFO: (12) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 3.575792ms)
  Dec 31 06:35:12.834: INFO: (12) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 3.516061ms)
  Dec 31 06:35:12.836: INFO: (13) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 2.03862ms)
  Dec 31 06:35:12.836: INFO: (13) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 2.008025ms)
  Dec 31 06:35:12.836: INFO: (13) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 2.035077ms)
  Dec 31 06:35:12.836: INFO: (13) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 2.154867ms)
  Dec 31 06:35:12.837: INFO: (13) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 3.108931ms)
  Dec 31 06:35:12.837: INFO: (13) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.090115ms)
  Dec 31 06:35:12.837: INFO: (13) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.105918ms)
  Dec 31 06:35:12.837: INFO: (13) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 3.166877ms)
  Dec 31 06:35:12.837: INFO: (13) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 3.254889ms)
  Dec 31 06:35:12.837: INFO: (13) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 3.342712ms)
  Dec 31 06:35:12.837: INFO: (13) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 3.292916ms)
  Dec 31 06:35:12.838: INFO: (13) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 3.670072ms)
  Dec 31 06:35:12.838: INFO: (13) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 3.816533ms)
  Dec 31 06:35:12.838: INFO: (13) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 3.865013ms)
  Dec 31 06:35:12.838: INFO: (13) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 3.876547ms)
  Dec 31 06:35:12.838: INFO: (13) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 4.011145ms)
  Dec 31 06:35:12.841: INFO: (14) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 3.217058ms)
  Dec 31 06:35:12.841: INFO: (14) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.44841ms)
  Dec 31 06:35:12.842: INFO: (14) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 3.760778ms)
  Dec 31 06:35:12.842: INFO: (14) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 3.678115ms)
  Dec 31 06:35:12.842: INFO: (14) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 3.964244ms)
  Dec 31 06:35:12.842: INFO: (14) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 3.921474ms)
  Dec 31 06:35:12.842: INFO: (14) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.740084ms)
  Dec 31 06:35:12.842: INFO: (14) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 3.821969ms)
  Dec 31 06:35:12.842: INFO: (14) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.953512ms)
  Dec 31 06:35:12.842: INFO: (14) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.94129ms)
  Dec 31 06:35:12.842: INFO: (14) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 4.103342ms)
  Dec 31 06:35:12.842: INFO: (14) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 4.139474ms)
  Dec 31 06:35:12.842: INFO: (14) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 4.244347ms)
  Dec 31 06:35:12.842: INFO: (14) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 4.001401ms)
  Dec 31 06:35:12.842: INFO: (14) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 4.236103ms)
  Dec 31 06:35:12.844: INFO: (14) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 5.678483ms)
  Dec 31 06:35:12.846: INFO: (15) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 2.513188ms)
  Dec 31 06:35:12.846: INFO: (15) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 2.546784ms)
  Dec 31 06:35:12.846: INFO: (15) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 2.655645ms)
  Dec 31 06:35:12.847: INFO: (15) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 2.729875ms)
  Dec 31 06:35:12.847: INFO: (15) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 2.756587ms)
  Dec 31 06:35:12.847: INFO: (15) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 2.793759ms)
  Dec 31 06:35:12.847: INFO: (15) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 2.919081ms)
  Dec 31 06:35:12.847: INFO: (15) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 3.059228ms)
  Dec 31 06:35:12.848: INFO: (15) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 4.033466ms)
  Dec 31 06:35:12.848: INFO: (15) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 4.153365ms)
  Dec 31 06:35:12.848: INFO: (15) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 4.141132ms)
  Dec 31 06:35:12.848: INFO: (15) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 4.249495ms)
  Dec 31 06:35:12.848: INFO: (15) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 4.118902ms)
  Dec 31 06:35:12.848: INFO: (15) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 4.155583ms)
  Dec 31 06:35:12.848: INFO: (15) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 4.287979ms)
  Dec 31 06:35:12.848: INFO: (15) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 4.364344ms)
  Dec 31 06:35:12.850: INFO: (16) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 1.769628ms)
  Dec 31 06:35:12.850: INFO: (16) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 1.886074ms)
  Dec 31 06:35:12.850: INFO: (16) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 2.014286ms)
  Dec 31 06:35:12.850: INFO: (16) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 2.082703ms)
  Dec 31 06:35:12.852: INFO: (16) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 3.30959ms)
  Dec 31 06:35:12.852: INFO: (16) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 3.359266ms)
  Dec 31 06:35:12.852: INFO: (16) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 3.436695ms)
  Dec 31 06:35:12.852: INFO: (16) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.205015ms)
  Dec 31 06:35:12.852: INFO: (16) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.480048ms)
  Dec 31 06:35:12.852: INFO: (16) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.307458ms)
  Dec 31 06:35:12.852: INFO: (16) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 3.507391ms)
  Dec 31 06:35:12.852: INFO: (16) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 3.516869ms)
  Dec 31 06:35:12.852: INFO: (16) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 3.496792ms)
  Dec 31 06:35:12.852: INFO: (16) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 3.658966ms)
  Dec 31 06:35:12.852: INFO: (16) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 3.695577ms)
  Dec 31 06:35:12.852: INFO: (16) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 3.600295ms)
  Dec 31 06:35:12.854: INFO: (17) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 1.896128ms)
  Dec 31 06:35:12.854: INFO: (17) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 2.096431ms)
  Dec 31 06:35:12.854: INFO: (17) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 2.102637ms)
  Dec 31 06:35:12.854: INFO: (17) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 2.143365ms)
  Dec 31 06:35:12.855: INFO: (17) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 3.106863ms)
  Dec 31 06:35:12.855: INFO: (17) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 3.129736ms)
  Dec 31 06:35:12.856: INFO: (17) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 3.643403ms)
  Dec 31 06:35:12.856: INFO: (17) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 3.569425ms)
  Dec 31 06:35:12.856: INFO: (17) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 3.656401ms)
  Dec 31 06:35:12.856: INFO: (17) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 3.742397ms)
  Dec 31 06:35:12.856: INFO: (17) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.759161ms)
  Dec 31 06:35:12.856: INFO: (17) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 3.811628ms)
  Dec 31 06:35:12.856: INFO: (17) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 3.771087ms)
  Dec 31 06:35:12.856: INFO: (17) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 3.894133ms)
  Dec 31 06:35:12.856: INFO: (17) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 3.975305ms)
  Dec 31 06:35:12.856: INFO: (17) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 3.995744ms)
  Dec 31 06:35:12.859: INFO: (18) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 2.779537ms)
  Dec 31 06:35:12.859: INFO: (18) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 2.845882ms)
  Dec 31 06:35:12.859: INFO: (18) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 3.098372ms)
  Dec 31 06:35:12.859: INFO: (18) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 2.967064ms)
  Dec 31 06:35:12.859: INFO: (18) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 3.013154ms)
  Dec 31 06:35:12.860: INFO: (18) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 3.378957ms)
  Dec 31 06:35:12.860: INFO: (18) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 3.713036ms)
  Dec 31 06:35:12.860: INFO: (18) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 3.699925ms)
  Dec 31 06:35:12.860: INFO: (18) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 3.772792ms)
  Dec 31 06:35:12.860: INFO: (18) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 3.819549ms)
  Dec 31 06:35:12.860: INFO: (18) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 3.754182ms)
  Dec 31 06:35:12.860: INFO: (18) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 3.802215ms)
  Dec 31 06:35:12.860: INFO: (18) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 3.922091ms)
  Dec 31 06:35:12.860: INFO: (18) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 4.166134ms)
  Dec 31 06:35:12.861: INFO: (18) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 4.041795ms)
  Dec 31 06:35:12.861: INFO: (18) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 4.084654ms)
  Dec 31 06:35:12.862: INFO: (19) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:462/proxy/: tls qux (200; 1.902946ms)
  Dec 31 06:35:12.862: INFO: (19) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:460/proxy/: tls baz (200; 1.744583ms)
  Dec 31 06:35:12.863: INFO: (19) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 1.814862ms)
  Dec 31 06:35:12.863: INFO: (19) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:160/proxy/: foo (200; 2.294712ms)
  Dec 31 06:35:12.863: INFO: (19) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 2.43977ms)
  Dec 31 06:35:12.863: INFO: (19) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">test<... (200; 2.641715ms)
  Dec 31 06:35:12.864: INFO: (19) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:1080/proxy/rewriteme">... (200; 2.553283ms)
  Dec 31 06:35:12.864: INFO: (19) /api/v1/namespaces/proxy-9980/pods/http:proxy-service-w6cjj-6nvmk:162/proxy/: bar (200; 2.837123ms)
  Dec 31 06:35:12.864: INFO: (19) /api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/https:proxy-service-w6cjj-6nvmk:443/proxy/tlsrewritem... (200; 2.753011ms)
  Dec 31 06:35:12.864: INFO: (19) /api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/: <a href="/api/v1/namespaces/proxy-9980/pods/proxy-service-w6cjj-6nvmk/proxy/rewriteme">test</a> (200; 3.158332ms)
  Dec 31 06:35:12.864: INFO: (19) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname1/proxy/: foo (200; 3.844422ms)
  Dec 31 06:35:12.865: INFO: (19) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname2/proxy/: bar (200; 3.881068ms)
  Dec 31 06:35:12.865: INFO: (19) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname1/proxy/: tls baz (200; 3.86746ms)
  Dec 31 06:35:12.865: INFO: (19) /api/v1/namespaces/proxy-9980/services/https:proxy-service-w6cjj:tlsportname2/proxy/: tls qux (200; 3.999933ms)
  Dec 31 06:35:12.865: INFO: (19) /api/v1/namespaces/proxy-9980/services/http:proxy-service-w6cjj:portname2/proxy/: bar (200; 4.037269ms)
  Dec 31 06:35:12.865: INFO: (19) /api/v1/namespaces/proxy-9980/services/proxy-service-w6cjj:portname1/proxy/: foo (200; 4.169715ms)
  STEP: deleting ReplicationController proxy-service-w6cjj in namespace proxy-9980, will wait for the garbage collector to delete the pods @ 12/31/23 06:35:12.865
  Dec 31 06:35:12.920: INFO: Deleting ReplicationController proxy-service-w6cjj took: 3.063928ms
  Dec 31 06:35:13.020: INFO: Terminating ReplicationController proxy-service-w6cjj pods took: 100.356179ms
  Dec 31 06:35:15.721: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-9980" for this suite. @ 12/31/23 06:35:15.722
• [5.052 seconds]
------------------------------
SSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance] [sig-apps, Conformance]
test/e2e/apps/statefulset.go:962
  STEP: Creating a kubernetes client @ 12/31/23 06:35:15.725
  Dec 31 06:35:15.725: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename statefulset @ 12/31/23 06:35:15.725
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:35:15.731
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:35:15.732
  STEP: Creating service test in namespace statefulset-8989 @ 12/31/23 06:35:15.734
  Dec 31 06:35:15.749: INFO: Found 0 stateful pods, waiting for 1
  Dec 31 06:35:25.745: INFO: Waiting for pod test-ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: patching the StatefulSet @ 12/31/23 06:35:25.75
  W1231 06:35:25.757046      23 warnings.go:70] unknown field "spec.template.spec.TerminationGracePeriodSeconds"
  Dec 31 06:35:25.759: INFO: Found 1 stateful pods, waiting for 2
  Dec 31 06:35:35.762: INFO: Waiting for pod test-ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Dec 31 06:35:35.762: INFO: Waiting for pod test-ss-1 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Listing all StatefulSets @ 12/31/23 06:35:35.764
  STEP: Delete all of the StatefulSets @ 12/31/23 06:35:35.765
  STEP: Verify that StatefulSets have been deleted @ 12/31/23 06:35:35.767
  Dec 31 06:35:35.769: INFO: Deleting all statefulset in ns statefulset-8989
  Dec 31 06:35:35.772: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-8989" for this suite. @ 12/31/23 06:35:35.773
• [20.053 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/pods.go:399
  STEP: Creating a kubernetes client @ 12/31/23 06:35:35.778
  Dec 31 06:35:35.778: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pods @ 12/31/23 06:35:35.779
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:35:35.786
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:35:35.787
  STEP: creating the pod @ 12/31/23 06:35:35.789
  STEP: submitting the pod to kubernetes @ 12/31/23 06:35:35.789
  W1231 06:35:35.792758      23 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: verifying the pod is in kubernetes @ 12/31/23 06:35:37.797
  STEP: updating the pod @ 12/31/23 06:35:37.798
  Dec 31 06:35:38.303: INFO: Successfully updated pod "pod-update-activedeadlineseconds-c6a7e468-c571-4602-adfc-2c79a8abdba3"
  Dec 31 06:35:42.309: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-2218" for this suite. @ 12/31/23 06:35:42.31
• [6.534 seconds]
------------------------------
S
------------------------------
[sig-apps] CronJob should support CronJob API operations [Conformance] [sig-apps, Conformance]
test/e2e/apps/cronjob.go:324
  STEP: Creating a kubernetes client @ 12/31/23 06:35:42.312
  Dec 31 06:35:42.312: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename cronjob @ 12/31/23 06:35:42.313
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:35:42.318
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:35:42.32
  STEP: Creating a cronjob @ 12/31/23 06:35:42.321
  STEP: creating @ 12/31/23 06:35:42.321
  STEP: getting @ 12/31/23 06:35:42.324
  STEP: listing @ 12/31/23 06:35:42.325
  STEP: watching @ 12/31/23 06:35:42.326
  Dec 31 06:35:42.326: INFO: starting watch
  STEP: cluster-wide listing @ 12/31/23 06:35:42.327
  STEP: cluster-wide watching @ 12/31/23 06:35:42.328
  Dec 31 06:35:42.328: INFO: starting watch
  STEP: patching @ 12/31/23 06:35:42.328
  STEP: updating @ 12/31/23 06:35:42.331
  Dec 31 06:35:42.334: INFO: waiting for watch events with expected annotations
  Dec 31 06:35:42.334: INFO: saw patched and updated annotations
  STEP: patching /status @ 12/31/23 06:35:42.334
  STEP: updating /status @ 12/31/23 06:35:42.337
  STEP: get /status @ 12/31/23 06:35:42.339
  STEP: deleting @ 12/31/23 06:35:42.341
  STEP: deleting a collection @ 12/31/23 06:35:42.345
  Dec 31 06:35:42.348: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-6552" for this suite. @ 12/31/23 06:35:42.349
• [0.040 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/field_validation.go:350
  STEP: Creating a kubernetes client @ 12/31/23 06:35:42.352
  Dec 31 06:35:42.352: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename field-validation @ 12/31/23 06:35:42.353
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:35:42.359
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:35:42.36
  Dec 31 06:35:42.362: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  W1231 06:35:42.362477      23 field_validation.go:423] props: &JSONSchemaProps{ID:,Schema:,Ref:nil,Description:,Type:object,Format:,Title:,Default:nil,Maximum:nil,ExclusiveMaximum:false,Minimum:nil,ExclusiveMinimum:false,MaxLength:nil,MinLength:nil,Pattern:,MaxItems:nil,MinItems:nil,UniqueItems:false,MultipleOf:nil,Enum:[]JSON{},MaxProperties:nil,MinProperties:nil,Required:[],Items:nil,AllOf:[]JSONSchemaProps{},OneOf:[]JSONSchemaProps{},AnyOf:[]JSONSchemaProps{},Not:nil,Properties:map[string]JSONSchemaProps{spec: {  <nil>  object   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[cronSpec:{  <nil>  string   nil <nil> false <nil> false <nil> <nil> ^(\d+|\*)(/\d+)?(\s+(\d+|\*)(/\d+)?){4}$ <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []} foo:{  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []} ports:{  <nil>  array   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] &JSONSchemaPropsOrArray{Schema:&JSONSchemaProps{ID:,Schema:,Ref:nil,Description:,Type:object,Format:,Title:,Default:nil,Maximum:nil,ExclusiveMaximum:false,Minimum:nil,ExclusiveMinimum:false,MaxLength:nil,MinLength:nil,Pattern:,MaxItems:nil,MinItems:nil,UniqueItems:false,MultipleOf:nil,Enum:[]JSON{},MaxProperties:nil,MinProperties:nil,Required:[containerPort protocol],Items:nil,AllOf:[]JSONSchemaProps{},OneOf:[]JSONSchemaProps{},AnyOf:[]JSONSchemaProps{},Not:nil,Properties:map[string]JSONSchemaProps{containerPort: {  <nil>  integer int32  nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},hostIP: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},hostPort: {  <nil>  integer int32  nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},name: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},protocol: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},},AdditionalProperties:nil,PatternProperties:map[string]JSONSchemaProps{},Dependencies:JSONSchemaDependencies{},AdditionalItems:nil,Definitions:JSONSchemaDefinitions{},ExternalDocs:nil,Example:nil,Nullable:false,XPreserveUnknownFields:nil,XEmbeddedResource:false,XIntOrString:false,XListMapKeys:[],XListType:nil,XMapType:nil,XValidations:[]ValidationRule{},},JSONSchemas:[]JSONSchemaProps{},} [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [containerPort protocol] 0xc000c43cc0 <nil> []}] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},},AdditionalProperties:nil,PatternProperties:map[string]JSONSchemaProps{},Dependencies:JSONSchemaDependencies{},AdditionalItems:nil,Definitions:JSONSchemaDefinitions{},ExternalDocs:nil,Example:nil,Nullable:false,XPreserveUnknownFields:nil,XEmbeddedResource:false,XIntOrString:false,XListMapKeys:[],XListType:nil,XMapType:nil,XValidations:[]ValidationRule{},}
  W1231 06:35:44.879779      23 warnings.go:70] unknown field "alpha"
  W1231 06:35:44.879797      23 warnings.go:70] unknown field "beta"
  W1231 06:35:44.879801      23 warnings.go:70] unknown field "delta"
  W1231 06:35:44.879805      23 warnings.go:70] unknown field "epsilon"
  W1231 06:35:44.879808      23 warnings.go:70] unknown field "gamma"
  Dec 31 06:35:45.394: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-5140" for this suite. @ 12/31/23 06:35:45.396
• [3.045 seconds]
------------------------------
SSS
------------------------------
[sig-architecture] Conformance Tests should have at least two untainted nodes [Conformance] [sig-architecture, Conformance]
test/e2e/architecture/conformance.go:39
  STEP: Creating a kubernetes client @ 12/31/23 06:35:45.398
  Dec 31 06:35:45.398: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename conformance-tests @ 12/31/23 06:35:45.398
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:35:45.404
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:35:45.405
  STEP: Getting node addresses @ 12/31/23 06:35:45.408
  Dec 31 06:35:45.408: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  Dec 31 06:35:45.409: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "conformance-tests-9243" for this suite. @ 12/31/23 06:35:45.411
• [0.015 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Environment:NotInUserNS] [Conformance] [sig-node, NodeConformance, Environment:NotInUserNS, Conformance]
test/e2e/common/node/sysctl.go:79
  STEP: Creating a kubernetes client @ 12/31/23 06:35:45.413
  Dec 31 06:35:45.413: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename sysctl @ 12/31/23 06:35:45.413
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:35:45.419
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:35:45.42
  STEP: Creating a pod with the kernel.shm_rmid_forced sysctl @ 12/31/23 06:35:45.421
  STEP: Watching for error events or started pod @ 12/31/23 06:35:45.425
  STEP: Waiting for pod completion @ 12/31/23 06:35:47.427
  STEP: Checking that the pod succeeded @ 12/31/23 06:35:49.431
  STEP: Getting logs from the pod @ 12/31/23 06:35:49.431
  STEP: Checking that the sysctl is actually updated @ 12/31/23 06:35:49.443
  Dec 31 06:35:49.443: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sysctl-668" for this suite. @ 12/31/23 06:35:49.444
• [4.033 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance] [sig-api-machinery, Serial, Conformance]
test/e2e/apimachinery/namespace.go:254
  STEP: Creating a kubernetes client @ 12/31/23 06:35:49.447
  Dec 31 06:35:49.447: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename namespaces @ 12/31/23 06:35:49.447
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:35:49.454
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:35:49.455
  STEP: Creating a test namespace @ 12/31/23 06:35:49.457
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:35:49.461
  STEP: Creating a service in the namespace @ 12/31/23 06:35:49.462
  STEP: Deleting the namespace @ 12/31/23 06:35:49.467
  STEP: Waiting for the namespace to be removed. @ 12/31/23 06:35:49.47
  STEP: Recreating the namespace @ 12/31/23 06:35:55.472
  STEP: Verifying there is no service in the namespace @ 12/31/23 06:35:55.478
  Dec 31 06:35:55.479: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-1846" for this suite. @ 12/31/23 06:35:55.481
  STEP: Destroying namespace "nsdeletetest-3872" for this suite. @ 12/31/23 06:35:55.483
  Dec 31 06:35:55.485: INFO: Namespace nsdeletetest-3872 was already deleted
  STEP: Destroying namespace "nsdeletetest-1287" for this suite. @ 12/31/23 06:35:55.485
• [6.040 seconds]
------------------------------
S
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtime.go:232
  STEP: Creating a kubernetes client @ 12/31/23 06:35:55.487
  Dec 31 06:35:55.487: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-runtime @ 12/31/23 06:35:55.487
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:35:55.544
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:35:55.546
  STEP: create the container @ 12/31/23 06:35:55.547
  W1231 06:35:55.550629      23 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 12/31/23 06:35:55.55
  STEP: get the container status @ 12/31/23 06:35:58.558
  STEP: the container should be terminated @ 12/31/23 06:35:58.559
  STEP: the termination message should be set @ 12/31/23 06:35:58.559
  Dec 31 06:35:58.559: INFO: Expected: &{} to match Container's Termination Message:  --
  STEP: delete the container @ 12/31/23 06:35:58.559
  Dec 31 06:35:58.565: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-3350" for this suite. @ 12/31/23 06:35:58.567
• [3.082 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:75
  STEP: Creating a kubernetes client @ 12/31/23 06:35:58.569
  Dec 31 06:35:58.569: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:35:58.57
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:35:58.576
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:35:58.578
  STEP: Creating configMap with name projected-configmap-test-volume-52de4429-40a6-4d6d-afdd-f6ff6fac0aa0 @ 12/31/23 06:35:58.579
  STEP: Creating a pod to test consume configMaps @ 12/31/23 06:35:58.581
  STEP: Saw pod success @ 12/31/23 06:36:02.59
  Dec 31 06:36:02.591: INFO: Trying to get logs from node worker3 pod pod-projected-configmaps-b7300cc9-e93d-45fe-8c82-123c142de0ac container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 06:36:02.593
  Dec 31 06:36:02.598: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4337" for this suite. @ 12/31/23 06:36:02.6
• [4.032 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:79
  STEP: Creating a kubernetes client @ 12/31/23 06:36:02.602
  Dec 31 06:36:02.602: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename secrets @ 12/31/23 06:36:02.603
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:36:02.61
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:36:02.612
  STEP: Creating secret with name secret-test-map-82e153fc-d293-4bc6-a17b-6bf583a23c99 @ 12/31/23 06:36:02.613
  STEP: Creating a pod to test consume secrets @ 12/31/23 06:36:02.615
  STEP: Saw pod success @ 12/31/23 06:36:06.623
  Dec 31 06:36:06.624: INFO: Trying to get logs from node worker3 pod pod-secrets-ccedff40-8e5c-4566-8a38-5eb49878dde6 container secret-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 06:36:06.627
  Dec 31 06:36:06.633: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-6716" for this suite. @ 12/31/23 06:36:06.634
• [4.034 seconds]
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:75
  STEP: Creating a kubernetes client @ 12/31/23 06:36:06.636
  Dec 31 06:36:06.637: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename configmap @ 12/31/23 06:36:06.637
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:36:06.644
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:36:06.646
  STEP: Creating configMap with name configmap-test-volume-aa239967-3a02-4c9c-aff3-d479480033a5 @ 12/31/23 06:36:06.647
  STEP: Creating a pod to test consume configMaps @ 12/31/23 06:36:06.649
  STEP: Saw pod success @ 12/31/23 06:36:10.658
  Dec 31 06:36:10.660: INFO: Trying to get logs from node worker3 pod pod-configmaps-2dd14dcb-c264-46bc-b354-c8645148594f container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 06:36:10.662
  Dec 31 06:36:10.668: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-1878" for this suite. @ 12/31/23 06:36:10.669
• [4.034 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:234
  STEP: Creating a kubernetes client @ 12/31/23 06:36:10.671
  Dec 31 06:36:10.671: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename resourcequota @ 12/31/23 06:36:10.672
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:36:10.678
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:36:10.679
  STEP: Counting existing ResourceQuota @ 12/31/23 06:36:10.68
  STEP: Creating a ResourceQuota @ 12/31/23 06:36:15.683
  STEP: Ensuring resource quota status is calculated @ 12/31/23 06:36:15.686
  STEP: Creating a Pod that fits quota @ 12/31/23 06:36:17.688
  STEP: Ensuring ResourceQuota status captures the pod usage @ 12/31/23 06:36:17.695
  STEP: Not allowing a pod to be created that exceeds remaining quota @ 12/31/23 06:36:19.698
  STEP: Not allowing a pod to be created that exceeds remaining quota(validation on extended resources) @ 12/31/23 06:36:19.699
  STEP: Ensuring a pod cannot update its resource requirements @ 12/31/23 06:36:19.7
  STEP: Ensuring attempts to update pod resource requirements did not change quota usage @ 12/31/23 06:36:19.702
  STEP: Deleting the pod @ 12/31/23 06:36:21.704
  STEP: Ensuring resource quota status released the pod usage @ 12/31/23 06:36:21.71
  Dec 31 06:36:23.712: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-613" for this suite. @ 12/31/23 06:36:23.713
• [13.045 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:808
  STEP: Creating a kubernetes client @ 12/31/23 06:36:23.716
  Dec 31 06:36:23.716: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename resourcequota @ 12/31/23 06:36:23.716
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:36:23.724
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:36:23.725
  STEP: Creating a ResourceQuota with best effort scope @ 12/31/23 06:36:23.727
  STEP: Ensuring ResourceQuota status is calculated @ 12/31/23 06:36:23.728
  STEP: Creating a ResourceQuota with not best effort scope @ 12/31/23 06:36:25.731
  STEP: Ensuring ResourceQuota status is calculated @ 12/31/23 06:36:25.733
  STEP: Creating a best-effort pod @ 12/31/23 06:36:27.735
  STEP: Ensuring resource quota with best effort scope captures the pod usage @ 12/31/23 06:36:27.741
  STEP: Ensuring resource quota with not best effort ignored the pod usage @ 12/31/23 06:36:29.742
  STEP: Deleting the pod @ 12/31/23 06:36:31.745
  STEP: Ensuring resource quota status released the pod usage @ 12/31/23 06:36:31.751
  STEP: Creating a not best-effort pod @ 12/31/23 06:36:33.754
  STEP: Ensuring resource quota with not best effort scope captures the pod usage @ 12/31/23 06:36:33.758
  STEP: Ensuring resource quota with best effort scope ignored the pod usage @ 12/31/23 06:36:35.759
  STEP: Deleting the pod @ 12/31/23 06:36:37.761
  STEP: Ensuring resource quota status released the pod usage @ 12/31/23 06:36:37.768
  Dec 31 06:36:39.770: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-4800" for this suite. @ 12/31/23 06:36:39.771
• [16.058 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should allow opting out of API token automount [Conformance] [sig-auth, Conformance]
test/e2e/auth/service_accounts.go:163
  STEP: Creating a kubernetes client @ 12/31/23 06:36:39.774
  Dec 31 06:36:39.774: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename svcaccounts @ 12/31/23 06:36:39.774
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:36:39.781
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:36:39.782
  Dec 31 06:36:39.791: INFO: created pod pod-service-account-defaultsa
  Dec 31 06:36:39.791: INFO: pod pod-service-account-defaultsa service account token volume mount: true
  Dec 31 06:36:39.793: INFO: created pod pod-service-account-mountsa
  Dec 31 06:36:39.793: INFO: pod pod-service-account-mountsa service account token volume mount: true
  Dec 31 06:36:39.796: INFO: created pod pod-service-account-nomountsa
  Dec 31 06:36:39.796: INFO: pod pod-service-account-nomountsa service account token volume mount: false
  Dec 31 06:36:39.801: INFO: created pod pod-service-account-defaultsa-mountspec
  Dec 31 06:36:39.801: INFO: pod pod-service-account-defaultsa-mountspec service account token volume mount: true
  Dec 31 06:36:39.806: INFO: created pod pod-service-account-mountsa-mountspec
  Dec 31 06:36:39.806: INFO: pod pod-service-account-mountsa-mountspec service account token volume mount: true
  Dec 31 06:36:39.809: INFO: created pod pod-service-account-nomountsa-mountspec
  Dec 31 06:36:39.809: INFO: pod pod-service-account-nomountsa-mountspec service account token volume mount: true
  Dec 31 06:36:39.812: INFO: created pod pod-service-account-defaultsa-nomountspec
  Dec 31 06:36:39.812: INFO: pod pod-service-account-defaultsa-nomountspec service account token volume mount: false
  Dec 31 06:36:39.815: INFO: created pod pod-service-account-mountsa-nomountspec
  Dec 31 06:36:39.815: INFO: pod pod-service-account-mountsa-nomountspec service account token volume mount: false
  Dec 31 06:36:39.819: INFO: created pod pod-service-account-nomountsa-nomountspec
  Dec 31 06:36:39.819: INFO: pod pod-service-account-nomountsa-nomountspec service account token volume mount: false
  Dec 31 06:36:39.819: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-626" for this suite. @ 12/31/23 06:36:39.822
• [0.056 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:241
  STEP: Creating a kubernetes client @ 12/31/23 06:36:39.83
  Dec 31 06:36:39.830: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename configmap @ 12/31/23 06:36:39.83
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:36:39.84
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:36:39.841
  STEP: Creating configMap with name cm-test-opt-del-97557b1d-7c5f-4a4b-90c0-098841b0f86c @ 12/31/23 06:36:39.845
  STEP: Creating configMap with name cm-test-opt-upd-9f5068cf-174f-4658-b5a9-e051ce6e7721 @ 12/31/23 06:36:39.847
  STEP: Creating the pod @ 12/31/23 06:36:39.849
  STEP: Deleting configmap cm-test-opt-del-97557b1d-7c5f-4a4b-90c0-098841b0f86c @ 12/31/23 06:36:41.864
  STEP: Updating configmap cm-test-opt-upd-9f5068cf-174f-4658-b5a9-e051ce6e7721 @ 12/31/23 06:36:41.866
  STEP: Creating configMap with name cm-test-opt-create-49f828fc-0a94-42ad-8056-786f674504b2 @ 12/31/23 06:36:41.868
  STEP: waiting to observe update in volume @ 12/31/23 06:36:41.87
  Dec 31 06:38:02.091: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-6149" for this suite. @ 12/31/23 06:38:02.092
• [82.265 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/preemption.go:812
  STEP: Creating a kubernetes client @ 12/31/23 06:38:02.095
  Dec 31 06:38:02.095: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename sched-preemption @ 12/31/23 06:38:02.095
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:38:02.102
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:38:02.103
  Dec 31 06:38:02.110: INFO: Waiting up to 1m0s for all nodes to be ready
  Dec 31 06:39:02.112: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Creating a kubernetes client @ 12/31/23 06:39:02.113
  Dec 31 06:39:02.113: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename sched-preemption-path @ 12/31/23 06:39:02.114
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:39:02.12
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:39:02.121
  Dec 31 06:39:02.128: INFO: PriorityClass.scheduling.k8s.io "p1" is invalid: value: Forbidden: may not be changed in an update.
  Dec 31 06:39:02.129: INFO: PriorityClass.scheduling.k8s.io "p2" is invalid: value: Forbidden: may not be changed in an update.
  Dec 31 06:39:02.153: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-path-9938" for this suite. @ 12/31/23 06:39:02.155
  Dec 31 06:39:02.156: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-1577" for this suite. @ 12/31/23 06:39:02.158
• [60.065 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance] [sig-storage, Conformance]
test/e2e/storage/subpath.go:69
  STEP: Creating a kubernetes client @ 12/31/23 06:39:02.16
  Dec 31 06:39:02.160: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename subpath @ 12/31/23 06:39:02.16
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:39:02.166
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:39:02.167
  STEP: Setting up data @ 12/31/23 06:39:02.169
  STEP: Creating pod pod-subpath-test-configmap-t7hw @ 12/31/23 06:39:02.172
  STEP: Creating a pod to test atomic-volume-subpath @ 12/31/23 06:39:02.172
  STEP: Saw pod success @ 12/31/23 06:39:24.201
  Dec 31 06:39:24.202: INFO: Trying to get logs from node worker3 pod pod-subpath-test-configmap-t7hw container test-container-subpath-configmap-t7hw: <nil>
  STEP: delete the pod @ 12/31/23 06:39:24.205
  STEP: Deleting pod pod-subpath-test-configmap-t7hw @ 12/31/23 06:39:24.211
  Dec 31 06:39:24.211: INFO: Deleting pod "pod-subpath-test-configmap-t7hw" in namespace "subpath-2494"
  Dec 31 06:39:24.211: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-2494" for this suite. @ 12/31/23 06:39:24.213
• [22.056 seconds]
------------------------------
S
------------------------------
[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance] [sig-apps, Conformance]
test/e2e/apps/cronjob.go:161
  STEP: Creating a kubernetes client @ 12/31/23 06:39:24.216
  Dec 31 06:39:24.216: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename cronjob @ 12/31/23 06:39:24.216
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:39:24.222
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:39:24.223
  STEP: Creating a ReplaceConcurrent cronjob @ 12/31/23 06:39:24.225
  STEP: Ensuring a job is scheduled @ 12/31/23 06:39:24.227
  STEP: Ensuring exactly one is scheduled @ 12/31/23 06:40:00.229
  STEP: Ensuring exactly one running job exists by listing jobs explicitly @ 12/31/23 06:40:00.23
  STEP: Ensuring the job is replaced with a new one @ 12/31/23 06:40:00.231
  STEP: Removing cronjob @ 12/31/23 06:41:00.232
  Dec 31 06:41:00.235: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-3411" for this suite. @ 12/31/23 06:41:00.236
• [96.023 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:309
  STEP: Creating a kubernetes client @ 12/31/23 06:41:00.239
  Dec 31 06:41:00.239: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename crd-publish-openapi @ 12/31/23 06:41:00.24
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:41:00.248
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:41:00.25
  STEP: CRs in the same group but different versions (one multiversion CRD) show up in OpenAPI documentation @ 12/31/23 06:41:00.251
  Dec 31 06:41:00.252: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: CRs in the same group but different versions (two CRDs) show up in OpenAPI documentation @ 12/31/23 06:41:05.036
  Dec 31 06:41:05.036: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:41:06.226: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:41:10.916: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-2445" for this suite. @ 12/31/23 06:41:10.92
• [10.684 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-network] Service endpoints latency should not be very high [Conformance] [sig-network, Conformance]
test/e2e/network/service_latency.go:59
  STEP: Creating a kubernetes client @ 12/31/23 06:41:10.923
  Dec 31 06:41:10.923: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename svc-latency @ 12/31/23 06:41:10.924
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:41:10.93
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:41:10.932
  Dec 31 06:41:10.933: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: creating replication controller svc-latency-rc in namespace svc-latency-3849 @ 12/31/23 06:41:10.933
  I1231 06:41:10.936115      23 runners.go:197] Created replication controller with name: svc-latency-rc, namespace: svc-latency-3849, replica count: 1
  I1231 06:41:11.987506      23 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 0 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  I1231 06:41:12.988512      23 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 1 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Dec 31 06:41:13.095: INFO: Created: latency-svc-967w4
  Dec 31 06:41:13.099: INFO: Got endpoints: latency-svc-967w4 [10.292558ms]
  Dec 31 06:41:13.105: INFO: Created: latency-svc-jwblh
  Dec 31 06:41:13.108: INFO: Created: latency-svc-zfq7w
  Dec 31 06:41:13.109: INFO: Got endpoints: latency-svc-jwblh [9.310875ms]
  Dec 31 06:41:13.110: INFO: Created: latency-svc-9nml4
  Dec 31 06:41:13.111: INFO: Got endpoints: latency-svc-zfq7w [11.895667ms]
  Dec 31 06:41:13.115: INFO: Got endpoints: latency-svc-9nml4 [14.839059ms]
  Dec 31 06:41:13.120: INFO: Created: latency-svc-m8fgd
  Dec 31 06:41:13.122: INFO: Got endpoints: latency-svc-m8fgd [22.268594ms]
  Dec 31 06:41:13.123: INFO: Created: latency-svc-w7mzx
  Dec 31 06:41:13.126: INFO: Created: latency-svc-6n5dt
  Dec 31 06:41:13.127: INFO: Got endpoints: latency-svc-w7mzx [26.866093ms]
  Dec 31 06:41:13.131: INFO: Got endpoints: latency-svc-6n5dt [31.796976ms]
  Dec 31 06:41:13.133: INFO: Created: latency-svc-qlpjb
  Dec 31 06:41:13.137: INFO: Got endpoints: latency-svc-qlpjb [36.761561ms]
  Dec 31 06:41:13.138: INFO: Created: latency-svc-c5ljg
  Dec 31 06:41:13.138: INFO: Created: latency-svc-tcjm7
  Dec 31 06:41:13.140: INFO: Got endpoints: latency-svc-tcjm7 [40.68682ms]
  Dec 31 06:41:13.143: INFO: Created: latency-svc-nqkgm
  Dec 31 06:41:13.143: INFO: Got endpoints: latency-svc-c5ljg [43.650805ms]
  Dec 31 06:41:13.145: INFO: Got endpoints: latency-svc-nqkgm [45.843136ms]
  Dec 31 06:41:13.147: INFO: Created: latency-svc-4wwrv
  Dec 31 06:41:13.150: INFO: Created: latency-svc-jdlkl
  Dec 31 06:41:13.151: INFO: Got endpoints: latency-svc-4wwrv [51.444911ms]
  Dec 31 06:41:13.158: INFO: Got endpoints: latency-svc-jdlkl [58.437461ms]
  Dec 31 06:41:13.158: INFO: Created: latency-svc-2sgl2
  Dec 31 06:41:13.164: INFO: Got endpoints: latency-svc-2sgl2 [63.730971ms]
  Dec 31 06:41:13.165: INFO: Created: latency-svc-tgxzl
  Dec 31 06:41:13.167: INFO: Created: latency-svc-mc27w
  Dec 31 06:41:13.169: INFO: Got endpoints: latency-svc-tgxzl [69.038173ms]
  Dec 31 06:41:13.173: INFO: Created: latency-svc-fjmz4
  Dec 31 06:41:13.174: INFO: Got endpoints: latency-svc-mc27w [74.353062ms]
  Dec 31 06:41:13.175: INFO: Got endpoints: latency-svc-fjmz4 [66.351543ms]
  Dec 31 06:41:13.177: INFO: Created: latency-svc-7swfw
  Dec 31 06:41:13.180: INFO: Created: latency-svc-s86cp
  Dec 31 06:41:13.182: INFO: Got endpoints: latency-svc-7swfw [70.525661ms]
  Dec 31 06:41:13.183: INFO: Got endpoints: latency-svc-s86cp [68.468196ms]
  Dec 31 06:41:13.184: INFO: Created: latency-svc-7x8xj
  Dec 31 06:41:13.186: INFO: Got endpoints: latency-svc-7x8xj [63.85129ms]
  Dec 31 06:41:13.187: INFO: Created: latency-svc-wmlrj
  Dec 31 06:41:13.190: INFO: Created: latency-svc-qpx9r
  Dec 31 06:41:13.191: INFO: Got endpoints: latency-svc-wmlrj [63.88155ms]
  Dec 31 06:41:13.193: INFO: Created: latency-svc-4t6lx
  Dec 31 06:41:13.193: INFO: Got endpoints: latency-svc-qpx9r [61.462414ms]
  Dec 31 06:41:13.196: INFO: Got endpoints: latency-svc-4t6lx [59.366626ms]
  Dec 31 06:41:13.197: INFO: Created: latency-svc-7fqvq
  Dec 31 06:41:13.202: INFO: Got endpoints: latency-svc-7fqvq [62.026382ms]
  Dec 31 06:41:13.208: INFO: Created: latency-svc-6cdtz
  Dec 31 06:41:13.209: INFO: Created: latency-svc-zzlds
  Dec 31 06:41:13.215: INFO: Got endpoints: latency-svc-6cdtz [71.686837ms]
  Dec 31 06:41:13.215: INFO: Got endpoints: latency-svc-zzlds [69.540265ms]
  Dec 31 06:41:13.219: INFO: Created: latency-svc-zt4cc
  Dec 31 06:41:13.221: INFO: Created: latency-svc-6mtqb
  Dec 31 06:41:13.222: INFO: Got endpoints: latency-svc-6mtqb [70.477664ms]
  Dec 31 06:41:13.224: INFO: Got endpoints: latency-svc-zt4cc [65.412122ms]
  Dec 31 06:41:13.224: INFO: Created: latency-svc-q25nh
  Dec 31 06:41:13.227: INFO: Got endpoints: latency-svc-q25nh [62.974129ms]
  Dec 31 06:41:13.229: INFO: Created: latency-svc-q2vwc
  Dec 31 06:41:13.230: INFO: Got endpoints: latency-svc-q2vwc [61.126029ms]
  Dec 31 06:41:13.265: INFO: Created: latency-svc-6jpg2
  Dec 31 06:41:13.265: INFO: Created: latency-svc-gp4pv
  Dec 31 06:41:13.265: INFO: Created: latency-svc-6bbnv
  Dec 31 06:41:13.269: INFO: Created: latency-svc-9ghf8
  Dec 31 06:41:13.269: INFO: Created: latency-svc-8x9d6
  Dec 31 06:41:13.269: INFO: Created: latency-svc-r8z8x
  Dec 31 06:41:13.269: INFO: Created: latency-svc-bhk4p
  Dec 31 06:41:13.270: INFO: Created: latency-svc-lr7w7
  Dec 31 06:41:13.270: INFO: Created: latency-svc-hqsnl
  Dec 31 06:41:13.271: INFO: Created: latency-svc-tzbgc
  Dec 31 06:41:13.271: INFO: Created: latency-svc-c2m2v
  Dec 31 06:41:13.271: INFO: Created: latency-svc-z9hz5
  Dec 31 06:41:13.271: INFO: Created: latency-svc-7djp8
  Dec 31 06:41:13.274: INFO: Created: latency-svc-pdtx4
  Dec 31 06:41:13.274: INFO: Created: latency-svc-89cg7
  Dec 31 06:41:13.274: INFO: Got endpoints: latency-svc-c2m2v [82.944465ms]
  Dec 31 06:41:13.274: INFO: Got endpoints: latency-svc-gp4pv [80.737759ms]
  Dec 31 06:41:13.274: INFO: Got endpoints: latency-svc-6jpg2 [77.560922ms]
  Dec 31 06:41:13.282: INFO: Created: latency-svc-z5b5x
  Dec 31 06:41:13.285: INFO: Created: latency-svc-67sfg
  Dec 31 06:41:13.287: INFO: Created: latency-svc-bdw7k
  Dec 31 06:41:13.299: INFO: Got endpoints: latency-svc-6bbnv [68.535344ms]
  Dec 31 06:41:13.303: INFO: Created: latency-svc-2r5xp
  Dec 31 06:41:13.349: INFO: Got endpoints: latency-svc-9ghf8 [146.555471ms]
  Dec 31 06:41:13.353: INFO: Created: latency-svc-r67xm
  Dec 31 06:41:13.398: INFO: Got endpoints: latency-svc-8x9d6 [174.349516ms]
  Dec 31 06:41:13.403: INFO: Created: latency-svc-bjhvx
  Dec 31 06:41:13.449: INFO: Got endpoints: latency-svc-bhk4p [233.541425ms]
  Dec 31 06:41:13.453: INFO: Created: latency-svc-6wcrw
  Dec 31 06:41:13.498: INFO: Got endpoints: latency-svc-lr7w7 [323.763204ms]
  Dec 31 06:41:13.502: INFO: Created: latency-svc-lcqkz
  Dec 31 06:41:13.548: INFO: Got endpoints: latency-svc-z9hz5 [366.009183ms]
  Dec 31 06:41:13.555: INFO: Created: latency-svc-tn8tl
  Dec 31 06:41:13.598: INFO: Got endpoints: latency-svc-7djp8 [423.34427ms]
  Dec 31 06:41:13.604: INFO: Created: latency-svc-vq7n6
  Dec 31 06:41:13.649: INFO: Got endpoints: latency-svc-89cg7 [465.754057ms]
  Dec 31 06:41:13.654: INFO: Created: latency-svc-fg89v
  Dec 31 06:41:13.698: INFO: Got endpoints: latency-svc-tzbgc [482.984843ms]
  Dec 31 06:41:13.703: INFO: Created: latency-svc-lj5sd
  Dec 31 06:41:13.749: INFO: Got endpoints: latency-svc-pdtx4 [562.922022ms]
  Dec 31 06:41:13.753: INFO: Created: latency-svc-dlpnz
  Dec 31 06:41:13.799: INFO: Got endpoints: latency-svc-r8z8x [577.530427ms]
  Dec 31 06:41:13.804: INFO: Created: latency-svc-d7dft
  Dec 31 06:41:13.848: INFO: Got endpoints: latency-svc-hqsnl [621.25093ms]
  Dec 31 06:41:13.853: INFO: Created: latency-svc-gqvkk
  Dec 31 06:41:13.899: INFO: Got endpoints: latency-svc-z5b5x [625.425234ms]
  Dec 31 06:41:13.904: INFO: Created: latency-svc-j6nkj
  Dec 31 06:41:13.950: INFO: Got endpoints: latency-svc-67sfg [676.202203ms]
  Dec 31 06:41:13.955: INFO: Created: latency-svc-sfnkf
  Dec 31 06:41:13.999: INFO: Got endpoints: latency-svc-bdw7k [725.185387ms]
  Dec 31 06:41:14.003: INFO: Created: latency-svc-wbw76
  Dec 31 06:41:14.048: INFO: Got endpoints: latency-svc-2r5xp [749.863058ms]
  Dec 31 06:41:14.053: INFO: Created: latency-svc-q7wmz
  Dec 31 06:41:14.099: INFO: Got endpoints: latency-svc-r67xm [749.941678ms]
  Dec 31 06:41:14.104: INFO: Created: latency-svc-jp9kr
  Dec 31 06:41:14.149: INFO: Got endpoints: latency-svc-bjhvx [750.932157ms]
  Dec 31 06:41:14.156: INFO: Created: latency-svc-rjb7c
  Dec 31 06:41:14.200: INFO: Got endpoints: latency-svc-6wcrw [751.605487ms]
  Dec 31 06:41:14.205: INFO: Created: latency-svc-5vwgm
  Dec 31 06:41:14.248: INFO: Got endpoints: latency-svc-lcqkz [750.758148ms]
  Dec 31 06:41:14.252: INFO: Created: latency-svc-7dp27
  Dec 31 06:41:14.299: INFO: Got endpoints: latency-svc-tn8tl [751.467483ms]
  Dec 31 06:41:14.304: INFO: Created: latency-svc-pmzmb
  Dec 31 06:41:14.349: INFO: Got endpoints: latency-svc-vq7n6 [750.87873ms]
  Dec 31 06:41:14.354: INFO: Created: latency-svc-52xvq
  Dec 31 06:41:14.398: INFO: Got endpoints: latency-svc-fg89v [749.293765ms]
  Dec 31 06:41:14.403: INFO: Created: latency-svc-cvxbn
  Dec 31 06:41:14.448: INFO: Got endpoints: latency-svc-lj5sd [750.046816ms]
  Dec 31 06:41:14.452: INFO: Created: latency-svc-xwhq2
  Dec 31 06:41:14.498: INFO: Got endpoints: latency-svc-dlpnz [749.518564ms]
  Dec 31 06:41:14.503: INFO: Created: latency-svc-6k8zv
  Dec 31 06:41:14.549: INFO: Got endpoints: latency-svc-d7dft [749.986162ms]
  Dec 31 06:41:14.554: INFO: Created: latency-svc-tx5tt
  Dec 31 06:41:14.598: INFO: Got endpoints: latency-svc-gqvkk [750.314462ms]
  Dec 31 06:41:14.603: INFO: Created: latency-svc-gq6kk
  Dec 31 06:41:14.648: INFO: Got endpoints: latency-svc-j6nkj [748.946332ms]
  Dec 31 06:41:14.653: INFO: Created: latency-svc-dlgcr
  Dec 31 06:41:14.698: INFO: Got endpoints: latency-svc-sfnkf [748.379983ms]
  Dec 31 06:41:14.703: INFO: Created: latency-svc-d59mr
  Dec 31 06:41:14.749: INFO: Got endpoints: latency-svc-wbw76 [750.182445ms]
  Dec 31 06:41:14.754: INFO: Created: latency-svc-hq8s4
  Dec 31 06:41:14.799: INFO: Got endpoints: latency-svc-q7wmz [750.472049ms]
  Dec 31 06:41:14.804: INFO: Created: latency-svc-7b7q5
  Dec 31 06:41:14.853: INFO: Got endpoints: latency-svc-jp9kr [754.021109ms]
  Dec 31 06:41:14.858: INFO: Created: latency-svc-sdwwx
  Dec 31 06:41:14.898: INFO: Got endpoints: latency-svc-rjb7c [749.284508ms]
  Dec 31 06:41:14.903: INFO: Created: latency-svc-zq86d
  Dec 31 06:41:14.950: INFO: Got endpoints: latency-svc-5vwgm [749.370506ms]
  Dec 31 06:41:14.954: INFO: Created: latency-svc-xhzbq
  Dec 31 06:41:14.999: INFO: Got endpoints: latency-svc-7dp27 [750.425035ms]
  Dec 31 06:41:15.003: INFO: Created: latency-svc-vxvxd
  Dec 31 06:41:15.050: INFO: Got endpoints: latency-svc-pmzmb [750.751343ms]
  Dec 31 06:41:15.055: INFO: Created: latency-svc-ghhlq
  Dec 31 06:41:15.098: INFO: Got endpoints: latency-svc-52xvq [748.499982ms]
  Dec 31 06:41:15.103: INFO: Created: latency-svc-6gd4z
  Dec 31 06:41:15.149: INFO: Got endpoints: latency-svc-cvxbn [750.469637ms]
  Dec 31 06:41:15.153: INFO: Created: latency-svc-jswrp
  Dec 31 06:41:15.199: INFO: Got endpoints: latency-svc-xwhq2 [751.041306ms]
  Dec 31 06:41:15.204: INFO: Created: latency-svc-g9tgs
  Dec 31 06:41:15.249: INFO: Got endpoints: latency-svc-6k8zv [750.817937ms]
  Dec 31 06:41:15.254: INFO: Created: latency-svc-5szxt
  Dec 31 06:41:15.298: INFO: Got endpoints: latency-svc-tx5tt [748.838393ms]
  Dec 31 06:41:15.303: INFO: Created: latency-svc-ll27z
  Dec 31 06:41:15.348: INFO: Got endpoints: latency-svc-gq6kk [750.018938ms]
  Dec 31 06:41:15.353: INFO: Created: latency-svc-h99ds
  Dec 31 06:41:15.399: INFO: Got endpoints: latency-svc-dlgcr [750.953543ms]
  Dec 31 06:41:15.403: INFO: Created: latency-svc-pnxvf
  Dec 31 06:41:15.449: INFO: Got endpoints: latency-svc-d59mr [750.69183ms]
  Dec 31 06:41:15.454: INFO: Created: latency-svc-9tgc4
  Dec 31 06:41:15.499: INFO: Got endpoints: latency-svc-hq8s4 [749.771012ms]
  Dec 31 06:41:15.504: INFO: Created: latency-svc-972t5
  Dec 31 06:41:15.550: INFO: Got endpoints: latency-svc-7b7q5 [751.009017ms]
  Dec 31 06:41:15.555: INFO: Created: latency-svc-rx4cx
  Dec 31 06:41:15.600: INFO: Got endpoints: latency-svc-sdwwx [747.424924ms]
  Dec 31 06:41:15.605: INFO: Created: latency-svc-l9s48
  Dec 31 06:41:15.648: INFO: Got endpoints: latency-svc-zq86d [749.704862ms]
  Dec 31 06:41:15.653: INFO: Created: latency-svc-jfsgb
  Dec 31 06:41:15.698: INFO: Got endpoints: latency-svc-xhzbq [748.387604ms]
  Dec 31 06:41:15.704: INFO: Created: latency-svc-5fvq9
  Dec 31 06:41:15.749: INFO: Got endpoints: latency-svc-vxvxd [750.377575ms]
  Dec 31 06:41:15.753: INFO: Created: latency-svc-bj7lw
  Dec 31 06:41:15.800: INFO: Got endpoints: latency-svc-ghhlq [749.880607ms]
  Dec 31 06:41:15.804: INFO: Created: latency-svc-f9q6b
  Dec 31 06:41:15.848: INFO: Got endpoints: latency-svc-6gd4z [750.291232ms]
  Dec 31 06:41:15.853: INFO: Created: latency-svc-6npwd
  Dec 31 06:41:15.900: INFO: Got endpoints: latency-svc-jswrp [750.986211ms]
  Dec 31 06:41:15.905: INFO: Created: latency-svc-jhrwx
  Dec 31 06:41:15.949: INFO: Got endpoints: latency-svc-g9tgs [749.756639ms]
  Dec 31 06:41:15.954: INFO: Created: latency-svc-kvwgg
  Dec 31 06:41:15.999: INFO: Got endpoints: latency-svc-5szxt [749.507959ms]
  Dec 31 06:41:16.005: INFO: Created: latency-svc-hcgf8
  Dec 31 06:41:16.049: INFO: Got endpoints: latency-svc-ll27z [750.912625ms]
  Dec 31 06:41:16.054: INFO: Created: latency-svc-44xbd
  Dec 31 06:41:16.098: INFO: Got endpoints: latency-svc-h99ds [749.496902ms]
  Dec 31 06:41:16.102: INFO: Created: latency-svc-hl6zc
  Dec 31 06:41:16.149: INFO: Got endpoints: latency-svc-pnxvf [750.000689ms]
  Dec 31 06:41:16.154: INFO: Created: latency-svc-8js6j
  Dec 31 06:41:16.198: INFO: Got endpoints: latency-svc-9tgc4 [748.79513ms]
  Dec 31 06:41:16.202: INFO: Created: latency-svc-5k848
  Dec 31 06:41:16.248: INFO: Got endpoints: latency-svc-972t5 [748.882912ms]
  Dec 31 06:41:16.254: INFO: Created: latency-svc-glkf8
  Dec 31 06:41:16.298: INFO: Got endpoints: latency-svc-rx4cx [747.949603ms]
  Dec 31 06:41:16.302: INFO: Created: latency-svc-5nxt9
  Dec 31 06:41:16.348: INFO: Got endpoints: latency-svc-l9s48 [747.642614ms]
  Dec 31 06:41:16.354: INFO: Created: latency-svc-dwsj2
  Dec 31 06:41:16.399: INFO: Got endpoints: latency-svc-jfsgb [750.606853ms]
  Dec 31 06:41:16.403: INFO: Created: latency-svc-r8bc4
  Dec 31 06:41:16.448: INFO: Got endpoints: latency-svc-5fvq9 [750.360567ms]
  Dec 31 06:41:16.453: INFO: Created: latency-svc-5hrg4
  Dec 31 06:41:16.499: INFO: Got endpoints: latency-svc-bj7lw [749.57642ms]
  Dec 31 06:41:16.504: INFO: Created: latency-svc-4478r
  Dec 31 06:41:16.549: INFO: Got endpoints: latency-svc-f9q6b [749.020774ms]
  Dec 31 06:41:16.555: INFO: Created: latency-svc-cvjmn
  Dec 31 06:41:16.598: INFO: Got endpoints: latency-svc-6npwd [750.163781ms]
  Dec 31 06:41:16.603: INFO: Created: latency-svc-2cf6t
  Dec 31 06:41:16.649: INFO: Got endpoints: latency-svc-jhrwx [749.089052ms]
  Dec 31 06:41:16.653: INFO: Created: latency-svc-9pk4d
  Dec 31 06:41:16.700: INFO: Got endpoints: latency-svc-kvwgg [750.938089ms]
  Dec 31 06:41:16.705: INFO: Created: latency-svc-dqvpx
  Dec 31 06:41:16.753: INFO: Got endpoints: latency-svc-hcgf8 [753.873449ms]
  Dec 31 06:41:16.759: INFO: Created: latency-svc-qdvph
  Dec 31 06:41:16.799: INFO: Got endpoints: latency-svc-44xbd [749.984457ms]
  Dec 31 06:41:16.803: INFO: Created: latency-svc-z22mx
  Dec 31 06:41:16.849: INFO: Got endpoints: latency-svc-hl6zc [751.337207ms]
  Dec 31 06:41:16.854: INFO: Created: latency-svc-xzgt2
  Dec 31 06:41:16.899: INFO: Got endpoints: latency-svc-8js6j [750.016836ms]
  Dec 31 06:41:16.904: INFO: Created: latency-svc-hrgh6
  Dec 31 06:41:16.949: INFO: Got endpoints: latency-svc-5k848 [751.414019ms]
  Dec 31 06:41:16.954: INFO: Created: latency-svc-fxnft
  Dec 31 06:41:16.998: INFO: Got endpoints: latency-svc-glkf8 [750.374919ms]
  Dec 31 06:41:17.004: INFO: Created: latency-svc-tpbxd
  Dec 31 06:41:17.049: INFO: Got endpoints: latency-svc-5nxt9 [750.559227ms]
  Dec 31 06:41:17.053: INFO: Created: latency-svc-w9m5g
  Dec 31 06:41:17.099: INFO: Got endpoints: latency-svc-dwsj2 [751.318534ms]
  Dec 31 06:41:17.104: INFO: Created: latency-svc-9cts5
  Dec 31 06:41:17.150: INFO: Got endpoints: latency-svc-r8bc4 [750.759128ms]
  Dec 31 06:41:17.154: INFO: Created: latency-svc-75hm8
  Dec 31 06:41:17.198: INFO: Got endpoints: latency-svc-5hrg4 [749.872758ms]
  Dec 31 06:41:17.206: INFO: Created: latency-svc-k79gb
  Dec 31 06:41:17.249: INFO: Got endpoints: latency-svc-4478r [750.415633ms]
  Dec 31 06:41:17.254: INFO: Created: latency-svc-69mvt
  Dec 31 06:41:17.300: INFO: Got endpoints: latency-svc-cvjmn [750.670453ms]
  Dec 31 06:41:17.305: INFO: Created: latency-svc-g7fpm
  Dec 31 06:41:17.350: INFO: Got endpoints: latency-svc-2cf6t [751.07838ms]
  Dec 31 06:41:17.354: INFO: Created: latency-svc-8gt46
  Dec 31 06:41:17.398: INFO: Got endpoints: latency-svc-9pk4d [749.244663ms]
  Dec 31 06:41:17.403: INFO: Created: latency-svc-9cr7r
  Dec 31 06:41:17.448: INFO: Got endpoints: latency-svc-dqvpx [748.393025ms]
  Dec 31 06:41:17.453: INFO: Created: latency-svc-98fjn
  Dec 31 06:41:17.499: INFO: Got endpoints: latency-svc-qdvph [745.967724ms]
  Dec 31 06:41:17.503: INFO: Created: latency-svc-g84zj
  Dec 31 06:41:17.549: INFO: Got endpoints: latency-svc-z22mx [750.131274ms]
  Dec 31 06:41:17.554: INFO: Created: latency-svc-b9qk4
  Dec 31 06:41:17.599: INFO: Got endpoints: latency-svc-xzgt2 [750.173255ms]
  Dec 31 06:41:17.604: INFO: Created: latency-svc-wsxhw
  Dec 31 06:41:17.649: INFO: Got endpoints: latency-svc-hrgh6 [749.621085ms]
  Dec 31 06:41:17.653: INFO: Created: latency-svc-jz4fh
  Dec 31 06:41:17.699: INFO: Got endpoints: latency-svc-fxnft [749.831303ms]
  Dec 31 06:41:17.703: INFO: Created: latency-svc-blsrh
  Dec 31 06:41:17.749: INFO: Got endpoints: latency-svc-tpbxd [750.250164ms]
  Dec 31 06:41:17.753: INFO: Created: latency-svc-97fqz
  Dec 31 06:41:17.799: INFO: Got endpoints: latency-svc-w9m5g [750.402479ms]
  Dec 31 06:41:17.804: INFO: Created: latency-svc-qlvrx
  Dec 31 06:41:17.848: INFO: Got endpoints: latency-svc-9cts5 [748.960634ms]
  Dec 31 06:41:17.853: INFO: Created: latency-svc-k52gn
  Dec 31 06:41:17.899: INFO: Got endpoints: latency-svc-75hm8 [749.110488ms]
  Dec 31 06:41:17.903: INFO: Created: latency-svc-m77b6
  Dec 31 06:41:17.950: INFO: Got endpoints: latency-svc-k79gb [751.56288ms]
  Dec 31 06:41:17.955: INFO: Created: latency-svc-xft55
  Dec 31 06:41:18.000: INFO: Got endpoints: latency-svc-69mvt [750.839519ms]
  Dec 31 06:41:18.005: INFO: Created: latency-svc-4x486
  Dec 31 06:41:18.048: INFO: Got endpoints: latency-svc-g7fpm [748.095944ms]
  Dec 31 06:41:18.053: INFO: Created: latency-svc-m2gvl
  Dec 31 06:41:18.098: INFO: Got endpoints: latency-svc-8gt46 [748.817616ms]
  Dec 31 06:41:18.103: INFO: Created: latency-svc-nrjmj
  Dec 31 06:41:18.149: INFO: Got endpoints: latency-svc-9cr7r [750.702189ms]
  Dec 31 06:41:18.153: INFO: Created: latency-svc-j8mlc
  Dec 31 06:41:18.199: INFO: Got endpoints: latency-svc-98fjn [750.474531ms]
  Dec 31 06:41:18.203: INFO: Created: latency-svc-v87tz
  Dec 31 06:41:18.250: INFO: Got endpoints: latency-svc-g84zj [750.823976ms]
  Dec 31 06:41:18.255: INFO: Created: latency-svc-rztrd
  Dec 31 06:41:18.299: INFO: Got endpoints: latency-svc-b9qk4 [749.716729ms]
  Dec 31 06:41:18.303: INFO: Created: latency-svc-rgmrg
  Dec 31 06:41:18.351: INFO: Got endpoints: latency-svc-wsxhw [752.060571ms]
  Dec 31 06:41:18.356: INFO: Created: latency-svc-bpxwc
  Dec 31 06:41:18.399: INFO: Got endpoints: latency-svc-jz4fh [749.595692ms]
  Dec 31 06:41:18.403: INFO: Created: latency-svc-lw4bn
  Dec 31 06:41:18.448: INFO: Got endpoints: latency-svc-blsrh [748.895915ms]
  Dec 31 06:41:18.454: INFO: Created: latency-svc-j8c2x
  Dec 31 06:41:18.498: INFO: Got endpoints: latency-svc-97fqz [749.58861ms]
  Dec 31 06:41:18.503: INFO: Created: latency-svc-5f2vk
  Dec 31 06:41:18.551: INFO: Got endpoints: latency-svc-qlvrx [751.966879ms]
  Dec 31 06:41:18.557: INFO: Created: latency-svc-c26ks
  Dec 31 06:41:18.598: INFO: Got endpoints: latency-svc-k52gn [749.884081ms]
  Dec 31 06:41:18.603: INFO: Created: latency-svc-msmfw
  Dec 31 06:41:18.648: INFO: Got endpoints: latency-svc-m77b6 [749.324127ms]
  Dec 31 06:41:18.654: INFO: Created: latency-svc-6wrzv
  Dec 31 06:41:18.698: INFO: Got endpoints: latency-svc-xft55 [748.534902ms]
  Dec 31 06:41:18.703: INFO: Created: latency-svc-z7h9k
  Dec 31 06:41:18.748: INFO: Got endpoints: latency-svc-4x486 [747.944624ms]
  Dec 31 06:41:18.753: INFO: Created: latency-svc-d5vwl
  Dec 31 06:41:18.799: INFO: Got endpoints: latency-svc-m2gvl [751.489337ms]
  Dec 31 06:41:18.804: INFO: Created: latency-svc-jkj4p
  Dec 31 06:41:18.848: INFO: Got endpoints: latency-svc-nrjmj [750.00503ms]
  Dec 31 06:41:18.854: INFO: Created: latency-svc-t2qcr
  Dec 31 06:41:18.898: INFO: Got endpoints: latency-svc-j8mlc [749.52481ms]
  Dec 31 06:41:18.903: INFO: Created: latency-svc-ngkk5
  Dec 31 06:41:18.950: INFO: Got endpoints: latency-svc-v87tz [750.810377ms]
  Dec 31 06:41:18.954: INFO: Created: latency-svc-88cmr
  Dec 31 06:41:18.998: INFO: Got endpoints: latency-svc-rztrd [748.642037ms]
  Dec 31 06:41:19.003: INFO: Created: latency-svc-gmnxr
  Dec 31 06:41:19.048: INFO: Got endpoints: latency-svc-rgmrg [748.992784ms]
  Dec 31 06:41:19.053: INFO: Created: latency-svc-4xcdv
  Dec 31 06:41:19.099: INFO: Got endpoints: latency-svc-bpxwc [747.067568ms]
  Dec 31 06:41:19.103: INFO: Created: latency-svc-284l5
  Dec 31 06:41:19.150: INFO: Got endpoints: latency-svc-lw4bn [751.423111ms]
  Dec 31 06:41:19.155: INFO: Created: latency-svc-tmr6w
  Dec 31 06:41:19.198: INFO: Got endpoints: latency-svc-j8c2x [750.153163ms]
  Dec 31 06:41:19.203: INFO: Created: latency-svc-ctm5b
  Dec 31 06:41:19.248: INFO: Got endpoints: latency-svc-5f2vk [750.194137ms]
  Dec 31 06:41:19.254: INFO: Created: latency-svc-px59q
  Dec 31 06:41:19.299: INFO: Got endpoints: latency-svc-c26ks [748.346643ms]
  Dec 31 06:41:19.304: INFO: Created: latency-svc-f99xt
  Dec 31 06:41:19.351: INFO: Got endpoints: latency-svc-msmfw [752.729959ms]
  Dec 31 06:41:19.356: INFO: Created: latency-svc-zmv86
  Dec 31 06:41:19.400: INFO: Got endpoints: latency-svc-6wrzv [751.473125ms]
  Dec 31 06:41:19.404: INFO: Created: latency-svc-r4xk2
  Dec 31 06:41:19.449: INFO: Got endpoints: latency-svc-z7h9k [749.996891ms]
  Dec 31 06:41:19.454: INFO: Created: latency-svc-t79hz
  Dec 31 06:41:19.499: INFO: Got endpoints: latency-svc-d5vwl [750.387319ms]
  Dec 31 06:41:19.504: INFO: Created: latency-svc-7xcbd
  Dec 31 06:41:19.549: INFO: Got endpoints: latency-svc-jkj4p [749.428571ms]
  Dec 31 06:41:19.554: INFO: Created: latency-svc-5jpjq
  Dec 31 06:41:19.599: INFO: Got endpoints: latency-svc-t2qcr [750.794869ms]
  Dec 31 06:41:19.604: INFO: Created: latency-svc-vsm2f
  Dec 31 06:41:19.648: INFO: Got endpoints: latency-svc-ngkk5 [749.6314ms]
  Dec 31 06:41:19.654: INFO: Created: latency-svc-pp4t5
  Dec 31 06:41:19.699: INFO: Got endpoints: latency-svc-88cmr [748.82208ms]
  Dec 31 06:41:19.704: INFO: Created: latency-svc-k545m
  Dec 31 06:41:19.749: INFO: Got endpoints: latency-svc-gmnxr [750.839962ms]
  Dec 31 06:41:19.754: INFO: Created: latency-svc-cmdwb
  Dec 31 06:41:19.799: INFO: Got endpoints: latency-svc-4xcdv [750.810352ms]
  Dec 31 06:41:19.804: INFO: Created: latency-svc-fzl7z
  Dec 31 06:41:19.848: INFO: Got endpoints: latency-svc-284l5 [749.235737ms]
  Dec 31 06:41:19.853: INFO: Created: latency-svc-fwltv
  Dec 31 06:41:19.899: INFO: Got endpoints: latency-svc-tmr6w [748.779186ms]
  Dec 31 06:41:19.903: INFO: Created: latency-svc-8j6gh
  Dec 31 06:41:19.950: INFO: Got endpoints: latency-svc-ctm5b [752.016684ms]
  Dec 31 06:41:19.955: INFO: Created: latency-svc-k6496
  Dec 31 06:41:19.998: INFO: Got endpoints: latency-svc-px59q [749.865063ms]
  Dec 31 06:41:20.003: INFO: Created: latency-svc-h4jpn
  Dec 31 06:41:20.049: INFO: Got endpoints: latency-svc-f99xt [749.47101ms]
  Dec 31 06:41:20.053: INFO: Created: latency-svc-t6b8r
  Dec 31 06:41:20.099: INFO: Got endpoints: latency-svc-zmv86 [747.89806ms]
  Dec 31 06:41:20.104: INFO: Created: latency-svc-f4slp
  Dec 31 06:41:20.148: INFO: Got endpoints: latency-svc-r4xk2 [748.319656ms]
  Dec 31 06:41:20.153: INFO: Created: latency-svc-4cwjn
  Dec 31 06:41:20.200: INFO: Got endpoints: latency-svc-t79hz [751.312432ms]
  Dec 31 06:41:20.205: INFO: Created: latency-svc-n4lcj
  Dec 31 06:41:20.249: INFO: Got endpoints: latency-svc-7xcbd [750.572674ms]
  Dec 31 06:41:20.254: INFO: Created: latency-svc-nzq72
  Dec 31 06:41:20.299: INFO: Got endpoints: latency-svc-5jpjq [749.912149ms]
  Dec 31 06:41:20.304: INFO: Created: latency-svc-kcqq8
  Dec 31 06:41:20.349: INFO: Got endpoints: latency-svc-vsm2f [749.480304ms]
  Dec 31 06:41:20.353: INFO: Created: latency-svc-bgbqn
  Dec 31 06:41:20.400: INFO: Got endpoints: latency-svc-pp4t5 [752.204559ms]
  Dec 31 06:41:20.405: INFO: Created: latency-svc-ssgz9
  Dec 31 06:41:20.448: INFO: Got endpoints: latency-svc-k545m [749.594444ms]
  Dec 31 06:41:20.453: INFO: Created: latency-svc-fn4rc
  Dec 31 06:41:20.498: INFO: Got endpoints: latency-svc-cmdwb [749.254671ms]
  Dec 31 06:41:20.504: INFO: Created: latency-svc-lvt58
  Dec 31 06:41:20.549: INFO: Got endpoints: latency-svc-fzl7z [749.996995ms]
  Dec 31 06:41:20.554: INFO: Created: latency-svc-nhwmh
  Dec 31 06:41:20.600: INFO: Got endpoints: latency-svc-fwltv [751.735442ms]
  Dec 31 06:41:20.604: INFO: Created: latency-svc-4vjxn
  Dec 31 06:41:20.648: INFO: Got endpoints: latency-svc-8j6gh [749.221788ms]
  Dec 31 06:41:20.653: INFO: Created: latency-svc-j8txk
  Dec 31 06:41:20.699: INFO: Got endpoints: latency-svc-k6496 [748.46235ms]
  Dec 31 06:41:20.704: INFO: Created: latency-svc-jkjmb
  Dec 31 06:41:20.748: INFO: Got endpoints: latency-svc-h4jpn [749.838606ms]
  Dec 31 06:41:20.753: INFO: Created: latency-svc-bqwvs
  Dec 31 06:41:20.799: INFO: Got endpoints: latency-svc-t6b8r [750.578237ms]
  Dec 31 06:41:20.804: INFO: Created: latency-svc-m668d
  Dec 31 06:41:20.849: INFO: Got endpoints: latency-svc-f4slp [749.740457ms]
  Dec 31 06:41:20.854: INFO: Created: latency-svc-jx5jp
  Dec 31 06:41:20.898: INFO: Got endpoints: latency-svc-4cwjn [750.401007ms]
  Dec 31 06:41:20.903: INFO: Created: latency-svc-zwp77
  Dec 31 06:41:20.948: INFO: Got endpoints: latency-svc-n4lcj [748.457907ms]
  Dec 31 06:41:20.998: INFO: Got endpoints: latency-svc-nzq72 [748.603146ms]
  Dec 31 06:41:21.048: INFO: Got endpoints: latency-svc-kcqq8 [749.360921ms]
  Dec 31 06:41:21.098: INFO: Got endpoints: latency-svc-bgbqn [749.216923ms]
  Dec 31 06:41:21.148: INFO: Got endpoints: latency-svc-ssgz9 [748.213636ms]
  Dec 31 06:41:21.201: INFO: Got endpoints: latency-svc-fn4rc [753.063138ms]
  Dec 31 06:41:21.249: INFO: Got endpoints: latency-svc-lvt58 [750.123713ms]
  Dec 31 06:41:21.300: INFO: Got endpoints: latency-svc-nhwmh [751.052489ms]
  Dec 31 06:41:21.349: INFO: Got endpoints: latency-svc-4vjxn [749.009474ms]
  Dec 31 06:41:21.399: INFO: Got endpoints: latency-svc-j8txk [750.527229ms]
  Dec 31 06:41:21.449: INFO: Got endpoints: latency-svc-jkjmb [750.094235ms]
  Dec 31 06:41:21.499: INFO: Got endpoints: latency-svc-bqwvs [750.804417ms]
  Dec 31 06:41:21.549: INFO: Got endpoints: latency-svc-m668d [749.226158ms]
  Dec 31 06:41:21.599: INFO: Got endpoints: latency-svc-jx5jp [750.417028ms]
  Dec 31 06:41:21.649: INFO: Got endpoints: latency-svc-zwp77 [750.522159ms]
  Dec 31 06:41:21.649: INFO: Latencies: [9.310875ms 11.895667ms 14.839059ms 22.268594ms 26.866093ms 31.796976ms 36.761561ms 40.68682ms 43.650805ms 45.843136ms 51.444911ms 58.437461ms 59.366626ms 61.126029ms 61.462414ms 62.026382ms 62.974129ms 63.730971ms 63.85129ms 63.88155ms 65.412122ms 66.351543ms 68.468196ms 68.535344ms 69.038173ms 69.540265ms 70.477664ms 70.525661ms 71.686837ms 74.353062ms 77.560922ms 80.737759ms 82.944465ms 146.555471ms 174.349516ms 233.541425ms 323.763204ms 366.009183ms 423.34427ms 465.754057ms 482.984843ms 562.922022ms 577.530427ms 621.25093ms 625.425234ms 676.202203ms 725.185387ms 745.967724ms 747.067568ms 747.424924ms 747.642614ms 747.89806ms 747.944624ms 747.949603ms 748.095944ms 748.213636ms 748.319656ms 748.346643ms 748.379983ms 748.387604ms 748.393025ms 748.457907ms 748.46235ms 748.499982ms 748.534902ms 748.603146ms 748.642037ms 748.779186ms 748.79513ms 748.817616ms 748.82208ms 748.838393ms 748.882912ms 748.895915ms 748.946332ms 748.960634ms 748.992784ms 749.009474ms 749.020774ms 749.089052ms 749.110488ms 749.216923ms 749.221788ms 749.226158ms 749.235737ms 749.244663ms 749.254671ms 749.284508ms 749.293765ms 749.324127ms 749.360921ms 749.370506ms 749.428571ms 749.47101ms 749.480304ms 749.496902ms 749.507959ms 749.518564ms 749.52481ms 749.57642ms 749.58861ms 749.594444ms 749.595692ms 749.621085ms 749.6314ms 749.704862ms 749.716729ms 749.740457ms 749.756639ms 749.771012ms 749.831303ms 749.838606ms 749.863058ms 749.865063ms 749.872758ms 749.880607ms 749.884081ms 749.912149ms 749.941678ms 749.984457ms 749.986162ms 749.996891ms 749.996995ms 750.000689ms 750.00503ms 750.016836ms 750.018938ms 750.046816ms 750.094235ms 750.123713ms 750.131274ms 750.153163ms 750.163781ms 750.173255ms 750.182445ms 750.194137ms 750.250164ms 750.291232ms 750.314462ms 750.360567ms 750.374919ms 750.377575ms 750.387319ms 750.401007ms 750.402479ms 750.415633ms 750.417028ms 750.425035ms 750.469637ms 750.472049ms 750.474531ms 750.522159ms 750.527229ms 750.559227ms 750.572674ms 750.578237ms 750.606853ms 750.670453ms 750.69183ms 750.702189ms 750.751343ms 750.758148ms 750.759128ms 750.794869ms 750.804417ms 750.810352ms 750.810377ms 750.817937ms 750.823976ms 750.839519ms 750.839962ms 750.87873ms 750.912625ms 750.932157ms 750.938089ms 750.953543ms 750.986211ms 751.009017ms 751.041306ms 751.052489ms 751.07838ms 751.312432ms 751.318534ms 751.337207ms 751.414019ms 751.423111ms 751.467483ms 751.473125ms 751.489337ms 751.56288ms 751.605487ms 751.735442ms 751.966879ms 752.016684ms 752.060571ms 752.204559ms 752.729959ms 753.063138ms 753.873449ms 754.021109ms]
  Dec 31 06:41:21.649: INFO: 50 %ile: 749.58861ms
  Dec 31 06:41:21.649: INFO: 90 %ile: 751.07838ms
  Dec 31 06:41:21.649: INFO: 99 %ile: 753.873449ms
  Dec 31 06:41:21.649: INFO: Total sample count: 200
  Dec 31 06:41:21.649: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svc-latency-3849" for this suite. @ 12/31/23 06:41:21.652
• [10.733 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/preemption.go:130
  STEP: Creating a kubernetes client @ 12/31/23 06:41:21.656
  Dec 31 06:41:21.656: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename sched-preemption @ 12/31/23 06:41:21.657
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:41:21.664
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:41:21.666
  Dec 31 06:41:21.721: INFO: Waiting up to 1m0s for all nodes to be ready
  Dec 31 06:42:21.723: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Create pods that use 4/5 of node resources. @ 12/31/23 06:42:21.725
  Dec 31 06:42:21.734: INFO: Created pod: pod0-0-sched-preemption-low-priority
  Dec 31 06:42:21.736: INFO: Created pod: pod0-1-sched-preemption-medium-priority
  Dec 31 06:42:21.754: INFO: Created pod: pod1-0-sched-preemption-medium-priority
  Dec 31 06:42:21.764: INFO: Created pod: pod1-1-sched-preemption-medium-priority
  Dec 31 06:42:21.782: INFO: Created pod: pod2-0-sched-preemption-medium-priority
  Dec 31 06:42:21.787: INFO: Created pod: pod2-1-sched-preemption-medium-priority
  STEP: Wait for pods to be scheduled. @ 12/31/23 06:42:21.787
  STEP: Run a high priority pod that has same requirements as that of lower priority pod @ 12/31/23 06:42:23.797
  Dec 31 06:42:27.827: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-5361" for this suite. @ 12/31/23 06:42:27.828
• [66.174 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:119
  STEP: Creating a kubernetes client @ 12/31/23 06:42:27.83
  Dec 31 06:42:27.830: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 06:42:27.831
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:42:27.837
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:42:27.839
  STEP: Setting up server cert @ 12/31/23 06:42:27.848
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 06:42:28.119
  STEP: Deploying the webhook pod @ 12/31/23 06:42:28.123
  STEP: Wait for the deployment to be ready @ 12/31/23 06:42:28.127
  Dec 31 06:42:28.129: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 12/31/23 06:42:30.133
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 06:42:30.137
  Dec 31 06:42:31.138: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: fetching the /apis discovery document @ 12/31/23 06:42:31.141
  STEP: finding the admissionregistration.k8s.io API group in the /apis discovery document @ 12/31/23 06:42:31.141
  STEP: finding the admissionregistration.k8s.io/v1 API group/version in the /apis discovery document @ 12/31/23 06:42:31.141
  STEP: fetching the /apis/admissionregistration.k8s.io discovery document @ 12/31/23 06:42:31.141
  STEP: finding the admissionregistration.k8s.io/v1 API group/version in the /apis/admissionregistration.k8s.io discovery document @ 12/31/23 06:42:31.142
  STEP: fetching the /apis/admissionregistration.k8s.io/v1 discovery document @ 12/31/23 06:42:31.142
  STEP: finding mutatingwebhookconfigurations and validatingwebhookconfigurations resources in the /apis/admissionregistration.k8s.io/v1 discovery document @ 12/31/23 06:42:31.142
  Dec 31 06:42:31.157: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-7520" for this suite. @ 12/31/23 06:42:31.161
  STEP: Destroying namespace "webhook-markers-85" for this suite. @ 12/31/23 06:42:31.165
• [3.342 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance] [sig-network, Conformance]
test/e2e/network/endpointslicemirroring.go:55
  STEP: Creating a kubernetes client @ 12/31/23 06:42:31.172
  Dec 31 06:42:31.172: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename endpointslicemirroring @ 12/31/23 06:42:31.173
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:42:31.179
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:42:31.181
  STEP: mirroring a new custom Endpoint @ 12/31/23 06:42:31.187
  Dec 31 06:42:31.191: INFO: Waiting for at least 1 EndpointSlice to exist, got 0
  STEP: mirroring an update to a custom Endpoint @ 12/31/23 06:42:33.194
  Dec 31 06:42:33.200: INFO: Expected EndpointSlice to have 10.2.3.4 as address, got 10.1.2.3
  STEP: mirroring deletion of a custom Endpoint @ 12/31/23 06:42:35.201
  Dec 31 06:42:35.205: INFO: Waiting for 0 EndpointSlices to exist, got 1
  Dec 31 06:42:37.207: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslicemirroring-4935" for this suite. @ 12/31/23 06:42:37.208
• [6.038 seconds]
------------------------------
SSSSS
------------------------------
[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance] [sig-apps, Slow, Conformance]
test/e2e/apps/cronjob.go:125
  STEP: Creating a kubernetes client @ 12/31/23 06:42:37.21
  Dec 31 06:42:37.210: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename cronjob @ 12/31/23 06:42:37.211
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:42:37.217
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:42:37.218
  STEP: Creating a ForbidConcurrent cronjob @ 12/31/23 06:42:37.22
  STEP: Ensuring a job is scheduled @ 12/31/23 06:42:37.222
  STEP: Ensuring exactly one is scheduled @ 12/31/23 06:43:01.224
  STEP: Ensuring exactly one running job exists by listing jobs explicitly @ 12/31/23 06:43:01.225
  STEP: Ensuring no more jobs are scheduled @ 12/31/23 06:43:01.226
  STEP: Removing cronjob @ 12/31/23 06:48:01.229
  Dec 31 06:48:01.237: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-4765" for this suite. @ 12/31/23 06:48:01.238
• [324.030 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-cli] Kubectl client Proxy server should support --unix-socket=/path [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1863
  STEP: Creating a kubernetes client @ 12/31/23 06:48:01.241
  Dec 31 06:48:01.241: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 06:48:01.241
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:01.299
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:01.301
  STEP: Starting the proxy @ 12/31/23 06:48:01.302
  Dec 31 06:48:01.303: INFO: Asynchronously running '/usr/local/bin/kubectl kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-444 proxy --unix-socket=/tmp/kubectl-proxy-unix1522928855/test'
  STEP: retrieving proxy /api/ output @ 12/31/23 06:48:01.332
  Dec 31 06:48:01.332: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-444" for this suite. @ 12/31/23 06:48:01.334
• [0.095 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:1533
  STEP: Creating a kubernetes client @ 12/31/23 06:48:01.336
  Dec 31 06:48:01.336: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 06:48:01.337
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:01.343
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:01.344
  STEP: creating a service nodeport-service with the type=NodePort in namespace services-1421 @ 12/31/23 06:48:01.345
  STEP: Creating active service to test reachability when its FQDN is referred as externalName for another service @ 12/31/23 06:48:01.351
  STEP: creating service externalsvc in namespace services-1421 @ 12/31/23 06:48:01.351
  STEP: creating replication controller externalsvc in namespace services-1421 @ 12/31/23 06:48:01.357
  I1231 06:48:01.361762      23 runners.go:197] Created replication controller with name: externalsvc, namespace: services-1421, replica count: 2
  I1231 06:48:04.412648      23 runners.go:197] externalsvc Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  STEP: changing the NodePort service to type=ExternalName @ 12/31/23 06:48:04.414
  Dec 31 06:48:04.421: INFO: Creating new exec pod
  Dec 31 06:48:06.427: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-1421 exec execpodsrws2 -- /bin/sh -x -c nslookup nodeport-service.services-1421.svc.cluster.local'
  Dec 31 06:48:06.537: INFO: stderr: "+ nslookup nodeport-service.services-1421.svc.cluster.local\n"
  Dec 31 06:48:06.537: INFO: stdout: "Server:\t\t169.254.20.10\nAddress:\t169.254.20.10#53\n\nnodeport-service.services-1421.svc.cluster.local\tcanonical name = externalsvc.services-1421.svc.cluster.local.\nName:\texternalsvc.services-1421.svc.cluster.local\nAddress: 10.68.240.203\n\n"
  STEP: deleting ReplicationController externalsvc in namespace services-1421, will wait for the garbage collector to delete the pods @ 12/31/23 06:48:06.537
  Dec 31 06:48:06.591: INFO: Deleting ReplicationController externalsvc took: 2.226697ms
  Dec 31 06:48:06.691: INFO: Terminating ReplicationController externalsvc pods took: 100.355726ms
  Dec 31 06:48:09.800: INFO: Cleaning up the NodePort to ExternalName test service
  Dec 31 06:48:09.805: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-1421" for this suite. @ 12/31/23 06:48:09.807
• [8.474 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:99
  STEP: Creating a kubernetes client @ 12/31/23 06:48:09.811
  Dec 31 06:48:09.811: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename secrets @ 12/31/23 06:48:09.811
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:09.817
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:09.82
  STEP: Creating secret with name secret-test-418537d5-7321-4024-86ea-f7dc8859bf89 @ 12/31/23 06:48:09.83
  STEP: Creating a pod to test consume secrets @ 12/31/23 06:48:09.831
  STEP: Saw pod success @ 12/31/23 06:48:13.842
  Dec 31 06:48:13.843: INFO: Trying to get logs from node worker3 pod pod-secrets-f5a012d5-9fbc-4615-b915-bd879567e738 container secret-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 06:48:13.857
  Dec 31 06:48:13.862: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-6721" for this suite. @ 12/31/23 06:48:13.863
  STEP: Destroying namespace "secret-namespace-2295" for this suite. @ 12/31/23 06:48:13.865
• [4.056 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:153
  STEP: Creating a kubernetes client @ 12/31/23 06:48:13.867
  Dec 31 06:48:13.867: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename crd-publish-openapi @ 12/31/23 06:48:13.868
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:13.874
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:13.875
  Dec 31 06:48:13.877: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 12/31/23 06:48:15.047
  Dec 31 06:48:15.047: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-6974 --namespace=crd-publish-openapi-6974 create -f -'
  Dec 31 06:48:15.095: INFO: stderr: ""
  Dec 31 06:48:15.095: INFO: stdout: "e2e-test-crd-publish-openapi-2547-crd.crd-publish-openapi-test-empty.example.com/test-cr created\n"
  Dec 31 06:48:15.095: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-6974 --namespace=crd-publish-openapi-6974 delete e2e-test-crd-publish-openapi-2547-crds test-cr'
  Dec 31 06:48:15.135: INFO: stderr: ""
  Dec 31 06:48:15.136: INFO: stdout: "e2e-test-crd-publish-openapi-2547-crd.crd-publish-openapi-test-empty.example.com \"test-cr\" deleted\n"
  Dec 31 06:48:15.136: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-6974 --namespace=crd-publish-openapi-6974 apply -f -'
  Dec 31 06:48:15.178: INFO: stderr: ""
  Dec 31 06:48:15.178: INFO: stdout: "e2e-test-crd-publish-openapi-2547-crd.crd-publish-openapi-test-empty.example.com/test-cr created\n"
  Dec 31 06:48:15.178: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-6974 --namespace=crd-publish-openapi-6974 delete e2e-test-crd-publish-openapi-2547-crds test-cr'
  Dec 31 06:48:15.218: INFO: stderr: ""
  Dec 31 06:48:15.218: INFO: stdout: "e2e-test-crd-publish-openapi-2547-crd.crd-publish-openapi-test-empty.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR without validation schema @ 12/31/23 06:48:15.218
  Dec 31 06:48:15.218: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-6974 explain e2e-test-crd-publish-openapi-2547-crds'
  Dec 31 06:48:15.257: INFO: stderr: ""
  Dec 31 06:48:15.257: INFO: stdout: "GROUP:      crd-publish-openapi-test-empty.example.com\nKIND:       e2e-test-crd-publish-openapi-2547-crd\nVERSION:    v1\n\nDESCRIPTION:\n    <empty>\nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n\n"
  Dec 31 06:48:16.430: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-6974" for this suite. @ 12/31/23 06:48:16.435
• [2.570 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:251
  STEP: Creating a kubernetes client @ 12/31/23 06:48:16.437
  Dec 31 06:48:16.437: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 06:48:16.437
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:16.444
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:16.445
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 06:48:16.447
  STEP: Saw pod success @ 12/31/23 06:48:20.456
  Dec 31 06:48:20.457: INFO: Trying to get logs from node worker3 pod downwardapi-volume-8f9fc7ae-6f8a-48f7-b274-ec4d46f7dabe container client-container: <nil>
  STEP: delete the pod @ 12/31/23 06:48:20.459
  Dec 31 06:48:20.465: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-8438" for this suite. @ 12/31/23 06:48:20.466
• [4.031 seconds]
------------------------------
SSS
------------------------------
[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:1416
  STEP: Creating a kubernetes client @ 12/31/23 06:48:20.468
  Dec 31 06:48:20.468: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 06:48:20.469
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:20.474
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:20.475
  STEP: creating a service externalname-service with the type=ExternalName in namespace services-4442 @ 12/31/23 06:48:20.478
  STEP: changing the ExternalName service to type=ClusterIP @ 12/31/23 06:48:20.48
  STEP: creating replication controller externalname-service in namespace services-4442 @ 12/31/23 06:48:20.486
  I1231 06:48:20.490008      23 runners.go:197] Created replication controller with name: externalname-service, namespace: services-4442, replica count: 2
  I1231 06:48:23.542269      23 runners.go:197] externalname-service Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Dec 31 06:48:23.542: INFO: Creating new exec pod
  Dec 31 06:48:26.550: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-4442 exec execpodq58rt -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Dec 31 06:48:26.626: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Dec 31 06:48:26.626: INFO: stdout: "externalname-service-b9z6c"
  Dec 31 06:48:26.626: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-4442 exec execpodq58rt -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.249.164 80'
  Dec 31 06:48:26.704: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.249.164 80\nConnection to 10.68.249.164 80 port [tcp/http] succeeded!\n"
  Dec 31 06:48:26.704: INFO: stdout: "externalname-service-vld42"
  Dec 31 06:48:26.704: INFO: Cleaning up the ExternalName to ClusterIP test service
  Dec 31 06:48:26.711: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-4442" for this suite. @ 12/31/23 06:48:26.713
• [6.247 seconds]
------------------------------
S
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:100
  STEP: Creating a kubernetes client @ 12/31/23 06:48:26.716
  Dec 31 06:48:26.716: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:48:26.716
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:26.723
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:26.725
  STEP: Creating configMap with name projected-configmap-test-volume-map-4010e467-5093-44fe-a3e4-45c9683d0756 @ 12/31/23 06:48:26.726
  STEP: Creating a pod to test consume configMaps @ 12/31/23 06:48:26.728
  STEP: Saw pod success @ 12/31/23 06:48:30.738
  Dec 31 06:48:30.739: INFO: Trying to get logs from node worker2 pod pod-projected-configmaps-dc02b7c5-690b-4375-b616-27fd41f2d7f1 container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 06:48:30.747
  Dec 31 06:48:30.755: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8341" for this suite. @ 12/31/23 06:48:30.756
• [4.043 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/field_validation.go:622
  STEP: Creating a kubernetes client @ 12/31/23 06:48:30.759
  Dec 31 06:48:30.759: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename field-validation @ 12/31/23 06:48:30.759
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:30.765
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:30.767
  Dec 31 06:48:30.768: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  W1231 06:48:33.297717      23 warnings.go:70] unknown field "alpha"
  W1231 06:48:33.297737      23 warnings.go:70] unknown field "beta"
  W1231 06:48:33.297741      23 warnings.go:70] unknown field "delta"
  W1231 06:48:33.297746      23 warnings.go:70] unknown field "epsilon"
  W1231 06:48:33.297750      23 warnings.go:70] unknown field "gamma"
  Dec 31 06:48:33.822: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-6370" for this suite. @ 12/31/23 06:48:33.823
• [3.067 seconds]
------------------------------
S
------------------------------
[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:86
  STEP: Creating a kubernetes client @ 12/31/23 06:48:33.826
  Dec 31 06:48:33.826: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 06:48:33.826
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:33.833
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:33.835
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 06:48:33.836
  STEP: Saw pod success @ 12/31/23 06:48:37.847
  Dec 31 06:48:37.848: INFO: Trying to get logs from node worker3 pod downwardapi-volume-ddd5b5cf-3db0-4f02-a3f1-4eb61c97265a container client-container: <nil>
  STEP: delete the pod @ 12/31/23 06:48:37.851
  Dec 31 06:48:37.857: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-5019" for this suite. @ 12/31/23 06:48:37.858
• [4.034 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance] [sig-node, Conformance]
test/e2e/node/security_context.go:170
  STEP: Creating a kubernetes client @ 12/31/23 06:48:37.86
  Dec 31 06:48:37.860: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename security-context @ 12/31/23 06:48:37.861
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:37.867
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:37.869
  STEP: Creating a pod to test pod.Spec.SecurityContext.RunAsUser @ 12/31/23 06:48:37.87
  STEP: Saw pod success @ 12/31/23 06:48:41.884
  Dec 31 06:48:41.885: INFO: Trying to get logs from node worker3 pod security-context-21cc738b-c7ad-4ff5-8ebd-4dbefa541c17 container test-container: <nil>
  STEP: delete the pod @ 12/31/23 06:48:41.887
  Dec 31 06:48:41.892: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-743" for this suite. @ 12/31/23 06:48:41.894
• [4.036 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:1493
  STEP: Creating a kubernetes client @ 12/31/23 06:48:41.897
  Dec 31 06:48:41.897: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 06:48:41.897
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:41.903
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:41.905
  STEP: creating a service clusterip-service with the type=ClusterIP in namespace services-3063 @ 12/31/23 06:48:41.906
  STEP: Creating active service to test reachability when its FQDN is referred as externalName for another service @ 12/31/23 06:48:41.911
  STEP: creating service externalsvc in namespace services-3063 @ 12/31/23 06:48:41.911
  STEP: creating replication controller externalsvc in namespace services-3063 @ 12/31/23 06:48:41.917
  I1231 06:48:41.921546      23 runners.go:197] Created replication controller with name: externalsvc, namespace: services-3063, replica count: 2
  I1231 06:48:44.972637      23 runners.go:197] externalsvc Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  STEP: changing the ClusterIP service to type=ExternalName @ 12/31/23 06:48:44.974
  Dec 31 06:48:44.979: INFO: Creating new exec pod
  Dec 31 06:48:46.987: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-3063 exec execpod6wwwn -- /bin/sh -x -c nslookup clusterip-service.services-3063.svc.cluster.local'
  Dec 31 06:48:47.086: INFO: stderr: "+ nslookup clusterip-service.services-3063.svc.cluster.local\n"
  Dec 31 06:48:47.086: INFO: stdout: "Server:\t\t169.254.20.10\nAddress:\t169.254.20.10#53\n\nclusterip-service.services-3063.svc.cluster.local\tcanonical name = externalsvc.services-3063.svc.cluster.local.\nName:\texternalsvc.services-3063.svc.cluster.local\nAddress: 10.68.148.64\n\n"
  STEP: deleting ReplicationController externalsvc in namespace services-3063, will wait for the garbage collector to delete the pods @ 12/31/23 06:48:47.086
  Dec 31 06:48:47.139: INFO: Deleting ReplicationController externalsvc took: 2.026856ms
  Dec 31 06:48:47.240: INFO: Terminating ReplicationController externalsvc pods took: 100.212811ms
  Dec 31 06:48:49.847: INFO: Cleaning up the ClusterIP to ExternalName test service
  Dec 31 06:48:49.851: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-3063" for this suite. @ 12/31/23 06:48:49.853
• [7.963 seconds]
------------------------------
[sig-node] PodTemplates should delete a collection of pod templates [Conformance] [sig-node, Conformance]
test/e2e/common/node/podtemplates.go:123
  STEP: Creating a kubernetes client @ 12/31/23 06:48:49.86
  Dec 31 06:48:49.860: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename podtemplate @ 12/31/23 06:48:49.86
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:49.869
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:49.87
  STEP: Create set of pod templates @ 12/31/23 06:48:49.872
  Dec 31 06:48:49.874: INFO: created test-podtemplate-1
  Dec 31 06:48:49.876: INFO: created test-podtemplate-2
  Dec 31 06:48:49.878: INFO: created test-podtemplate-3
  STEP: get a list of pod templates with a label in the current namespace @ 12/31/23 06:48:49.878
  STEP: delete collection of pod templates @ 12/31/23 06:48:49.879
  Dec 31 06:48:49.879: INFO: requesting DeleteCollection of pod templates
  STEP: check that the list of pod templates matches the requested quantity @ 12/31/23 06:48:49.886
  Dec 31 06:48:49.886: INFO: requesting list of pod templates to confirm quantity
  Dec 31 06:48:49.887: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-2432" for this suite. @ 12/31/23 06:48:49.889
• [0.031 seconds]
------------------------------
[sig-network] Services should delete a collection of services [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:3565
  STEP: Creating a kubernetes client @ 12/31/23 06:48:49.891
  Dec 31 06:48:49.891: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 06:48:49.892
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:49.899
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:49.9
  STEP: creating a collection of services @ 12/31/23 06:48:49.903
  Dec 31 06:48:49.903: INFO: Creating e2e-svc-a-nb86x
  Dec 31 06:48:49.907: INFO: Creating e2e-svc-b-6sqxl
  Dec 31 06:48:49.911: INFO: Creating e2e-svc-c-pwml8
  STEP: deleting service collection @ 12/31/23 06:48:49.917
  Dec 31 06:48:49.927: INFO: Collection of services has been deleted
  Dec 31 06:48:49.927: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-5240" for this suite. @ 12/31/23 06:48:49.929
• [0.041 seconds]
------------------------------
[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/ephemeral_containers.go:51
  STEP: Creating a kubernetes client @ 12/31/23 06:48:49.932
  Dec 31 06:48:49.932: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename ephemeral-containers-test @ 12/31/23 06:48:49.933
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:49.952
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:49.953
  STEP: creating a target pod @ 12/31/23 06:48:49.954
  STEP: adding an ephemeral container @ 12/31/23 06:48:51.962
  STEP: checking pod container endpoints @ 12/31/23 06:48:53.972
  Dec 31 06:48:53.972: INFO: ExecWithOptions {Command:[/bin/echo marco] Namespace:ephemeral-containers-test-3374 PodName:ephemeral-containers-target-pod ContainerName:debugger Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:48:53.972: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:48:53.973: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:48:53.973: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/ephemeral-containers-test-3374/pods/ephemeral-containers-target-pod/exec?command=%2Fbin%2Fecho&command=marco&container=debugger&container=debugger&stderr=true&stdout=true)
  Dec 31 06:48:54.018: INFO: Exec stderr: ""
  Dec 31 06:48:54.028: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ephemeral-containers-test-3374" for this suite. @ 12/31/23 06:48:54.029
• [4.099 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment deployment should delete old replica sets [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:122
  STEP: Creating a kubernetes client @ 12/31/23 06:48:54.031
  Dec 31 06:48:54.031: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename deployment @ 12/31/23 06:48:54.032
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:54.039
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:54.04
  Dec 31 06:48:54.051: INFO: Pod name cleanup-pod: Found 0 pods out of 1
  Dec 31 06:48:59.054: INFO: Pod name cleanup-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 12/31/23 06:48:59.054
  Dec 31 06:48:59.054: INFO: Creating deployment test-cleanup-deployment
  STEP: Waiting for deployment test-cleanup-deployment history to be cleaned up @ 12/31/23 06:48:59.058
  Dec 31 06:48:59.063: INFO: Deployment "test-cleanup-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=23) "test-cleanup-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5837",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "f37bc506-a414-4c5b-90c6-9aaf94ceb45c",
      ResourceVersion: (string) (len=5) "17050",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839602139,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602139,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=637) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 61  67 6e 68 6f 73 74 5c 22  |me\":\"agnhost\"|
              00000160  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000170  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000180  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000190  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              000001a0  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              000001b0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001c0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              000001d0  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              000001e0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001f0  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000200  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              00000210  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              00000220  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              00000230  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000270  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(0),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 0,
      Replicas: (int32) 0,
      UpdatedReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) <nil>,
      CollisionCount: (*int32)(<nil>)
    }
  }


  Dec 31 06:48:59.065: INFO: New ReplicaSet of Deployment "test-cleanup-deployment" is nil.
  Dec 31 06:48:59.065: INFO: All old ReplicaSets of Deployment "test-cleanup-deployment":
  Dec 31 06:48:59.065: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=23) "test-cleanup-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5837",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "f8a17b7d-78a8-4d6f-ae8e-4089384d213a",
      ResourceVersion: (string) (len=5) "17052",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839602134,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=23) "test-cleanup-deployment",
          UID: (types.UID) (len=36) "f37bc506-a414-4c5b-90c6-9aaf94ceb45c",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602134,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=483) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              00000030  3a 70 6f 64 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |:pod":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  72 65 70 6c 69 63 61 73  |ec":{"f:replicas|
              00000050  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000060  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000070  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000080  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              00000090  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              000000a0  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              000000b0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              000000c0  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              000000d0  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              000000e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              000000f0  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000100  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000110  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000120  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |rces":{},"f:term|
              00000130  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000140  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000160  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000170  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              00000180  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              00000190  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              000001a0  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000001b0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              000001c0  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              000001d0  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              000001e0  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602134,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602139,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=103) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6f 77 6e 65 72 52  65 66 65 72 65 6e 63 65  |f:ownerReference|
              00000020  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 6b 3a 7b 5c  |s":{".":{},"k:{\|
              00000030  22 75 69 64 5c 22 3a 5c  22 66 33 37 62 63 35 30  |"uid\":\"f37bc50|
              00000040  36 2d 61 34 31 34 2d 34  63 35 62 2d 39 30 63 36  |6-a414-4c5b-90c6|
              00000050  2d 39 61 61 66 39 34 63  65 62 34 35 63 5c 22 7d  |-9aaf94ceb45c\"}|
              00000060  22 3a 7b 7d 7d 7d 7d                              |":{}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Dec 31 06:48:59.068: INFO: Pod "test-cleanup-controller-g4btt" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=29) "test-cleanup-controller-g4btt",
      GenerateName: (string) (len=24) "test-cleanup-controller-",
      Namespace: (string) (len=15) "deployment-5837",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "45abe5c2-7de9-407f-890b-46e9686eb3e3",
      ResourceVersion: (string) (len=5) "16994",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839602134,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=23) "test-cleanup-controller",
          UID: (types.UID) (len=36) "f8a17b7d-78a8-4d6f-ae8e-4089384d213a",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602134,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=500) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  22 3a 7b 7d 7d 2c 22 66  |},"f:pod":{}},"f|
              00000050  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000060  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000070  75 69 64 5c 22 3a 5c 22  66 38 61 31 37 62 37 64  |uid\":\"f8a17b7d|
              00000080  2d 37 38 61 38 2d 34 64  36 66 2d 61 65 38 65 2d  |-78a8-4d6f-ae8e-|
              00000090  34 30 38 39 33 38 34 64  32 31 33 61 5c 22 7d 22  |4089384d213a\"}"|
              000000a0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000b0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000c0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 68  |"k:{\"name\":\"h|
              000000d0  74 74 70 64 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |ttpd\"}":{".":{}|
              000000e0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              000000f0  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000100  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000110  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000120  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000130  4d 65 73 73 61 67 65 50  61 74 68 22 3a 7b 7d 2c  |MessagePath":{},|
              00000140  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000150  73 73 61 67 65 50 6f 6c  69 63 79 22 3a 7b 7d 7d  |ssagePolicy":{}}|
              00000160  7d 2c 22 66 3a 64 6e 73  50 6f 6c 69 63 79 22 3a  |},"f:dnsPolicy":|
              00000170  7b 7d 2c 22 66 3a 65 6e  61 62 6c 65 53 65 72 76  |{},"f:enableServ|
              00000180  69 63 65 4c 69 6e 6b 73  22 3a 7b 7d 2c 22 66 3a  |iceLinks":{},"f:|
              00000190  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000001a0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000001b0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000001c0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              000001d0  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              000001e0  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              000001f0  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602134,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 36 39  2e 31 36 37 5c 22 7d 22  |2.20.169.167\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-n29dl",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-n29dl",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)(<nil>),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602134,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602134,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602134,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602134,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602134,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) (len=14) "172.20.169.167",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.169.167"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839602134,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839602134,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://b8a61d7e17fbaf31af19ea6b56f6b0ce3edc1af43e1dbca26d571417d4309a57",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:48:59.069: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-5837" for this suite. @ 12/31/23 06:48:59.072
• [5.048 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] PersistentVolumes CSI Conformance should run through the lifecycle of a PV and a PVC [Conformance] [sig-storage, Conformance]
test/e2e/storage/persistent_volumes.go:430
  STEP: Creating a kubernetes client @ 12/31/23 06:48:59.079
  Dec 31 06:48:59.079: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pv @ 12/31/23 06:48:59.08
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:48:59.087
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:48:59.09
  STEP: Creating initial PV and PVC @ 12/31/23 06:48:59.091
  Dec 31 06:48:59.091: INFO: Creating a PV followed by a PVC
  STEP: Listing all PVs with the labelSelector: "e2e-pv-pool=pv-3180" @ 12/31/23 06:48:59.097
  STEP: Listing PVCs in namespace "pv-3180" @ 12/31/23 06:48:59.1
  STEP: Patching the PV "pv-3180-vkvb7" @ 12/31/23 06:48:59.101
  STEP: Patching the PVC "pvc-tphg5" @ 12/31/23 06:48:59.114
  STEP: Getting PV "pv-3180-vkvb7" @ 12/31/23 06:48:59.147
  STEP: Getting PVC "pvc-tphg5" @ 12/31/23 06:48:59.148
  STEP: Deleting PVC "pvc-tphg5" @ 12/31/23 06:48:59.15
  STEP: Confirm deletion of PVC "pvc-tphg5" @ 12/31/23 06:48:59.153
  STEP: Deleting PV "pv-3180-vkvb7" @ 12/31/23 06:49:01.166
  STEP: Confirm deletion of PV "pv-3180-vkvb7" @ 12/31/23 06:49:01.168
  STEP: Recreating another PV & PVC @ 12/31/23 06:49:03.171
  Dec 31 06:49:03.171: INFO: Creating a PV followed by a PVC
  STEP: Updating the PV "pv-3180-92vp6" @ 12/31/23 06:49:03.175
  STEP: Updating the PVC "pvc-dj2fr" @ 12/31/23 06:49:03.179
  STEP: Listing PVCs in all namespaces with the labelSelector: "pvc-dj2fr=updated" @ 12/31/23 06:49:03.181
  STEP: Deleting PVC "pvc-dj2fr" via DeleteCollection @ 12/31/23 06:49:03.182
  STEP: Confirm deletion of PVC "pvc-dj2fr" @ 12/31/23 06:49:03.186
  STEP: Deleting PV "pv-3180-92vp6" via DeleteCollection @ 12/31/23 06:49:05.189
  STEP: Confirm deletion of PV "pv-3180-92vp6" @ 12/31/23 06:49:05.193
  Dec 31 06:49:07.196: INFO: AfterEach: deleting 1 PVCs and 1 PVs...
  Dec 31 06:49:07.196: INFO: Deleting PersistentVolumeClaim "pvc-dj2fr"
  Dec 31 06:49:07.197: INFO: Deleting PersistentVolume "pv-3180-92vp6"
  Dec 31 06:49:07.198: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pv-3180" for this suite. @ 12/31/23 06:49:07.199
• [8.123 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:205
  STEP: Creating a kubernetes client @ 12/31/23 06:49:07.203
  Dec 31 06:49:07.203: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename secrets @ 12/31/23 06:49:07.203
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:49:07.21
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:49:07.211
  STEP: Creating secret with name s-test-opt-del-993e8ef7-1003-4831-8cfe-ecd8681330b3 @ 12/31/23 06:49:07.214
  STEP: Creating secret with name s-test-opt-upd-4489b342-1bb0-4d9d-8dc1-0320fc056946 @ 12/31/23 06:49:07.216
  STEP: Creating the pod @ 12/31/23 06:49:07.217
  STEP: Deleting secret s-test-opt-del-993e8ef7-1003-4831-8cfe-ecd8681330b3 @ 12/31/23 06:49:09.233
  STEP: Updating secret s-test-opt-upd-4489b342-1bb0-4d9d-8dc1-0320fc056946 @ 12/31/23 06:49:09.235
  STEP: Creating secret with name s-test-opt-create-20c31451-375a-42ad-b968-195c403555b0 @ 12/31/23 06:49:09.237
  STEP: waiting to observe update in volume @ 12/31/23 06:49:09.238
  Dec 31 06:49:13.251: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-2093" for this suite. @ 12/31/23 06:49:13.252
• [6.052 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance] [sig-storage, Conformance]
test/e2e/storage/empty_dir_wrapper.go:67
  STEP: Creating a kubernetes client @ 12/31/23 06:49:13.255
  Dec 31 06:49:13.255: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir-wrapper @ 12/31/23 06:49:13.255
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:49:13.264
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:49:13.266
  STEP: Cleaning up the secret @ 12/31/23 06:49:15.278
  STEP: Cleaning up the configmap @ 12/31/23 06:49:15.281
  STEP: Cleaning up the pod @ 12/31/23 06:49:15.283
  Dec 31 06:49:15.288: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-wrapper-4270" for this suite. @ 12/31/23 06:49:15.289
• [2.036 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should mount projected service account token [Conformance] [sig-auth, Conformance]
test/e2e/auth/service_accounts.go:277
  STEP: Creating a kubernetes client @ 12/31/23 06:49:15.291
  Dec 31 06:49:15.291: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename svcaccounts @ 12/31/23 06:49:15.292
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:49:15.297
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:49:15.298
  STEP: Creating a pod to test service account token:  @ 12/31/23 06:49:15.299
  STEP: Saw pod success @ 12/31/23 06:49:19.309
  Dec 31 06:49:19.310: INFO: Trying to get logs from node worker2 pod test-pod-5aebe16f-9752-458e-b6a5-05fd24b717eb container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 06:49:19.313
  Dec 31 06:49:19.319: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-8412" for this suite. @ 12/31/23 06:49:19.32
• [4.031 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/custom_resource_definition.go:199
  STEP: Creating a kubernetes client @ 12/31/23 06:49:19.324
  Dec 31 06:49:19.324: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename custom-resource-definition @ 12/31/23 06:49:19.325
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:49:19.33
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:49:19.331
  STEP: fetching the /apis discovery document @ 12/31/23 06:49:19.333
  STEP: finding the apiextensions.k8s.io API group in the /apis discovery document @ 12/31/23 06:49:19.334
  STEP: finding the apiextensions.k8s.io/v1 API group/version in the /apis discovery document @ 12/31/23 06:49:19.334
  STEP: fetching the /apis/apiextensions.k8s.io discovery document @ 12/31/23 06:49:19.334
  STEP: finding the apiextensions.k8s.io/v1 API group/version in the /apis/apiextensions.k8s.io discovery document @ 12/31/23 06:49:19.335
  STEP: fetching the /apis/apiextensions.k8s.io/v1 discovery document @ 12/31/23 06:49:19.335
  STEP: finding customresourcedefinitions resources in the /apis/apiextensions.k8s.io/v1 discovery document @ 12/31/23 06:49:19.335
  Dec 31 06:49:19.335: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-7912" for this suite. @ 12/31/23 06:49:19.336
• [0.014 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Slow] [Conformance] [sig-node, Slow, Conformance]
test/e2e/common/node/expansion.go:155
  STEP: Creating a kubernetes client @ 12/31/23 06:49:19.339
  Dec 31 06:49:19.339: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename var-expansion @ 12/31/23 06:49:19.34
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:49:19.346
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:49:19.352
  Dec 31 06:49:21.360: INFO: Deleting pod "var-expansion-4b4f9df4-6a11-406a-b8e0-fa2548eed700" in namespace "var-expansion-8232"
  Dec 31 06:49:21.362: INFO: Wait up to 5m0s for pod "var-expansion-4b4f9df4-6a11-406a-b8e0-fa2548eed700" to be fully deleted
  Dec 31 06:49:23.365: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-8232" for this suite. @ 12/31/23 06:49:23.366
• [4.030 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:210
  STEP: Creating a kubernetes client @ 12/31/23 06:49:23.37
  Dec 31 06:49:23.370: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 06:49:23.37
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:49:23.378
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:49:23.379
  STEP: Setting up server cert @ 12/31/23 06:49:23.39
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 06:49:23.728
  STEP: Deploying the webhook pod @ 12/31/23 06:49:23.731
  STEP: Wait for the deployment to be ready @ 12/31/23 06:49:23.736
  Dec 31 06:49:23.738: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 12/31/23 06:49:25.743
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 06:49:25.747
  Dec 31 06:49:26.748: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the webhook via the AdmissionRegistration API @ 12/31/23 06:49:26.751
  STEP: create a pod @ 12/31/23 06:49:26.759
  STEP: 'kubectl attach' the pod, should be denied by the webhook @ 12/31/23 06:49:28.764
  Dec 31 06:49:28.764: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=webhook-158 attach --namespace=webhook-158 to-be-attached-pod -i -c=container1'
  Dec 31 06:49:28.811: INFO: rc: 1
  Dec 31 06:49:28.828: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-158" for this suite. @ 12/31/23 06:49:28.831
  STEP: Destroying namespace "webhook-markers-8447" for this suite. @ 12/31/23 06:49:28.838
• [5.472 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Ingress API should support creating Ingress API operations [Conformance] [sig-network, Conformance]
test/e2e/network/ingress.go:558
  STEP: Creating a kubernetes client @ 12/31/23 06:49:28.842
  Dec 31 06:49:28.842: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename ingress @ 12/31/23 06:49:28.842
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:49:28.85
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:49:28.852
  STEP: getting /apis @ 12/31/23 06:49:28.854
  STEP: getting /apis/networking.k8s.io @ 12/31/23 06:49:28.856
  STEP: getting /apis/networking.k8s.iov1 @ 12/31/23 06:49:28.857
  STEP: creating @ 12/31/23 06:49:28.857
  STEP: getting @ 12/31/23 06:49:28.864
  STEP: listing @ 12/31/23 06:49:28.865
  STEP: watching @ 12/31/23 06:49:28.867
  Dec 31 06:49:28.867: INFO: starting watch
  STEP: cluster-wide listing @ 12/31/23 06:49:28.867
  STEP: cluster-wide watching @ 12/31/23 06:49:28.868
  Dec 31 06:49:28.868: INFO: starting watch
  STEP: patching @ 12/31/23 06:49:28.869
  STEP: updating @ 12/31/23 06:49:28.871
  Dec 31 06:49:28.874: INFO: waiting for watch events with expected annotations
  Dec 31 06:49:28.874: INFO: saw patched and updated annotations
  STEP: patching /status @ 12/31/23 06:49:28.874
  STEP: updating /status @ 12/31/23 06:49:28.877
  STEP: get /status @ 12/31/23 06:49:28.88
  STEP: deleting @ 12/31/23 06:49:28.881
  STEP: deleting a collection @ 12/31/23 06:49:28.889
  Dec 31 06:49:28.895: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ingress-3336" for this suite. @ 12/31/23 06:49:28.896
• [0.058 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:190
  STEP: Creating a kubernetes client @ 12/31/23 06:49:28.9
  Dec 31 06:49:28.900: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir @ 12/31/23 06:49:28.9
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:49:28.907
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:49:28.909
  STEP: Creating a pod to test emptydir 0777 on node default medium @ 12/31/23 06:49:28.911
  STEP: Saw pod success @ 12/31/23 06:49:32.921
  Dec 31 06:49:32.922: INFO: Trying to get logs from node worker3 pod pod-2de201da-e503-4372-bfa6-d1923512a484 container test-container: <nil>
  STEP: delete the pod @ 12/31/23 06:49:32.924
  Dec 31 06:49:32.930: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-6593" for this suite. @ 12/31/23 06:49:32.932
• [4.035 seconds]
------------------------------
S
------------------------------
[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:376
  STEP: Creating a kubernetes client @ 12/31/23 06:49:32.935
  Dec 31 06:49:32.935: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:49:32.935
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:49:32.941
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:49:32.943
  STEP: Creating configMap with name projected-configmap-test-volume-15a2d4e4-a131-46bf-8d7f-c23a27bafb2c @ 12/31/23 06:49:32.946
  STEP: Creating a pod to test consume configMaps @ 12/31/23 06:49:32.948
  STEP: Saw pod success @ 12/31/23 06:49:34.954
  Dec 31 06:49:34.955: INFO: Trying to get logs from node worker2 pod pod-projected-configmaps-7e4a6e9f-3d61-44e9-85bb-3f04fcea9fa8 container projected-configmap-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 06:49:34.958
  Dec 31 06:49:34.963: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7346" for this suite. @ 12/31/23 06:49:34.965
• [2.033 seconds]
------------------------------
[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/daemon_set.go:443
  STEP: Creating a kubernetes client @ 12/31/23 06:49:34.967
  Dec 31 06:49:34.967: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename daemonsets @ 12/31/23 06:49:34.968
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:49:34.974
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:49:34.975
  Dec 31 06:49:34.984: INFO: Create a RollingUpdate DaemonSet
  Dec 31 06:49:34.986: INFO: Check that daemon pods launch on every node of the cluster
  Dec 31 06:49:34.994: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 06:49:34.994: INFO: Node 10.255.0.202 is running 0 daemon pod, expected 1
  Dec 31 06:49:35.990: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Dec 31 06:49:35.990: INFO: Node 10.255.0.202 is running 0 daemon pod, expected 1
  Dec 31 06:49:36.989: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Dec 31 06:49:36.989: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  Dec 31 06:49:36.989: INFO: Update the DaemonSet to trigger a rollout
  Dec 31 06:49:36.994: INFO: Updating DaemonSet daemon-set
  Dec 31 06:49:38.001: INFO: Roll back the DaemonSet before rollout is complete
  Dec 31 06:49:38.006: INFO: Updating DaemonSet daemon-set
  Dec 31 06:49:38.006: INFO: Make sure DaemonSet rollback is complete
  Dec 31 06:49:38.008: INFO: Wrong image for pod: daemon-set-nq9kb. Expected: registry.k8s.io/e2e-test-images/httpd:2.4.38-4, got: foo:non-existent.
  Dec 31 06:49:38.008: INFO: Pod daemon-set-nq9kb is not available
  Dec 31 06:49:42.009: INFO: Pod daemon-set-j8rvv is not available
  STEP: Deleting DaemonSet "daemon-set" @ 12/31/23 06:49:42.012
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-5836, will wait for the garbage collector to delete the pods @ 12/31/23 06:49:42.012
  Dec 31 06:49:42.066: INFO: Deleting DaemonSet.extensions daemon-set took: 1.989717ms
  Dec 31 06:49:42.167: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.981405ms
  Dec 31 06:49:43.378: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 06:49:43.378: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Dec 31 06:49:43.379: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"17712"},"items":null}

  Dec 31 06:49:43.388: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"17712"},"items":null}

  Dec 31 06:49:43.392: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-5836" for this suite. @ 12/31/23 06:49:43.393
• [8.428 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance] [sig-node, Slow, Conformance]
test/e2e/common/node/expansion.go:228
  STEP: Creating a kubernetes client @ 12/31/23 06:49:43.396
  Dec 31 06:49:43.396: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename var-expansion @ 12/31/23 06:49:43.396
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:49:43.404
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:49:43.406
  STEP: creating the pod with failed condition @ 12/31/23 06:49:43.408
  STEP: updating the pod @ 12/31/23 06:51:43.413
  Dec 31 06:51:43.919: INFO: Successfully updated pod "var-expansion-33cf91dd-d35c-4f20-a0e0-0f6498905eee"
  STEP: waiting for pod running @ 12/31/23 06:51:43.919
  STEP: deleting the pod gracefully @ 12/31/23 06:51:45.922
  Dec 31 06:51:45.922: INFO: Deleting pod "var-expansion-33cf91dd-d35c-4f20-a0e0-0f6498905eee" in namespace "var-expansion-2789"
  Dec 31 06:51:45.924: INFO: Wait up to 5m0s for pod "var-expansion-33cf91dd-d35c-4f20-a0e0-0f6498905eee" to be fully deleted
  Dec 31 06:52:17.963: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-2789" for this suite. @ 12/31/23 06:52:17.964
• [154.571 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply an update to a Namespace [Conformance] [sig-api-machinery, Serial, Conformance]
test/e2e/apimachinery/namespace.go:372
  STEP: Creating a kubernetes client @ 12/31/23 06:52:17.967
  Dec 31 06:52:17.967: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename namespaces @ 12/31/23 06:52:17.968
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:52:17.975
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:52:17.976
  STEP: Updating Namespace "namespaces-1197" @ 12/31/23 06:52:17.978
  Dec 31 06:52:17.981: INFO: Namespace "namespaces-1197" now has labels, map[string]string{"e2e-framework":"namespaces", "e2e-run":"26b22d90-e7df-4dd4-82fc-4df9026db335", "kubernetes.io/metadata.name":"namespaces-1197", "namespaces-1197":"updated", "pod-security.kubernetes.io/audit":"baseline", "pod-security.kubernetes.io/enforce":"baseline", "pod-security.kubernetes.io/warn":"baseline"}
  Dec 31 06:52:17.981: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-1197" for this suite. @ 12/31/23 06:52:17.983
• [0.018 seconds]
------------------------------
SSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance] [sig-apps, Slow, Conformance]
test/e2e/apps/statefulset.go:641
  STEP: Creating a kubernetes client @ 12/31/23 06:52:17.985
  Dec 31 06:52:17.985: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename statefulset @ 12/31/23 06:52:17.986
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:52:17.993
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:52:17.995
  STEP: Creating service test in namespace statefulset-3224 @ 12/31/23 06:52:17.996
  STEP: Initializing watcher for selector baz=blah,foo=bar @ 12/31/23 06:52:17.998
  STEP: Creating stateful set ss in namespace statefulset-3224 @ 12/31/23 06:52:18.004
  STEP: Waiting until all stateful set ss replicas will be running in namespace statefulset-3224 @ 12/31/23 06:52:18.006
  Dec 31 06:52:18.007: INFO: Found 0 stateful pods, waiting for 1
  Dec 31 06:52:28.009: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Confirming that stateful set scale up will halt with unhealthy stateful pod @ 12/31/23 06:52:28.009
  Dec 31 06:52:28.010: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-3224 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Dec 31 06:52:28.093: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Dec 31 06:52:28.093: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Dec 31 06:52:28.093: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Dec 31 06:52:28.094: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=true
  Dec 31 06:52:38.096: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Dec 31 06:52:38.096: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Dec 31 06:52:38.102: INFO: Verifying statefulset ss doesn't scale past 1 for another 9.99999976s
  Dec 31 06:52:39.104: INFO: Verifying statefulset ss doesn't scale past 1 for another 8.998800053s
  Dec 31 06:52:40.106: INFO: Verifying statefulset ss doesn't scale past 1 for another 7.996996447s
  Dec 31 06:52:41.108: INFO: Verifying statefulset ss doesn't scale past 1 for another 6.994855412s
  Dec 31 06:52:42.111: INFO: Verifying statefulset ss doesn't scale past 1 for another 5.992104656s
  Dec 31 06:52:43.113: INFO: Verifying statefulset ss doesn't scale past 1 for another 4.990283909s
  Dec 31 06:52:44.114: INFO: Verifying statefulset ss doesn't scale past 1 for another 3.98828504s
  Dec 31 06:52:45.116: INFO: Verifying statefulset ss doesn't scale past 1 for another 2.98678403s
  Dec 31 06:52:46.119: INFO: Verifying statefulset ss doesn't scale past 1 for another 1.984490703s
  Dec 31 06:52:47.122: INFO: Verifying statefulset ss doesn't scale past 1 for another 981.303087ms
  STEP: Scaling up stateful set ss to 3 replicas and waiting until all of them will be running in namespace statefulset-3224 @ 12/31/23 06:52:48.122
  Dec 31 06:52:48.124: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-3224 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Dec 31 06:52:48.202: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Dec 31 06:52:48.202: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Dec 31 06:52:48.202: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Dec 31 06:52:48.203: INFO: Found 1 stateful pods, waiting for 3
  Dec 31 06:52:58.204: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Dec 31 06:52:58.204: INFO: Waiting for pod ss-1 to enter Running - Ready=true, currently Running - Ready=true
  Dec 31 06:52:58.204: INFO: Waiting for pod ss-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Verifying that stateful set ss was scaled up in order @ 12/31/23 06:52:58.204
  STEP: Scale down will halt with unhealthy stateful pod @ 12/31/23 06:52:58.204
  Dec 31 06:52:58.206: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-3224 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Dec 31 06:52:58.290: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Dec 31 06:52:58.290: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Dec 31 06:52:58.290: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Dec 31 06:52:58.290: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-3224 exec ss-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Dec 31 06:52:58.375: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Dec 31 06:52:58.375: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Dec 31 06:52:58.375: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Dec 31 06:52:58.375: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-3224 exec ss-2 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Dec 31 06:52:58.469: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Dec 31 06:52:58.469: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Dec 31 06:52:58.469: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-2: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Dec 31 06:52:58.469: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Dec 31 06:52:58.471: INFO: Waiting for statefulset status.readyReplicas to become 0, currently 2
  Dec 31 06:53:08.474: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Dec 31 06:53:08.474: INFO: Waiting for pod ss-1 to enter Running - Ready=false, currently Running - Ready=false
  Dec 31 06:53:08.474: INFO: Waiting for pod ss-2 to enter Running - Ready=false, currently Running - Ready=false
  Dec 31 06:53:08.479: INFO: Verifying statefulset ss doesn't scale past 3 for another 9.999999904s
  Dec 31 06:53:09.481: INFO: Verifying statefulset ss doesn't scale past 3 for another 8.99828907s
  Dec 31 06:53:10.484: INFO: Verifying statefulset ss doesn't scale past 3 for another 7.995365947s
  Dec 31 06:53:11.487: INFO: Verifying statefulset ss doesn't scale past 3 for another 6.992467576s
  Dec 31 06:53:12.489: INFO: Verifying statefulset ss doesn't scale past 3 for another 5.99008786s
  Dec 31 06:53:13.492: INFO: Verifying statefulset ss doesn't scale past 3 for another 4.987138137s
  Dec 31 06:53:14.494: INFO: Verifying statefulset ss doesn't scale past 3 for another 3.985267672s
  Dec 31 06:53:15.496: INFO: Verifying statefulset ss doesn't scale past 3 for another 2.983579423s
  Dec 31 06:53:16.498: INFO: Verifying statefulset ss doesn't scale past 3 for another 1.98093002s
  Dec 31 06:53:17.501: INFO: Verifying statefulset ss doesn't scale past 3 for another 978.575786ms
  STEP: Scaling down stateful set ss to 0 replicas and waiting until none of pods will run in namespacestatefulset-3224 @ 12/31/23 06:53:18.501
  Dec 31 06:53:18.503: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-3224 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Dec 31 06:53:18.590: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Dec 31 06:53:18.590: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Dec 31 06:53:18.590: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Dec 31 06:53:18.590: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-3224 exec ss-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Dec 31 06:53:18.665: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Dec 31 06:53:18.665: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Dec 31 06:53:18.665: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Dec 31 06:53:18.665: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-3224 exec ss-2 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Dec 31 06:53:18.744: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Dec 31 06:53:18.744: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Dec 31 06:53:18.744: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-2: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Dec 31 06:53:18.744: INFO: Scaling statefulset ss to 0
  STEP: Verifying that stateful set ss was scaled down in reverse order @ 12/31/23 06:53:28.75
  Dec 31 06:53:28.750: INFO: Deleting all statefulset in ns statefulset-3224
  Dec 31 06:53:28.751: INFO: Scaling statefulset ss to 0
  Dec 31 06:53:28.755: INFO: Waiting for statefulset status.replicas updated to 0
  Dec 31 06:53:28.756: INFO: Deleting statefulset ss
  Dec 31 06:53:28.760: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-3224" for this suite. @ 12/31/23 06:53:28.761
• [70.778 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:90
  STEP: Creating a kubernetes client @ 12/31/23 06:53:28.764
  Dec 31 06:53:28.764: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:53:28.764
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:53:28.77
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:53:28.772
  STEP: Creating configMap with name projected-configmap-test-volume-map-001b8fb5-1c43-4807-9332-6ebdd707f5da @ 12/31/23 06:53:28.773
  STEP: Creating a pod to test consume configMaps @ 12/31/23 06:53:28.774
  STEP: Saw pod success @ 12/31/23 06:53:32.783
  Dec 31 06:53:32.784: INFO: Trying to get logs from node worker3 pod pod-projected-configmaps-4a0c18ae-27cd-4ab7-8bfd-0cfdb8e3a063 container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 06:53:32.792
  Dec 31 06:53:32.798: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7403" for this suite. @ 12/31/23 06:53:32.799
• [4.039 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/garbage_collector.go:480
  STEP: Creating a kubernetes client @ 12/31/23 06:53:32.803
  Dec 31 06:53:32.803: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename gc @ 12/31/23 06:53:32.804
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:53:32.811
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:53:32.812
  STEP: create the deployment @ 12/31/23 06:53:32.813
  W1231 06:53:32.815902      23 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: Wait for the Deployment to create new ReplicaSet @ 12/31/23 06:53:32.815
  STEP: delete the deployment @ 12/31/23 06:53:33.319
  STEP: wait for all rs to be garbage collected @ 12/31/23 06:53:33.321
  STEP: expected 0 rs, got 1 rs @ 12/31/23 06:53:33.323
  STEP: expected 0 pods, got 2 pods @ 12/31/23 06:53:33.326
  STEP: Gathering metrics @ 12/31/23 06:53:33.833
  W1231 06:53:33.836541      23 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Dec 31 06:53:33.836: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Dec 31 06:53:33.836: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-3105" for this suite. @ 12/31/23 06:53:33.838
• [1.037 seconds]
------------------------------
S
------------------------------
[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/daemon_set.go:305
  STEP: Creating a kubernetes client @ 12/31/23 06:53:33.841
  Dec 31 06:53:33.841: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename daemonsets @ 12/31/23 06:53:33.841
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:53:33.849
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:53:33.85
  STEP: Creating a simple DaemonSet "daemon-set" @ 12/31/23 06:53:33.858
  STEP: Check that daemon pods launch on every node of the cluster. @ 12/31/23 06:53:33.861
  Dec 31 06:53:33.864: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 06:53:33.864: INFO: Node 10.255.0.202 is running 0 daemon pod, expected 1
  Dec 31 06:53:34.864: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Dec 31 06:53:34.864: INFO: Node worker2 is running 0 daemon pod, expected 1
  Dec 31 06:53:35.865: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Dec 31 06:53:35.865: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Set a daemon pod's phase to 'Failed', check that the daemon pod is revived. @ 12/31/23 06:53:35.866
  Dec 31 06:53:35.875: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Dec 31 06:53:35.875: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Wait for the failed daemon pod to be completely deleted. @ 12/31/23 06:53:35.875
  STEP: Deleting DaemonSet "daemon-set" @ 12/31/23 06:53:36.878
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-8990, will wait for the garbage collector to delete the pods @ 12/31/23 06:53:36.878
  Dec 31 06:53:36.932: INFO: Deleting DaemonSet.extensions daemon-set took: 2.044126ms
  Dec 31 06:53:37.032: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.905445ms
  Dec 31 06:53:38.235: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 06:53:38.235: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Dec 31 06:53:38.236: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"18622"},"items":null}

  Dec 31 06:53:38.244: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"18622"},"items":null}

  Dec 31 06:53:38.248: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-8990" for this suite. @ 12/31/23 06:53:38.249
• [4.410 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Sysctls [LinuxOnly] [NodeConformance] should reject invalid sysctls [MinimumKubeletVersion:1.21] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/sysctl.go:125
  STEP: Creating a kubernetes client @ 12/31/23 06:53:38.251
  Dec 31 06:53:38.251: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename sysctl @ 12/31/23 06:53:38.252
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:53:38.258
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:53:38.259
  STEP: Creating a pod with one valid and two invalid sysctls @ 12/31/23 06:53:38.261
  Dec 31 06:53:38.262: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sysctl-892" for this suite. @ 12/31/23 06:53:38.264
• [0.014 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance] [sig-storage, Conformance]
test/e2e/common/storage/configmap_volume.go:505
  STEP: Creating a kubernetes client @ 12/31/23 06:53:38.266
  Dec 31 06:53:38.266: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename configmap @ 12/31/23 06:53:38.266
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:53:38.272
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:53:38.273
  Dec 31 06:53:38.288: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-7669" for this suite. @ 12/31/23 06:53:38.289
• [0.025 seconds]
------------------------------
[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:223
  STEP: Creating a kubernetes client @ 12/31/23 06:53:38.291
  Dec 31 06:53:38.291: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:53:38.291
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:53:38.296
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:53:38.298
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 06:53:38.299
  STEP: Saw pod success @ 12/31/23 06:53:42.308
  Dec 31 06:53:42.309: INFO: Trying to get logs from node worker3 pod downwardapi-volume-66e816ae-c033-47dc-964c-3aca39dbd869 container client-container: <nil>
  STEP: delete the pod @ 12/31/23 06:53:42.312
  Dec 31 06:53:42.318: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-1913" for this suite. @ 12/31/23 06:53:42.319
• [4.031 seconds]
------------------------------
S
------------------------------
[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance] [sig-network, NodeConformance, Conformance]
test/e2e/common/network/networking.go:125
  STEP: Creating a kubernetes client @ 12/31/23 06:53:42.322
  Dec 31 06:53:42.322: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pod-network-test @ 12/31/23 06:53:42.323
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:53:42.329
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:53:42.331
  STEP: Performing setup for networking test in namespace pod-network-test-816 @ 12/31/23 06:53:42.332
  STEP: creating a selector @ 12/31/23 06:53:42.332
  STEP: Creating the service pods in kubernetes @ 12/31/23 06:53:42.332
  Dec 31 06:53:42.332: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 12/31/23 06:53:54.368
  Dec 31 06:53:56.380: INFO: Setting MaxTries for pod polling to 39 for networking test based on endpoint count 3
  Dec 31 06:53:56.380: INFO: Going to poll 172.20.152.141 on port 8081 at least 0 times, with a maximum of 39 tries before failing
  Dec 31 06:53:56.381: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 172.20.152.141 8081 | grep -v '^\s*$'] Namespace:pod-network-test-816 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:53:56.381: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:53:56.381: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:53:56.381: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/pod-network-test-816/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+172.20.152.141+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Dec 31 06:53:57.429: INFO: Found all 1 expected endpoints: [netserver-0]
  Dec 31 06:53:57.429: INFO: Going to poll 172.20.69.86 on port 8081 at least 0 times, with a maximum of 39 tries before failing
  Dec 31 06:53:57.430: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 172.20.69.86 8081 | grep -v '^\s*$'] Namespace:pod-network-test-816 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:53:57.430: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:53:57.431: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:53:57.431: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/pod-network-test-816/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+172.20.69.86+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Dec 31 06:53:58.494: INFO: Found all 1 expected endpoints: [netserver-1]
  Dec 31 06:53:58.494: INFO: Going to poll 172.20.169.160 on port 8081 at least 0 times, with a maximum of 39 tries before failing
  Dec 31 06:53:58.495: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 172.20.169.160 8081 | grep -v '^\s*$'] Namespace:pod-network-test-816 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 06:53:58.495: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 06:53:58.496: INFO: ExecWithOptions: Clientset creation
  Dec 31 06:53:58.496: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/pod-network-test-816/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+172.20.169.160+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Dec 31 06:53:59.545: INFO: Found all 1 expected endpoints: [netserver-2]
  Dec 31 06:53:59.545: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-816" for this suite. @ 12/31/23 06:53:59.547
• [17.227 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:199
  STEP: Creating a kubernetes client @ 12/31/23 06:53:59.549
  Dec 31 06:53:59.549: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 06:53:59.55
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:53:59.555
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:53:59.556
  STEP: Setting up server cert @ 12/31/23 06:53:59.568
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 06:53:59.995
  STEP: Deploying the webhook pod @ 12/31/23 06:53:59.998
  STEP: Wait for the deployment to be ready @ 12/31/23 06:54:00.005
  Dec 31 06:54:00.008: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  STEP: Deploying the webhook service @ 12/31/23 06:54:02.013
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 06:54:02.018
  Dec 31 06:54:03.018: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the webhook via the AdmissionRegistration API @ 12/31/23 06:54:03.021
  STEP: create a pod that should be denied by the webhook @ 12/31/23 06:54:03.029
  STEP: create a pod that causes the webhook to hang @ 12/31/23 06:54:03.036
  STEP: create a configmap that should be denied by the webhook @ 12/31/23 06:54:13.039
  STEP: create a configmap that should be admitted by the webhook @ 12/31/23 06:54:13.043
  STEP: update (PUT) the admitted configmap to a non-compliant one should be rejected by the webhook @ 12/31/23 06:54:13.048
  STEP: update (PATCH) the admitted configmap to a non-compliant one should be rejected by the webhook @ 12/31/23 06:54:13.051
  STEP: create a namespace that bypass the webhook @ 12/31/23 06:54:13.053
  STEP: create a configmap that violates the webhook policy but is in a whitelisted namespace @ 12/31/23 06:54:13.06
  Dec 31 06:54:13.087: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-9008" for this suite. @ 12/31/23 06:54:13.09
  STEP: Destroying namespace "webhook-markers-3145" for this suite. @ 12/31/23 06:54:13.093
  STEP: Destroying namespace "exempted-namespace-5654" for this suite. @ 12/31/23 06:54:13.099
• [13.552 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/watch.go:191
  STEP: Creating a kubernetes client @ 12/31/23 06:54:13.102
  Dec 31 06:54:13.102: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename watch @ 12/31/23 06:54:13.103
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:54:13.109
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:54:13.111
  STEP: creating a watch on configmaps @ 12/31/23 06:54:13.113
  STEP: creating a new configmap @ 12/31/23 06:54:13.113
  STEP: modifying the configmap once @ 12/31/23 06:54:13.115
  STEP: closing the watch once it receives two notifications @ 12/31/23 06:54:13.117
  Dec 31 06:54:13.117: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-4784  8d98012f-eab0-4f10-b9c8-3633f6fdc76a 18977 0 2023-12-31 06:54:13 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2023-12-31 06:54:13 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:54:13.118: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-4784  8d98012f-eab0-4f10-b9c8-3633f6fdc76a 18978 0 2023-12-31 06:54:13 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2023-12-31 06:54:13 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying the configmap a second time, while the watch is closed @ 12/31/23 06:54:13.118
  STEP: creating a new watch on configmaps from the last resource version observed by the first watch @ 12/31/23 06:54:13.121
  STEP: deleting the configmap @ 12/31/23 06:54:13.122
  STEP: Expecting to observe notifications for all changes to the configmap since the first watch closed @ 12/31/23 06:54:13.13
  Dec 31 06:54:13.130: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-4784  8d98012f-eab0-4f10-b9c8-3633f6fdc76a 18979 0 2023-12-31 06:54:13 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2023-12-31 06:54:13 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:54:13.130: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-4784  8d98012f-eab0-4f10-b9c8-3633f6fdc76a 18980 0 2023-12-31 06:54:13 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2023-12-31 06:54:13 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Dec 31 06:54:13.130: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-4784" for this suite. @ 12/31/23 06:54:13.132
• [0.033 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/predicates.go:446
  STEP: Creating a kubernetes client @ 12/31/23 06:54:13.135
  Dec 31 06:54:13.135: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename sched-pred @ 12/31/23 06:54:13.136
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:54:13.142
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:54:13.145
  Dec 31 06:54:13.146: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Dec 31 06:54:13.149: INFO: Waiting for terminating namespaces to be deleted...
  Dec 31 06:54:13.150: INFO: 
  Logging pods the apiserver thinks is on node 10.255.0.202 before test
  Dec 31 06:54:13.153: INFO: calico-kube-controllers-5994f46b69-lmc5f from kube-system started at 2023-12-31 06:01:56 +0000 UTC (1 container statuses recorded)
  Dec 31 06:54:13.153: INFO: 	Container calico-kube-controllers ready: true, restart count 1
  Dec 31 06:54:13.153: INFO: calico-node-f7srb from kube-system started at 2023-12-31 06:01:56 +0000 UTC (1 container statuses recorded)
  Dec 31 06:54:13.153: INFO: 	Container calico-node ready: true, restart count 0
  Dec 31 06:54:13.153: INFO: coredns-6db9bd4cd7-g6pt6 from kube-system started at 2023-12-31 06:02:18 +0000 UTC (1 container statuses recorded)
  Dec 31 06:54:13.153: INFO: 	Container coredns ready: true, restart count 0
  Dec 31 06:54:13.153: INFO: dashboard-metrics-scraper-77b667b99d-lc87h from kube-system started at 2023-12-31 06:02:22 +0000 UTC (1 container statuses recorded)
  Dec 31 06:54:13.153: INFO: 	Container dashboard-metrics-scraper ready: true, restart count 0
  Dec 31 06:54:13.153: INFO: kubernetes-dashboard-74fb9f77fb-4vtvg from kube-system started at 2023-12-31 06:02:22 +0000 UTC (1 container statuses recorded)
  Dec 31 06:54:13.153: INFO: 	Container kubernetes-dashboard ready: true, restart count 0
  Dec 31 06:54:13.153: INFO: metrics-server-dfb478476-wcgkq from kube-system started at 2023-12-31 06:02:20 +0000 UTC (1 container statuses recorded)
  Dec 31 06:54:13.153: INFO: 	Container metrics-server ready: true, restart count 0
  Dec 31 06:54:13.153: INFO: node-local-dns-v47ss from kube-system started at 2023-12-31 06:02:19 +0000 UTC (1 container statuses recorded)
  Dec 31 06:54:13.153: INFO: 	Container node-cache ready: true, restart count 0
  Dec 31 06:54:13.153: INFO: sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-wsh69 from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 06:54:13.153: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 06:54:13.153: INFO: 	Container systemd-logs ready: true, restart count 0
  Dec 31 06:54:13.153: INFO: 
  Logging pods the apiserver thinks is on node worker2 before test
  Dec 31 06:54:13.155: INFO: calico-node-2jwlz from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 06:54:13.155: INFO: 	Container calico-node ready: true, restart count 0
  Dec 31 06:54:13.155: INFO: node-local-dns-wkbph from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 06:54:13.155: INFO: 	Container node-cache ready: true, restart count 0
  Dec 31 06:54:13.155: INFO: sonobuoy-e2e-job-3c8f57630e284722 from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 06:54:13.155: INFO: 	Container e2e ready: true, restart count 0
  Dec 31 06:54:13.155: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 06:54:13.155: INFO: sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-jrh8m from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 06:54:13.155: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 06:54:13.155: INFO: 	Container systemd-logs ready: true, restart count 0
  Dec 31 06:54:13.155: INFO: 
  Logging pods the apiserver thinks is on node worker3 before test
  Dec 31 06:54:13.157: INFO: calico-node-z7ckp from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 06:54:13.157: INFO: 	Container calico-node ready: true, restart count 0
  Dec 31 06:54:13.157: INFO: node-local-dns-ctddb from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 06:54:13.157: INFO: 	Container node-cache ready: true, restart count 0
  Dec 31 06:54:13.157: INFO: sonobuoy from sonobuoy started at 2023-12-31 06:07:56 +0000 UTC (1 container statuses recorded)
  Dec 31 06:54:13.157: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Dec 31 06:54:13.157: INFO: sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-ln67l from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 06:54:13.157: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 06:54:13.157: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to schedule Pod with nonempty NodeSelector. @ 12/31/23 06:54:13.157
  STEP: Considering event: 
  Type = [Warning], Name = [restricted-pod.17a5d81d042f6994], Reason = [FailedScheduling], Message = [0/3 nodes are available: 3 node(s) didn't match Pod's node affinity/selector. preemption: 0/3 nodes are available: 3 Preemption is not helpful for scheduling.] @ 12/31/23 06:54:13.168
  Dec 31 06:54:14.168: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-40" for this suite. @ 12/31/23 06:54:14.169
• [1.036 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:164
  STEP: Creating a kubernetes client @ 12/31/23 06:54:14.172
  Dec 31 06:54:14.172: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:54:14.172
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:54:14.181
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:54:14.184
  STEP: Creating the pod @ 12/31/23 06:54:14.185
  Dec 31 06:54:16.703: INFO: Successfully updated pod "annotationupdate99df2963-350f-4ea8-9bf6-9903d9af10c4"
  Dec 31 06:54:20.712: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-1803" for this suite. @ 12/31/23 06:54:20.714
• [6.545 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:194
  STEP: Creating a kubernetes client @ 12/31/23 06:54:20.716
  Dec 31 06:54:20.716: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename crd-publish-openapi @ 12/31/23 06:54:20.717
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:54:20.723
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:54:20.724
  Dec 31 06:54:20.726: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 12/31/23 06:54:21.875
  Dec 31 06:54:21.875: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-9590 --namespace=crd-publish-openapi-9590 create -f -'
  Dec 31 06:54:23.932: INFO: stderr: ""
  Dec 31 06:54:23.932: INFO: stdout: "e2e-test-crd-publish-openapi-8352-crd.crd-publish-openapi-test-unknown-at-root.example.com/test-cr created\n"
  Dec 31 06:54:23.932: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-9590 --namespace=crd-publish-openapi-9590 delete e2e-test-crd-publish-openapi-8352-crds test-cr'
  Dec 31 06:54:23.973: INFO: stderr: ""
  Dec 31 06:54:23.973: INFO: stdout: "e2e-test-crd-publish-openapi-8352-crd.crd-publish-openapi-test-unknown-at-root.example.com \"test-cr\" deleted\n"
  Dec 31 06:54:23.973: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-9590 --namespace=crd-publish-openapi-9590 apply -f -'
  Dec 31 06:54:24.017: INFO: stderr: ""
  Dec 31 06:54:24.017: INFO: stdout: "e2e-test-crd-publish-openapi-8352-crd.crd-publish-openapi-test-unknown-at-root.example.com/test-cr created\n"
  Dec 31 06:54:24.017: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-9590 --namespace=crd-publish-openapi-9590 delete e2e-test-crd-publish-openapi-8352-crds test-cr'
  Dec 31 06:54:24.057: INFO: stderr: ""
  Dec 31 06:54:24.057: INFO: stdout: "e2e-test-crd-publish-openapi-8352-crd.crd-publish-openapi-test-unknown-at-root.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR @ 12/31/23 06:54:24.057
  Dec 31 06:54:24.057: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-9590 explain e2e-test-crd-publish-openapi-8352-crds'
  Dec 31 06:54:24.096: INFO: stderr: ""
  Dec 31 06:54:24.096: INFO: stdout: "GROUP:      crd-publish-openapi-test-unknown-at-root.example.com\nKIND:       e2e-test-crd-publish-openapi-8352-crd\nVERSION:    v1\n\nDESCRIPTION:\n    preserve-unknown-properties at root for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Waldo\n\n  status\t<Object>\n    Status of Waldo\n\n\n"
  Dec 31 06:54:25.287: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-9590" for this suite. @ 12/31/23 06:54:25.291
• [4.579 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:71
  STEP: Creating a kubernetes client @ 12/31/23 06:54:25.295
  Dec 31 06:54:25.295: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-probe @ 12/31/23 06:54:25.296
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:54:25.303
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:54:25.304
  Dec 31 06:54:47.337: INFO: Container started at 2023-12-31 06:54:25 +0000 UTC, pod became ready at 2023-12-31 06:54:45 +0000 UTC
  Dec 31 06:54:47.337: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-7721" for this suite. @ 12/31/23 06:54:47.339
• [22.046 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:107
  STEP: Creating a kubernetes client @ 12/31/23 06:54:47.341
  Dec 31 06:54:47.341: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-probe @ 12/31/23 06:54:47.342
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:54:47.349
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:54:47.35
  Dec 31 06:55:47.356: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-3984" for this suite. @ 12/31/23 06:55:47.358
• [60.020 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:887
  STEP: Creating a kubernetes client @ 12/31/23 06:55:47.361
  Dec 31 06:55:47.361: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 06:55:47.362
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:55:47.368
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:55:47.369
  STEP: validating api versions @ 12/31/23 06:55:47.371
  Dec 31 06:55:47.371: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-7889 api-versions'
  Dec 31 06:55:47.409: INFO: stderr: ""
  Dec 31 06:55:47.409: INFO: stdout: "admissionregistration.k8s.io/v1\napiextensions.k8s.io/v1\napiregistration.k8s.io/v1\napps/v1\nauthentication.k8s.io/v1\nauthorization.k8s.io/v1\nautoscaling/v1\nautoscaling/v2\nbatch/v1\ncertificates.k8s.io/v1\ncoordination.k8s.io/v1\ndiscovery.k8s.io/v1\nevents.k8s.io/v1\nflowcontrol.apiserver.k8s.io/v1\nflowcontrol.apiserver.k8s.io/v1beta3\nmetrics.k8s.io/v1beta1\nnetworking.k8s.io/v1\nnode.k8s.io/v1\npolicy/v1\nrbac.authorization.k8s.io/v1\nscheduling.k8s.io/v1\nstorage.k8s.io/v1\nv1\n"
  Dec 31 06:55:47.409: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-7889" for this suite. @ 12/31/23 06:55:47.41
• [0.051 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:100
  STEP: Creating a kubernetes client @ 12/31/23 06:55:47.412
  Dec 31 06:55:47.412: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename configmap @ 12/31/23 06:55:47.412
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:55:47.418
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:55:47.42
  STEP: Creating configMap with name configmap-test-volume-map-ba1cf90f-3934-41ac-b3dd-bdd527cd69d7 @ 12/31/23 06:55:47.421
  STEP: Creating a pod to test consume configMaps @ 12/31/23 06:55:47.422
  STEP: Saw pod success @ 12/31/23 06:55:51.432
  Dec 31 06:55:51.433: INFO: Trying to get logs from node worker3 pod pod-configmaps-4004e681-c0d0-4fcd-8303-cd8d8bfdb3a0 container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 06:55:51.44
  Dec 31 06:55:51.446: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-3844" for this suite. @ 12/31/23 06:55:51.447
• [4.038 seconds]
------------------------------
SSSSS
------------------------------
[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:117
  STEP: Creating a kubernetes client @ 12/31/23 06:55:51.45
  Dec 31 06:55:51.450: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename dns @ 12/31/23 06:55:51.45
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:55:51.456
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:55:51.458
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-1.dns-test-service.dns-2349.svc.cluster.local)" && echo OK > /results/wheezy_hosts@dns-querier-1.dns-test-service.dns-2349.svc.cluster.local;test -n "$$(getent hosts dns-querier-1)" && echo OK > /results/wheezy_hosts@dns-querier-1;sleep 1; done
   @ 12/31/23 06:55:51.459
  STEP: Running these commands on jessie: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-1.dns-test-service.dns-2349.svc.cluster.local)" && echo OK > /results/jessie_hosts@dns-querier-1.dns-test-service.dns-2349.svc.cluster.local;test -n "$$(getent hosts dns-querier-1)" && echo OK > /results/jessie_hosts@dns-querier-1;sleep 1; done
   @ 12/31/23 06:55:51.459
  STEP: creating a pod to probe /etc/hosts @ 12/31/23 06:55:51.459
  STEP: submitting the pod to kubernetes @ 12/31/23 06:55:51.459
  STEP: retrieving the pod @ 12/31/23 06:55:53.466
  STEP: looking for the results for each expected name from probers @ 12/31/23 06:55:53.467
  Dec 31 06:55:53.510: INFO: DNS probes using dns-2349/dns-test-cf4aab9b-a619-4f44-b59d-2a781633a96e succeeded

  STEP: deleting the pod @ 12/31/23 06:55:53.51
  Dec 31 06:55:53.515: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-2349" for this suite. @ 12/31/23 06:55:53.517
• [2.069 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:397
  STEP: Creating a kubernetes client @ 12/31/23 06:55:53.519
  Dec 31 06:55:53.519: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename resourcequota @ 12/31/23 06:55:53.519
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:55:53.525
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:55:53.527
  STEP: Counting existing ResourceQuota @ 12/31/23 06:55:53.529
  STEP: Creating a ResourceQuota @ 12/31/23 06:55:58.53
  STEP: Ensuring resource quota status is calculated @ 12/31/23 06:55:58.532
  STEP: Creating a ReplicationController @ 12/31/23 06:56:00.535
  STEP: Ensuring resource quota status captures replication controller creation @ 12/31/23 06:56:00.541
  STEP: Deleting a ReplicationController @ 12/31/23 06:56:02.543
  STEP: Ensuring resource quota status released usage @ 12/31/23 06:56:02.545
  Dec 31 06:56:04.548: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-3681" for this suite. @ 12/31/23 06:56:04.55
• [11.034 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:55
  STEP: Creating a kubernetes client @ 12/31/23 06:56:04.553
  Dec 31 06:56:04.553: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:56:04.554
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:56:04.566
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:56:04.567
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 06:56:04.569
  STEP: Saw pod success @ 12/31/23 06:56:08.577
  Dec 31 06:56:08.579: INFO: Trying to get logs from node worker3 pod downwardapi-volume-09fa732e-0257-406e-b0ac-c5540f7dd48e container client-container: <nil>
  STEP: delete the pod @ 12/31/23 06:56:08.581
  Dec 31 06:56:08.587: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4811" for this suite. @ 12/31/23 06:56:08.588
• [4.037 seconds]
------------------------------
[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/pods.go:445
  STEP: Creating a kubernetes client @ 12/31/23 06:56:08.591
  Dec 31 06:56:08.591: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pods @ 12/31/23 06:56:08.591
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:56:08.596
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:56:08.599
  STEP: Saw pod success @ 12/31/23 06:56:12.621
  Dec 31 06:56:12.622: INFO: Trying to get logs from node worker3 pod client-envvars-2e4103f9-b700-41f1-82db-7e55a5d27b9a container env3cont: <nil>
  STEP: delete the pod @ 12/31/23 06:56:12.625
  Dec 31 06:56:12.631: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-771" for this suite. @ 12/31/23 06:56:12.632
• [4.043 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:113
  STEP: Creating a kubernetes client @ 12/31/23 06:56:12.635
  Dec 31 06:56:12.635: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename deployment @ 12/31/23 06:56:12.635
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:56:12.641
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:56:12.642
  Dec 31 06:56:12.645: INFO: Creating deployment "test-recreate-deployment"
  Dec 31 06:56:12.647: INFO: Waiting deployment "test-recreate-deployment" to be updated to revision 1
  Dec 31 06:56:12.651: INFO: deployment "test-recreate-deployment" doesn't have the required revision set
  Dec 31 06:56:14.653: INFO: Waiting deployment "test-recreate-deployment" to complete
  Dec 31 06:56:14.654: INFO: Triggering a new rollout for deployment "test-recreate-deployment"
  Dec 31 06:56:14.658: INFO: Updating deployment test-recreate-deployment
  Dec 31 06:56:14.658: INFO: Watching deployment "test-recreate-deployment" to verify that new pods will not run with olds pods
  Dec 31 06:56:14.691: INFO: Deployment "test-recreate-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-recreate-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9207",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a81ee768-1090-4f9b-bdf7-0809811b49a3",
      ResourceVersion: (string) (len=5) "19601",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839602572,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=570) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |":{"f:type":{}},|
              000000b0  22 66 3a 74 65 6d 70 6c  61 74 65 22 3a 7b 22 66  |"f:template":{"f|
              000000c0  3a 6d 65 74 61 64 61 74  61 22 3a 7b 22 66 3a 6c  |:metadata":{"f:l|
              000000d0  61 62 65 6c 73 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |abels":{".":{},"|
              000000e0  66 3a 6e 61 6d 65 22 3a  7b 7d 7d 7d 2c 22 66 3a  |f:name":{}}},"f:|
              000000f0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              00000100  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              00000110  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              00000120  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              00000130  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000140  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000150  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000160  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 73 65 63 75  |rces":{},"f:secu|
              00000170  72 69 74 79 43 6f 6e 74  65 78 74 22 3a 7b 7d 2c  |rityContext":{},|
              00000180  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000190  73 73 61 67 65 50 61 74  68 22 3a 7b 7d 2c 22 66  |ssagePath":{},"f|
              000001a0  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 4d 65 73 73  |:terminationMess|
              000001b0  61 67 65 50 6f 6c 69 63  79 22 3a 7b 7d 7d 7d 2c  |agePolicy":{}}},|
              000001c0  22 66 3a 64 6e 73 50 6f  6c 69 63 79 22 3a 7b 7d  |"f:dnsPolicy":{}|
              000001d0  2c 22 66 3a 72 65 73 74  61 72 74 50 6f 6c 69 63  |,"f:restartPolic|
              000001e0  79 22 3a 7b 7d 2c 22 66  3a 73 63 68 65 64 75 6c  |y":{},"f:schedul|
              000001f0  65 72 4e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 73 65  |erName":{},"f:se|
              00000200  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000210  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000220  47 72 61 63 65 50 65 72  69 6f 64 53 65 63 6f 6e  |GracePeriodSecon|
              00000230  64 73 22 3a 7b 7d 7d 7d  7d 7d                    |ds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=495) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 63 6f 6e 64 69 74 69  6f 6e 73 22 3a 7b 22 2e  |:conditions":{".|
              00000070  22 3a 7b 7d 2c 22 6b 3a  7b 5c 22 74 79 70 65 5c  |":{},"k:{\"type\|
              00000080  22 3a 5c 22 41 76 61 69  6c 61 62 6c 65 5c 22 7d  |":\"Available\"}|
              00000090  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |":{".":{},"f:las|
              000000a0  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              000000b0  3a 7b 7d 2c 22 66 3a 6c  61 73 74 55 70 64 61 74  |:{},"f:lastUpdat|
              000000c0  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6d 65 73  |eTime":{},"f:mes|
              000000d0  73 61 67 65 22 3a 7b 7d  2c 22 66 3a 72 65 61 73  |sage":{},"f:reas|
              000000e0  6f 6e 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |on":{},"f:status|
              000000f0  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000100  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000110  22 50 72 6f 67 72 65 73  73 69 6e 67 5c 22 7d 22  |"Progressing\"}"|
              00000120  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              00000130  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000140  7b 7d 2c 22 66 3a 6c 61  73 74 55 70 64 61 74 65  |{},"f:lastUpdate|
              00000150  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6d 65 73 73  |Time":{},"f:mess|
              00000160  61 67 65 22 3a 7b 7d 2c  22 66 3a 72 65 61 73 6f  |age":{},"f:reaso|
              00000170  6e 22 3a 7b 7d 2c 22 66  3a 73 74 61 74 75 73 22  |n":{},"f:status"|
              00000180  3a 7b 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |:{},"f:type":{}}|
              00000190  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              000001a0  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              000001b0  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 75  |eplicas":{},"f:u|
              000001c0  6e 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |navailableReplic|
              000001d0  61 73 22 3a 7b 7d 2c 22  66 3a 75 70 64 61 74 65  |as":{},"f:update|
              000001e0  64 52 65 70 6c 69 63 61  73 22 3a 7b 7d 7d 7d     |dReplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=8) "Recreate",
        RollingUpdate: (*v1.RollingUpdateDeployment)(<nil>)
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 2,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      UnavailableReplicas: (int32) 1,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=26) "MinimumReplicasUnavailable",
          Message: (string) (len=46) "Deployment does not have minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602572,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=17) "ReplicaSetUpdated",
          Message: (string) (len=63) "ReplicaSet \"test-recreate-deployment-76fb77d45\" is progressing."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Dec 31 06:56:14.692: INFO: New ReplicaSet "test-recreate-deployment-76fb77d45" of Deployment "test-recreate-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=34) "test-recreate-deployment-76fb77d45",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9207",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "29ad7ff4-da37-4005-972e-4d94e388d26f",
      ResourceVersion: (string) (len=5) "19599",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839602574,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "1",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-recreate-deployment",
          UID: (types.UID) (len=36) "a81ee768-1090-4f9b-bdf7-0809811b49a3",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 61 38 31 65 65 37  36 38 2d 31 30 39 30 2d  |\"a81ee768-1090-|
              00000120  34 66 39 62 2d 62 64 66  37 2d 30 38 30 39 38 31  |4f9b-bdf7-080981|
              00000130  31 62 34 39 61 33 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |1b49a3\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=84) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  66 75 6c 6c 79 4c 61 62  65 6c 65 64 52 65 70 6c  |fullyLabeledRepl|
              00000020  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |icas":{},"f:obse|
              00000030  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              00000040  7b 7d 2c 22 66 3a 72 65  70 6c 69 63 61 73 22 3a  |{},"f:replicas":|
              00000050  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3",
          (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3",
            (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Dec 31 06:56:14.693: INFO: All old ReplicaSets of Deployment "test-recreate-deployment":
  Dec 31 06:56:14.693: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=34) "test-recreate-deployment-dd4bc9d6d",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9207",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "b502c5eb-2ff5-48ed-8b41-f55fc7f54342",
      ResourceVersion: (string) (len=5) "19589",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839602572,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=9) "dd4bc9d6d"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "1",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-recreate-deployment",
          UID: (types.UID) (len=36) "a81ee768-1090-4f9b-bdf7-0809811b49a3",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 61 38 31 65 65 37  36 38 2d 31 30 39 30 2d  |\"a81ee768-1090-|
              00000120  34 66 39 62 2d 62 64 66  37 2d 30 38 30 39 38 31  |4f9b-bdf7-080981|
              00000130  31 62 34 39 61 33 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |1b49a3\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=9) "dd4bc9d6d",
          (string) (len=4) "name": (string) (len=12) "sample-pod-3"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3",
            (string) (len=17) "pod-template-hash": (string) (len=9) "dd4bc9d6d"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Dec 31 06:56:14.695: INFO: Pod "test-recreate-deployment-76fb77d45-qvppq" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=40) "test-recreate-deployment-76fb77d45-qvppq",
      GenerateName: (string) (len=35) "test-recreate-deployment-76fb77d45-",
      Namespace: (string) (len=15) "deployment-9207",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "975a5177-bc04-4c1f-ae33-46156f3a3658",
      ResourceVersion: (string) (len=5) "19600",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839602574,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=34) "test-recreate-deployment-76fb77d45",
          UID: (types.UID) (len=36) "29ad7ff4-da37-4005-972e-4d94e388d26f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 32 39  61 64 37 66 66 34 2d 64  |d\":\"29ad7ff4-d|
              00000090  61 33 37 2d 34 30 30 35  2d 39 37 32 65 2d 34 64  |a37-4005-972e-4d|
              000000a0  39 34 65 33 38 38 64 32  36 66 5c 22 7d 22 3a 7b  |94e388d26f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=624) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 50  |"k:{\"type\":\"P|
              00000130  6f 64 52 65 61 64 79 54  6f 53 74 61 72 74 43 6f  |odReadyToStartCo|
              00000140  6e 74 61 69 6e 65 72 73  5c 22 7d 22 3a 7b 22 2e  |ntainers\"}":{".|
              00000150  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 50 72 6f 62  |":{},"f:lastProb|
              00000160  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |eTime":{},"f:las|
              00000170  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              00000180  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000190  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000001a0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 52 65  |k:{\"type\":\"Re|
              000001b0  61 64 79 5c 22 7d 22 3a  7b 22 2e 22 3a 7b 7d 2c  |ady\"}":{".":{},|
              000001c0  22 66 3a 6c 61 73 74 50  72 6f 62 65 54 69 6d 65  |"f:lastProbeTime|
              000001d0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000001e0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000001f0  66 3a 6d 65 73 73 61 67  65 22 3a 7b 7d 2c 22 66  |f:message":{},"f|
              00000200  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000210  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000220  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000230  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000240  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000250  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000260  3a 73 74 61 72 74 54 69  6d 65 22 3a 7b 7d 7d 7d  |:startTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-d4fn7",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-d4fn7",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839602574,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839602574,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 06:56:14.696: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-9207" for this suite. @ 12/31/23 06:56:14.697
• [2.065 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/security_context.go:349
  STEP: Creating a kubernetes client @ 12/31/23 06:56:14.7
  Dec 31 06:56:14.700: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename security-context-test @ 12/31/23 06:56:14.701
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:56:14.707
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:56:14.708
  Dec 31 06:56:18.719: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-3225" for this suite. @ 12/31/23 06:56:18.72
• [4.022 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:58
  STEP: Creating a kubernetes client @ 12/31/23 06:56:18.723
  Dec 31 06:56:18.723: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:56:18.723
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:56:18.729
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:56:18.73
  STEP: Creating configMap with name projected-configmap-test-volume-d602ade0-6a79-4bf2-a732-e5d76c5ff2d2 @ 12/31/23 06:56:18.732
  STEP: Creating a pod to test consume configMaps @ 12/31/23 06:56:18.733
  STEP: Saw pod success @ 12/31/23 06:56:20.74
  Dec 31 06:56:20.741: INFO: Trying to get logs from node worker3 pod pod-projected-configmaps-25a4b18c-1ca1-46ba-84bc-8ad1e3d029af container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 06:56:20.743
  Dec 31 06:56:20.750: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2319" for this suite. @ 12/31/23 06:56:20.752
• [2.031 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] API priority and fairness should support FlowSchema API operations [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/flowcontrol.go:270
  STEP: Creating a kubernetes client @ 12/31/23 06:56:20.754
  Dec 31 06:56:20.754: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename apf @ 12/31/23 06:56:20.754
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:56:20.76
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:56:20.761
  STEP: getting /apis @ 12/31/23 06:56:20.763
  STEP: getting /apis/flowcontrol.apiserver.k8s.io @ 12/31/23 06:56:20.765
  STEP: getting /apis/flowcontrol.apiserver.k8s.io/v1 @ 12/31/23 06:56:20.765
  STEP: creating @ 12/31/23 06:56:20.766
  STEP: getting @ 12/31/23 06:56:20.771
  STEP: listing @ 12/31/23 06:56:20.772
  STEP: watching @ 12/31/23 06:56:20.773
  Dec 31 06:56:20.773: INFO: starting watch
  STEP: patching @ 12/31/23 06:56:20.774
  STEP: updating @ 12/31/23 06:56:20.776
  Dec 31 06:56:20.795: INFO: waiting for watch events with expected annotations
  Dec 31 06:56:20.795: INFO: missing expected annotations, waiting: map[string]string(nil)
  STEP: getting /status @ 12/31/23 06:56:20.795
  STEP: patching /status @ 12/31/23 06:56:20.796
  STEP: updating /status @ 12/31/23 06:56:20.799
  STEP: deleting @ 12/31/23 06:56:20.817
  STEP: deleting a collection @ 12/31/23 06:56:20.821
  Dec 31 06:56:20.826: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "apf-2157" for this suite. @ 12/31/23 06:56:20.828
• [0.076 seconds]
------------------------------
S
------------------------------
[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance] [sig-auth, Conformance]
test/e2e/auth/certificates.go:200
  STEP: Creating a kubernetes client @ 12/31/23 06:56:20.83
  Dec 31 06:56:20.830: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename certificates @ 12/31/23 06:56:20.83
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:56:20.837
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:56:20.839
  STEP: getting /apis @ 12/31/23 06:56:21.071
  STEP: getting /apis/certificates.k8s.io @ 12/31/23 06:56:21.074
  STEP: getting /apis/certificates.k8s.io/v1 @ 12/31/23 06:56:21.074
  STEP: creating @ 12/31/23 06:56:21.075
  STEP: getting @ 12/31/23 06:56:21.084
  STEP: listing @ 12/31/23 06:56:21.085
  STEP: watching @ 12/31/23 06:56:21.086
  Dec 31 06:56:21.086: INFO: starting watch
  STEP: patching @ 12/31/23 06:56:21.086
  STEP: updating @ 12/31/23 06:56:21.089
  Dec 31 06:56:21.091: INFO: waiting for watch events with expected annotations
  Dec 31 06:56:21.091: INFO: saw patched and updated annotations
  STEP: getting /approval @ 12/31/23 06:56:21.091
  STEP: patching /approval @ 12/31/23 06:56:21.092
  STEP: updating /approval @ 12/31/23 06:56:21.095
  STEP: getting /status @ 12/31/23 06:56:21.097
  STEP: patching /status @ 12/31/23 06:56:21.098
  STEP: updating /status @ 12/31/23 06:56:21.103
  STEP: deleting @ 12/31/23 06:56:21.107
  STEP: deleting a collection @ 12/31/23 06:56:21.114
  Dec 31 06:56:21.119: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "certificates-5769" for this suite. @ 12/31/23 06:56:21.12
• [0.293 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1084
  STEP: Creating a kubernetes client @ 12/31/23 06:56:21.122
  Dec 31 06:56:21.122: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 06:56:21.123
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:56:21.129
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:56:21.13
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 12/31/23 06:56:21.133
  Dec 31 06:56:21.133: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-5376 run e2e-test-httpd-pod --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4 --pod-running-timeout=2m0s --labels=run=e2e-test-httpd-pod'
  Dec 31 06:56:21.173: INFO: stderr: ""
  Dec 31 06:56:21.173: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: replace the image in the pod with server-side dry-run @ 12/31/23 06:56:21.173
  Dec 31 06:56:21.173: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-5376 patch pod e2e-test-httpd-pod -p {"spec":{"containers":[{"name": "e2e-test-httpd-pod","image": "registry.k8s.io/e2e-test-images/busybox:1.36.1-1"}]}} --dry-run=server'
  Dec 31 06:56:21.214: INFO: stderr: ""
  Dec 31 06:56:21.214: INFO: stdout: "pod/e2e-test-httpd-pod patched\n"
  STEP: verifying the pod e2e-test-httpd-pod has the right image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 12/31/23 06:56:21.214
  Dec 31 06:56:21.215: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-5376 delete pods e2e-test-httpd-pod'
  Dec 31 06:56:22.472: INFO: stderr: ""
  Dec 31 06:56:22.472: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Dec 31 06:56:22.472: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-5376" for this suite. @ 12/31/23 06:56:22.473
• [1.353 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_secret.go:46
  STEP: Creating a kubernetes client @ 12/31/23 06:56:22.476
  Dec 31 06:56:22.476: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:56:22.476
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:56:22.482
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:56:22.483
  STEP: Creating projection with secret that has name projected-secret-test-f5e3be2d-42b6-4f01-b63f-8374e2a95d7f @ 12/31/23 06:56:22.485
  STEP: Creating a pod to test consume secrets @ 12/31/23 06:56:22.487
  STEP: Saw pod success @ 12/31/23 06:56:26.494
  Dec 31 06:56:26.495: INFO: Trying to get logs from node worker3 pod pod-projected-secrets-4d833fb8-54d2-4745-b49b-7306c36a1147 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 06:56:26.498
  Dec 31 06:56:26.504: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8898" for this suite. @ 12/31/23 06:56:26.505
• [4.032 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for pods for Subdomain [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:286
  STEP: Creating a kubernetes client @ 12/31/23 06:56:26.508
  Dec 31 06:56:26.508: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename dns @ 12/31/23 06:56:26.509
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:56:26.515
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:56:26.516
  STEP: Creating a test headless service @ 12/31/23 06:56:26.519
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local;check="$$(dig +notcp +noall +answer +search dns-test-service-2.dns-353.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service-2.dns-353.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service-2.dns-353.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service-2.dns-353.svc.cluster.local;sleep 1; done
   @ 12/31/23 06:56:26.522
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local;check="$$(dig +notcp +noall +answer +search dns-test-service-2.dns-353.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service-2.dns-353.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service-2.dns-353.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service-2.dns-353.svc.cluster.local;sleep 1; done
   @ 12/31/23 06:56:26.522
  STEP: creating a pod to probe DNS @ 12/31/23 06:56:26.522
  STEP: submitting the pod to kubernetes @ 12/31/23 06:56:26.522
  STEP: retrieving the pod @ 12/31/23 06:56:28.532
  STEP: looking for the results for each expected name from probers @ 12/31/23 06:56:28.533
  Dec 31 06:56:28.535: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:28.536: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:28.542: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:28.546: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:28.554: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:28.556: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:28.566: INFO: Unable to read jessie_udp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:28.576: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:28.576: INFO: Lookups using dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local wheezy_udp@dns-test-service-2.dns-353.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-353.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local jessie_udp@dns-test-service-2.dns-353.svc.cluster.local jessie_tcp@dns-test-service-2.dns-353.svc.cluster.local]

  Dec 31 06:56:28.578: INFO: Pod client logs for webserver: 
  Dec 31 06:56:28.588: INFO: Pod client logs for querier: 
  Dec 31 06:56:28.590: INFO: Pod client logs for jessie-querier: 
  Dec 31 06:56:33.546: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:33.556: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:33.567: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:33.568: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:33.578: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:33.589: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:33.597: INFO: Unable to read jessie_udp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:33.607: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:33.607: INFO: Lookups using dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local wheezy_udp@dns-test-service-2.dns-353.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-353.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local jessie_udp@dns-test-service-2.dns-353.svc.cluster.local jessie_tcp@dns-test-service-2.dns-353.svc.cluster.local]

  Dec 31 06:56:33.610: INFO: Pod client logs for webserver: 
  Dec 31 06:56:33.620: INFO: Pod client logs for querier: 
  Dec 31 06:56:33.630: INFO: Pod client logs for jessie-querier: 
  Dec 31 06:56:38.547: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:38.548: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:38.557: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:38.567: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:38.569: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:38.579: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:38.589: INFO: Unable to read jessie_udp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:38.599: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:38.599: INFO: Lookups using dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local wheezy_udp@dns-test-service-2.dns-353.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-353.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local jessie_udp@dns-test-service-2.dns-353.svc.cluster.local jessie_tcp@dns-test-service-2.dns-353.svc.cluster.local]

  Dec 31 06:56:38.601: INFO: Pod client logs for webserver: 
  Dec 31 06:56:38.607: INFO: Pod client logs for querier: 
  Dec 31 06:56:38.617: INFO: Pod client logs for jessie-querier: 
  Dec 31 06:56:43.546: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:43.556: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:43.566: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:43.576: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:43.577: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:43.586: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:43.597: INFO: Unable to read jessie_udp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:43.606: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:43.606: INFO: Lookups using dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local wheezy_udp@dns-test-service-2.dns-353.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-353.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local jessie_udp@dns-test-service-2.dns-353.svc.cluster.local jessie_tcp@dns-test-service-2.dns-353.svc.cluster.local]

  Dec 31 06:56:43.608: INFO: Pod client logs for webserver: 
  Dec 31 06:56:43.618: INFO: Pod client logs for querier: 
  Dec 31 06:56:43.628: INFO: Pod client logs for jessie-querier: 
  Dec 31 06:56:48.539: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:48.544: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:48.545: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:48.555: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:48.559: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:48.564: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:48.565: INFO: Unable to read jessie_udp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:48.575: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:48.575: INFO: Lookups using dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local wheezy_udp@dns-test-service-2.dns-353.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-353.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local jessie_udp@dns-test-service-2.dns-353.svc.cluster.local jessie_tcp@dns-test-service-2.dns-353.svc.cluster.local]

  Dec 31 06:56:48.580: INFO: Pod client logs for webserver: 
  Dec 31 06:56:48.586: INFO: Pod client logs for querier: 
  Dec 31 06:56:48.596: INFO: Pod client logs for jessie-querier: 
  Dec 31 06:56:53.546: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:53.548: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:53.556: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:53.558: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:53.566: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:53.576: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:53.586: INFO: Unable to read jessie_udp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:53.596: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-353.svc.cluster.local from pod dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f: the server could not find the requested resource (get pods dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f)
  Dec 31 06:56:53.596: INFO: Lookups using dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local wheezy_udp@dns-test-service-2.dns-353.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-353.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-353.svc.cluster.local jessie_udp@dns-test-service-2.dns-353.svc.cluster.local jessie_tcp@dns-test-service-2.dns-353.svc.cluster.local]

  Dec 31 06:56:53.606: INFO: Pod client logs for webserver: 
  Dec 31 06:56:53.608: INFO: Pod client logs for querier: 
  Dec 31 06:56:53.618: INFO: Pod client logs for jessie-querier: 
  Dec 31 06:56:58.588: INFO: DNS probes using dns-353/dns-test-7119b5a3-5ed7-4c6a-96f6-0429b431029f succeeded

  STEP: deleting the pod @ 12/31/23 06:56:58.589
  STEP: deleting the test headless service @ 12/31/23 06:56:58.596
  Dec 31 06:56:58.601: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-353" for this suite. @ 12/31/23 06:56:58.603
• [32.098 seconds]
------------------------------
SSSS
------------------------------
[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:1455
  STEP: Creating a kubernetes client @ 12/31/23 06:56:58.606
  Dec 31 06:56:58.606: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 06:56:58.606
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:56:58.612
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:56:58.614
  STEP: creating a service externalname-service with the type=ExternalName in namespace services-7627 @ 12/31/23 06:56:58.615
  STEP: changing the ExternalName service to type=NodePort @ 12/31/23 06:56:58.617
  STEP: creating replication controller externalname-service in namespace services-7627 @ 12/31/23 06:56:58.623
  I1231 06:56:58.627094      23 runners.go:197] Created replication controller with name: externalname-service, namespace: services-7627, replica count: 2
  I1231 06:57:01.678260      23 runners.go:197] externalname-service Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Dec 31 06:57:01.678: INFO: Creating new exec pod
  Dec 31 06:57:04.686: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-7627 exec execpodrzj7c -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Dec 31 06:57:04.774: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Dec 31 06:57:04.774: INFO: stdout: ""
  Dec 31 06:57:05.687: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-7627 exec execpodrzj7c -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Dec 31 06:57:05.766: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Dec 31 06:57:05.766: INFO: stdout: "externalname-service-mncwr"
  Dec 31 06:57:05.766: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-7627 exec execpodrzj7c -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.82.101 80'
  Dec 31 06:57:05.850: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.82.101 80\nConnection to 10.68.82.101 80 port [tcp/http] succeeded!\n"
  Dec 31 06:57:05.850: INFO: stdout: ""
  Dec 31 06:57:06.767: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-7627 exec execpodrzj7c -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.82.101 80'
  Dec 31 06:57:06.854: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.82.101 80\nConnection to 10.68.82.101 80 port [tcp/http] succeeded!\n"
  Dec 31 06:57:06.854: INFO: stdout: "externalname-service-mncwr"
  Dec 31 06:57:06.854: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-7627 exec execpodrzj7c -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.255.0.203 31321'
  Dec 31 06:57:06.938: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.255.0.203 31321\nConnection to 10.255.0.203 31321 port [tcp/*] succeeded!\n"
  Dec 31 06:57:06.938: INFO: stdout: "externalname-service-frhj7"
  Dec 31 06:57:06.938: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-7627 exec execpodrzj7c -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.255.0.202 31321'
  Dec 31 06:57:07.034: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.255.0.202 31321\nConnection to 10.255.0.202 31321 port [tcp/*] succeeded!\n"
  Dec 31 06:57:07.034: INFO: stdout: "externalname-service-frhj7"
  Dec 31 06:57:07.034: INFO: Cleaning up the ExternalName to NodePort test service
  Dec 31 06:57:07.044: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-7627" for this suite. @ 12/31/23 06:57:07.046
• [8.443 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtimeclass.go:106
  STEP: Creating a kubernetes client @ 12/31/23 06:57:07.052
  Dec 31 06:57:07.052: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename runtimeclass @ 12/31/23 06:57:07.053
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:57:07.059
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:57:07.064
  Dec 31 06:57:09.079: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-9008" for this suite. @ 12/31/23 06:57:09.08
• [2.032 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance] [sig-apps, Conformance]
test/e2e/apps/disruption.go:87
  STEP: Creating a kubernetes client @ 12/31/23 06:57:09.084
  Dec 31 06:57:09.084: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename disruption @ 12/31/23 06:57:09.084
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:57:09.091
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:57:09.093
  STEP: Creating a kubernetes client @ 12/31/23 06:57:09.094
  Dec 31 06:57:09.094: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename disruption-2 @ 12/31/23 06:57:09.094
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:57:09.099
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:57:09.1
  STEP: Waiting for the pdb to be processed @ 12/31/23 06:57:09.104
  STEP: Waiting for the pdb to be processed @ 12/31/23 06:57:11.107
  STEP: Waiting for the pdb to be processed @ 12/31/23 06:57:13.112
  STEP: listing a collection of PDBs across all namespaces @ 12/31/23 06:57:13.117
  STEP: listing a collection of PDBs in namespace disruption-1308 @ 12/31/23 06:57:13.119
  STEP: deleting a collection of PDBs @ 12/31/23 06:57:13.12
  STEP: Waiting for the PDB collection to be deleted @ 12/31/23 06:57:13.123
  Dec 31 06:57:13.124: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-2-7395" for this suite. @ 12/31/23 06:57:13.126
  Dec 31 06:57:13.128: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-1308" for this suite. @ 12/31/23 06:57:13.13
• [4.048 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:2236
  STEP: Creating a kubernetes client @ 12/31/23 06:57:13.132
  Dec 31 06:57:13.132: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 06:57:13.132
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:57:13.139
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:57:13.141
  STEP: creating service in namespace services-5353 @ 12/31/23 06:57:13.142
  STEP: creating service affinity-nodeport-transition in namespace services-5353 @ 12/31/23 06:57:13.142
  STEP: creating replication controller affinity-nodeport-transition in namespace services-5353 @ 12/31/23 06:57:13.148
  I1231 06:57:13.153123      23 runners.go:197] Created replication controller with name: affinity-nodeport-transition, namespace: services-5353, replica count: 3
  I1231 06:57:16.205289      23 runners.go:197] affinity-nodeport-transition Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Dec 31 06:57:16.208: INFO: Creating new exec pod
  Dec 31 06:57:19.218: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-5353 exec execpod-affinityd9d8t -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-nodeport-transition 80'
  Dec 31 06:57:19.302: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-nodeport-transition 80\nConnection to affinity-nodeport-transition 80 port [tcp/http] succeeded!\n"
  Dec 31 06:57:19.302: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 06:57:19.302: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-5353 exec execpod-affinityd9d8t -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.62.68 80'
  Dec 31 06:57:19.382: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.62.68 80\nConnection to 10.68.62.68 80 port [tcp/http] succeeded!\n"
  Dec 31 06:57:19.382: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 06:57:19.382: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-5353 exec execpod-affinityd9d8t -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.255.0.202 32582'
  Dec 31 06:57:19.474: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.255.0.202 32582\nConnection to 10.255.0.202 32582 port [tcp/*] succeeded!\n"
  Dec 31 06:57:19.474: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 06:57:19.474: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-5353 exec execpod-affinityd9d8t -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.255.0.204 32582'
  Dec 31 06:57:19.561: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.255.0.204 32582\nConnection to 10.255.0.204 32582 port [tcp/*] succeeded!\n"
  Dec 31 06:57:19.561: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 06:57:19.566: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-5353 exec execpod-affinityd9d8t -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.255.0.202:32582/ ; done'
  Dec 31 06:57:19.701: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n"
  Dec 31 06:57:19.701: INFO: stdout: "\naffinity-nodeport-transition-bwfs7\naffinity-nodeport-transition-rx4cn\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-bwfs7\naffinity-nodeport-transition-rx4cn\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-bwfs7\naffinity-nodeport-transition-rx4cn\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-bwfs7\naffinity-nodeport-transition-rx4cn\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-bwfs7\naffinity-nodeport-transition-rx4cn\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-bwfs7"
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-bwfs7
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-rx4cn
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-bwfs7
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-rx4cn
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-bwfs7
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-rx4cn
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-bwfs7
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-rx4cn
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-bwfs7
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-rx4cn
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.701: INFO: Received response from host: affinity-nodeport-transition-bwfs7
  Dec 31 06:57:19.704: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-5353 exec execpod-affinityd9d8t -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.255.0.202:32582/ ; done'
  Dec 31 06:57:19.834: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32582/\n"
  Dec 31 06:57:19.834: INFO: stdout: "\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-xc5b8\naffinity-nodeport-transition-xc5b8"
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Received response from host: affinity-nodeport-transition-xc5b8
  Dec 31 06:57:19.834: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-nodeport-transition in namespace services-5353, will wait for the garbage collector to delete the pods @ 12/31/23 06:57:19.839
  Dec 31 06:57:19.892: INFO: Deleting ReplicationController affinity-nodeport-transition took: 2.034183ms
  Dec 31 06:57:19.993: INFO: Terminating ReplicationController affinity-nodeport-transition pods took: 100.083387ms
  Dec 31 06:57:23.003: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-5353" for this suite. @ 12/31/23 06:57:23.005
• [9.876 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance] [sig-apps, Conformance]
test/e2e/apps/job.go:655
  STEP: Creating a kubernetes client @ 12/31/23 06:57:23.008
  Dec 31 06:57:23.008: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename job @ 12/31/23 06:57:23.008
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:57:23.016
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:57:23.018
  STEP: Creating a job @ 12/31/23 06:57:23.019
  STEP: Ensuring active pods == parallelism @ 12/31/23 06:57:23.022
  STEP: Orphaning one of the Job's Pods @ 12/31/23 06:57:25.025
  Dec 31 06:57:25.533: INFO: Successfully updated pod "adopt-release-lhjm7"
  STEP: Checking that the Job readopts the Pod @ 12/31/23 06:57:25.533
  STEP: Removing the labels from the Job's Pod @ 12/31/23 06:57:27.538
  Dec 31 06:57:28.044: INFO: Successfully updated pod "adopt-release-lhjm7"
  STEP: Checking that the Job releases the Pod @ 12/31/23 06:57:28.044
  Dec 31 06:57:30.048: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-2328" for this suite. @ 12/31/23 06:57:30.049
• [7.045 seconds]
------------------------------
S
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/lifecycle_hook.go:169
  STEP: Creating a kubernetes client @ 12/31/23 06:57:30.052
  Dec 31 06:57:30.052: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 12/31/23 06:57:30.053
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:57:30.06
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:57:30.061
  STEP: create the container to handle the HTTPGet hook request. @ 12/31/23 06:57:30.064
  STEP: create the pod with lifecycle hook @ 12/31/23 06:57:32.072
  STEP: check poststart hook @ 12/31/23 06:57:34.079
  STEP: delete the pod with lifecycle hook @ 12/31/23 06:57:34.09
  Dec 31 06:57:36.096: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-9509" for this suite. @ 12/31/23 06:57:36.098
• [6.048 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance] [sig-scheduling, Conformance]
test/e2e/scheduling/limit_range.go:62
  STEP: Creating a kubernetes client @ 12/31/23 06:57:36.1
  Dec 31 06:57:36.100: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename limitrange @ 12/31/23 06:57:36.1
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:57:36.107
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:57:36.111
  STEP: Creating a LimitRange @ 12/31/23 06:57:36.112
  STEP: Setting up watch @ 12/31/23 06:57:36.112
  STEP: Submitting a LimitRange @ 12/31/23 06:57:36.214
  STEP: Verifying LimitRange creation was observed @ 12/31/23 06:57:36.216
  STEP: Fetching the LimitRange to ensure it has proper values @ 12/31/23 06:57:36.216
  Dec 31 06:57:36.217: INFO: Verifying requests: expected map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}] with actual map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}]
  Dec 31 06:57:36.217: INFO: Verifying limits: expected map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Creating a Pod with no resource requirements @ 12/31/23 06:57:36.217
  STEP: Ensuring Pod has resource requirements applied from LimitRange @ 12/31/23 06:57:36.221
  Dec 31 06:57:36.222: INFO: Verifying requests: expected map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}] with actual map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}]
  Dec 31 06:57:36.222: INFO: Verifying limits: expected map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Creating a Pod with partial resource requirements @ 12/31/23 06:57:36.222
  STEP: Ensuring Pod has merged resource requirements applied from LimitRange @ 12/31/23 06:57:36.226
  Dec 31 06:57:36.227: INFO: Verifying requests: expected map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{161061273600 0} {<nil>} 150Gi BinarySI} memory:{{157286400 0} {<nil>} 150Mi BinarySI}] with actual map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{161061273600 0} {<nil>} 150Gi BinarySI} memory:{{157286400 0} {<nil>} 150Mi BinarySI}]
  Dec 31 06:57:36.227: INFO: Verifying limits: expected map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Failing to create a Pod with less than min resources @ 12/31/23 06:57:36.227
  STEP: Failing to create a Pod with more than max resources @ 12/31/23 06:57:36.228
  STEP: Updating a LimitRange @ 12/31/23 06:57:36.229
  STEP: Verifying LimitRange updating is effective @ 12/31/23 06:57:36.232
  STEP: Creating a Pod with less than former min resources @ 12/31/23 06:57:38.235
  STEP: Failing to create a Pod with more than max resources @ 12/31/23 06:57:38.237
  STEP: Deleting a LimitRange @ 12/31/23 06:57:38.239
  STEP: Verifying the LimitRange was deleted @ 12/31/23 06:57:38.242
  Dec 31 06:57:43.244: INFO: limitRange is already deleted
  STEP: Creating a Pod with more than former max resources @ 12/31/23 06:57:43.244
  Dec 31 06:57:43.248: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "limitrange-4760" for this suite. @ 12/31/23 06:57:43.249
• [7.153 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should serve a basic image on each replica with a public image [Conformance] [sig-apps, Conformance]
test/e2e/apps/replica_set.go:112
  STEP: Creating a kubernetes client @ 12/31/23 06:57:43.253
  Dec 31 06:57:43.254: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename replicaset @ 12/31/23 06:57:43.254
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:57:43.261
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:57:43.262
  Dec 31 06:57:43.264: INFO: Creating ReplicaSet my-hostname-basic-f0aec9ea-f730-452a-aefd-0f247de73202
  Dec 31 06:57:43.274: INFO: Pod name my-hostname-basic-f0aec9ea-f730-452a-aefd-0f247de73202: Found 0 pods out of 1
  Dec 31 06:57:48.277: INFO: Pod name my-hostname-basic-f0aec9ea-f730-452a-aefd-0f247de73202: Found 1 pods out of 1
  Dec 31 06:57:48.277: INFO: Ensuring a pod for ReplicaSet "my-hostname-basic-f0aec9ea-f730-452a-aefd-0f247de73202" is running
  Dec 31 06:57:48.278: INFO: Pod "my-hostname-basic-f0aec9ea-f730-452a-aefd-0f247de73202-ztv8l" is running (conditions: [{Type:PodReadyToStartContainers Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-12-31 06:57:44 +0000 UTC Reason: Message:} {Type:Initialized Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-12-31 06:57:43 +0000 UTC Reason: Message:} {Type:Ready Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-12-31 06:57:44 +0000 UTC Reason: Message:} {Type:ContainersReady Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-12-31 06:57:44 +0000 UTC Reason: Message:} {Type:PodScheduled Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2023-12-31 06:57:43 +0000 UTC Reason: Message:}])
  Dec 31 06:57:48.278: INFO: Trying to dial the pod
  STEP: trying to dial each unique pod @ 12/31/23 06:57:48.278
  Dec 31 06:57:48.281: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-4295" for this suite. @ 12/31/23 06:57:48.284
• [5.033 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance] [sig-network, Conformance]
test/e2e/network/proxy.go:380
  STEP: Creating a kubernetes client @ 12/31/23 06:57:48.287
  Dec 31 06:57:48.287: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename proxy @ 12/31/23 06:57:48.287
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:57:48.295
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:57:48.297
  Dec 31 06:57:48.298: INFO: Creating pod...
  Dec 31 06:57:50.307: INFO: Creating service...
  Dec 31 06:57:50.311: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-5188/pods/agnhost/proxy?method=DELETE
  Dec 31 06:57:50.313: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Dec 31 06:57:50.313: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-5188/pods/agnhost/proxy?method=OPTIONS
  Dec 31 06:57:50.317: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Dec 31 06:57:50.317: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-5188/pods/agnhost/proxy?method=PATCH
  Dec 31 06:57:50.321: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Dec 31 06:57:50.321: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-5188/pods/agnhost/proxy?method=POST
  Dec 31 06:57:50.327: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Dec 31 06:57:50.327: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-5188/pods/agnhost/proxy?method=PUT
  Dec 31 06:57:50.331: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Dec 31 06:57:50.331: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-5188/services/e2e-proxy-test-service/proxy?method=DELETE
  Dec 31 06:57:50.341: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Dec 31 06:57:50.341: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-5188/services/e2e-proxy-test-service/proxy?method=OPTIONS
  Dec 31 06:57:50.351: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Dec 31 06:57:50.351: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-5188/services/e2e-proxy-test-service/proxy?method=PATCH
  Dec 31 06:57:50.361: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Dec 31 06:57:50.361: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-5188/services/e2e-proxy-test-service/proxy?method=POST
  Dec 31 06:57:50.371: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Dec 31 06:57:50.371: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-5188/services/e2e-proxy-test-service/proxy?method=PUT
  Dec 31 06:57:50.381: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Dec 31 06:57:50.381: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-5188/pods/agnhost/proxy?method=GET
  Dec 31 06:57:50.382: INFO: http.Client request:GET StatusCode:301
  Dec 31 06:57:50.382: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-5188/services/e2e-proxy-test-service/proxy?method=GET
  Dec 31 06:57:50.384: INFO: http.Client request:GET StatusCode:301
  Dec 31 06:57:50.384: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-5188/pods/agnhost/proxy?method=HEAD
  Dec 31 06:57:50.385: INFO: http.Client request:HEAD StatusCode:301
  Dec 31 06:57:50.385: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-5188/services/e2e-proxy-test-service/proxy?method=HEAD
  Dec 31 06:57:50.386: INFO: http.Client request:HEAD StatusCode:301
  Dec 31 06:57:50.386: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-5188" for this suite. @ 12/31/23 06:57:50.388
• [2.103 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:391
  STEP: Creating a kubernetes client @ 12/31/23 06:57:50.39
  Dec 31 06:57:50.390: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename crd-publish-openapi @ 12/31/23 06:57:50.391
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:57:50.398
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:57:50.4
  STEP: set up a multi version CRD @ 12/31/23 06:57:50.401
  Dec 31 06:57:50.402: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: rename a version @ 12/31/23 06:57:53.394
  STEP: check the new version name is served @ 12/31/23 06:57:53.401
  STEP: check the old version name is removed @ 12/31/23 06:57:54.078
  STEP: check the other version is not changed @ 12/31/23 06:57:54.672
  Dec 31 06:57:57.027: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-9486" for this suite. @ 12/31/23 06:57:57.031
• [6.643 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance] [sig-storage, Conformance]
test/e2e/storage/subpath.go:105
  STEP: Creating a kubernetes client @ 12/31/23 06:57:57.033
  Dec 31 06:57:57.033: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename subpath @ 12/31/23 06:57:57.034
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:57:57.04
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:57:57.044
  STEP: Setting up data @ 12/31/23 06:57:57.045
  STEP: Creating pod pod-subpath-test-projected-qg6s @ 12/31/23 06:57:57.048
  STEP: Creating a pod to test atomic-volume-subpath @ 12/31/23 06:57:57.048
  STEP: Saw pod success @ 12/31/23 06:58:21.083
  Dec 31 06:58:21.084: INFO: Trying to get logs from node worker3 pod pod-subpath-test-projected-qg6s container test-container-subpath-projected-qg6s: <nil>
  STEP: delete the pod @ 12/31/23 06:58:21.087
  STEP: Deleting pod pod-subpath-test-projected-qg6s @ 12/31/23 06:58:21.093
  Dec 31 06:58:21.093: INFO: Deleting pod "pod-subpath-test-projected-qg6s" in namespace "subpath-7012"
  Dec 31 06:58:21.097: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-7012" for this suite. @ 12/31/23 06:58:21.098
• [24.067 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance] [sig-network, Conformance]
test/e2e/network/proxy.go:286
  STEP: Creating a kubernetes client @ 12/31/23 06:58:21.1
  Dec 31 06:58:21.100: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename proxy @ 12/31/23 06:58:21.101
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:58:21.109
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:58:21.111
  Dec 31 06:58:21.112: INFO: Creating pod...
  Dec 31 06:58:23.119: INFO: Creating service...
  Dec 31 06:58:23.124: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-383/pods/agnhost/proxy/some/path/with/DELETE
  Dec 31 06:58:23.134: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Dec 31 06:58:23.134: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-383/pods/agnhost/proxy/some/path/with/GET
  Dec 31 06:58:23.144: INFO: http.Client request:GET | StatusCode:200 | Response:foo | Method:GET
  Dec 31 06:58:23.144: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-383/pods/agnhost/proxy/some/path/with/HEAD
  Dec 31 06:58:23.145: INFO: http.Client request:HEAD | StatusCode:200
  Dec 31 06:58:23.145: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-383/pods/agnhost/proxy/some/path/with/OPTIONS
  Dec 31 06:58:23.147: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Dec 31 06:58:23.147: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-383/pods/agnhost/proxy/some/path/with/PATCH
  Dec 31 06:58:23.157: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Dec 31 06:58:23.157: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-383/pods/agnhost/proxy/some/path/with/POST
  Dec 31 06:58:23.167: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Dec 31 06:58:23.167: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-383/pods/agnhost/proxy/some/path/with/PUT
  Dec 31 06:58:23.168: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Dec 31 06:58:23.168: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-383/services/test-service/proxy/some/path/with/DELETE
  Dec 31 06:58:23.177: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Dec 31 06:58:23.177: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-383/services/test-service/proxy/some/path/with/GET
  Dec 31 06:58:23.187: INFO: http.Client request:GET | StatusCode:200 | Response:foo | Method:GET
  Dec 31 06:58:23.187: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-383/services/test-service/proxy/some/path/with/HEAD
  Dec 31 06:58:23.188: INFO: http.Client request:HEAD | StatusCode:200
  Dec 31 06:58:23.188: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-383/services/test-service/proxy/some/path/with/OPTIONS
  Dec 31 06:58:23.197: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Dec 31 06:58:23.197: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-383/services/test-service/proxy/some/path/with/PATCH
  Dec 31 06:58:23.208: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Dec 31 06:58:23.208: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-383/services/test-service/proxy/some/path/with/POST
  Dec 31 06:58:23.218: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Dec 31 06:58:23.218: INFO: Starting http.Client for https://10.68.0.1:443/api/v1/namespaces/proxy-383/services/test-service/proxy/some/path/with/PUT
  Dec 31 06:58:23.228: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Dec 31 06:58:23.228: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-383" for this suite. @ 12/31/23 06:58:23.229
• [2.131 seconds]
------------------------------
S
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance] [sig-apps, Conformance]
test/e2e/apps/statefulset.go:902
  STEP: Creating a kubernetes client @ 12/31/23 06:58:23.232
  Dec 31 06:58:23.232: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename statefulset @ 12/31/23 06:58:23.232
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:58:23.241
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:58:23.242
  STEP: Creating service test in namespace statefulset-6351 @ 12/31/23 06:58:23.244
  STEP: Creating statefulset ss in namespace statefulset-6351 @ 12/31/23 06:58:23.246
  Dec 31 06:58:23.258: INFO: Found 0 stateful pods, waiting for 1
  Dec 31 06:58:33.252: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: getting scale subresource @ 12/31/23 06:58:33.255
  STEP: updating a scale subresource @ 12/31/23 06:58:33.256
  STEP: verifying the statefulset Spec.Replicas was modified @ 12/31/23 06:58:33.259
  STEP: Patch a scale subresource @ 12/31/23 06:58:33.26
  STEP: verifying the statefulset Spec.Replicas was modified @ 12/31/23 06:58:33.265
  Dec 31 06:58:33.267: INFO: Deleting all statefulset in ns statefulset-6351
  Dec 31 06:58:33.268: INFO: Scaling statefulset ss to 0
  Dec 31 06:58:43.276: INFO: Waiting for statefulset status.replicas updated to 0
  Dec 31 06:58:43.278: INFO: Deleting statefulset ss
  Dec 31 06:58:43.283: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-6351" for this suite. @ 12/31/23 06:58:43.284
• [20.056 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1764
  STEP: Creating a kubernetes client @ 12/31/23 06:58:43.289
  Dec 31 06:58:43.289: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 06:58:43.29
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:58:43.296
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:58:43.298
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 12/31/23 06:58:43.3
  Dec 31 06:58:43.300: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-8452 run e2e-test-httpd-pod --restart=Never --pod-running-timeout=2m0s --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4'
  Dec 31 06:58:43.348: INFO: stderr: ""
  Dec 31 06:58:43.348: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: verifying the pod e2e-test-httpd-pod was created @ 12/31/23 06:58:43.348
  Dec 31 06:58:43.350: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-8452 delete pods e2e-test-httpd-pod'
  Dec 31 06:58:44.693: INFO: stderr: ""
  Dec 31 06:58:44.693: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Dec 31 06:58:44.693: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-8452" for this suite. @ 12/31/23 06:58:44.694
• [1.408 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods Extended Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance] [sig-node, Conformance]
test/e2e/node/pods.go:163
  STEP: Creating a kubernetes client @ 12/31/23 06:58:44.697
  Dec 31 06:58:44.697: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pods @ 12/31/23 06:58:44.697
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:58:44.703
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:58:44.705
  STEP: creating the pod @ 12/31/23 06:58:44.706
  STEP: submitting the pod to kubernetes @ 12/31/23 06:58:44.706
  STEP: verifying QOS class is set on the pod @ 12/31/23 06:58:44.71
  Dec 31 06:58:44.711: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-4025" for this suite. @ 12/31/23 06:58:44.714
• [0.020 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance] [sig-apps, Conformance]
test/e2e/apps/disruption.go:108
  STEP: Creating a kubernetes client @ 12/31/23 06:58:44.717
  Dec 31 06:58:44.717: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename disruption @ 12/31/23 06:58:44.718
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:58:44.724
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:58:44.726
  STEP: creating the pdb @ 12/31/23 06:58:44.729
  STEP: Waiting for the pdb to be processed @ 12/31/23 06:58:44.732
  STEP: updating the pdb @ 12/31/23 06:58:46.734
  STEP: Waiting for the pdb to be processed @ 12/31/23 06:58:46.737
  STEP: patching the pdb @ 12/31/23 06:58:48.739
  STEP: Waiting for the pdb to be processed @ 12/31/23 06:58:48.743
  STEP: Waiting for the pdb to be deleted @ 12/31/23 06:58:50.746
  Dec 31 06:58:50.747: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-9990" for this suite. @ 12/31/23 06:58:50.748
• [6.033 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Lease lease API should be available [Conformance] [sig-node, Conformance]
test/e2e/common/node/lease.go:73
  STEP: Creating a kubernetes client @ 12/31/23 06:58:50.75
  Dec 31 06:58:50.750: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename lease-test @ 12/31/23 06:58:50.751
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:58:50.757
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:58:50.758
  Dec 31 06:58:50.778: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "lease-test-2656" for this suite. @ 12/31/23 06:58:50.779
• [0.031 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance] [sig-apps, Conformance]
test/e2e/apps/replica_set.go:132
  STEP: Creating a kubernetes client @ 12/31/23 06:58:50.782
  Dec 31 06:58:50.782: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename replicaset @ 12/31/23 06:58:50.782
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:58:50.788
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:58:50.789
  STEP: Given a Pod with a 'name' label pod-adoption-release is created @ 12/31/23 06:58:50.791
  STEP: When a replicaset with a matching selector is created @ 12/31/23 06:58:52.8
  STEP: Then the orphan pod is adopted @ 12/31/23 06:58:52.802
  STEP: When the matched label of one of its pods change @ 12/31/23 06:58:53.806
  Dec 31 06:58:53.807: INFO: Pod name pod-adoption-release: Found 1 pods out of 1
  STEP: Then the pod is released @ 12/31/23 06:58:53.812
  Dec 31 06:58:54.816: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-6742" for this suite. @ 12/31/23 06:58:54.818
• [4.038 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] StorageClasses CSI Conformance should run through the lifecycle of a StorageClass [Conformance] [sig-storage, Conformance]
test/e2e/storage/storageclass.go:53
  STEP: Creating a kubernetes client @ 12/31/23 06:58:54.821
  Dec 31 06:58:54.821: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename csi-storageclass @ 12/31/23 06:58:54.821
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:58:54.83
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:58:54.832
  STEP: Creating a StorageClass @ 12/31/23 06:58:54.834
  STEP: Get StorageClass "e2e-xqzmc" @ 12/31/23 06:58:54.836
  STEP: Patching the StorageClass "e2e-xqzmc" @ 12/31/23 06:58:54.838
  STEP: Delete StorageClass "e2e-xqzmc" @ 12/31/23 06:58:54.845
  STEP: Confirm deletion of StorageClass "e2e-xqzmc" @ 12/31/23 06:58:54.847
  STEP: Create a replacement StorageClass @ 12/31/23 06:58:54.849
  STEP: Updating StorageClass "e2e-v2-fl2gb" @ 12/31/23 06:58:54.851
  STEP: Listing all StorageClass with the labelSelector: "e2e-v2-fl2gb=updated" @ 12/31/23 06:58:54.856
  STEP: Deleting StorageClass "e2e-v2-fl2gb" via DeleteCollection @ 12/31/23 06:58:54.857
  STEP: Confirm deletion of StorageClass "e2e-v2-fl2gb" @ 12/31/23 06:58:54.861
  Dec 31 06:58:54.863: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csi-storageclass-5984" for this suite. @ 12/31/23 06:58:54.865
• [0.047 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] DNS should provide DNS for ExternalName services [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:329
  STEP: Creating a kubernetes client @ 12/31/23 06:58:54.868
  Dec 31 06:58:54.868: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename dns @ 12/31/23 06:58:54.869
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:58:54.877
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:58:54.879
  STEP: Creating a test externalName service @ 12/31/23 06:58:54.882
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-9956.svc.cluster.local CNAME > /results/wheezy_udp@dns-test-service-3.dns-9956.svc.cluster.local; sleep 1; done
   @ 12/31/23 06:58:54.885
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-9956.svc.cluster.local CNAME > /results/jessie_udp@dns-test-service-3.dns-9956.svc.cluster.local; sleep 1; done
   @ 12/31/23 06:58:54.885
  STEP: creating a pod to probe DNS @ 12/31/23 06:58:54.885
  STEP: submitting the pod to kubernetes @ 12/31/23 06:58:54.885
  STEP: retrieving the pod @ 12/31/23 06:59:08.91
  STEP: looking for the results for each expected name from probers @ 12/31/23 06:59:08.911
  Dec 31 06:59:08.929: INFO: DNS probes using dns-test-14d21691-c234-483f-a58a-88a6826b1d0a succeeded

  STEP: changing the externalName to bar.example.com @ 12/31/23 06:59:08.929
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-9956.svc.cluster.local CNAME > /results/wheezy_udp@dns-test-service-3.dns-9956.svc.cluster.local; sleep 1; done
   @ 12/31/23 06:59:08.932
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-9956.svc.cluster.local CNAME > /results/jessie_udp@dns-test-service-3.dns-9956.svc.cluster.local; sleep 1; done
   @ 12/31/23 06:59:08.932
  STEP: creating a second pod to probe DNS @ 12/31/23 06:59:08.932
  STEP: submitting the pod to kubernetes @ 12/31/23 06:59:08.932
  STEP: retrieving the pod @ 12/31/23 06:59:10.939
  STEP: looking for the results for each expected name from probers @ 12/31/23 06:59:10.94
  Dec 31 06:59:10.950: INFO: File wheezy_udp@dns-test-service-3.dns-9956.svc.cluster.local from pod  dns-9956/dns-test-619c65c0-fadc-463e-9878-1b891b397a15 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Dec 31 06:59:10.959: INFO: File jessie_udp@dns-test-service-3.dns-9956.svc.cluster.local from pod  dns-9956/dns-test-619c65c0-fadc-463e-9878-1b891b397a15 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Dec 31 06:59:10.959: INFO: Lookups using dns-9956/dns-test-619c65c0-fadc-463e-9878-1b891b397a15 failed for: [wheezy_udp@dns-test-service-3.dns-9956.svc.cluster.local jessie_udp@dns-test-service-3.dns-9956.svc.cluster.local]

  Dec 31 06:59:10.962: INFO: Pod client logs for webserver: 
  Dec 31 06:59:10.972: INFO: Pod client logs for querier: 
  Dec 31 06:59:10.982: INFO: Pod client logs for jessie-querier: 
  Dec 31 06:59:15.944: INFO: File wheezy_udp@dns-test-service-3.dns-9956.svc.cluster.local from pod  dns-9956/dns-test-619c65c0-fadc-463e-9878-1b891b397a15 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Dec 31 06:59:15.954: INFO: File jessie_udp@dns-test-service-3.dns-9956.svc.cluster.local from pod  dns-9956/dns-test-619c65c0-fadc-463e-9878-1b891b397a15 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Dec 31 06:59:15.954: INFO: Lookups using dns-9956/dns-test-619c65c0-fadc-463e-9878-1b891b397a15 failed for: [wheezy_udp@dns-test-service-3.dns-9956.svc.cluster.local jessie_udp@dns-test-service-3.dns-9956.svc.cluster.local]

  Dec 31 06:59:15.964: INFO: Pod client logs for webserver: 
  Dec 31 06:59:15.966: INFO: Pod client logs for querier: 
  Dec 31 06:59:15.976: INFO: Pod client logs for jessie-querier: 
  Dec 31 06:59:20.952: INFO: File wheezy_udp@dns-test-service-3.dns-9956.svc.cluster.local from pod  dns-9956/dns-test-619c65c0-fadc-463e-9878-1b891b397a15 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Dec 31 06:59:20.953: INFO: File jessie_udp@dns-test-service-3.dns-9956.svc.cluster.local from pod  dns-9956/dns-test-619c65c0-fadc-463e-9878-1b891b397a15 contains 'foo.example.com.
  ' instead of 'bar.example.com.'
  Dec 31 06:59:20.953: INFO: Lookups using dns-9956/dns-test-619c65c0-fadc-463e-9878-1b891b397a15 failed for: [wheezy_udp@dns-test-service-3.dns-9956.svc.cluster.local jessie_udp@dns-test-service-3.dns-9956.svc.cluster.local]

  Dec 31 06:59:20.962: INFO: Pod client logs for webserver: 
  Dec 31 06:59:20.965: INFO: Pod client logs for querier: 
  Dec 31 06:59:20.975: INFO: Pod client logs for jessie-querier: 
  Dec 31 06:59:25.952: INFO: DNS probes using dns-test-619c65c0-fadc-463e-9878-1b891b397a15 succeeded

  STEP: changing the service to type=ClusterIP @ 12/31/23 06:59:25.952
  W1231 06:59:25.959038      23 warnings.go:70] spec.externalName is ignored when spec.type is not "ExternalName"
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-9956.svc.cluster.local A > /results/wheezy_udp@dns-test-service-3.dns-9956.svc.cluster.local; sleep 1; done
   @ 12/31/23 06:59:25.959
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-9956.svc.cluster.local A > /results/jessie_udp@dns-test-service-3.dns-9956.svc.cluster.local; sleep 1; done
   @ 12/31/23 06:59:25.959
  STEP: creating a third pod to probe DNS @ 12/31/23 06:59:25.959
  STEP: submitting the pod to kubernetes @ 12/31/23 06:59:25.96
  STEP: retrieving the pod @ 12/31/23 06:59:27.968
  STEP: looking for the results for each expected name from probers @ 12/31/23 06:59:27.969
  Dec 31 06:59:27.990: INFO: DNS probes using dns-test-27931a29-6472-4354-b382-ca5c92cb3067 succeeded

  STEP: deleting the pod @ 12/31/23 06:59:27.99
  STEP: deleting the pod @ 12/31/23 06:59:27.996
  STEP: deleting the pod @ 12/31/23 06:59:28.002
  STEP: deleting the test externalName service @ 12/31/23 06:59:28.007
  Dec 31 06:59:28.014: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-9956" for this suite. @ 12/31/23 06:59:28.016
• [33.150 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtime.go:52
  STEP: Creating a kubernetes client @ 12/31/23 06:59:28.018
  Dec 31 06:59:28.018: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-runtime @ 12/31/23 06:59:28.019
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:59:28.027
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:59:28.03
  STEP: Container 'terminate-cmd-rpa': should get the expected 'RestartCount' @ 12/31/23 06:59:28.036
  STEP: Container 'terminate-cmd-rpa': should get the expected 'Phase' @ 12/31/23 06:59:46.075
  STEP: Container 'terminate-cmd-rpa': should get the expected 'Ready' condition @ 12/31/23 06:59:46.076
  STEP: Container 'terminate-cmd-rpa': should get the expected 'State' @ 12/31/23 06:59:46.078
  STEP: Container 'terminate-cmd-rpa': should be possible to delete @ 12/31/23 06:59:46.078
  STEP: Container 'terminate-cmd-rpof': should get the expected 'RestartCount' @ 12/31/23 06:59:46.085
  STEP: Container 'terminate-cmd-rpof': should get the expected 'Phase' @ 12/31/23 06:59:48.09
  STEP: Container 'terminate-cmd-rpof': should get the expected 'Ready' condition @ 12/31/23 06:59:49.093
  STEP: Container 'terminate-cmd-rpof': should get the expected 'State' @ 12/31/23 06:59:49.095
  STEP: Container 'terminate-cmd-rpof': should be possible to delete @ 12/31/23 06:59:49.095
  STEP: Container 'terminate-cmd-rpn': should get the expected 'RestartCount' @ 12/31/23 06:59:49.105
  STEP: Container 'terminate-cmd-rpn': should get the expected 'Phase' @ 12/31/23 06:59:50.107
  STEP: Container 'terminate-cmd-rpn': should get the expected 'Ready' condition @ 12/31/23 06:59:51.11
  STEP: Container 'terminate-cmd-rpn': should get the expected 'State' @ 12/31/23 06:59:51.112
  STEP: Container 'terminate-cmd-rpn': should be possible to delete @ 12/31/23 06:59:51.112
  Dec 31 06:59:51.121: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-5150" for this suite. @ 12/31/23 06:59:51.122
• [23.105 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:498
  STEP: Creating a kubernetes client @ 12/31/23 06:59:51.124
  Dec 31 06:59:51.124: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 06:59:51.124
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:59:51.13
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:59:51.131
  STEP: Setting up server cert @ 12/31/23 06:59:51.141
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 06:59:51.396
  STEP: Deploying the webhook pod @ 12/31/23 06:59:51.4
  STEP: Wait for the deployment to be ready @ 12/31/23 06:59:51.404
  Dec 31 06:59:51.406: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 12/31/23 06:59:53.411
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 06:59:53.416
  Dec 31 06:59:54.416: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Creating a mutating webhook configuration @ 12/31/23 06:59:54.419
  STEP: Updating a mutating webhook configuration's rules to not include the create operation @ 12/31/23 06:59:54.429
  STEP: Creating a configMap that should not be mutated @ 12/31/23 06:59:54.432
  STEP: Patching a mutating webhook configuration's rules to include the create operation @ 12/31/23 06:59:54.435
  STEP: Creating a configMap that should be mutated @ 12/31/23 06:59:54.438
  Dec 31 06:59:54.464: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-4335" for this suite. @ 12/31/23 06:59:54.466
  STEP: Destroying namespace "webhook-markers-6560" for this suite. @ 12/31/23 06:59:54.469
• [3.348 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:70
  STEP: Creating a kubernetes client @ 12/31/23 06:59:54.472
  Dec 31 06:59:54.472: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 06:59:54.473
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:59:54.483
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:59:54.485
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 06:59:54.486
  STEP: Saw pod success @ 12/31/23 06:59:58.496
  Dec 31 06:59:58.497: INFO: Trying to get logs from node worker3 pod downwardapi-volume-49f22c26-3f8f-4cec-b2f2-40399252ba30 container client-container: <nil>
  STEP: delete the pod @ 12/31/23 06:59:58.5
  Dec 31 06:59:58.506: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5488" for this suite. @ 12/31/23 06:59:58.507
• [4.036 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:195
  STEP: Creating a kubernetes client @ 12/31/23 06:59:58.509
  Dec 31 06:59:58.509: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 06:59:58.51
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 06:59:58.515
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 06:59:58.518
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 06:59:58.519
  STEP: Saw pod success @ 12/31/23 07:00:02.528
  Dec 31 07:00:02.530: INFO: Trying to get logs from node worker3 pod downwardapi-volume-1b84d610-d57c-42f0-9b0b-49c5ca5ebc0b container client-container: <nil>
  STEP: delete the pod @ 12/31/23 07:00:02.532
  Dec 31 07:00:02.538: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-2184" for this suite. @ 12/31/23 07:00:02.54
• [4.033 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl label should update the label on a resource [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1632
  STEP: Creating a kubernetes client @ 12/31/23 07:00:02.543
  Dec 31 07:00:02.543: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 07:00:02.543
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:00:02.548
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:00:02.55
  STEP: creating the pod @ 12/31/23 07:00:02.551
  Dec 31 07:00:02.551: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4942 create -f -'
  Dec 31 07:00:02.626: INFO: stderr: ""
  Dec 31 07:00:02.626: INFO: stdout: "pod/pause created\n"
  STEP: adding the label testing-label with value testing-label-value to a pod @ 12/31/23 07:00:04.63
  Dec 31 07:00:04.630: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4942 label pods pause testing-label=testing-label-value'
  Dec 31 07:00:04.673: INFO: stderr: ""
  Dec 31 07:00:04.673: INFO: stdout: "pod/pause labeled\n"
  STEP: verifying the pod has the label testing-label with the value testing-label-value @ 12/31/23 07:00:04.674
  Dec 31 07:00:04.674: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4942 get pod pause -L testing-label'
  Dec 31 07:00:04.712: INFO: stderr: ""
  Dec 31 07:00:04.712: INFO: stdout: "NAME    READY   STATUS    RESTARTS   AGE   TESTING-LABEL\npause   1/1     Running   0          2s    testing-label-value\n"
  STEP: removing the label testing-label of a pod @ 12/31/23 07:00:04.712
  Dec 31 07:00:04.712: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4942 label pods pause testing-label-'
  Dec 31 07:00:04.754: INFO: stderr: ""
  Dec 31 07:00:04.754: INFO: stdout: "pod/pause unlabeled\n"
  STEP: verifying the pod doesn't have the label testing-label @ 12/31/23 07:00:04.754
  Dec 31 07:00:04.754: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4942 get pod pause -L testing-label'
  Dec 31 07:00:04.793: INFO: stderr: ""
  Dec 31 07:00:04.793: INFO: stdout: "NAME    READY   STATUS    RESTARTS   AGE   TESTING-LABEL\npause   1/1     Running   0          2s    \n"
  STEP: using delete to clean up resources @ 12/31/23 07:00:04.793
  Dec 31 07:00:04.793: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4942 delete --grace-period=0 --force -f -'
  Dec 31 07:00:04.835: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Dec 31 07:00:04.835: INFO: stdout: "pod \"pause\" force deleted\n"
  Dec 31 07:00:04.835: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4942 get rc,svc -l name=pause --no-headers'
  Dec 31 07:00:04.875: INFO: stderr: "No resources found in kubectl-4942 namespace.\n"
  Dec 31 07:00:04.875: INFO: stdout: ""
  Dec 31 07:00:04.875: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4942 get pods -l name=pause -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Dec 31 07:00:04.913: INFO: stderr: ""
  Dec 31 07:00:04.913: INFO: stdout: ""
  Dec 31 07:00:04.913: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-4942" for this suite. @ 12/31/23 07:00:04.915
• [2.374 seconds]
------------------------------
SS
------------------------------
[sig-network] IngressClass API should support creating IngressClass API operations [Conformance] [sig-network, Conformance]
test/e2e/network/ingressclass.go:268
  STEP: Creating a kubernetes client @ 12/31/23 07:00:04.917
  Dec 31 07:00:04.917: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename ingressclass @ 12/31/23 07:00:04.917
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:00:04.923
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:00:04.925
  STEP: getting /apis @ 12/31/23 07:00:04.926
  STEP: getting /apis/networking.k8s.io @ 12/31/23 07:00:04.928
  STEP: getting /apis/networking.k8s.iov1 @ 12/31/23 07:00:04.929
  STEP: creating @ 12/31/23 07:00:04.929
  STEP: getting @ 12/31/23 07:00:04.935
  STEP: listing @ 12/31/23 07:00:04.936
  STEP: watching @ 12/31/23 07:00:04.936
  Dec 31 07:00:04.936: INFO: starting watch
  STEP: patching @ 12/31/23 07:00:04.937
  STEP: updating @ 12/31/23 07:00:04.939
  Dec 31 07:00:04.940: INFO: waiting for watch events with expected annotations
  Dec 31 07:00:04.940: INFO: saw patched and updated annotations
  STEP: deleting @ 12/31/23 07:00:04.94
  STEP: deleting a collection @ 12/31/23 07:00:04.945
  Dec 31 07:00:04.949: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ingressclass-2253" for this suite. @ 12/31/23 07:00:04.95
• [0.036 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/watch.go:334
  STEP: Creating a kubernetes client @ 12/31/23 07:00:04.952
  Dec 31 07:00:04.952: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename watch @ 12/31/23 07:00:04.953
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:00:04.959
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:00:04.96
  STEP: getting a starting resourceVersion @ 12/31/23 07:00:04.961
  STEP: starting a background goroutine to produce watch events @ 12/31/23 07:00:04.962
  STEP: creating watches starting from each resource version of the events produced and verifying they all receive resource versions in the same order @ 12/31/23 07:00:04.962
  Dec 31 07:00:07.756: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-2588" for this suite. @ 12/31/23 07:00:07.805
• [2.903 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance] [sig-node, Conformance]
test/e2e/common/node/configmap.go:170
  STEP: Creating a kubernetes client @ 12/31/23 07:00:07.855
  Dec 31 07:00:07.856: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename configmap @ 12/31/23 07:00:07.856
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:00:07.863
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:00:07.865
  STEP: creating a ConfigMap @ 12/31/23 07:00:07.866
  STEP: fetching the ConfigMap @ 12/31/23 07:00:07.868
  STEP: patching the ConfigMap @ 12/31/23 07:00:07.869
  STEP: listing all ConfigMaps in all namespaces with a label selector @ 12/31/23 07:00:07.871
  STEP: deleting the ConfigMap by collection with a label selector @ 12/31/23 07:00:07.872
  STEP: listing all ConfigMaps in test namespace @ 12/31/23 07:00:07.875
  Dec 31 07:00:07.876: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-3233" for this suite. @ 12/31/23 07:00:07.877
• [0.024 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance] [sig-api-machinery, Serial, Conformance]
test/e2e/apimachinery/namespace.go:245
  STEP: Creating a kubernetes client @ 12/31/23 07:00:07.879
  Dec 31 07:00:07.879: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename namespaces @ 12/31/23 07:00:07.88
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:00:07.885
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:00:07.886
  STEP: Creating a test namespace @ 12/31/23 07:00:07.887
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:00:07.942
  STEP: Creating a pod in the namespace @ 12/31/23 07:00:07.944
  STEP: Waiting for the pod to have running status @ 12/31/23 07:00:07.946
  STEP: Deleting the namespace @ 12/31/23 07:00:09.95
  STEP: Waiting for the namespace to be removed. @ 12/31/23 07:00:09.952
  STEP: Recreating the namespace @ 12/31/23 07:00:20.954
  STEP: Verifying there are no pods in the namespace @ 12/31/23 07:00:20.96
  Dec 31 07:00:20.961: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-5532" for this suite. @ 12/31/23 07:00:20.963
  STEP: Destroying namespace "nsdeletetest-5372" for this suite. @ 12/31/23 07:00:20.965
  Dec 31 07:00:20.966: INFO: Namespace nsdeletetest-5372 was already deleted
  STEP: Destroying namespace "nsdeletetest-8560" for this suite. @ 12/31/23 07:00:20.967
• [13.089 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_secret.go:56
  STEP: Creating a kubernetes client @ 12/31/23 07:00:20.969
  Dec 31 07:00:20.969: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 07:00:20.969
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:00:20.975
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:00:20.977
  STEP: Creating projection with secret that has name projected-secret-test-fe415583-0f98-42fd-a19b-d04c35ff10c8 @ 12/31/23 07:00:20.978
  STEP: Creating a pod to test consume secrets @ 12/31/23 07:00:20.98
  STEP: Saw pod success @ 12/31/23 07:00:24.988
  Dec 31 07:00:24.989: INFO: Trying to get logs from node worker3 pod pod-projected-secrets-3e5be7d6-05d6-4cef-bd50-839eaf11c990 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 07:00:24.992
  Dec 31 07:00:24.998: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8598" for this suite. @ 12/31/23 07:00:24.999
• [4.032 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Pods should get a host IP [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/pods.go:205
  STEP: Creating a kubernetes client @ 12/31/23 07:00:25.001
  Dec 31 07:00:25.001: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pods @ 12/31/23 07:00:25.001
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:00:25.007
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:00:25.008
  STEP: creating pod @ 12/31/23 07:00:25.011
  Dec 31 07:00:27.020: INFO: Pod pod-hostip-f4b9e322-b0c2-408a-ba1e-ce2a1cd5c705 has hostIP: 10.255.0.204
  Dec 31 07:00:27.020: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-8421" for this suite. @ 12/31/23 07:00:27.021
• [2.022 seconds]
------------------------------
SS
------------------------------
[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/security_context.go:611
  STEP: Creating a kubernetes client @ 12/31/23 07:00:27.023
  Dec 31 07:00:27.023: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename security-context-test @ 12/31/23 07:00:27.024
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:00:27.03
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:00:27.031
  Dec 31 07:00:31.044: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-1078" for this suite. @ 12/31/23 07:00:31.045
• [4.024 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should serve a basic endpoint from pods [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:785
  STEP: Creating a kubernetes client @ 12/31/23 07:00:31.048
  Dec 31 07:00:31.048: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 07:00:31.048
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:00:31.054
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:00:31.056
  STEP: creating service endpoint-test2 in namespace services-4812 @ 12/31/23 07:00:31.057
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-4812 to expose endpoints map[] @ 12/31/23 07:00:31.062
  Dec 31 07:00:31.068: INFO: successfully validated that service endpoint-test2 in namespace services-4812 exposes endpoints map[]
  STEP: Creating pod pod1 in namespace services-4812 @ 12/31/23 07:00:31.068
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-4812 to expose endpoints map[pod1:[80]] @ 12/31/23 07:00:33.076
  Dec 31 07:00:33.086: INFO: successfully validated that service endpoint-test2 in namespace services-4812 exposes endpoints map[pod1:[80]]
  STEP: Checking if the Service forwards traffic to pod1 @ 12/31/23 07:00:33.086
  Dec 31 07:00:33.086: INFO: Creating new exec pod
  Dec 31 07:00:36.092: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-4812 exec execpod9pjkv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Dec 31 07:00:36.191: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Dec 31 07:00:36.191: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:00:36.191: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-4812 exec execpod9pjkv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.134.126 80'
  Dec 31 07:00:36.277: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.134.126 80\nConnection to 10.68.134.126 80 port [tcp/http] succeeded!\n"
  Dec 31 07:00:36.277: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Creating pod pod2 in namespace services-4812 @ 12/31/23 07:00:36.278
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-4812 to expose endpoints map[pod1:[80] pod2:[80]] @ 12/31/23 07:00:38.286
  Dec 31 07:00:38.290: INFO: successfully validated that service endpoint-test2 in namespace services-4812 exposes endpoints map[pod1:[80] pod2:[80]]
  STEP: Checking if the Service forwards traffic to pod1 and pod2 @ 12/31/23 07:00:38.29
  Dec 31 07:00:39.290: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-4812 exec execpod9pjkv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Dec 31 07:00:39.371: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Dec 31 07:00:39.371: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:00:39.371: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-4812 exec execpod9pjkv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.134.126 80'
  Dec 31 07:00:39.465: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.134.126 80\nConnection to 10.68.134.126 80 port [tcp/http] succeeded!\n"
  Dec 31 07:00:39.465: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod1 in namespace services-4812 @ 12/31/23 07:00:39.465
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-4812 to expose endpoints map[pod2:[80]] @ 12/31/23 07:00:39.471
  Dec 31 07:00:39.475: INFO: successfully validated that service endpoint-test2 in namespace services-4812 exposes endpoints map[pod2:[80]]
  STEP: Checking if the Service forwards traffic to pod2 @ 12/31/23 07:00:39.475
  Dec 31 07:00:40.476: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-4812 exec execpod9pjkv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Dec 31 07:00:40.581: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Dec 31 07:00:40.581: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:00:40.581: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-4812 exec execpod9pjkv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.134.126 80'
  Dec 31 07:00:40.669: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.134.126 80\nConnection to 10.68.134.126 80 port [tcp/http] succeeded!\n"
  Dec 31 07:00:40.669: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod2 in namespace services-4812 @ 12/31/23 07:00:40.669
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-4812 to expose endpoints map[] @ 12/31/23 07:00:40.674
  Dec 31 07:00:40.680: INFO: successfully validated that service endpoint-test2 in namespace services-4812 exposes endpoints map[]
  Dec 31 07:00:40.688: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-4812" for this suite. @ 12/31/23 07:00:40.69
• [9.644 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance] [sig-apps, Conformance]
test/e2e/apps/statefulset.go:793
  STEP: Creating a kubernetes client @ 12/31/23 07:00:40.692
  Dec 31 07:00:40.692: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename statefulset @ 12/31/23 07:00:40.692
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:00:40.7
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:00:40.702
  STEP: Creating service test in namespace statefulset-5040 @ 12/31/23 07:00:40.704
  STEP: Looking for a node to schedule stateful set and pod @ 12/31/23 07:00:40.707
  STEP: Creating pod with conflicting port in namespace statefulset-5040 @ 12/31/23 07:00:40.709
  STEP: Waiting until pod test-pod will start running in namespace statefulset-5040 @ 12/31/23 07:00:40.712
  STEP: Creating statefulset with conflicting port in namespace statefulset-5040 @ 12/31/23 07:00:42.715
  STEP: Waiting until stateful pod ss-0 will be recreated and deleted at least once in namespace statefulset-5040 @ 12/31/23 07:00:42.717
  Dec 31 07:00:42.728: INFO: Observed stateful pod in namespace: statefulset-5040, name: ss-0, uid: e1958d9e-d8c2-4c8d-8273-4ac0176fe2f6, status phase: Pending. Waiting for statefulset controller to delete.
  Dec 31 07:00:42.731: INFO: Observed stateful pod in namespace: statefulset-5040, name: ss-0, uid: e1958d9e-d8c2-4c8d-8273-4ac0176fe2f6, status phase: Failed. Waiting for statefulset controller to delete.
  Dec 31 07:00:42.735: INFO: Observed stateful pod in namespace: statefulset-5040, name: ss-0, uid: e1958d9e-d8c2-4c8d-8273-4ac0176fe2f6, status phase: Failed. Waiting for statefulset controller to delete.
  Dec 31 07:00:42.737: INFO: Observed delete event for stateful pod ss-0 in namespace statefulset-5040
  STEP: Removing pod with conflicting port in namespace statefulset-5040 @ 12/31/23 07:00:42.737
  STEP: Waiting when stateful pod ss-0 will be recreated in namespace statefulset-5040 and will be in running state @ 12/31/23 07:00:42.745
  Dec 31 07:00:44.749: INFO: Deleting all statefulset in ns statefulset-5040
  Dec 31 07:00:44.750: INFO: Scaling statefulset ss to 0
  Dec 31 07:00:54.758: INFO: Waiting for statefulset status.replicas updated to 0
  Dec 31 07:00:54.759: INFO: Deleting statefulset ss
  Dec 31 07:00:54.763: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-5040" for this suite. @ 12/31/23 07:00:54.764
• [14.075 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/downwardapi.go:46
  STEP: Creating a kubernetes client @ 12/31/23 07:00:54.767
  Dec 31 07:00:54.767: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 07:00:54.767
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:00:54.773
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:00:54.775
  STEP: Creating a pod to test downward api env vars @ 12/31/23 07:00:54.776
  STEP: Saw pod success @ 12/31/23 07:00:58.786
  Dec 31 07:00:58.787: INFO: Trying to get logs from node worker3 pod downward-api-a5af3d43-4f52-4aa0-b3ed-f5ec602b350c container dapi-container: <nil>
  STEP: delete the pod @ 12/31/23 07:00:58.79
  Dec 31 07:00:58.797: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-8760" for this suite. @ 12/31/23 07:00:58.798
• [4.034 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Update Demo should scale a replication controller [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:357
  STEP: Creating a kubernetes client @ 12/31/23 07:00:58.801
  Dec 31 07:00:58.801: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 07:00:58.801
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:00:58.807
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:00:58.808
  STEP: creating a replication controller @ 12/31/23 07:00:58.809
  Dec 31 07:00:58.809: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 create -f -'
  Dec 31 07:00:58.884: INFO: stderr: ""
  Dec 31 07:00:58.884: INFO: stdout: "replicationcontroller/update-demo-nautilus created\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 12/31/23 07:00:58.884
  Dec 31 07:00:58.884: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Dec 31 07:00:58.927: INFO: stderr: ""
  Dec 31 07:00:58.927: INFO: stdout: "update-demo-nautilus-n7fcr update-demo-nautilus-x8r2d "
  Dec 31 07:00:58.927: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods update-demo-nautilus-n7fcr -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Dec 31 07:00:58.964: INFO: stderr: ""
  Dec 31 07:00:58.965: INFO: stdout: ""
  Dec 31 07:00:58.965: INFO: update-demo-nautilus-n7fcr is created but not running
  Dec 31 07:01:03.966: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Dec 31 07:01:04.007: INFO: stderr: ""
  Dec 31 07:01:04.007: INFO: stdout: "update-demo-nautilus-n7fcr update-demo-nautilus-x8r2d "
  Dec 31 07:01:04.008: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods update-demo-nautilus-n7fcr -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Dec 31 07:01:04.046: INFO: stderr: ""
  Dec 31 07:01:04.046: INFO: stdout: ""
  Dec 31 07:01:04.046: INFO: update-demo-nautilus-n7fcr is created but not running
  Dec 31 07:01:09.047: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Dec 31 07:01:09.087: INFO: stderr: ""
  Dec 31 07:01:09.087: INFO: stdout: "update-demo-nautilus-n7fcr update-demo-nautilus-x8r2d "
  Dec 31 07:01:09.087: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods update-demo-nautilus-n7fcr -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Dec 31 07:01:09.124: INFO: stderr: ""
  Dec 31 07:01:09.124: INFO: stdout: "true"
  Dec 31 07:01:09.124: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods update-demo-nautilus-n7fcr -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Dec 31 07:01:09.162: INFO: stderr: ""
  Dec 31 07:01:09.162: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Dec 31 07:01:09.162: INFO: validating pod update-demo-nautilus-n7fcr
  Dec 31 07:01:09.169: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Dec 31 07:01:09.169: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Dec 31 07:01:09.169: INFO: update-demo-nautilus-n7fcr is verified up and running
  Dec 31 07:01:09.169: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods update-demo-nautilus-x8r2d -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Dec 31 07:01:09.207: INFO: stderr: ""
  Dec 31 07:01:09.207: INFO: stdout: "true"
  Dec 31 07:01:09.207: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods update-demo-nautilus-x8r2d -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Dec 31 07:01:09.245: INFO: stderr: ""
  Dec 31 07:01:09.245: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Dec 31 07:01:09.245: INFO: validating pod update-demo-nautilus-x8r2d
  Dec 31 07:01:09.256: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Dec 31 07:01:09.256: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Dec 31 07:01:09.256: INFO: update-demo-nautilus-x8r2d is verified up and running
  STEP: scaling down the replication controller @ 12/31/23 07:01:09.256
  Dec 31 07:01:09.256: INFO: scanned /root for discovery docs: <nil>
  Dec 31 07:01:09.256: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 scale rc update-demo-nautilus --replicas=1 --timeout=5m'
  Dec 31 07:01:10.302: INFO: stderr: ""
  Dec 31 07:01:10.302: INFO: stdout: "replicationcontroller/update-demo-nautilus scaled\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 12/31/23 07:01:10.302
  Dec 31 07:01:10.302: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Dec 31 07:01:10.341: INFO: stderr: ""
  Dec 31 07:01:10.341: INFO: stdout: "update-demo-nautilus-n7fcr "
  Dec 31 07:01:10.341: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods update-demo-nautilus-n7fcr -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Dec 31 07:01:10.380: INFO: stderr: ""
  Dec 31 07:01:10.380: INFO: stdout: "true"
  Dec 31 07:01:10.380: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods update-demo-nautilus-n7fcr -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Dec 31 07:01:10.418: INFO: stderr: ""
  Dec 31 07:01:10.418: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Dec 31 07:01:10.418: INFO: validating pod update-demo-nautilus-n7fcr
  Dec 31 07:01:10.419: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Dec 31 07:01:10.419: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Dec 31 07:01:10.419: INFO: update-demo-nautilus-n7fcr is verified up and running
  STEP: scaling up the replication controller @ 12/31/23 07:01:10.419
  Dec 31 07:01:10.420: INFO: scanned /root for discovery docs: <nil>
  Dec 31 07:01:10.420: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 scale rc update-demo-nautilus --replicas=2 --timeout=5m'
  Dec 31 07:01:11.466: INFO: stderr: ""
  Dec 31 07:01:11.466: INFO: stdout: "replicationcontroller/update-demo-nautilus scaled\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 12/31/23 07:01:11.466
  Dec 31 07:01:11.466: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Dec 31 07:01:11.508: INFO: stderr: ""
  Dec 31 07:01:11.508: INFO: stdout: "update-demo-nautilus-bzt5b update-demo-nautilus-n7fcr "
  Dec 31 07:01:11.508: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods update-demo-nautilus-bzt5b -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Dec 31 07:01:11.546: INFO: stderr: ""
  Dec 31 07:01:11.546: INFO: stdout: ""
  Dec 31 07:01:11.546: INFO: update-demo-nautilus-bzt5b is created but not running
  Dec 31 07:01:16.547: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Dec 31 07:01:16.587: INFO: stderr: ""
  Dec 31 07:01:16.587: INFO: stdout: "update-demo-nautilus-bzt5b update-demo-nautilus-n7fcr "
  Dec 31 07:01:16.587: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods update-demo-nautilus-bzt5b -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Dec 31 07:01:16.625: INFO: stderr: ""
  Dec 31 07:01:16.625: INFO: stdout: "true"
  Dec 31 07:01:16.625: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods update-demo-nautilus-bzt5b -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Dec 31 07:01:16.662: INFO: stderr: ""
  Dec 31 07:01:16.662: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Dec 31 07:01:16.662: INFO: validating pod update-demo-nautilus-bzt5b
  Dec 31 07:01:16.673: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Dec 31 07:01:16.673: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Dec 31 07:01:16.673: INFO: update-demo-nautilus-bzt5b is verified up and running
  Dec 31 07:01:16.673: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods update-demo-nautilus-n7fcr -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Dec 31 07:01:16.711: INFO: stderr: ""
  Dec 31 07:01:16.711: INFO: stdout: "true"
  Dec 31 07:01:16.711: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods update-demo-nautilus-n7fcr -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Dec 31 07:01:16.747: INFO: stderr: ""
  Dec 31 07:01:16.747: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Dec 31 07:01:16.747: INFO: validating pod update-demo-nautilus-n7fcr
  Dec 31 07:01:16.754: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Dec 31 07:01:16.754: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Dec 31 07:01:16.754: INFO: update-demo-nautilus-n7fcr is verified up and running
  STEP: using delete to clean up resources @ 12/31/23 07:01:16.754
  Dec 31 07:01:16.754: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 delete --grace-period=0 --force -f -'
  Dec 31 07:01:16.792: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Dec 31 07:01:16.792: INFO: stdout: "replicationcontroller \"update-demo-nautilus\" force deleted\n"
  Dec 31 07:01:16.792: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get rc,svc -l name=update-demo --no-headers'
  Dec 31 07:01:16.843: INFO: stderr: "No resources found in kubectl-4021 namespace.\n"
  Dec 31 07:01:16.843: INFO: stdout: ""
  Dec 31 07:01:16.843: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4021 get pods -l name=update-demo -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Dec 31 07:01:16.893: INFO: stderr: ""
  Dec 31 07:01:16.893: INFO: stdout: ""
  Dec 31 07:01:16.893: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-4021" for this suite. @ 12/31/23 07:01:16.895
• [18.096 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance] [sig-apps, Conformance]
test/e2e/apps/cronjob.go:70
  STEP: Creating a kubernetes client @ 12/31/23 07:01:16.897
  Dec 31 07:01:16.897: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename cronjob @ 12/31/23 07:01:16.897
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:01:16.903
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:01:16.904
  STEP: Creating a cronjob @ 12/31/23 07:01:16.906
  STEP: Ensuring more than one job is running at a time @ 12/31/23 07:01:16.908
  STEP: Ensuring at least two running jobs exists by listing jobs explicitly @ 12/31/23 07:03:00.91
  STEP: Removing cronjob @ 12/31/23 07:03:00.911
  Dec 31 07:03:00.913: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-4378" for this suite. @ 12/31/23 07:03:00.915
• [104.022 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance] [sig-node, Serial, Disruptive, Conformance]
test/e2e/node/taints.go:290
  STEP: Creating a kubernetes client @ 12/31/23 07:03:00.919
  Dec 31 07:03:00.919: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename taint-single-pod @ 12/31/23 07:03:00.919
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:03:00.931
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:03:00.933
  Dec 31 07:03:00.935: INFO: Waiting up to 1m0s for all nodes to be ready
  Dec 31 07:04:00.935: INFO: Waiting for terminating namespaces to be deleted...
  Dec 31 07:04:00.937: INFO: Starting informer...
  STEP: Starting pod... @ 12/31/23 07:04:00.937
  Dec 31 07:04:01.143: INFO: Pod is running on worker3. Tainting Node
  STEP: Trying to apply a taint on the Node @ 12/31/23 07:04:01.143
  STEP: verifying the node has the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 12/31/23 07:04:01.149
  STEP: Waiting short time to make sure Pod is queued for deletion @ 12/31/23 07:04:01.15
  Dec 31 07:04:01.151: INFO: Pod wasn't evicted. Proceeding
  Dec 31 07:04:01.151: INFO: Removing taint from Node
  STEP: verifying the node doesn't have the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 12/31/23 07:04:01.156
  STEP: Waiting some time to make sure that toleration time passed. @ 12/31/23 07:04:01.157
  Dec 31 07:05:16.160: INFO: Pod wasn't evicted. Test successful
  Dec 31 07:05:16.160: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "taint-single-pod-3321" for this suite. @ 12/31/23 07:05:16.161
• [135.245 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:103
  STEP: Creating a kubernetes client @ 12/31/23 07:05:16.164
  Dec 31 07:05:16.164: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename resourcequota @ 12/31/23 07:05:16.164
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:05:16.172
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:05:16.173
  STEP: Counting existing ResourceQuota @ 12/31/23 07:05:16.174
  STEP: Creating a ResourceQuota @ 12/31/23 07:05:21.176
  STEP: Ensuring resource quota status is calculated @ 12/31/23 07:05:21.179
  STEP: Creating a Service @ 12/31/23 07:05:23.182
  STEP: Creating a NodePort Service @ 12/31/23 07:05:23.189
  STEP: Not allowing a LoadBalancer Service with NodePort to be created that exceeds remaining quota @ 12/31/23 07:05:23.199
  STEP: Ensuring resource quota status captures service creation @ 12/31/23 07:05:23.209
  STEP: Deleting Services @ 12/31/23 07:05:25.211
  STEP: Ensuring resource quota status released usage @ 12/31/23 07:05:25.226
  Dec 31 07:05:27.229: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-7734" for this suite. @ 12/31/23 07:05:27.23
• [11.069 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/custom_resource_definition.go:146
  STEP: Creating a kubernetes client @ 12/31/23 07:05:27.233
  Dec 31 07:05:27.233: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename custom-resource-definition @ 12/31/23 07:05:27.233
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:05:27.239
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:05:27.241
  Dec 31 07:05:27.242: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:05:27.778: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-7094" for this suite. @ 12/31/23 07:05:27.78
• [0.549 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-apps] ReplicationController should release no longer matching pods [Conformance] [sig-apps, Conformance]
test/e2e/apps/rc.go:104
  STEP: Creating a kubernetes client @ 12/31/23 07:05:27.782
  Dec 31 07:05:27.782: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename replication-controller @ 12/31/23 07:05:27.783
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:05:27.789
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:05:27.79
  STEP: Given a ReplicationController is created @ 12/31/23 07:05:27.792
  STEP: When the matched label of one of its pods change @ 12/31/23 07:05:27.794
  Dec 31 07:05:27.802: INFO: Pod name pod-release: Found 0 pods out of 1
  Dec 31 07:05:32.805: INFO: Pod name pod-release: Found 1 pods out of 1
  STEP: Then the pod is released @ 12/31/23 07:05:32.809
  Dec 31 07:05:33.815: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-7251" for this suite. @ 12/31/23 07:05:33.817
• [6.037 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown metadata fields of a typed object [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/field_validation.go:117
  STEP: Creating a kubernetes client @ 12/31/23 07:05:33.82
  Dec 31 07:05:33.820: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename field-validation @ 12/31/23 07:05:33.821
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:05:33.828
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:05:33.83
  STEP: apply creating a deployment @ 12/31/23 07:05:33.831
  Dec 31 07:05:33.835: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-815" for this suite. @ 12/31/23 07:05:33.836
• [0.018 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-instrumentation] Events should delete a collection of events [Conformance] [sig-instrumentation, Conformance]
test/e2e/instrumentation/core_events.go:176
  STEP: Creating a kubernetes client @ 12/31/23 07:05:33.839
  Dec 31 07:05:33.839: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename events @ 12/31/23 07:05:33.839
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:05:33.845
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:05:33.846
  STEP: Create set of events @ 12/31/23 07:05:33.847
  Dec 31 07:05:33.849: INFO: created test-event-1
  Dec 31 07:05:33.852: INFO: created test-event-2
  Dec 31 07:05:33.854: INFO: created test-event-3
  STEP: get a list of Events with a label in the current namespace @ 12/31/23 07:05:33.854
  STEP: delete collection of events @ 12/31/23 07:05:33.855
  Dec 31 07:05:33.855: INFO: requesting DeleteCollection of events
  STEP: check that the list of events matches the requested quantity @ 12/31/23 07:05:33.861
  Dec 31 07:05:33.861: INFO: requesting list of events to confirm quantity
  Dec 31 07:05:33.863: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-1581" for this suite. @ 12/31/23 07:05:33.864
• [0.029 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:442
  STEP: Creating a kubernetes client @ 12/31/23 07:05:33.867
  Dec 31 07:05:33.867: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename crd-publish-openapi @ 12/31/23 07:05:33.868
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:05:33.875
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:05:33.878
  STEP: set up a multi version CRD @ 12/31/23 07:05:33.879
  Dec 31 07:05:33.880: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: mark a version not serverd @ 12/31/23 07:05:36.861
  STEP: check the unserved version gets removed @ 12/31/23 07:05:36.87
  STEP: check the other version is not changed @ 12/31/23 07:05:37.512
  Dec 31 07:05:39.854: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-938" for this suite. @ 12/31/23 07:05:39.858
• [5.993 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should find a service from listing all namespaces [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:3129
  STEP: Creating a kubernetes client @ 12/31/23 07:05:39.861
  Dec 31 07:05:39.861: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 07:05:39.861
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:05:39.869
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:05:39.87
  STEP: fetching services @ 12/31/23 07:05:39.872
  Dec 31 07:05:39.873: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-2746" for this suite. @ 12/31/23 07:05:39.874
• [0.016 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance] [sig-auth, Conformance]
test/e2e/auth/service_accounts.go:531
  STEP: Creating a kubernetes client @ 12/31/23 07:05:39.886
  Dec 31 07:05:39.886: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename svcaccounts @ 12/31/23 07:05:39.886
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:05:39.892
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:05:39.894
  Dec 31 07:05:39.899: INFO: created pod
  STEP: Saw pod success @ 12/31/23 07:05:43.905
  Dec 31 07:06:13.907: INFO: polling logs
  Dec 31 07:06:13.916: INFO: Pod logs: 
  I1231 07:05:40.465224       1 log.go:194] OK: Got token
  I1231 07:05:40.465255       1 log.go:194] validating with in-cluster discovery
  I1231 07:05:40.465426       1 log.go:194] OK: got issuer https://kubernetes.default.svc
  I1231 07:05:40.465443       1 log.go:194] Full, not-validated claims: 
  openidmetadata.claims{Claims:jwt.Claims{Issuer:"https://kubernetes.default.svc", Subject:"system:serviceaccount:svcaccounts-8811:default", Audience:jwt.Audience{"oidc-discovery-test"}, Expiry:(*jwt.NumericDate)(0xc0002a32c0), NotBefore:(*jwt.NumericDate)(0xc0002a33a8), IssuedAt:(*jwt.NumericDate)(0xc0002a32d0), ID:""}, Kubernetes:openidmetadata.kubeClaims{Namespace:"svcaccounts-8811", ServiceAccount:openidmetadata.kubeName{Name:"default", UID:"d23e191d-9d7d-427a-b9df-5b50106ad28c"}}}
  I1231 07:05:40.471198       1 log.go:194] OK: Constructed OIDC provider for issuer https://kubernetes.default.svc
  I1231 07:05:40.474830       1 log.go:194] OK: Validated signature on JWT
  I1231 07:05:40.474888       1 log.go:194] OK: Got valid claims from token!
  I1231 07:05:40.474916       1 log.go:194] Full, validated claims: 
  &openidmetadata.claims{Claims:jwt.Claims{Issuer:"https://kubernetes.default.svc", Subject:"system:serviceaccount:svcaccounts-8811:default", Audience:jwt.Audience{"oidc-discovery-test"}, Expiry:(*jwt.NumericDate)(0xc000306038), NotBefore:(*jwt.NumericDate)(0xc000306080), IssuedAt:(*jwt.NumericDate)(0xc000306060), ID:""}, Kubernetes:openidmetadata.kubeClaims{Namespace:"svcaccounts-8811", ServiceAccount:openidmetadata.kubeName{Name:"default", UID:"d23e191d-9d7d-427a-b9df-5b50106ad28c"}}}

  Dec 31 07:06:13.916: INFO: completed pod
  Dec 31 07:06:13.918: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-8811" for this suite. @ 12/31/23 07:06:13.919
• [34.036 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should be restarted with a GRPC liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:550
  STEP: Creating a kubernetes client @ 12/31/23 07:06:13.922
  Dec 31 07:06:13.922: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-probe @ 12/31/23 07:06:13.922
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:06:13.928
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:06:13.929
  STEP: Creating pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093 @ 12/31/23 07:06:13.931
  STEP: checking the pod's current state and verifying that restartCount is present @ 12/31/23 07:06:15.938
  Dec 31 07:06:15.939: INFO: Initial restart count of pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 is 0
  Dec 31 07:06:15.940: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:17.942: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:19.944: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:21.947: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:23.950: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:25.952: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:27.955: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:29.957: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:31.959: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:33.962: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:35.964: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:37.966: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:39.967: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:41.969: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:43.972: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:45.974: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:47.976: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:49.978: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:51.979: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:53.982: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:55.985: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:57.987: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:06:59.989: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:07:01.991: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:07:03.993: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:07:05.996: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:07:07.998: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:07:10.000: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:07:12.003: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:07:14.005: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:07:16.008: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:07:18.010: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:07:20.012: INFO: Get pod test-grpc-76f40111-f816-423f-9310-b03d79c4a105 in namespace container-probe-7093
  Dec 31 07:07:20.012: INFO: Restart count of pod container-probe-7093/test-grpc-76f40111-f816-423f-9310-b03d79c4a105 is now 1 (1m4.073194281s elapsed)
  STEP: deleting the pod @ 12/31/23 07:07:20.012
  Dec 31 07:07:20.018: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-7093" for this suite. @ 12/31/23 07:07:20.019
• [66.099 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance] [sig-network, NodeConformance, Conformance]
test/e2e/common/network/networking.go:85
  STEP: Creating a kubernetes client @ 12/31/23 07:07:20.021
  Dec 31 07:07:20.021: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pod-network-test @ 12/31/23 07:07:20.022
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:07:20.028
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:07:20.031
  STEP: Performing setup for networking test in namespace pod-network-test-4561 @ 12/31/23 07:07:20.032
  STEP: creating a selector @ 12/31/23 07:07:20.032
  STEP: Creating the service pods in kubernetes @ 12/31/23 07:07:20.032
  Dec 31 07:07:20.032: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 12/31/23 07:07:32.067
  Dec 31 07:07:34.074: INFO: Setting MaxTries for pod polling to 39 for networking test based on endpoint count 3
  Dec 31 07:07:34.074: INFO: Breadth first check of 172.20.152.139 on host 10.255.0.202...
  Dec 31 07:07:34.075: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://172.20.169.167:9080/dial?request=hostname&protocol=http&host=172.20.152.139&port=8083&tries=1'] Namespace:pod-network-test-4561 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:07:34.075: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:07:34.075: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:07:34.075: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/pod-network-test-4561/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F172.20.169.167%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D172.20.152.139%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Dec 31 07:07:34.126: INFO: Waiting for responses: map[]
  Dec 31 07:07:34.126: INFO: reached 172.20.152.139 after 0/1 tries
  Dec 31 07:07:34.126: INFO: Breadth first check of 172.20.69.95 on host 10.255.0.203...
  Dec 31 07:07:34.128: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://172.20.169.167:9080/dial?request=hostname&protocol=http&host=172.20.69.95&port=8083&tries=1'] Namespace:pod-network-test-4561 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:07:34.128: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:07:34.128: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:07:34.128: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/pod-network-test-4561/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F172.20.169.167%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D172.20.69.95%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Dec 31 07:07:34.156: INFO: Waiting for responses: map[]
  Dec 31 07:07:34.156: INFO: reached 172.20.69.95 after 0/1 tries
  Dec 31 07:07:34.156: INFO: Breadth first check of 172.20.169.149 on host 10.255.0.204...
  Dec 31 07:07:34.157: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://172.20.169.167:9080/dial?request=hostname&protocol=http&host=172.20.169.149&port=8083&tries=1'] Namespace:pod-network-test-4561 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:07:34.157: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:07:34.158: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:07:34.158: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/pod-network-test-4561/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F172.20.169.167%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D172.20.169.149%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Dec 31 07:07:34.181: INFO: Waiting for responses: map[]
  Dec 31 07:07:34.181: INFO: reached 172.20.169.149 after 0/1 tries
  Dec 31 07:07:34.181: INFO: Going to retry 0 out of 3 pods....
  Dec 31 07:07:34.181: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-4561" for this suite. @ 12/31/23 07:07:34.183
• [14.164 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1798
  STEP: Creating a kubernetes client @ 12/31/23 07:07:34.185
  Dec 31 07:07:34.185: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 07:07:34.186
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:07:34.193
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:07:34.194
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 12/31/23 07:07:34.195
  Dec 31 07:07:34.195: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-6476 run e2e-test-httpd-pod --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4 --pod-running-timeout=2m0s --labels=run=e2e-test-httpd-pod'
  Dec 31 07:07:34.237: INFO: stderr: ""
  Dec 31 07:07:34.237: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: verifying the pod e2e-test-httpd-pod is running @ 12/31/23 07:07:34.237
  STEP: verifying the pod e2e-test-httpd-pod was created @ 12/31/23 07:07:39.291
  Dec 31 07:07:39.291: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-6476 get pod e2e-test-httpd-pod -o json'
  Dec 31 07:07:39.336: INFO: stderr: ""
  Dec 31 07:07:39.336: INFO: stdout: "{\n    \"apiVersion\": \"v1\",\n    \"kind\": \"Pod\",\n    \"metadata\": {\n        \"creationTimestamp\": \"2023-12-31T07:07:34Z\",\n        \"labels\": {\n            \"run\": \"e2e-test-httpd-pod\"\n        },\n        \"name\": \"e2e-test-httpd-pod\",\n        \"namespace\": \"kubectl-6476\",\n        \"resourceVersion\": \"23462\",\n        \"uid\": \"7339c284-87b8-49bc-8b81-6e1509749e32\"\n    },\n    \"spec\": {\n        \"containers\": [\n            {\n                \"image\": \"registry.k8s.io/e2e-test-images/httpd:2.4.38-4\",\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"e2e-test-httpd-pod\",\n                \"resources\": {},\n                \"terminationMessagePath\": \"/dev/termination-log\",\n                \"terminationMessagePolicy\": \"File\",\n                \"volumeMounts\": [\n                    {\n                        \"mountPath\": \"/var/run/secrets/kubernetes.io/serviceaccount\",\n                        \"name\": \"kube-api-access-9kgz8\",\n                        \"readOnly\": true\n                    }\n                ]\n            }\n        ],\n        \"dnsPolicy\": \"ClusterFirst\",\n        \"enableServiceLinks\": true,\n        \"nodeName\": \"worker3\",\n        \"preemptionPolicy\": \"PreemptLowerPriority\",\n        \"priority\": 0,\n        \"restartPolicy\": \"Always\",\n        \"schedulerName\": \"default-scheduler\",\n        \"securityContext\": {},\n        \"serviceAccount\": \"default\",\n        \"serviceAccountName\": \"default\",\n        \"terminationGracePeriodSeconds\": 30,\n        \"tolerations\": [\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/not-ready\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            },\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/unreachable\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            }\n        ],\n        \"volumes\": [\n            {\n                \"name\": \"kube-api-access-9kgz8\",\n                \"projected\": {\n                    \"defaultMode\": 420,\n                    \"sources\": [\n                        {\n                            \"serviceAccountToken\": {\n                                \"expirationSeconds\": 3607,\n                                \"path\": \"token\"\n                            }\n                        },\n                        {\n                            \"configMap\": {\n                                \"items\": [\n                                    {\n                                        \"key\": \"ca.crt\",\n                                        \"path\": \"ca.crt\"\n                                    }\n                                ],\n                                \"name\": \"kube-root-ca.crt\"\n                            }\n                        },\n                        {\n                            \"downwardAPI\": {\n                                \"items\": [\n                                    {\n                                        \"fieldRef\": {\n                                            \"apiVersion\": \"v1\",\n                                            \"fieldPath\": \"metadata.namespace\"\n                                        },\n                                        \"path\": \"namespace\"\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    \"status\": {\n        \"conditions\": [\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-12-31T07:07:35Z\",\n                \"status\": \"True\",\n                \"type\": \"PodReadyToStartContainers\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-12-31T07:07:34Z\",\n                \"status\": \"True\",\n                \"type\": \"Initialized\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-12-31T07:07:35Z\",\n                \"status\": \"True\",\n                \"type\": \"Ready\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-12-31T07:07:35Z\",\n                \"status\": \"True\",\n                \"type\": \"ContainersReady\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2023-12-31T07:07:34Z\",\n                \"status\": \"True\",\n                \"type\": \"PodScheduled\"\n            }\n        ],\n        \"containerStatuses\": [\n            {\n                \"containerID\": \"containerd://bf7f85baa4f0497b5719e8932710129eb8d71cb2238242f1987ceb6225c9418e\",\n                \"image\": \"registry.k8s.io/e2e-test-images/httpd:2.4.38-4\",\n                \"imageID\": \"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22\",\n                \"lastState\": {},\n                \"name\": \"e2e-test-httpd-pod\",\n                \"ready\": true,\n                \"restartCount\": 0,\n                \"started\": true,\n                \"state\": {\n                    \"running\": {\n                        \"startedAt\": \"2023-12-31T07:07:34Z\"\n                    }\n                }\n            }\n        ],\n        \"hostIP\": \"10.255.0.204\",\n        \"hostIPs\": [\n            {\n                \"ip\": \"10.255.0.204\"\n            }\n        ],\n        \"phase\": \"Running\",\n        \"podIP\": \"172.20.169.168\",\n        \"podIPs\": [\n            {\n                \"ip\": \"172.20.169.168\"\n            }\n        ],\n        \"qosClass\": \"BestEffort\",\n        \"startTime\": \"2023-12-31T07:07:34Z\"\n    }\n}\n"
  STEP: replace the image in the pod @ 12/31/23 07:07:39.337
  Dec 31 07:07:39.337: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-6476 replace -f -'
  Dec 31 07:07:39.418: INFO: stderr: ""
  Dec 31 07:07:39.418: INFO: stdout: "pod/e2e-test-httpd-pod replaced\n"
  STEP: verifying the pod e2e-test-httpd-pod has the right image registry.k8s.io/e2e-test-images/busybox:1.36.1-1 @ 12/31/23 07:07:39.418
  Dec 31 07:07:39.419: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-6476 delete pods e2e-test-httpd-pod'
  Dec 31 07:07:41.500: INFO: stderr: ""
  Dec 31 07:07:41.500: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Dec 31 07:07:41.501: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-6476" for this suite. @ 12/31/23 07:07:41.502
• [7.319 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/aggregator.go:98
  STEP: Creating a kubernetes client @ 12/31/23 07:07:41.504
  Dec 31 07:07:41.504: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename aggregator @ 12/31/23 07:07:41.505
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:07:41.511
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:07:41.513
  Dec 31 07:07:41.514: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Registering the sample API server. @ 12/31/23 07:07:41.514
  Dec 31 07:07:41.814: INFO: Found ClusterRoles; assuming RBAC is enabled.
  Dec 31 07:07:41.829: INFO: new replicaset for deployment "sample-apiserver-deployment" is yet to be created
  Dec 31 07:07:43.851: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Dec 31 07:07:45.854: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Dec 31 07:07:47.853: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Dec 31 07:07:49.853: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Dec 31 07:07:51.853: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Dec 31 07:07:53.855: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Dec 31 07:07:55.854: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Dec 31 07:07:57.854: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Dec 31 07:07:59.854: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Dec 31 07:08:01.853: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Dec 31 07:08:03.853: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 7, 41, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  Dec 31 07:08:05.963: INFO: Waited 106.126153ms for the sample-apiserver to be ready to handle requests.
  STEP: Read Status for v1alpha1.wardle.example.com @ 12/31/23 07:08:05.981
  STEP: kubectl patch apiservice v1alpha1.wardle.example.com -p '{"spec":{"versionPriority": 400}}' @ 12/31/23 07:08:05.982
  STEP: List APIServices @ 12/31/23 07:08:05.985
  Dec 31 07:08:05.988: INFO: Found v1alpha1.wardle.example.com in APIServiceList
  STEP: Adding a label to the APIService @ 12/31/23 07:08:05.988
  Dec 31 07:08:05.997: INFO: APIService labels: map[e2e-apiservice:patched]
  STEP: Updating APIService Status @ 12/31/23 07:08:05.997
  Dec 31 07:08:06.003: INFO: updatedStatus.Conditions: []v1.APIServiceCondition{v1.APIServiceCondition{Type:"Available", Status:"True", LastTransitionTime:time.Date(2023, time.December, 31, 7, 8, 5, 0, time.Local), Reason:"Passed", Message:"all checks passed"}, v1.APIServiceCondition{Type:"StatusUpdated", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: Confirm that v1alpha1.wardle.example.com /status was updated @ 12/31/23 07:08:06.003
  Dec 31 07:08:06.004: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[e2e-apiservice:patched] & Condition: {Available True 2023-12-31 07:08:05 +0000 UTC Passed all checks passed}
  Dec 31 07:08:06.004: INFO: Found APIService v1alpha1.wardle.example.com with Labels: map[e2e-apiservice:patched] & Condition: {StatusUpdated True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Dec 31 07:08:06.004: INFO: Found updated status condition for v1alpha1.wardle.example.com
  STEP: Replace APIService v1alpha1.wardle.example.com @ 12/31/23 07:08:06.004
  Dec 31 07:08:06.010: INFO: Found updated apiService label for "v1alpha1.wardle.example.com"
  STEP: Delete flunders resource "dynamic-flunder-97276595" @ 12/31/23 07:08:06.01
  STEP: Recreating test-flunder before removing endpoint via deleteCollection @ 12/31/23 07:08:06.014
  STEP: Read v1alpha1.wardle.example.com /status before patching it @ 12/31/23 07:08:06.017
  STEP: Patch APIService Status @ 12/31/23 07:08:06.018
  STEP: Confirm that v1alpha1.wardle.example.com /status was patched @ 12/31/23 07:08:06.021
  Dec 31 07:08:06.022: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {Available True 2023-12-31 07:08:05 +0000 UTC Passed all checks passed}
  Dec 31 07:08:06.022: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {StatusUpdated True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Dec 31 07:08:06.022: INFO: Found APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC E2E Set by e2e test}
  Dec 31 07:08:06.022: INFO: Found patched status condition for v1alpha1.wardle.example.com
  STEP: APIService deleteCollection with labelSelector: "v1alpha1.wardle.example.com=updated" @ 12/31/23 07:08:06.022
  STEP: Confirm that the generated APIService has been deleted @ 12/31/23 07:08:06.026
  Dec 31 07:08:06.026: INFO: Requesting list of APIServices to confirm quantity
  Dec 31 07:08:06.027: INFO: Found 0 APIService with label "v1alpha1.wardle.example.com=updated"
  Dec 31 07:08:06.027: INFO: APIService v1alpha1.wardle.example.com has been deleted.
  Dec 31 07:08:06.070: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "aggregator-4927" for this suite. @ 12/31/23 07:08:06.072
• [24.571 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/expansion.go:95
  STEP: Creating a kubernetes client @ 12/31/23 07:08:06.075
  Dec 31 07:08:06.075: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename var-expansion @ 12/31/23 07:08:06.076
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:08:06.082
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:08:06.085
  STEP: Creating a pod to test substitution in container's args @ 12/31/23 07:08:06.086
  STEP: Saw pod success @ 12/31/23 07:08:10.097
  Dec 31 07:08:10.098: INFO: Trying to get logs from node worker3 pod var-expansion-66b7e862-088f-47c6-9a19-651a534fb4e6 container dapi-container: <nil>
  STEP: delete the pod @ 12/31/23 07:08:10.107
  Dec 31 07:08:10.113: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-9589" for this suite. @ 12/31/23 07:08:10.115
• [4.042 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:209
  STEP: Creating a kubernetes client @ 12/31/23 07:08:10.117
  Dec 31 07:08:10.117: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 07:08:10.117
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:08:10.124
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:08:10.126
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 07:08:10.127
  STEP: Saw pod success @ 12/31/23 07:08:14.136
  Dec 31 07:08:14.137: INFO: Trying to get logs from node worker3 pod downwardapi-volume-747c49eb-4dc1-4aea-a868-0a0d2c59d2a9 container client-container: <nil>
  STEP: delete the pod @ 12/31/23 07:08:14.139
  Dec 31 07:08:14.145: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-551" for this suite. @ 12/31/23 07:08:14.146
• [4.031 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance] [sig-network, Conformance]
test/e2e/network/endpointslice.go:356
  STEP: Creating a kubernetes client @ 12/31/23 07:08:14.149
  Dec 31 07:08:14.149: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename endpointslice @ 12/31/23 07:08:14.149
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:08:14.156
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:08:14.158
  STEP: getting /apis @ 12/31/23 07:08:14.159
  STEP: getting /apis/discovery.k8s.io @ 12/31/23 07:08:14.16
  STEP: getting /apis/discovery.k8s.iov1 @ 12/31/23 07:08:14.17
  STEP: creating @ 12/31/23 07:08:14.171
  STEP: getting @ 12/31/23 07:08:14.176
  STEP: listing @ 12/31/23 07:08:14.177
  STEP: watching @ 12/31/23 07:08:14.178
  Dec 31 07:08:14.178: INFO: starting watch
  STEP: cluster-wide listing @ 12/31/23 07:08:14.179
  STEP: cluster-wide watching @ 12/31/23 07:08:14.18
  Dec 31 07:08:14.180: INFO: starting watch
  STEP: patching @ 12/31/23 07:08:14.18
  STEP: updating @ 12/31/23 07:08:14.182
  Dec 31 07:08:14.185: INFO: waiting for watch events with expected annotations
  Dec 31 07:08:14.185: INFO: saw patched and updated annotations
  STEP: deleting @ 12/31/23 07:08:14.185
  STEP: deleting a collection @ 12/31/23 07:08:14.189
  Dec 31 07:08:14.193: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-4529" for this suite. @ 12/31/23 07:08:14.195
• [0.048 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance] [sig-scheduling, Conformance]
test/e2e/scheduling/limit_range.go:253
  STEP: Creating a kubernetes client @ 12/31/23 07:08:14.197
  Dec 31 07:08:14.197: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename limitrange @ 12/31/23 07:08:14.197
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:08:14.203
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:08:14.205
  STEP: Creating LimitRange "e2e-limitrange-hht6m" in namespace "limitrange-9492" @ 12/31/23 07:08:14.206
  STEP: Creating another limitRange in another namespace @ 12/31/23 07:08:14.209
  Dec 31 07:08:14.214: INFO: Namespace "e2e-limitrange-hht6m-4705" created
  Dec 31 07:08:14.214: INFO: Creating LimitRange "e2e-limitrange-hht6m" in namespace "e2e-limitrange-hht6m-4705"
  STEP: Listing all LimitRanges with label "e2e-test=e2e-limitrange-hht6m" @ 12/31/23 07:08:14.217
  Dec 31 07:08:14.218: INFO: Found 2 limitRanges
  STEP: Patching LimitRange "e2e-limitrange-hht6m" in "limitrange-9492" namespace @ 12/31/23 07:08:14.218
  Dec 31 07:08:14.222: INFO: LimitRange "e2e-limitrange-hht6m" has been patched
  STEP: Delete LimitRange "e2e-limitrange-hht6m" by Collection with labelSelector: "e2e-limitrange-hht6m=patched" @ 12/31/23 07:08:14.222
  STEP: Confirm that the limitRange "e2e-limitrange-hht6m" has been deleted @ 12/31/23 07:08:14.224
  Dec 31 07:08:14.224: INFO: Requesting list of LimitRange to confirm quantity
  Dec 31 07:08:14.225: INFO: Found 0 LimitRange with label "e2e-limitrange-hht6m=patched"
  Dec 31 07:08:14.225: INFO: LimitRange "e2e-limitrange-hht6m" has been deleted.
  STEP: Confirm that a single LimitRange still exists with label "e2e-test=e2e-limitrange-hht6m" @ 12/31/23 07:08:14.225
  Dec 31 07:08:14.226: INFO: Found 1 limitRange
  Dec 31 07:08:14.226: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "limitrange-9492" for this suite. @ 12/31/23 07:08:14.227
  STEP: Destroying namespace "e2e-limitrange-hht6m-4705" for this suite. @ 12/31/23 07:08:14.229
• [0.035 seconds]
------------------------------
S
------------------------------
[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance] [sig-storage, Serial, Conformance]
test/e2e/storage/empty_dir_wrapper.go:188
  STEP: Creating a kubernetes client @ 12/31/23 07:08:14.232
  Dec 31 07:08:14.232: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir-wrapper @ 12/31/23 07:08:14.232
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:08:14.236
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:08:14.238
  STEP: Creating 50 configmaps @ 12/31/23 07:08:14.239
  STEP: Creating RC which spawns configmap-volume pods @ 12/31/23 07:08:14.484
  Dec 31 07:08:14.607: INFO: Pod name wrapped-volume-race-3d1821f9-914b-4735-a8b6-dbdb657c0954: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 12/31/23 07:08:14.607
  STEP: Creating RC which spawns configmap-volume pods @ 12/31/23 07:08:16.655
  Dec 31 07:08:16.665: INFO: Pod name wrapped-volume-race-cace1c20-c561-4179-bc74-c7a74084adde: Found 0 pods out of 5
  Dec 31 07:08:21.670: INFO: Pod name wrapped-volume-race-cace1c20-c561-4179-bc74-c7a74084adde: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 12/31/23 07:08:21.67
  STEP: Creating RC which spawns configmap-volume pods @ 12/31/23 07:08:21.678
  Dec 31 07:08:21.686: INFO: Pod name wrapped-volume-race-e6d314fe-c97c-4d72-9f50-57a772cc0ff7: Found 0 pods out of 5
  Dec 31 07:08:26.692: INFO: Pod name wrapped-volume-race-e6d314fe-c97c-4d72-9f50-57a772cc0ff7: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 12/31/23 07:08:26.692
  STEP: deleting ReplicationController wrapped-volume-race-e6d314fe-c97c-4d72-9f50-57a772cc0ff7 in namespace emptydir-wrapper-7403, will wait for the garbage collector to delete the pods @ 12/31/23 07:08:26.699
  Dec 31 07:08:26.752: INFO: Deleting ReplicationController wrapped-volume-race-e6d314fe-c97c-4d72-9f50-57a772cc0ff7 took: 2.235924ms
  Dec 31 07:08:26.853: INFO: Terminating ReplicationController wrapped-volume-race-e6d314fe-c97c-4d72-9f50-57a772cc0ff7 pods took: 100.647086ms
  STEP: deleting ReplicationController wrapped-volume-race-cace1c20-c561-4179-bc74-c7a74084adde in namespace emptydir-wrapper-7403, will wait for the garbage collector to delete the pods @ 12/31/23 07:08:28.053
  Dec 31 07:08:28.107: INFO: Deleting ReplicationController wrapped-volume-race-cace1c20-c561-4179-bc74-c7a74084adde took: 2.410395ms
  Dec 31 07:08:28.208: INFO: Terminating ReplicationController wrapped-volume-race-cace1c20-c561-4179-bc74-c7a74084adde pods took: 100.552623ms
  STEP: deleting ReplicationController wrapped-volume-race-3d1821f9-914b-4735-a8b6-dbdb657c0954 in namespace emptydir-wrapper-7403, will wait for the garbage collector to delete the pods @ 12/31/23 07:08:29.308
  Dec 31 07:08:29.363: INFO: Deleting ReplicationController wrapped-volume-race-3d1821f9-914b-4735-a8b6-dbdb657c0954 took: 3.114615ms
  Dec 31 07:08:29.464: INFO: Terminating ReplicationController wrapped-volume-race-3d1821f9-914b-4735-a8b6-dbdb657c0954 pods took: 100.238951ms
  STEP: Cleaning up the configMaps @ 12/31/23 07:08:30.964
  Dec 31 07:08:31.063: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-wrapper-7403" for this suite. @ 12/31/23 07:08:31.064
• [16.834 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for pods for Hostname [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:244
  STEP: Creating a kubernetes client @ 12/31/23 07:08:31.066
  Dec 31 07:08:31.066: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename dns @ 12/31/23 07:08:31.067
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:08:31.073
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:08:31.074
  STEP: Creating a test headless service @ 12/31/23 07:08:31.076
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-2.dns-test-service-2.dns-2402.svc.cluster.local)" && echo OK > /results/wheezy_hosts@dns-querier-2.dns-test-service-2.dns-2402.svc.cluster.local;test -n "$$(getent hosts dns-querier-2)" && echo OK > /results/wheezy_hosts@dns-querier-2;sleep 1; done
   @ 12/31/23 07:08:31.078
  STEP: Running these commands on jessie: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-2.dns-test-service-2.dns-2402.svc.cluster.local)" && echo OK > /results/jessie_hosts@dns-querier-2.dns-test-service-2.dns-2402.svc.cluster.local;test -n "$$(getent hosts dns-querier-2)" && echo OK > /results/jessie_hosts@dns-querier-2;sleep 1; done
   @ 12/31/23 07:08:31.078
  STEP: creating a pod to probe DNS @ 12/31/23 07:08:31.078
  STEP: submitting the pod to kubernetes @ 12/31/23 07:08:31.078
  STEP: retrieving the pod @ 12/31/23 07:08:33.088
  STEP: looking for the results for each expected name from probers @ 12/31/23 07:08:33.089
  Dec 31 07:08:33.116: INFO: DNS probes using dns-2402/dns-test-165b3cf8-6aa7-448e-81be-a77bb1950851 succeeded

  STEP: deleting the pod @ 12/31/23 07:08:33.117
  STEP: deleting the test headless service @ 12/31/23 07:08:33.127
  Dec 31 07:08:33.133: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-2402" for this suite. @ 12/31/23 07:08:33.135
• [2.071 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/predicates.go:334
  STEP: Creating a kubernetes client @ 12/31/23 07:08:33.141
  Dec 31 07:08:33.141: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename sched-pred @ 12/31/23 07:08:33.141
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:08:33.148
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:08:33.15
  Dec 31 07:08:33.151: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Dec 31 07:08:33.153: INFO: Waiting for terminating namespaces to be deleted...
  Dec 31 07:08:33.154: INFO: 
  Logging pods the apiserver thinks is on node 10.255.0.202 before test
  Dec 31 07:08:33.157: INFO: calico-kube-controllers-5994f46b69-lmc5f from kube-system started at 2023-12-31 06:01:56 +0000 UTC (1 container statuses recorded)
  Dec 31 07:08:33.157: INFO: 	Container calico-kube-controllers ready: true, restart count 1
  Dec 31 07:08:33.157: INFO: calico-node-f7srb from kube-system started at 2023-12-31 06:01:56 +0000 UTC (1 container statuses recorded)
  Dec 31 07:08:33.157: INFO: 	Container calico-node ready: true, restart count 0
  Dec 31 07:08:33.157: INFO: coredns-6db9bd4cd7-g6pt6 from kube-system started at 2023-12-31 06:02:18 +0000 UTC (1 container statuses recorded)
  Dec 31 07:08:33.157: INFO: 	Container coredns ready: true, restart count 0
  Dec 31 07:08:33.157: INFO: dashboard-metrics-scraper-77b667b99d-lc87h from kube-system started at 2023-12-31 06:02:22 +0000 UTC (1 container statuses recorded)
  Dec 31 07:08:33.157: INFO: 	Container dashboard-metrics-scraper ready: true, restart count 0
  Dec 31 07:08:33.157: INFO: kubernetes-dashboard-74fb9f77fb-4vtvg from kube-system started at 2023-12-31 06:02:22 +0000 UTC (1 container statuses recorded)
  Dec 31 07:08:33.157: INFO: 	Container kubernetes-dashboard ready: true, restart count 0
  Dec 31 07:08:33.157: INFO: metrics-server-dfb478476-wcgkq from kube-system started at 2023-12-31 06:02:20 +0000 UTC (1 container statuses recorded)
  Dec 31 07:08:33.157: INFO: 	Container metrics-server ready: true, restart count 0
  Dec 31 07:08:33.157: INFO: node-local-dns-v47ss from kube-system started at 2023-12-31 06:02:19 +0000 UTC (1 container statuses recorded)
  Dec 31 07:08:33.157: INFO: 	Container node-cache ready: true, restart count 0
  Dec 31 07:08:33.157: INFO: sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-wsh69 from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 07:08:33.157: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 07:08:33.157: INFO: 	Container systemd-logs ready: true, restart count 0
  Dec 31 07:08:33.157: INFO: 
  Logging pods the apiserver thinks is on node worker2 before test
  Dec 31 07:08:33.159: INFO: calico-node-2jwlz from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 07:08:33.159: INFO: 	Container calico-node ready: true, restart count 0
  Dec 31 07:08:33.159: INFO: node-local-dns-wkbph from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 07:08:33.159: INFO: 	Container node-cache ready: true, restart count 0
  Dec 31 07:08:33.159: INFO: sonobuoy-e2e-job-3c8f57630e284722 from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 07:08:33.159: INFO: 	Container e2e ready: true, restart count 0
  Dec 31 07:08:33.159: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 07:08:33.159: INFO: sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-jrh8m from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 07:08:33.159: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 07:08:33.159: INFO: 	Container systemd-logs ready: true, restart count 0
  Dec 31 07:08:33.159: INFO: 
  Logging pods the apiserver thinks is on node worker3 before test
  Dec 31 07:08:33.161: INFO: calico-node-z7ckp from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 07:08:33.161: INFO: 	Container calico-node ready: true, restart count 0
  Dec 31 07:08:33.161: INFO: node-local-dns-ctddb from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 07:08:33.161: INFO: 	Container node-cache ready: true, restart count 0
  Dec 31 07:08:33.161: INFO: sonobuoy from sonobuoy started at 2023-12-31 06:07:56 +0000 UTC (1 container statuses recorded)
  Dec 31 07:08:33.161: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Dec 31 07:08:33.161: INFO: sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-ln67l from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 07:08:33.161: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 07:08:33.161: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: verifying the node has the label node 10.255.0.202 @ 12/31/23 07:08:33.169
  STEP: verifying the node has the label node worker2 @ 12/31/23 07:08:33.179
  STEP: verifying the node has the label node worker3 @ 12/31/23 07:08:33.189
  Dec 31 07:08:33.196: INFO: Pod calico-kube-controllers-5994f46b69-lmc5f requesting resource cpu=0m on Node 10.255.0.202
  Dec 31 07:08:33.196: INFO: Pod calico-node-2jwlz requesting resource cpu=250m on Node worker2
  Dec 31 07:08:33.196: INFO: Pod calico-node-f7srb requesting resource cpu=250m on Node 10.255.0.202
  Dec 31 07:08:33.196: INFO: Pod calico-node-z7ckp requesting resource cpu=250m on Node worker3
  Dec 31 07:08:33.196: INFO: Pod coredns-6db9bd4cd7-g6pt6 requesting resource cpu=100m on Node 10.255.0.202
  Dec 31 07:08:33.196: INFO: Pod dashboard-metrics-scraper-77b667b99d-lc87h requesting resource cpu=0m on Node 10.255.0.202
  Dec 31 07:08:33.196: INFO: Pod kubernetes-dashboard-74fb9f77fb-4vtvg requesting resource cpu=0m on Node 10.255.0.202
  Dec 31 07:08:33.196: INFO: Pod metrics-server-dfb478476-wcgkq requesting resource cpu=100m on Node 10.255.0.202
  Dec 31 07:08:33.196: INFO: Pod node-local-dns-ctddb requesting resource cpu=25m on Node worker3
  Dec 31 07:08:33.196: INFO: Pod node-local-dns-v47ss requesting resource cpu=25m on Node 10.255.0.202
  Dec 31 07:08:33.196: INFO: Pod node-local-dns-wkbph requesting resource cpu=25m on Node worker2
  Dec 31 07:08:33.196: INFO: Pod sonobuoy requesting resource cpu=0m on Node worker3
  Dec 31 07:08:33.196: INFO: Pod sonobuoy-e2e-job-3c8f57630e284722 requesting resource cpu=0m on Node worker2
  Dec 31 07:08:33.196: INFO: Pod sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-jrh8m requesting resource cpu=0m on Node worker2
  Dec 31 07:08:33.196: INFO: Pod sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-ln67l requesting resource cpu=0m on Node worker3
  Dec 31 07:08:33.196: INFO: Pod sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-wsh69 requesting resource cpu=0m on Node 10.255.0.202
  STEP: Starting Pods to consume most of the cluster CPU. @ 12/31/23 07:08:33.196
  Dec 31 07:08:33.196: INFO: Creating a pod which consumes cpu=2607m on Node worker2
  Dec 31 07:08:33.199: INFO: Creating a pod which consumes cpu=2607m on Node worker3
  Dec 31 07:08:33.203: INFO: Creating a pod which consumes cpu=2467m on Node 10.255.0.202
  STEP: Creating another pod that requires unavailable amount of CPU. @ 12/31/23 07:08:35.214
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b48bf94f-6577-4dd6-9e05-0497b806b130.17a5d8e542ff8061], Reason = [Scheduled], Message = [Successfully assigned sched-pred-4754/filler-pod-b48bf94f-6577-4dd6-9e05-0497b806b130 to 10.255.0.202] @ 12/31/23 07:08:35.216
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b48bf94f-6577-4dd6-9e05-0497b806b130.17a5d8e56312977f], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 12/31/23 07:08:35.216
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b48bf94f-6577-4dd6-9e05-0497b806b130.17a5d8e563a2c484], Reason = [Created], Message = [Created container filler-pod-b48bf94f-6577-4dd6-9e05-0497b806b130] @ 12/31/23 07:08:35.216
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-b48bf94f-6577-4dd6-9e05-0497b806b130.17a5d8e5677732ee], Reason = [Started], Message = [Started container filler-pod-b48bf94f-6577-4dd6-9e05-0497b806b130] @ 12/31/23 07:08:35.216
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-d0bbcbc9-7ad1-4e34-9209-13e0809bec8b.17a5d8e5427b7a78], Reason = [Scheduled], Message = [Successfully assigned sched-pred-4754/filler-pod-d0bbcbc9-7ad1-4e34-9209-13e0809bec8b to worker2] @ 12/31/23 07:08:35.216
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-d0bbcbc9-7ad1-4e34-9209-13e0809bec8b.17a5d8e56122089f], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 12/31/23 07:08:35.216
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-d0bbcbc9-7ad1-4e34-9209-13e0809bec8b.17a5d8e561b6ca69], Reason = [Created], Message = [Created container filler-pod-d0bbcbc9-7ad1-4e34-9209-13e0809bec8b] @ 12/31/23 07:08:35.216
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-d0bbcbc9-7ad1-4e34-9209-13e0809bec8b.17a5d8e565127721], Reason = [Started], Message = [Started container filler-pod-d0bbcbc9-7ad1-4e34-9209-13e0809bec8b] @ 12/31/23 07:08:35.216
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-f8775d71-8898-4c98-83c5-786b42db6694.17a5d8e542e459d0], Reason = [Scheduled], Message = [Successfully assigned sched-pred-4754/filler-pod-f8775d71-8898-4c98-83c5-786b42db6694 to worker3] @ 12/31/23 07:08:35.216
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-f8775d71-8898-4c98-83c5-786b42db6694.17a5d8e56143f629], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 12/31/23 07:08:35.216
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-f8775d71-8898-4c98-83c5-786b42db6694.17a5d8e561d294c9], Reason = [Created], Message = [Created container filler-pod-f8775d71-8898-4c98-83c5-786b42db6694] @ 12/31/23 07:08:35.216
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-f8775d71-8898-4c98-83c5-786b42db6694.17a5d8e564235b79], Reason = [Started], Message = [Started container filler-pod-f8775d71-8898-4c98-83c5-786b42db6694] @ 12/31/23 07:08:35.216
  STEP: Considering event: 
  Type = [Warning], Name = [additional-pod.17a5d8e5baa8a32e], Reason = [FailedScheduling], Message = [0/3 nodes are available: 3 Insufficient cpu. preemption: 0/3 nodes are available: 3 No preemption victims found for incoming pod.] @ 12/31/23 07:08:35.222
  STEP: removing the label node off the node 10.255.0.202 @ 12/31/23 07:08:36.222
  STEP: verifying the node doesn't have the label node @ 12/31/23 07:08:36.232
  STEP: removing the label node off the node worker2 @ 12/31/23 07:08:36.233
  STEP: verifying the node doesn't have the label node @ 12/31/23 07:08:36.246
  STEP: removing the label node off the node worker3 @ 12/31/23 07:08:36.247
  STEP: verifying the node doesn't have the label node @ 12/31/23 07:08:36.268
  Dec 31 07:08:36.272: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-4754" for this suite. @ 12/31/23 07:08:36.274
• [3.138 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/init_container.go:256
  STEP: Creating a kubernetes client @ 12/31/23 07:08:36.279
  Dec 31 07:08:36.279: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename init-container @ 12/31/23 07:08:36.28
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:08:36.291
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:08:36.295
  STEP: creating the pod @ 12/31/23 07:08:36.298
  Dec 31 07:08:36.298: INFO: PodSpec: initContainers in spec.initContainers
  Dec 31 07:08:39.585: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-3111" for this suite. @ 12/31/23 07:08:39.588
• [3.311 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/field_validation.go:289
  STEP: Creating a kubernetes client @ 12/31/23 07:08:39.59
  Dec 31 07:08:39.590: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename field-validation @ 12/31/23 07:08:39.59
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:08:39.597
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:08:39.598
  Dec 31 07:08:39.599: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:08:42.645: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-3442" for this suite. @ 12/31/23 07:08:42.646
• [3.058 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance] [sig-node, Serial, Disruptive, Conformance]
test/e2e/node/taints.go:450
  STEP: Creating a kubernetes client @ 12/31/23 07:08:42.649
  Dec 31 07:08:42.649: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename taint-multiple-pods @ 12/31/23 07:08:42.649
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:08:42.657
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:08:42.658
  Dec 31 07:08:42.660: INFO: Waiting up to 1m0s for all nodes to be ready
  Dec 31 07:09:42.660: INFO: Waiting for terminating namespaces to be deleted...
  Dec 31 07:09:42.662: INFO: Starting informer...
  STEP: Starting pods... @ 12/31/23 07:09:42.662
  Dec 31 07:09:42.869: INFO: Pod1 is running on worker3. Tainting Node
  Dec 31 07:09:45.079: INFO: Pod2 is running on worker3. Tainting Node
  STEP: Trying to apply a taint on the Node @ 12/31/23 07:09:45.079
  STEP: verifying the node has the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 12/31/23 07:09:45.084
  STEP: Waiting for Pod1 and Pod2 to be deleted @ 12/31/23 07:09:45.085
  Dec 31 07:09:50.691: INFO: Noticed Pod "taint-eviction-b1" gets evicted.
  Dec 31 07:10:10.712: INFO: Noticed Pod "taint-eviction-b2" gets evicted.
  STEP: verifying the node doesn't have the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 12/31/23 07:10:10.718
  Dec 31 07:10:10.720: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "taint-multiple-pods-20" for this suite. @ 12/31/23 07:10:10.721
• [88.074 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-network] Services should be able to create a functioning NodePort service [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:1280
  STEP: Creating a kubernetes client @ 12/31/23 07:10:10.723
  Dec 31 07:10:10.723: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 07:10:10.724
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:10:10.729
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:10:10.73
  STEP: creating service nodeport-test with type=NodePort in namespace services-4866 @ 12/31/23 07:10:10.731
  STEP: creating replication controller nodeport-test in namespace services-4866 @ 12/31/23 07:10:10.738
  I1231 07:10:10.743488      23 runners.go:197] Created replication controller with name: nodeport-test, namespace: services-4866, replica count: 2
  I1231 07:10:13.794189      23 runners.go:197] nodeport-test Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Dec 31 07:10:13.794: INFO: Creating new exec pod
  Dec 31 07:10:16.802: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-4866 exec execpodbm5lf -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Dec 31 07:10:16.895: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Dec 31 07:10:16.895: INFO: stdout: "nodeport-test-bfnqj"
  Dec 31 07:10:16.895: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-4866 exec execpodbm5lf -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.67.229 80'
  Dec 31 07:10:16.982: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.67.229 80\nConnection to 10.68.67.229 80 port [tcp/http] succeeded!\n"
  Dec 31 07:10:16.982: INFO: stdout: ""
  Dec 31 07:10:17.895: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-4866 exec execpodbm5lf -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.67.229 80'
  Dec 31 07:10:17.973: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.67.229 80\nConnection to 10.68.67.229 80 port [tcp/http] succeeded!\n"
  Dec 31 07:10:17.973: INFO: stdout: ""
  Dec 31 07:10:18.895: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-4866 exec execpodbm5lf -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.67.229 80'
  Dec 31 07:10:18.988: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.67.229 80\nConnection to 10.68.67.229 80 port [tcp/http] succeeded!\n"
  Dec 31 07:10:18.988: INFO: stdout: "nodeport-test-nwvd9"
  Dec 31 07:10:18.988: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-4866 exec execpodbm5lf -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.255.0.204 31092'
  Dec 31 07:10:19.081: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.255.0.204 31092\nConnection to 10.255.0.204 31092 port [tcp/*] succeeded!\n"
  Dec 31 07:10:19.081: INFO: stdout: "nodeport-test-bfnqj"
  Dec 31 07:10:19.081: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-4866 exec execpodbm5lf -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.255.0.202 31092'
  Dec 31 07:10:19.158: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.255.0.202 31092\nConnection to 10.255.0.202 31092 port [tcp/*] succeeded!\n"
  Dec 31 07:10:19.158: INFO: stdout: "nodeport-test-bfnqj"
  Dec 31 07:10:19.158: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-4866" for this suite. @ 12/31/23 07:10:19.159
• [8.439 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance] [sig-storage, Conformance]
test/e2e/common/storage/empty_dir.go:230
  STEP: Creating a kubernetes client @ 12/31/23 07:10:19.163
  Dec 31 07:10:19.163: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir @ 12/31/23 07:10:19.163
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:10:19.168
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:10:19.169
  STEP: Creating Pod @ 12/31/23 07:10:19.171
  STEP: Reading file content from the nginx-container @ 12/31/23 07:10:21.178
  Dec 31 07:10:21.178: INFO: ExecWithOptions {Command:[/bin/sh -c cat /usr/share/volumeshare/shareddata.txt] Namespace:emptydir-281 PodName:pod-sharedvolume-95bafce2-2691-4632-ac6a-1ca044310019 ContainerName:busybox-main-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:10:21.178: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:10:21.178: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:10:21.178: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/emptydir-281/pods/pod-sharedvolume-95bafce2-2691-4632-ac6a-1ca044310019/exec?command=%2Fbin%2Fsh&command=-c&command=cat+%2Fusr%2Fshare%2Fvolumeshare%2Fshareddata.txt&container=busybox-main-container&container=busybox-main-container&stderr=true&stdout=true)
  Dec 31 07:10:21.220: INFO: Exec stderr: ""
  Dec 31 07:10:21.220: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-281" for this suite. @ 12/31/23 07:10:21.222
• [2.061 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/predicates.go:707
  STEP: Creating a kubernetes client @ 12/31/23 07:10:21.224
  Dec 31 07:10:21.224: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename sched-pred @ 12/31/23 07:10:21.225
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:10:21.234
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:10:21.247
  Dec 31 07:10:21.249: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Dec 31 07:10:21.252: INFO: Waiting for terminating namespaces to be deleted...
  Dec 31 07:10:21.254: INFO: 
  Logging pods the apiserver thinks is on node 10.255.0.202 before test
  Dec 31 07:10:21.257: INFO: calico-kube-controllers-5994f46b69-lmc5f from kube-system started at 2023-12-31 06:01:56 +0000 UTC (1 container statuses recorded)
  Dec 31 07:10:21.257: INFO: 	Container calico-kube-controllers ready: true, restart count 1
  Dec 31 07:10:21.257: INFO: calico-node-f7srb from kube-system started at 2023-12-31 06:01:56 +0000 UTC (1 container statuses recorded)
  Dec 31 07:10:21.257: INFO: 	Container calico-node ready: true, restart count 0
  Dec 31 07:10:21.257: INFO: coredns-6db9bd4cd7-g6pt6 from kube-system started at 2023-12-31 06:02:18 +0000 UTC (1 container statuses recorded)
  Dec 31 07:10:21.257: INFO: 	Container coredns ready: true, restart count 0
  Dec 31 07:10:21.257: INFO: dashboard-metrics-scraper-77b667b99d-lc87h from kube-system started at 2023-12-31 06:02:22 +0000 UTC (1 container statuses recorded)
  Dec 31 07:10:21.257: INFO: 	Container dashboard-metrics-scraper ready: true, restart count 0
  Dec 31 07:10:21.257: INFO: kubernetes-dashboard-74fb9f77fb-4vtvg from kube-system started at 2023-12-31 06:02:22 +0000 UTC (1 container statuses recorded)
  Dec 31 07:10:21.257: INFO: 	Container kubernetes-dashboard ready: true, restart count 0
  Dec 31 07:10:21.257: INFO: metrics-server-dfb478476-wcgkq from kube-system started at 2023-12-31 06:02:20 +0000 UTC (1 container statuses recorded)
  Dec 31 07:10:21.257: INFO: 	Container metrics-server ready: true, restart count 0
  Dec 31 07:10:21.257: INFO: node-local-dns-v47ss from kube-system started at 2023-12-31 06:02:19 +0000 UTC (1 container statuses recorded)
  Dec 31 07:10:21.257: INFO: 	Container node-cache ready: true, restart count 0
  Dec 31 07:10:21.257: INFO: sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-wsh69 from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 07:10:21.257: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 07:10:21.257: INFO: 	Container systemd-logs ready: true, restart count 0
  Dec 31 07:10:21.257: INFO: 
  Logging pods the apiserver thinks is on node worker2 before test
  Dec 31 07:10:21.261: INFO: pod-sharedvolume-95bafce2-2691-4632-ac6a-1ca044310019 from emptydir-281 started at 2023-12-31 07:10:19 +0000 UTC (2 container statuses recorded)
  Dec 31 07:10:21.261: INFO: 	Container busybox-main-container ready: true, restart count 0
  Dec 31 07:10:21.261: INFO: 	Container busybox-sub-container ready: false, restart count 0
  Dec 31 07:10:21.261: INFO: calico-node-2jwlz from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 07:10:21.261: INFO: 	Container calico-node ready: true, restart count 0
  Dec 31 07:10:21.261: INFO: node-local-dns-wkbph from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 07:10:21.261: INFO: 	Container node-cache ready: true, restart count 0
  Dec 31 07:10:21.261: INFO: nodeport-test-nwvd9 from services-4866 started at 2023-12-31 07:10:10 +0000 UTC (1 container statuses recorded)
  Dec 31 07:10:21.261: INFO: 	Container nodeport-test ready: true, restart count 0
  Dec 31 07:10:21.261: INFO: sonobuoy-e2e-job-3c8f57630e284722 from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 07:10:21.261: INFO: 	Container e2e ready: true, restart count 0
  Dec 31 07:10:21.261: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 07:10:21.261: INFO: sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-jrh8m from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 07:10:21.261: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 07:10:21.261: INFO: 	Container systemd-logs ready: true, restart count 0
  Dec 31 07:10:21.261: INFO: 
  Logging pods the apiserver thinks is on node worker3 before test
  Dec 31 07:10:21.265: INFO: calico-node-z7ckp from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 07:10:21.265: INFO: 	Container calico-node ready: true, restart count 0
  Dec 31 07:10:21.265: INFO: node-local-dns-ctddb from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 07:10:21.265: INFO: 	Container node-cache ready: true, restart count 0
  Dec 31 07:10:21.265: INFO: execpodbm5lf from services-4866 started at 2023-12-31 07:10:13 +0000 UTC (1 container statuses recorded)
  Dec 31 07:10:21.265: INFO: 	Container agnhost-container ready: true, restart count 0
  Dec 31 07:10:21.265: INFO: nodeport-test-bfnqj from services-4866 started at 2023-12-31 07:10:10 +0000 UTC (1 container statuses recorded)
  Dec 31 07:10:21.265: INFO: 	Container nodeport-test ready: true, restart count 0
  Dec 31 07:10:21.265: INFO: sonobuoy from sonobuoy started at 2023-12-31 06:07:56 +0000 UTC (1 container statuses recorded)
  Dec 31 07:10:21.265: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Dec 31 07:10:21.265: INFO: sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-ln67l from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 07:10:21.265: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 07:10:21.265: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 12/31/23 07:10:21.265
  STEP: Explicitly delete pod here to free the resource it takes. @ 12/31/23 07:10:23.275
  STEP: Trying to apply a random label on the found node. @ 12/31/23 07:10:23.281
  STEP: verifying the node has the label kubernetes.io/e2e-ffdafb90-3d7b-46c2-bf24-e423e11a8a0d 95 @ 12/31/23 07:10:23.285
  STEP: Trying to create a pod(pod4) with hostport 54322 and hostIP 0.0.0.0(empty string here) and expect scheduled @ 12/31/23 07:10:23.287
  STEP: Trying to create another pod(pod5) with hostport 54322 but hostIP 10.255.0.204 on the node which pod4 resides and expect not scheduled @ 12/31/23 07:10:25.293
  STEP: removing the label kubernetes.io/e2e-ffdafb90-3d7b-46c2-bf24-e423e11a8a0d off the node worker3 @ 12/31/23 07:15:25.298
  STEP: verifying the node doesn't have the label kubernetes.io/e2e-ffdafb90-3d7b-46c2-bf24-e423e11a8a0d @ 12/31/23 07:15:25.304
  Dec 31 07:15:25.305: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-9350" for this suite. @ 12/31/23 07:15:25.309
• [304.087 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/garbage_collector.go:818
  STEP: Creating a kubernetes client @ 12/31/23 07:15:25.311
  Dec 31 07:15:25.311: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename gc @ 12/31/23 07:15:25.311
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:15:25.318
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:15:25.319
  Dec 31 07:15:25.336: INFO: pod1.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod3", UID:"bc055b2a-8345-49fd-9ccf-ba0da06ef41e", Controller:(*bool)(0xc005259aae), BlockOwnerDeletion:(*bool)(0xc005259aaf)}}
  Dec 31 07:15:25.340: INFO: pod2.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod1", UID:"3843217a-f186-4bc2-add2-e4dcface8a65", Controller:(*bool)(0xc0043c3e3a), BlockOwnerDeletion:(*bool)(0xc0043c3e3b)}}
  Dec 31 07:15:25.344: INFO: pod3.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod2", UID:"1489c227-5101-4cd4-a268-2c7adec0433e", Controller:(*bool)(0xc0029be046), BlockOwnerDeletion:(*bool)(0xc0029be047)}}
  Dec 31 07:15:30.352: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-1153" for this suite. @ 12/31/23 07:15:30.354
• [5.045 seconds]
------------------------------
SS
------------------------------
[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:185
  STEP: Creating a kubernetes client @ 12/31/23 07:15:30.356
  Dec 31 07:15:30.356: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename deployment @ 12/31/23 07:15:30.356
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:15:30.363
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:15:30.365
  STEP: creating a Deployment @ 12/31/23 07:15:30.368
  STEP: waiting for Deployment to be created @ 12/31/23 07:15:30.371
  STEP: waiting for all Replicas to be Ready @ 12/31/23 07:15:30.371
  Dec 31 07:15:30.372: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Dec 31 07:15:30.372: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Dec 31 07:15:30.377: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Dec 31 07:15:30.377: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Dec 31 07:15:30.389: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Dec 31 07:15:30.389: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Dec 31 07:15:30.401: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Dec 31 07:15:30.401: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Dec 31 07:15:31.149: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1 and labels map[test-deployment-static:true]
  Dec 31 07:15:31.149: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1 and labels map[test-deployment-static:true]
  Dec 31 07:15:31.781: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2 and labels map[test-deployment-static:true]
  STEP: patching the Deployment @ 12/31/23 07:15:31.781
  Dec 31 07:15:31.786: INFO: observed event type ADDED
  STEP: waiting for Replicas to scale @ 12/31/23 07:15:31.786
  Dec 31 07:15:31.787: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0
  Dec 31 07:15:31.787: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0
  Dec 31 07:15:31.787: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0
  Dec 31 07:15:31.787: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0
  Dec 31 07:15:31.787: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0
  Dec 31 07:15:31.787: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0
  Dec 31 07:15:31.787: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0
  Dec 31 07:15:31.787: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 0
  Dec 31 07:15:31.787: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1
  Dec 31 07:15:31.787: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1
  Dec 31 07:15:31.787: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2
  Dec 31 07:15:31.787: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2
  Dec 31 07:15:31.787: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2
  Dec 31 07:15:31.787: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2
  Dec 31 07:15:31.793: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2
  Dec 31 07:15:31.793: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2
  Dec 31 07:15:31.800: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2
  Dec 31 07:15:31.800: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2
  Dec 31 07:15:31.816: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2
  Dec 31 07:15:31.816: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2
  Dec 31 07:15:31.827: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1
  Dec 31 07:15:31.827: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1
  Dec 31 07:15:33.158: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2
  Dec 31 07:15:33.158: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2
  Dec 31 07:15:33.167: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1
  STEP: listing Deployments @ 12/31/23 07:15:33.167
  Dec 31 07:15:33.168: INFO: Found test-deployment with labels: map[test-deployment:patched test-deployment-static:true]
  STEP: updating the Deployment @ 12/31/23 07:15:33.168
  Dec 31 07:15:33.177: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1
  STEP: fetching the DeploymentStatus @ 12/31/23 07:15:33.177
  Dec 31 07:15:33.182: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Dec 31 07:15:33.183: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Dec 31 07:15:33.193: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Dec 31 07:15:33.203: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Dec 31 07:15:33.205: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Dec 31 07:15:33.787: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Dec 31 07:15:34.150: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 3 and labels map[test-deployment:updated test-deployment-static:true]
  Dec 31 07:15:34.160: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Dec 31 07:15:34.170: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Dec 31 07:15:34.793: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 3 and labels map[test-deployment:updated test-deployment-static:true]
  STEP: patching the DeploymentStatus @ 12/31/23 07:15:34.803
  STEP: fetching the DeploymentStatus @ 12/31/23 07:15:34.808
  Dec 31 07:15:34.810: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1
  Dec 31 07:15:34.810: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1
  Dec 31 07:15:34.810: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1
  Dec 31 07:15:34.810: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1
  Dec 31 07:15:34.810: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 1
  Dec 31 07:15:34.810: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2
  Dec 31 07:15:34.810: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 3
  Dec 31 07:15:34.810: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2
  Dec 31 07:15:34.810: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 2
  Dec 31 07:15:34.810: INFO: observed Deployment test-deployment in namespace deployment-3931 with ReadyReplicas 3
  STEP: deleting the Deployment @ 12/31/23 07:15:34.81
  Dec 31 07:15:34.814: INFO: observed event type MODIFIED
  Dec 31 07:15:34.814: INFO: observed event type MODIFIED
  Dec 31 07:15:34.814: INFO: observed event type MODIFIED
  Dec 31 07:15:34.814: INFO: observed event type MODIFIED
  Dec 31 07:15:34.814: INFO: observed event type MODIFIED
  Dec 31 07:15:34.814: INFO: observed event type MODIFIED
  Dec 31 07:15:34.814: INFO: observed event type MODIFIED
  Dec 31 07:15:34.814: INFO: observed event type MODIFIED
  Dec 31 07:15:34.814: INFO: observed event type MODIFIED
  Dec 31 07:15:34.814: INFO: observed event type MODIFIED
  Dec 31 07:15:34.814: INFO: observed event type MODIFIED
  Dec 31 07:15:34.814: INFO: observed event type MODIFIED
  Dec 31 07:15:34.814: INFO: observed event type MODIFIED
  Dec 31 07:15:34.817: INFO: Log out all the ReplicaSets if there is no deployment created
  Dec 31 07:15:34.819: INFO: ReplicaSet "test-deployment-64fd565c98":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=26) "test-deployment-64fd565c98",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3931",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "058689f1-9dd3-436c-805d-fa92ebc81c97",
      ResourceVersion: (string) (len=5) "25762",
      Generation: (int64) 4,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839603731,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "7ca651a9-b520-4680-910f-745811bfd8d1",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 37 63 61 36  35 31 61 39 2d 62 35 32  |":\"7ca651a9-b52|
              00000130  30 2d 34 36 38 30 2d 39  31 30 66 2d 37 34 35 38  |0-4680-910f-7458|
              00000140  31 31 62 66 64 38 64 31  5c 22 7d 22 3a 7b 7d 7d  |11bfd8d1\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=25) "registry.k8s.io/pause:3.9",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(2),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 4,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Dec 31 07:15:34.822: INFO: pod: "test-deployment-64fd565c98-4f6mz":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-64fd565c98-4f6mz",
      GenerateName: (string) (len=27) "test-deployment-64fd565c98-",
      Namespace: (string) (len=15) "deployment-3931",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "91b4b3bd-5b6b-4547-a93f-56635dd29724",
      ResourceVersion: (string) (len=5) "25757",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839603733,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839603736,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      DeletionGracePeriodSeconds: (*int64)(2),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=26) "test-deployment-64fd565c98",
          UID: (types.UID) (len=36) "058689f1-9dd3-436c-805d-fa92ebc81c97",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603733,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  30 35 38 36 38 39 66 31  |uid\":\"058689f1|
              000000a0  2d 39 64 64 33 2d 34 33  36 63 2d 38 30 35 64 2d  |-9dd3-436c-805d-|
              000000b0  66 61 39 32 65 62 63 38  31 63 39 37 5c 22 7d 22  |fa92ebc81c97\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603733,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=662) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 36 39 2e  31 32 35 5c 22 7d 22 3a  |2.20.69.125\"}":|
              00000270  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              00000280  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000290  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-txl7l",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-txl7l",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(2),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603733,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603733,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603733,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603733,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603733,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.203",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.203"
        }
      },
      PodIP: (string) (len=13) "172.20.69.125",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=13) "172.20.69.125"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839603733,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839603733,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          ImageID: (string) (len=93) "registry.k8s.io/pause@sha256:7031c1b283388d2c2e09b57badb803c05ebed362dc88d84b480cc47f72a21097",
          ContainerID: (string) (len=77) "containerd://6c9c5e4dcd3adb778f2f329fc7b35c97ec636e4bd1988999b97c0a8581261856",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Dec 31 07:15:34.824: INFO: pod: "test-deployment-64fd565c98-hxxbx":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-64fd565c98-hxxbx",
      GenerateName: (string) (len=27) "test-deployment-64fd565c98-",
      Namespace: (string) (len=15) "deployment-3931",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d9f53ce1-732d-4427-a589-f3316f37c92b",
      ResourceVersion: (string) (len=5) "25746",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839603731,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839603736,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      DeletionGracePeriodSeconds: (*int64)(2),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=26) "test-deployment-64fd565c98",
          UID: (types.UID) (len=36) "058689f1-9dd3-436c-805d-fa92ebc81c97",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603731,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  30 35 38 36 38 39 66 31  |uid\":\"058689f1|
              000000a0  2d 39 64 64 33 2d 34 33  36 63 2d 38 30 35 64 2d  |-9dd3-436c-805d-|
              000000b0  66 61 39 32 65 62 63 38  31 63 39 37 5c 22 7d 22  |fa92ebc81c97\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=621) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 72 65 61 73 6f 6e  |me":{},"f:reason|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000090  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              000000a0  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 49  |"k:{\"type\":\"I|
              000000b0  6e 69 74 69 61 6c 69 7a  65 64 5c 22 7d 22 3a 7b  |nitialized\"}":{|
              000000c0  22 2e 22 3a 7b 7d 2c 22  66 3a 6c 61 73 74 50 72  |".":{},"f:lastPr|
              000000d0  6f 62 65 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |obeTime":{},"f:l|
              000000e0  61 73 74 54 72 61 6e 73  69 74 69 6f 6e 54 69 6d  |astTransitionTim|
              000000f0  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000100  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              00000110  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              00000120  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 50 6f  |k:{\"type\":\"Po|
              00000130  64 52 65 61 64 79 54 6f  53 74 61 72 74 43 6f 6e  |dReadyToStartCon|
              00000140  74 61 69 6e 65 72 73 5c  22 7d 22 3a 7b 22 2e 22  |tainers\"}":{"."|
              00000150  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000160  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000170  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000180  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000190  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 2c 22 6b  |,"f:type":{}},"k|
              000001a0  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 52 65 61  |:{\"type\":\"Rea|
              000001b0  64 79 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |dy\"}":{".":{},"|
              000001c0  66 3a 6c 61 73 74 50 72  6f 62 65 54 69 6d 65 22  |f:lastProbeTime"|
              000001d0  3a 7b 7d 2c 22 66 3a 6c  61 73 74 54 72 61 6e 73  |:{},"f:lastTrans|
              000001e0  69 74 69 6f 6e 54 69 6d  65 22 3a 7b 7d 2c 22 66  |itionTime":{},"f|
              000001f0  3a 72 65 61 73 6f 6e 22  3a 7b 7d 2c 22 66 3a 73  |:reason":{},"f:s|
              00000200  74 61 74 75 73 22 3a 7b  7d 2c 22 66 3a 74 79 70  |tatus":{},"f:typ|
              00000210  65 22 3a 7b 7d 7d 7d 2c  22 66 3a 63 6f 6e 74 61  |e":{}}},"f:conta|
              00000220  69 6e 65 72 53 74 61 74  75 73 65 73 22 3a 7b 7d  |inerStatuses":{}|
              00000230  2c 22 66 3a 68 6f 73 74  49 50 22 3a 7b 7d 2c 22  |,"f:hostIP":{},"|
              00000240  66 3a 68 6f 73 74 49 50  73 22 3a 7b 7d 2c 22 66  |f:hostIPs":{},"f|
              00000250  3a 70 68 61 73 65 22 3a  7b 7d 2c 22 66 3a 73 74  |:phase":{},"f:st|
              00000260  61 72 74 54 69 6d 65 22  3a 7b 7d 7d 7d           |artTime":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-brmlc",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-brmlc",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(2),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=9) "Succeeded",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603731,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=12) "PodCompleted",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=12) "PodCompleted",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=12) "PodCompleted",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603731,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839603731,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)({
              ExitCode: (int32) 0,
              Signal: (int32) 0,
              Reason: (string) (len=9) "Completed",
              Message: (string) "",
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839603732,
                  loc: (*time.Location)(<already shown>)
                }
              },
              FinishedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839603734,
                  loc: (*time.Location)(<already shown>)
                }
              },
              ContainerID: (string) (len=77) "containerd://affdc0ab3aa33f68833eafef023d5f86d4ecd49f9db28949bc53adee09fb5770"
            })
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          ImageID: (string) (len=93) "registry.k8s.io/pause@sha256:7031c1b283388d2c2e09b57badb803c05ebed362dc88d84b480cc47f72a21097",
          ContainerID: (string) (len=77) "containerd://affdc0ab3aa33f68833eafef023d5f86d4ecd49f9db28949bc53adee09fb5770",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Dec 31 07:15:34.825: INFO: ReplicaSet "test-deployment-69d58987ff":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=26) "test-deployment-69d58987ff",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3931",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "48c510a7-2141-4dff-bc63-23be3d6d9190",
      ResourceVersion: (string) (len=5) "25673",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839603730,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "69d58987ff",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "7ca651a9-b520-4680-910f-745811bfd8d1",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603733,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 37 63 61 36  35 31 61 39 2d 62 35 32  |":\"7ca651a9-b52|
              00000130  30 2d 34 36 38 30 2d 39  31 30 66 2d 37 34 35 38  |0-4680-910f-7458|
              00000140  31 31 62 66 64 38 64 31  5c 22 7d 22 3a 7b 7d 7d  |11bfd8d1\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603733,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=10) "69d58987ff",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "69d58987ff",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(1),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Dec 31 07:15:34.827: INFO: ReplicaSet "test-deployment-79ff746c4":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=25) "test-deployment-79ff746c4",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-3931",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "de887b6c-dd71-496d-a888-2cb0121de7aa",
      ResourceVersion: (string) (len=5) "25754",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839603733,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "3"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "7ca651a9-b520-4680-910f-745811bfd8d1",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 37 63 61 36  35 31 61 39 2d 62 35 32  |":\"7ca651a9-b52|
              00000130  30 2d 34 36 38 30 2d 39  31 30 66 2d 37 34 35 38  |0-4680-910f-7458|
              00000140  31 31 62 66 64 38 64 31  5c 22 7d 22 3a 7b 7d 7d  |11bfd8d1\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(2),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(1),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 2,
      FullyLabeledReplicas: (int32) 2,
      ReadyReplicas: (int32) 2,
      AvailableReplicas: (int32) 2,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Dec 31 07:15:34.829: INFO: pod: "test-deployment-79ff746c4-jdm4n":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "test-deployment-79ff746c4-jdm4n",
      GenerateName: (string) (len=26) "test-deployment-79ff746c4-",
      Namespace: (string) (len=15) "deployment-3931",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3e3ba062-ab9f-4654-8b90-de3d795416c9",
      ResourceVersion: (string) (len=5) "25770",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839603734,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839603735,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      DeletionGracePeriodSeconds: (*int64)(1),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=25) "test-deployment-79ff746c4",
          UID: (types.UID) (len=36) "de887b6c-dd71-496d-a888-2cb0121de7aa",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  64 65 38 38 37 62 36 63  |uid\":\"de887b6c|
              000000a0  2d 64 64 37 31 2d 34 39  36 64 2d 61 38 38 38 2d  |-dd71-496d-a888-|
              000000b0  32 63 62 30 31 32 31 64  65 37 61 61 5c 22 7d 22  |2cb0121de7aa\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=662) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 36 39 2e  31 30 36 5c 22 7d 22 3a  |2.20.69.106\"}":|
              00000270  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              00000280  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000290  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-zkv4c",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-zkv4c",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(1),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker2",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.203",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.203"
        }
      },
      PodIP: (string) (len=13) "172.20.69.106",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=13) "172.20.69.106"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839603734,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839603734,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://0b986881ab6c3351c401fa868f03d629d4cb425a4ea50705cc02300f1ba85b1d",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Dec 31 07:15:34.830: INFO: pod: "test-deployment-79ff746c4-r76q7":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "test-deployment-79ff746c4-r76q7",
      GenerateName: (string) (len=26) "test-deployment-79ff746c4-",
      Namespace: (string) (len=15) "deployment-3931",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "4fcd4138-c58f-4aff-abde-714b06127f7d",
      ResourceVersion: (string) (len=5) "25771",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839603733,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839603735,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      DeletionGracePeriodSeconds: (*int64)(1),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=25) "test-deployment-79ff746c4",
          UID: (types.UID) (len=36) "de887b6c-dd71-496d-a888-2cb0121de7aa",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603733,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  64 65 38 38 37 62 36 63  |uid\":\"de887b6c|
              000000a0  2d 64 64 37 31 2d 34 39  36 64 2d 61 38 38 38 2d  |-dd71-496d-a888-|
              000000b0  32 63 62 30 31 32 31 64  65 37 61 61 5c 22 7d 22  |2cb0121de7aa\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 36 39  2e 31 34 35 5c 22 7d 22  |2.20.169.145\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-rhspt",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-rhspt",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(1),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603733,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603734,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839603733,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) (len=14) "172.20.169.145",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.169.145"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839603733,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839603733,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://77f0360a6ebf006b5f44c69c52b419a770d09ed288b107f8866546a90f8a4729",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Dec 31 07:15:34.831: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-3931" for this suite. @ 12/31/23 07:15:34.833
• [4.479 seconds]
------------------------------
SSSSSS
------------------------------
[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:2214
  STEP: Creating a kubernetes client @ 12/31/23 07:15:34.835
  Dec 31 07:15:34.835: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 07:15:34.835
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:15:34.842
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:15:34.843
  STEP: creating service in namespace services-7861 @ 12/31/23 07:15:34.845
  STEP: creating service affinity-nodeport in namespace services-7861 @ 12/31/23 07:15:34.845
  STEP: creating replication controller affinity-nodeport in namespace services-7861 @ 12/31/23 07:15:34.85
  I1231 07:15:34.853760      23 runners.go:197] Created replication controller with name: affinity-nodeport, namespace: services-7861, replica count: 3
  I1231 07:15:37.904950      23 runners.go:197] affinity-nodeport Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Dec 31 07:15:37.908: INFO: Creating new exec pod
  Dec 31 07:15:40.915: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-7861 exec execpod-affinityvnsvv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-nodeport 80'
  Dec 31 07:15:40.999: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-nodeport 80\nConnection to affinity-nodeport 80 port [tcp/http] succeeded!\n"
  Dec 31 07:15:40.999: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:15:40.999: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-7861 exec execpod-affinityvnsvv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.123.235 80'
  Dec 31 07:15:41.089: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.123.235 80\nConnection to 10.68.123.235 80 port [tcp/http] succeeded!\n"
  Dec 31 07:15:41.089: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:15:41.089: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-7861 exec execpod-affinityvnsvv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.255.0.202 32629'
  Dec 31 07:15:41.169: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.255.0.202 32629\nConnection to 10.255.0.202 32629 port [tcp/*] succeeded!\n"
  Dec 31 07:15:41.169: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:15:41.170: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-7861 exec execpod-affinityvnsvv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.255.0.204 32629'
  Dec 31 07:15:41.249: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.255.0.204 32629\nConnection to 10.255.0.204 32629 port [tcp/*] succeeded!\n"
  Dec 31 07:15:41.249: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:15:41.249: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-7861 exec execpod-affinityvnsvv -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.255.0.202:32629/ ; done'
  Dec 31 07:15:41.371: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.255.0.202:32629/\n"
  Dec 31 07:15:41.371: INFO: stdout: "\naffinity-nodeport-m7l6l\naffinity-nodeport-m7l6l\naffinity-nodeport-m7l6l\naffinity-nodeport-m7l6l\naffinity-nodeport-m7l6l\naffinity-nodeport-m7l6l\naffinity-nodeport-m7l6l\naffinity-nodeport-m7l6l\naffinity-nodeport-m7l6l\naffinity-nodeport-m7l6l\naffinity-nodeport-m7l6l\naffinity-nodeport-m7l6l\naffinity-nodeport-m7l6l\naffinity-nodeport-m7l6l\naffinity-nodeport-m7l6l\naffinity-nodeport-m7l6l"
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Received response from host: affinity-nodeport-m7l6l
  Dec 31 07:15:41.371: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-nodeport in namespace services-7861, will wait for the garbage collector to delete the pods @ 12/31/23 07:15:41.377
  Dec 31 07:15:41.431: INFO: Deleting ReplicationController affinity-nodeport took: 1.941621ms
  Dec 31 07:15:41.531: INFO: Terminating ReplicationController affinity-nodeport pods took: 100.338245ms
  Dec 31 07:15:44.542: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-7861" for this suite. @ 12/31/23 07:15:44.544
• [9.712 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtime.go:248
  STEP: Creating a kubernetes client @ 12/31/23 07:15:44.547
  Dec 31 07:15:44.547: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-runtime @ 12/31/23 07:15:44.547
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:15:44.555
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:15:44.557
  STEP: create the container @ 12/31/23 07:15:44.558
  W1231 07:15:44.561898      23 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 12/31/23 07:15:44.562
  STEP: get the container status @ 12/31/23 07:15:46.567
  STEP: the container should be terminated @ 12/31/23 07:15:46.568
  STEP: the termination message should be set @ 12/31/23 07:15:46.568
  Dec 31 07:15:46.568: INFO: Expected: &{OK} to match Container's Termination Message: OK --
  STEP: delete the container @ 12/31/23 07:15:46.568
  Dec 31 07:15:46.574: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-9953" for this suite. @ 12/31/23 07:15:46.576
• [2.031 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:170
  STEP: Creating a kubernetes client @ 12/31/23 07:15:46.578
  Dec 31 07:15:46.578: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir @ 12/31/23 07:15:46.578
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:15:46.588
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:15:46.589
  STEP: Creating a pod to test emptydir 0644 on node default medium @ 12/31/23 07:15:46.59
  STEP: Saw pod success @ 12/31/23 07:15:50.599
  Dec 31 07:15:50.601: INFO: Trying to get logs from node worker3 pod pod-bda1760b-6737-4474-a25e-8ad87eb87947 container test-container: <nil>
  STEP: delete the pod @ 12/31/23 07:15:50.609
  Dec 31 07:15:50.614: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-2406" for this suite. @ 12/31/23 07:15:50.616
• [4.040 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance] [sig-network, NodeConformance, Conformance]
test/e2e/common/network/networking.go:108
  STEP: Creating a kubernetes client @ 12/31/23 07:15:50.618
  Dec 31 07:15:50.618: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pod-network-test @ 12/31/23 07:15:50.618
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:15:50.624
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:15:50.626
  STEP: Performing setup for networking test in namespace pod-network-test-4243 @ 12/31/23 07:15:50.627
  STEP: creating a selector @ 12/31/23 07:15:50.627
  STEP: Creating the service pods in kubernetes @ 12/31/23 07:15:50.627
  Dec 31 07:15:50.627: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  STEP: Creating test pods @ 12/31/23 07:16:12.672
  Dec 31 07:16:14.684: INFO: Setting MaxTries for pod polling to 39 for networking test based on endpoint count 3
  Dec 31 07:16:14.684: INFO: Going to poll 172.20.152.154 on port 8083 at least 0 times, with a maximum of 39 tries before failing
  Dec 31 07:16:14.686: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://172.20.152.154:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-4243 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:16:14.686: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:16:14.686: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:16:14.686: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/pod-network-test-4243/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F172.20.152.154%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Dec 31 07:16:14.754: INFO: Found all 1 expected endpoints: [netserver-0]
  Dec 31 07:16:14.754: INFO: Going to poll 172.20.69.112 on port 8083 at least 0 times, with a maximum of 39 tries before failing
  Dec 31 07:16:14.755: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://172.20.69.112:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-4243 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:16:14.755: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:16:14.756: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:16:14.756: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/pod-network-test-4243/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F172.20.69.112%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Dec 31 07:16:14.780: INFO: Found all 1 expected endpoints: [netserver-1]
  Dec 31 07:16:14.780: INFO: Going to poll 172.20.169.153 on port 8083 at least 0 times, with a maximum of 39 tries before failing
  Dec 31 07:16:14.781: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://172.20.169.153:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-4243 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:16:14.781: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:16:14.782: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:16:14.782: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/pod-network-test-4243/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F172.20.169.153%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Dec 31 07:16:14.805: INFO: Found all 1 expected endpoints: [netserver-2]
  Dec 31 07:16:14.805: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-4243" for this suite. @ 12/31/23 07:16:14.807
• [24.191 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:200
  STEP: Creating a kubernetes client @ 12/31/23 07:16:14.809
  Dec 31 07:16:14.809: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir @ 12/31/23 07:16:14.81
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:16:14.816
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:16:14.817
  STEP: Creating a pod to test emptydir 0644 on node default medium @ 12/31/23 07:16:14.82
  STEP: Saw pod success @ 12/31/23 07:16:18.831
  Dec 31 07:16:18.833: INFO: Trying to get logs from node worker2 pod pod-4fca7cc0-0f6a-4324-9390-a22a8c1de730 container test-container: <nil>
  STEP: delete the pod @ 12/31/23 07:16:18.841
  Dec 31 07:16:18.847: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-3375" for this suite. @ 12/31/23 07:16:18.848
• [4.041 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/configmap.go:46
  STEP: Creating a kubernetes client @ 12/31/23 07:16:18.851
  Dec 31 07:16:18.851: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename configmap @ 12/31/23 07:16:18.851
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:16:18.857
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:16:18.858
  STEP: Creating configMap configmap-6320/configmap-test-0ca3a42e-b020-44bd-a55c-22335d3e7b81 @ 12/31/23 07:16:18.86
  STEP: Creating a pod to test consume configMaps @ 12/31/23 07:16:18.862
  STEP: Saw pod success @ 12/31/23 07:16:22.871
  Dec 31 07:16:22.872: INFO: Trying to get logs from node worker2 pod pod-configmaps-53e1fc0a-8907-4922-ac3b-43b94a1e4701 container env-test: <nil>
  STEP: delete the pod @ 12/31/23 07:16:22.874
  Dec 31 07:16:22.880: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-6320" for this suite. @ 12/31/23 07:16:22.881
• [4.034 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance] [sig-apps, Conformance]
test/e2e/apps/disruption.go:164
  STEP: Creating a kubernetes client @ 12/31/23 07:16:22.884
  Dec 31 07:16:22.884: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename disruption @ 12/31/23 07:16:22.885
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:16:22.891
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:16:22.894
  STEP: Waiting for the pdb to be processed @ 12/31/23 07:16:22.897
  STEP: Updating PodDisruptionBudget status @ 12/31/23 07:16:24.899
  STEP: Waiting for all pods to be running @ 12/31/23 07:16:24.902
  Dec 31 07:16:24.904: INFO: running pods: 0 < 1
  STEP: locating a running pod @ 12/31/23 07:16:26.904
  STEP: Waiting for the pdb to be processed @ 12/31/23 07:16:26.909
  STEP: Patching PodDisruptionBudget status @ 12/31/23 07:16:26.915
  STEP: Waiting for the pdb to be processed @ 12/31/23 07:16:26.92
  Dec 31 07:16:26.921: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-589" for this suite. @ 12/31/23 07:16:26.922
• [4.040 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/lifecycle_hook.go:153
  STEP: Creating a kubernetes client @ 12/31/23 07:16:26.925
  Dec 31 07:16:26.925: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 12/31/23 07:16:26.925
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:16:26.935
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:16:26.936
  STEP: create the container to handle the HTTPGet hook request. @ 12/31/23 07:16:26.94
  STEP: create the pod with lifecycle hook @ 12/31/23 07:16:28.947
  STEP: delete the pod with lifecycle hook @ 12/31/23 07:16:30.955
  STEP: check prestop hook @ 12/31/23 07:16:32.962
  Dec 31 07:16:32.965: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-1431" for this suite. @ 12/31/23 07:16:32.966
• [6.044 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/kubelet.go:51
  STEP: Creating a kubernetes client @ 12/31/23 07:16:32.969
  Dec 31 07:16:32.969: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubelet-test @ 12/31/23 07:16:32.969
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:16:32.975
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:16:32.977
  Dec 31 07:16:34.988: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-7500" for this suite. @ 12/31/23 07:16:34.989
• [2.023 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should reject a Pod requesting a non-existent RuntimeClass [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtimeclass.go:57
  STEP: Creating a kubernetes client @ 12/31/23 07:16:34.992
  Dec 31 07:16:34.992: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename runtimeclass @ 12/31/23 07:16:34.992
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:16:34.998
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:16:35
  Dec 31 07:16:35.004: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-2643" for this suite. @ 12/31/23 07:16:35.005
• [0.015 seconds]
------------------------------
SSSS
------------------------------
[sig-apps] Job should apply changes to a job status [Conformance] [sig-apps, Conformance]
test/e2e/apps/job.go:784
  STEP: Creating a kubernetes client @ 12/31/23 07:16:35.007
  Dec 31 07:16:35.007: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename job @ 12/31/23 07:16:35.008
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:16:35.014
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:16:35.015
  STEP: Creating a job @ 12/31/23 07:16:35.017
  STEP: Ensure pods equal to parallelism count is attached to the job @ 12/31/23 07:16:35.019
  STEP: patching /status @ 12/31/23 07:16:37.022
  STEP: updating /status @ 12/31/23 07:16:37.03
  STEP: get /status @ 12/31/23 07:16:37.037
  Dec 31 07:16:37.040: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-7506" for this suite. @ 12/31/23 07:16:37.042
• [2.037 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] PreStop should call prestop when killing a pod [Conformance] [sig-node, Conformance]
test/e2e/node/pre_stop.go:169
  STEP: Creating a kubernetes client @ 12/31/23 07:16:37.045
  Dec 31 07:16:37.045: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename prestop @ 12/31/23 07:16:37.045
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:16:37.055
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:16:37.058
  STEP: Creating server pod server in namespace prestop-1938 @ 12/31/23 07:16:37.061
  STEP: Waiting for pods to come up. @ 12/31/23 07:16:37.066
  STEP: Creating tester pod tester in namespace prestop-1938 @ 12/31/23 07:16:39.072
  STEP: Deleting pre-stop pod @ 12/31/23 07:16:41.078
  Dec 31 07:16:46.083: INFO: Saw: {
  	"Hostname": "server",
  	"Sent": null,
  	"Received": {
  		"prestop": 1
  	},
  	"Errors": null,
  	"Log": [
  		"default/nettest has 0 endpoints ([]), which is less than 8 as expected. Waiting for all endpoints to come up.",
  		"default/nettest has 0 endpoints ([]), which is less than 8 as expected. Waiting for all endpoints to come up."
  	],
  	"StillContactingPeers": true
  }
  STEP: Deleting the server pod @ 12/31/23 07:16:46.084
  Dec 31 07:16:46.089: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "prestop-1938" for this suite. @ 12/31/23 07:16:46.091
• [9.048 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance] [sig-apps, Conformance]
test/e2e/apps/rc.go:425
  STEP: Creating a kubernetes client @ 12/31/23 07:16:46.093
  Dec 31 07:16:46.093: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename replication-controller @ 12/31/23 07:16:46.094
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:16:46.15
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:16:46.152
  STEP: Creating ReplicationController "e2e-rc-qmh4v" @ 12/31/23 07:16:46.153
  Dec 31 07:16:46.155: INFO: Get Replication Controller "e2e-rc-qmh4v" to confirm replicas
  Dec 31 07:16:47.156: INFO: Get Replication Controller "e2e-rc-qmh4v" to confirm replicas
  Dec 31 07:16:47.157: INFO: Found 1 replicas for "e2e-rc-qmh4v" replication controller
  STEP: Getting scale subresource for ReplicationController "e2e-rc-qmh4v" @ 12/31/23 07:16:47.157
  STEP: Updating a scale subresource @ 12/31/23 07:16:47.158
  STEP: Verifying replicas where modified for replication controller "e2e-rc-qmh4v" @ 12/31/23 07:16:47.161
  Dec 31 07:16:47.161: INFO: Get Replication Controller "e2e-rc-qmh4v" to confirm replicas
  Dec 31 07:16:48.161: INFO: Get Replication Controller "e2e-rc-qmh4v" to confirm replicas
  Dec 31 07:16:48.162: INFO: Found 2 replicas for "e2e-rc-qmh4v" replication controller
  Dec 31 07:16:48.162: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-305" for this suite. @ 12/31/23 07:16:48.164
• [2.073 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/downwardapi.go:92
  STEP: Creating a kubernetes client @ 12/31/23 07:16:48.166
  Dec 31 07:16:48.166: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 07:16:48.167
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:16:48.173
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:16:48.174
  STEP: Creating a pod to test downward api env vars @ 12/31/23 07:16:48.176
  STEP: Saw pod success @ 12/31/23 07:16:52.185
  Dec 31 07:16:52.186: INFO: Trying to get logs from node worker3 pod downward-api-5935c9fa-582c-482f-822e-1ff07b8daa13 container dapi-container: <nil>
  STEP: delete the pod @ 12/31/23 07:16:52.189
  Dec 31 07:16:52.195: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-9105" for this suite. @ 12/31/23 07:16:52.196
• [4.033 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:357
  STEP: Creating a kubernetes client @ 12/31/23 07:16:52.199
  Dec 31 07:16:52.199: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename crd-publish-openapi @ 12/31/23 07:16:52.2
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:16:52.206
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:16:52.208
  STEP: CRs in the same group and version but different kinds (two CRDs) show up in OpenAPI documentation @ 12/31/23 07:16:52.209
  Dec 31 07:16:52.210: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:16:53.434: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:16:58.084: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-890" for this suite. @ 12/31/23 07:16:58.088
• [5.891 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/secrets.go:96
  STEP: Creating a kubernetes client @ 12/31/23 07:16:58.091
  Dec 31 07:16:58.091: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename secrets @ 12/31/23 07:16:58.091
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:16:58.097
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:16:58.098
  STEP: creating secret secrets-3383/secret-test-6719d32c-0a8a-4c4a-be4b-9e716e286225 @ 12/31/23 07:16:58.099
  STEP: Creating a pod to test consume secrets @ 12/31/23 07:16:58.101
  STEP: Saw pod success @ 12/31/23 07:17:02.11
  Dec 31 07:17:02.111: INFO: Trying to get logs from node worker3 pod pod-configmaps-f2c3422a-0489-43da-bbda-0e50037db5b1 container env-test: <nil>
  STEP: delete the pod @ 12/31/23 07:17:02.113
  Dec 31 07:17:02.119: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-3383" for this suite. @ 12/31/23 07:17:02.121
• [4.032 seconds]
------------------------------
S
------------------------------
[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance] [sig-node, Conformance]
test/e2e/common/node/expansion.go:115
  STEP: Creating a kubernetes client @ 12/31/23 07:17:02.123
  Dec 31 07:17:02.123: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename var-expansion @ 12/31/23 07:17:02.123
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:17:02.13
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:17:02.131
  STEP: Creating a pod to test substitution in volume subpath @ 12/31/23 07:17:02.132
  STEP: Saw pod success @ 12/31/23 07:17:06.142
  Dec 31 07:17:06.143: INFO: Trying to get logs from node worker3 pod var-expansion-ab2e6d37-1e72-4382-8e27-e7cd9c6e9a82 container dapi-container: <nil>
  STEP: delete the pod @ 12/31/23 07:17:06.151
  Dec 31 07:17:06.157: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-3806" for this suite. @ 12/31/23 07:17:06.159
• [4.038 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] Probing container should be restarted with a exec "cat /tmp/health" liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:134
  STEP: Creating a kubernetes client @ 12/31/23 07:17:06.161
  Dec 31 07:17:06.161: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-probe @ 12/31/23 07:17:06.161
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:17:06.167
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:17:06.169
  STEP: Creating pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449 @ 12/31/23 07:17:06.17
  STEP: checking the pod's current state and verifying that restartCount is present @ 12/31/23 07:17:08.177
  Dec 31 07:17:08.178: INFO: Initial restart count of pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 is 0
  Dec 31 07:17:08.179: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:10.181: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:12.183: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:14.185: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:16.187: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:18.190: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:20.191: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:22.193: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:24.195: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:26.197: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:28.200: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:30.201: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:32.203: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:34.205: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:36.206: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:38.209: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:40.211: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:42.214: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:44.215: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:46.217: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:48.219: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:50.221: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:52.223: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:54.225: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:56.227: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:58.230: INFO: Get pod busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 in namespace container-probe-9449
  Dec 31 07:17:58.230: INFO: Restart count of pod container-probe-9449/busybox-cd803ce3-f0d8-452b-b2c9-e36c850df787 is now 1 (50.051759775s elapsed)
  STEP: deleting the pod @ 12/31/23 07:17:58.23
  Dec 31 07:17:58.234: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-9449" for this suite. @ 12/31/23 07:17:58.235
• [52.077 seconds]
------------------------------
SSS
------------------------------
[sig-instrumentation] Events API should delete a collection of events [Conformance] [sig-instrumentation, Conformance]
test/e2e/instrumentation/events.go:207
  STEP: Creating a kubernetes client @ 12/31/23 07:17:58.238
  Dec 31 07:17:58.238: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename events @ 12/31/23 07:17:58.239
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:17:58.248
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:17:58.249
  STEP: Create set of events @ 12/31/23 07:17:58.25
  STEP: get a list of Events with a label in the current namespace @ 12/31/23 07:17:58.256
  STEP: delete a list of events @ 12/31/23 07:17:58.257
  Dec 31 07:17:58.257: INFO: requesting DeleteCollection of events
  STEP: check that the list of events matches the requested quantity @ 12/31/23 07:17:58.263
  Dec 31 07:17:58.264: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-7161" for this suite. @ 12/31/23 07:17:58.265
• [0.029 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/custom_resource_definition.go:270
  STEP: Creating a kubernetes client @ 12/31/23 07:17:58.267
  Dec 31 07:17:58.267: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename custom-resource-definition @ 12/31/23 07:17:58.268
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:17:58.274
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:17:58.276
  Dec 31 07:17:58.277: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:18:01.328: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-509" for this suite. @ 12/31/23 07:18:01.33
• [3.065 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Slow] [Conformance] [sig-node, Slow, Conformance]
test/e2e/common/node/expansion.go:189
  STEP: Creating a kubernetes client @ 12/31/23 07:18:01.332
  Dec 31 07:18:01.332: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename var-expansion @ 12/31/23 07:18:01.332
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:18:01.338
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:18:01.339
  Dec 31 07:18:03.348: INFO: Deleting pod "var-expansion-c432861d-5c84-42db-a9c8-decf3250f6db" in namespace "var-expansion-567"
  Dec 31 07:18:03.351: INFO: Wait up to 5m0s for pod "var-expansion-c432861d-5c84-42db-a9c8-decf3250f6db" to be fully deleted
  Dec 31 07:18:05.354: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-567" for this suite. @ 12/31/23 07:18:05.355
• [4.025 seconds]
------------------------------
SS
------------------------------
[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/pods.go:537
  STEP: Creating a kubernetes client @ 12/31/23 07:18:05.357
  Dec 31 07:18:05.357: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pods @ 12/31/23 07:18:05.358
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:18:05.364
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:18:05.366
  Dec 31 07:18:05.367: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: creating the pod @ 12/31/23 07:18:05.368
  STEP: submitting the pod to kubernetes @ 12/31/23 07:18:05.368
  Dec 31 07:18:07.433: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-9679" for this suite. @ 12/31/23 07:18:07.435
• [2.080 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance] [sig-apps, Conformance]
test/e2e/apps/rc.go:113
  STEP: Creating a kubernetes client @ 12/31/23 07:18:07.438
  Dec 31 07:18:07.438: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename replication-controller @ 12/31/23 07:18:07.438
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:18:07.445
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:18:07.446
  STEP: creating a ReplicationController @ 12/31/23 07:18:07.449
  STEP: waiting for RC to be added @ 12/31/23 07:18:07.452
  STEP: waiting for available Replicas @ 12/31/23 07:18:07.452
  STEP: patching ReplicationController @ 12/31/23 07:18:08.402
  STEP: waiting for RC to be modified @ 12/31/23 07:18:08.407
  STEP: patching ReplicationController status @ 12/31/23 07:18:08.408
  STEP: waiting for RC to be modified @ 12/31/23 07:18:08.41
  STEP: waiting for available Replicas @ 12/31/23 07:18:08.41
  STEP: fetching ReplicationController status @ 12/31/23 07:18:08.412
  STEP: patching ReplicationController scale @ 12/31/23 07:18:08.414
  STEP: waiting for RC to be modified @ 12/31/23 07:18:08.417
  STEP: waiting for ReplicationController's scale to be the max amount @ 12/31/23 07:18:08.417
  STEP: fetching ReplicationController; ensuring that it's patched @ 12/31/23 07:18:09.017
  STEP: updating ReplicationController status @ 12/31/23 07:18:09.019
  STEP: waiting for RC to be modified @ 12/31/23 07:18:09.021
  STEP: listing all ReplicationControllers @ 12/31/23 07:18:09.021
  STEP: checking that ReplicationController has expected values @ 12/31/23 07:18:09.022
  STEP: deleting ReplicationControllers by collection @ 12/31/23 07:18:09.022
  STEP: waiting for ReplicationController to have a DELETED watchEvent @ 12/31/23 07:18:09.026
  Dec 31 07:18:09.056: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  E1231 07:18:09.056662      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "replication-controller-7168" for this suite. @ 12/31/23 07:18:09.058
• [1.622 seconds]
------------------------------
SS
------------------------------
[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/kubelet.go:134
  STEP: Creating a kubernetes client @ 12/31/23 07:18:09.06
  Dec 31 07:18:09.060: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubelet-test @ 12/31/23 07:18:09.06
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:18:09.067
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:18:09.069
  Dec 31 07:18:09.078: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-3744" for this suite. @ 12/31/23 07:18:09.08
• [0.023 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Kubelet when scheduling an agnhost Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/kubelet.go:147
  STEP: Creating a kubernetes client @ 12/31/23 07:18:09.082
  Dec 31 07:18:09.082: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubelet-test @ 12/31/23 07:18:09.083
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:18:09.088
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:18:09.089
  STEP: Waiting for pod completion @ 12/31/23 07:18:09.094
  E1231 07:18:10.057590      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:11.057722      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:12.058347      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:13.058707      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:13.102: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-6636" for this suite. @ 12/31/23 07:18:13.103
• [4.023 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:168
  STEP: Creating a kubernetes client @ 12/31/23 07:18:13.106
  Dec 31 07:18:13.106: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-probe @ 12/31/23 07:18:13.106
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:18:13.113
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:18:13.114
  STEP: Creating pod liveness-e87929ca-bef7-46bb-b9a2-181bdf8cceae in namespace container-probe-8160 @ 12/31/23 07:18:13.116
  E1231 07:18:14.058900      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:15.059125      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking the pod's current state and verifying that restartCount is present @ 12/31/23 07:18:15.122
  Dec 31 07:18:15.123: INFO: Initial restart count of pod liveness-e87929ca-bef7-46bb-b9a2-181bdf8cceae is 0
  Dec 31 07:18:15.124: INFO: Get pod liveness-e87929ca-bef7-46bb-b9a2-181bdf8cceae in namespace container-probe-8160
  E1231 07:18:16.059505      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:17.060570      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:17.127: INFO: Get pod liveness-e87929ca-bef7-46bb-b9a2-181bdf8cceae in namespace container-probe-8160
  E1231 07:18:18.061309      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:19.061446      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:19.129: INFO: Get pod liveness-e87929ca-bef7-46bb-b9a2-181bdf8cceae in namespace container-probe-8160
  E1231 07:18:20.062333      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:21.063279      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:21.132: INFO: Get pod liveness-e87929ca-bef7-46bb-b9a2-181bdf8cceae in namespace container-probe-8160
  E1231 07:18:22.064323      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:23.064993      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:23.134: INFO: Get pod liveness-e87929ca-bef7-46bb-b9a2-181bdf8cceae in namespace container-probe-8160
  E1231 07:18:24.065077      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:25.065571      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:25.137: INFO: Get pod liveness-e87929ca-bef7-46bb-b9a2-181bdf8cceae in namespace container-probe-8160
  E1231 07:18:26.066119      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:27.066379      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:27.139: INFO: Get pod liveness-e87929ca-bef7-46bb-b9a2-181bdf8cceae in namespace container-probe-8160
  E1231 07:18:28.067073      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:29.067139      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:29.141: INFO: Get pod liveness-e87929ca-bef7-46bb-b9a2-181bdf8cceae in namespace container-probe-8160
  E1231 07:18:30.067507      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:31.068585      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:31.143: INFO: Get pod liveness-e87929ca-bef7-46bb-b9a2-181bdf8cceae in namespace container-probe-8160
  E1231 07:18:32.069239      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:33.070001      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:33.145: INFO: Get pod liveness-e87929ca-bef7-46bb-b9a2-181bdf8cceae in namespace container-probe-8160
  E1231 07:18:34.070776      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:35.070853      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:35.147: INFO: Get pod liveness-e87929ca-bef7-46bb-b9a2-181bdf8cceae in namespace container-probe-8160
  Dec 31 07:18:35.147: INFO: Restart count of pod container-probe-8160/liveness-e87929ca-bef7-46bb-b9a2-181bdf8cceae is now 1 (20.023792966s elapsed)
  STEP: deleting the pod @ 12/31/23 07:18:35.147
  Dec 31 07:18:35.152: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-8160" for this suite. @ 12/31/23 07:18:35.154
• [22.050 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/daemon_set.go:836
  STEP: Creating a kubernetes client @ 12/31/23 07:18:35.157
  Dec 31 07:18:35.157: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename daemonsets @ 12/31/23 07:18:35.157
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:18:35.163
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:18:35.165
  STEP: Creating simple DaemonSet "daemon-set" @ 12/31/23 07:18:35.174
  STEP: Check that daemon pods launch on every node of the cluster. @ 12/31/23 07:18:35.176
  Dec 31 07:18:35.180: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 07:18:35.180: INFO: Node 10.255.0.202 is running 0 daemon pod, expected 1
  E1231 07:18:36.071524      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:36.180: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Dec 31 07:18:36.180: INFO: Node 10.255.0.202 is running 0 daemon pod, expected 1
  E1231 07:18:37.072572      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:37.181: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Dec 31 07:18:37.181: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: listing all DaemonSets @ 12/31/23 07:18:37.182
  STEP: DeleteCollection of the DaemonSets @ 12/31/23 07:18:37.183
  STEP: Verify that ReplicaSets have been deleted @ 12/31/23 07:18:37.186
  Dec 31 07:18:37.189: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"27395"},"items":null}

  Dec 31 07:18:37.191: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"27395"},"items":[{"metadata":{"name":"daemon-set-4rmg5","generateName":"daemon-set-","namespace":"daemonsets-3449","uid":"22101b0f-ae57-4de2-a3e8-3224ac494443","resourceVersion":"27387","creationTimestamp":"2023-12-31T07:18:35Z","labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"2244deb2-a587-4140-9ef9-bf59b67cb112","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2023-12-31T07:18:35Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"2244deb2-a587-4140-9ef9-bf59b67cb112\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2023-12-31T07:18:36Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"172.20.69.114\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-l5vb6","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-l5vb6","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"worker2","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["worker2"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-12-31T07:18:36Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-12-31T07:18:35Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-12-31T07:18:36Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-12-31T07:18:36Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-12-31T07:18:35Z"}],"hostIP":"10.255.0.203","hostIPs":[{"ip":"10.255.0.203"}],"podIP":"172.20.69.114","podIPs":[{"ip":"172.20.69.114"}],"startTime":"2023-12-31T07:18:35Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2023-12-31T07:18:35Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"containerd://241241b0523851f9e8fb30dc3f856f1f7e0d0e98a0970c2e7deaba2b8f600a0b","started":true}],"qosClass":"BestEffort"}},{"metadata":{"name":"daemon-set-vkcnp","generateName":"daemon-set-","namespace":"daemonsets-3449","uid":"f641881d-aada-4e3a-a87b-0767b129676e","resourceVersion":"27393","creationTimestamp":"2023-12-31T07:18:35Z","labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"2244deb2-a587-4140-9ef9-bf59b67cb112","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2023-12-31T07:18:35Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"2244deb2-a587-4140-9ef9-bf59b67cb112\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2023-12-31T07:18:36Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"172.20.152.171\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-phkhf","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-phkhf","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"10.255.0.202","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["10.255.0.202"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-12-31T07:18:36Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-12-31T07:18:35Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-12-31T07:18:36Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-12-31T07:18:36Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-12-31T07:18:35Z"}],"hostIP":"10.255.0.202","hostIPs":[{"ip":"10.255.0.202"}],"podIP":"172.20.152.171","podIPs":[{"ip":"172.20.152.171"}],"startTime":"2023-12-31T07:18:35Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2023-12-31T07:18:35Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"containerd://4aebc6839c2c633f22d119a59bd823dd88d7b82904f48e003b50385e1f1db465","started":true}],"qosClass":"BestEffort"}},{"metadata":{"name":"daemon-set-x4pmq","generateName":"daemon-set-","namespace":"daemonsets-3449","uid":"bfa61e3a-3f39-4724-bc76-16e9a9d61ff2","resourceVersion":"27391","creationTimestamp":"2023-12-31T07:18:35Z","labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"2244deb2-a587-4140-9ef9-bf59b67cb112","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kube-controller-manager","operation":"Update","apiVersion":"v1","time":"2023-12-31T07:18:35Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"2244deb2-a587-4140-9ef9-bf59b67cb112\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2023-12-31T07:18:36Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodReadyToStartContainers\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:hostIPs":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"172.20.169.183\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-xcsk7","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-xcsk7","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"worker3","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["worker3"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"PodReadyToStartContainers","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-12-31T07:18:36Z"},{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-12-31T07:18:35Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-12-31T07:18:36Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-12-31T07:18:36Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2023-12-31T07:18:35Z"}],"hostIP":"10.255.0.204","hostIPs":[{"ip":"10.255.0.204"}],"podIP":"172.20.169.183","podIPs":[{"ip":"172.20.169.183"}],"startTime":"2023-12-31T07:18:35Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2023-12-31T07:18:35Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"containerd://8eb706832d6f8b527dcd8980f53294f9131ab97091bec430b6de9d7f40b7f086","started":true}],"qosClass":"BestEffort"}}]}

  Dec 31 07:18:37.200: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-3449" for this suite. @ 12/31/23 07:18:37.201
• [2.046 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:164
  STEP: Creating a kubernetes client @ 12/31/23 07:18:37.203
  Dec 31 07:18:37.203: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 07:18:37.204
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:18:37.209
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:18:37.212
  STEP: Creating the pod @ 12/31/23 07:18:37.213
  E1231 07:18:38.072632      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:39.072898      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:39.735: INFO: Successfully updated pod "annotationupdateb6117606-b40a-4edc-954d-7242da1f9c9b"
  E1231 07:18:40.073127      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:41.073254      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:42.073544      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:43.073681      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:43.744: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-5943" for this suite. @ 12/31/23 07:18:43.746
• [6.545 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should support RuntimeClasses API operations [Conformance] [sig-node, Conformance]
test/e2e/common/node/runtimeclass.go:191
  STEP: Creating a kubernetes client @ 12/31/23 07:18:43.748
  Dec 31 07:18:43.748: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename runtimeclass @ 12/31/23 07:18:43.749
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:18:43.754
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:18:43.756
  STEP: getting /apis @ 12/31/23 07:18:43.757
  STEP: getting /apis/node.k8s.io @ 12/31/23 07:18:43.759
  STEP: getting /apis/node.k8s.io/v1 @ 12/31/23 07:18:43.76
  STEP: creating @ 12/31/23 07:18:43.76
  STEP: watching @ 12/31/23 07:18:43.766
  Dec 31 07:18:43.766: INFO: starting watch
  STEP: getting @ 12/31/23 07:18:43.768
  STEP: listing @ 12/31/23 07:18:43.769
  STEP: patching @ 12/31/23 07:18:43.77
  STEP: updating @ 12/31/23 07:18:43.771
  Dec 31 07:18:43.773: INFO: waiting for watch events with expected annotations
  STEP: deleting @ 12/31/23 07:18:43.773
  STEP: deleting a collection @ 12/31/23 07:18:43.777
  Dec 31 07:18:43.781: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-4551" for this suite. @ 12/31/23 07:18:43.782
• [0.038 seconds]
------------------------------
S
------------------------------
[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/pods.go:619
  STEP: Creating a kubernetes client @ 12/31/23 07:18:43.786
  Dec 31 07:18:43.786: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pods @ 12/31/23 07:18:43.787
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:18:43.793
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:18:43.794
  Dec 31 07:18:43.796: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: creating the pod @ 12/31/23 07:18:43.797
  STEP: submitting the pod to kubernetes @ 12/31/23 07:18:43.797
  E1231 07:18:44.074701      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:45.075592      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:45.809: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-544" for this suite. @ 12/31/23 07:18:45.81
• [2.026 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/garbage_collector.go:714
  STEP: Creating a kubernetes client @ 12/31/23 07:18:45.813
  Dec 31 07:18:45.813: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename gc @ 12/31/23 07:18:45.813
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:18:45.818
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:18:45.819
  STEP: create the rc1 @ 12/31/23 07:18:45.822
  STEP: create the rc2 @ 12/31/23 07:18:45.825
  E1231 07:18:46.076043      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:47.077740      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:48.078198      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:49.078309      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:50.079437      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:51.079509      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: set half of pods created by rc simpletest-rc-to-be-deleted to have rc simpletest-rc-to-stay as owner as well @ 12/31/23 07:18:51.829
  STEP: delete the rc simpletest-rc-to-be-deleted @ 12/31/23 07:18:52.042
  STEP: wait for the rc to be deleted @ 12/31/23 07:18:52.044
  E1231 07:18:52.079970      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:53.080560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:54.080699      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:55.080746      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:56.080831      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:18:57.050: INFO: 72 pods remaining
  Dec 31 07:18:57.050: INFO: 72 pods has nil DeletionTimestamp
  Dec 31 07:18:57.050: INFO: 
  E1231 07:18:57.081711      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:58.081872      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:18:59.082011      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:00.082137      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:01.082262      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Gathering metrics @ 12/31/23 07:19:02.05
  W1231 07:19:02.052559      23 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Dec 31 07:19:02.052: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Dec 31 07:19:02.052: INFO: Deleting pod "simpletest-rc-to-be-deleted-24rqj" in namespace "gc-1558"
  Dec 31 07:19:02.058: INFO: Deleting pod "simpletest-rc-to-be-deleted-2cj5z" in namespace "gc-1558"
  Dec 31 07:19:02.063: INFO: Deleting pod "simpletest-rc-to-be-deleted-2jcdr" in namespace "gc-1558"
  Dec 31 07:19:02.068: INFO: Deleting pod "simpletest-rc-to-be-deleted-2kqv9" in namespace "gc-1558"
  Dec 31 07:19:02.073: INFO: Deleting pod "simpletest-rc-to-be-deleted-2q4ch" in namespace "gc-1558"
  Dec 31 07:19:02.078: INFO: Deleting pod "simpletest-rc-to-be-deleted-2sn5h" in namespace "gc-1558"
  E1231 07:19:02.082834      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:19:02.084: INFO: Deleting pod "simpletest-rc-to-be-deleted-4ql4p" in namespace "gc-1558"
  Dec 31 07:19:02.089: INFO: Deleting pod "simpletest-rc-to-be-deleted-4rwvc" in namespace "gc-1558"
  Dec 31 07:19:02.095: INFO: Deleting pod "simpletest-rc-to-be-deleted-5665r" in namespace "gc-1558"
  Dec 31 07:19:02.099: INFO: Deleting pod "simpletest-rc-to-be-deleted-5cf6t" in namespace "gc-1558"
  Dec 31 07:19:02.105: INFO: Deleting pod "simpletest-rc-to-be-deleted-5cpp7" in namespace "gc-1558"
  Dec 31 07:19:02.114: INFO: Deleting pod "simpletest-rc-to-be-deleted-5tnkh" in namespace "gc-1558"
  Dec 31 07:19:02.122: INFO: Deleting pod "simpletest-rc-to-be-deleted-627j7" in namespace "gc-1558"
  Dec 31 07:19:02.139: INFO: Deleting pod "simpletest-rc-to-be-deleted-66pml" in namespace "gc-1558"
  Dec 31 07:19:02.146: INFO: Deleting pod "simpletest-rc-to-be-deleted-6b4qw" in namespace "gc-1558"
  Dec 31 07:19:02.153: INFO: Deleting pod "simpletest-rc-to-be-deleted-6k6sr" in namespace "gc-1558"
  Dec 31 07:19:02.170: INFO: Deleting pod "simpletest-rc-to-be-deleted-6n5wz" in namespace "gc-1558"
  Dec 31 07:19:02.180: INFO: Deleting pod "simpletest-rc-to-be-deleted-6vm8j" in namespace "gc-1558"
  Dec 31 07:19:02.189: INFO: Deleting pod "simpletest-rc-to-be-deleted-6zg8r" in namespace "gc-1558"
  Dec 31 07:19:02.196: INFO: Deleting pod "simpletest-rc-to-be-deleted-724f9" in namespace "gc-1558"
  Dec 31 07:19:02.214: INFO: Deleting pod "simpletest-rc-to-be-deleted-879md" in namespace "gc-1558"
  Dec 31 07:19:02.220: INFO: Deleting pod "simpletest-rc-to-be-deleted-8r9qg" in namespace "gc-1558"
  Dec 31 07:19:02.226: INFO: Deleting pod "simpletest-rc-to-be-deleted-9dbzc" in namespace "gc-1558"
  Dec 31 07:19:02.232: INFO: Deleting pod "simpletest-rc-to-be-deleted-9hr75" in namespace "gc-1558"
  Dec 31 07:19:02.247: INFO: Deleting pod "simpletest-rc-to-be-deleted-9wqh9" in namespace "gc-1558"
  Dec 31 07:19:02.255: INFO: Deleting pod "simpletest-rc-to-be-deleted-b8zmt" in namespace "gc-1558"
  Dec 31 07:19:02.272: INFO: Deleting pod "simpletest-rc-to-be-deleted-bgmjd" in namespace "gc-1558"
  Dec 31 07:19:02.287: INFO: Deleting pod "simpletest-rc-to-be-deleted-bqqlc" in namespace "gc-1558"
  Dec 31 07:19:02.295: INFO: Deleting pod "simpletest-rc-to-be-deleted-bs244" in namespace "gc-1558"
  Dec 31 07:19:02.310: INFO: Deleting pod "simpletest-rc-to-be-deleted-c8nbq" in namespace "gc-1558"
  Dec 31 07:19:02.320: INFO: Deleting pod "simpletest-rc-to-be-deleted-cznvf" in namespace "gc-1558"
  Dec 31 07:19:02.329: INFO: Deleting pod "simpletest-rc-to-be-deleted-d8mh8" in namespace "gc-1558"
  Dec 31 07:19:02.338: INFO: Deleting pod "simpletest-rc-to-be-deleted-dk2t9" in namespace "gc-1558"
  Dec 31 07:19:02.348: INFO: Deleting pod "simpletest-rc-to-be-deleted-dmh5b" in namespace "gc-1558"
  Dec 31 07:19:02.370: INFO: Deleting pod "simpletest-rc-to-be-deleted-f4n7z" in namespace "gc-1558"
  Dec 31 07:19:02.394: INFO: Deleting pod "simpletest-rc-to-be-deleted-fckqv" in namespace "gc-1558"
  Dec 31 07:19:02.425: INFO: Deleting pod "simpletest-rc-to-be-deleted-fd4gt" in namespace "gc-1558"
  Dec 31 07:19:02.443: INFO: Deleting pod "simpletest-rc-to-be-deleted-fgcjm" in namespace "gc-1558"
  Dec 31 07:19:02.477: INFO: Deleting pod "simpletest-rc-to-be-deleted-fhlwb" in namespace "gc-1558"
  Dec 31 07:19:02.489: INFO: Deleting pod "simpletest-rc-to-be-deleted-fptng" in namespace "gc-1558"
  Dec 31 07:19:02.498: INFO: Deleting pod "simpletest-rc-to-be-deleted-fr55p" in namespace "gc-1558"
  Dec 31 07:19:02.512: INFO: Deleting pod "simpletest-rc-to-be-deleted-ghwzk" in namespace "gc-1558"
  Dec 31 07:19:02.521: INFO: Deleting pod "simpletest-rc-to-be-deleted-glcmr" in namespace "gc-1558"
  Dec 31 07:19:02.534: INFO: Deleting pod "simpletest-rc-to-be-deleted-gs5x8" in namespace "gc-1558"
  Dec 31 07:19:02.555: INFO: Deleting pod "simpletest-rc-to-be-deleted-h5wbq" in namespace "gc-1558"
  Dec 31 07:19:02.573: INFO: Deleting pod "simpletest-rc-to-be-deleted-h7nll" in namespace "gc-1558"
  Dec 31 07:19:02.586: INFO: Deleting pod "simpletest-rc-to-be-deleted-h7tsw" in namespace "gc-1558"
  Dec 31 07:19:02.654: INFO: Deleting pod "simpletest-rc-to-be-deleted-hrft9" in namespace "gc-1558"
  Dec 31 07:19:02.688: INFO: Deleting pod "simpletest-rc-to-be-deleted-htmdv" in namespace "gc-1558"
  Dec 31 07:19:02.715: INFO: Deleting pod "simpletest-rc-to-be-deleted-jc89x" in namespace "gc-1558"
  Dec 31 07:19:02.739: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-1558" for this suite. @ 12/31/23 07:19:02.742
• [16.938 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance] [sig-network, Conformance]
test/e2e/network/hostport.go:63
  STEP: Creating a kubernetes client @ 12/31/23 07:19:02.751
  Dec 31 07:19:02.751: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename hostport @ 12/31/23 07:19:02.752
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:19:02.788
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:19:02.801
  STEP: Trying to create a pod(pod1) with hostport 54323 and hostIP 127.0.0.1 and expect scheduled @ 12/31/23 07:19:02.825
  E1231 07:19:03.083576      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:04.083614      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Trying to create another pod(pod2) with hostport 54323 but hostIP 10.255.0.203 on the node which pod1 resides and expect scheduled @ 12/31/23 07:19:04.865
  E1231 07:19:05.084575      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:06.085014      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:07.085531      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:08.085761      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Trying to create a third pod(pod3) with hostport 54323, hostIP 10.255.0.203 but use UDP protocol on the node which pod2 resides @ 12/31/23 07:19:08.874
  E1231 07:19:09.086686      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:10.086948      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:11.088012      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:12.088366      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 127.0.0.1, port: 54323 @ 12/31/23 07:19:12.888
  Dec 31 07:19:12.888: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g --connect-timeout 5 --interface 10.255.0.203 http://127.0.0.1:54323/hostname] Namespace:hostport-6684 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:19:12.888: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:19:12.889: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:19:12.889: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/hostport-6684/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+--connect-timeout+5+--interface+10.255.0.203+http%3A%2F%2F127.0.0.1%3A54323%2Fhostname&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 10.255.0.203, port: 54323 @ 12/31/23 07:19:12.934
  Dec 31 07:19:12.934: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g --connect-timeout 5 http://10.255.0.203:54323/hostname] Namespace:hostport-6684 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:19:12.934: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:19:12.934: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:19:12.935: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/hostport-6684/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+--connect-timeout+5+http%3A%2F%2F10.255.0.203%3A54323%2Fhostname&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 10.255.0.203, port: 54323 UDP @ 12/31/23 07:19:12.959
  Dec 31 07:19:12.959: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostname | nc -u -w 5 10.255.0.203 54323] Namespace:hostport-6684 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:19:12.959: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:19:12.959: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:19:12.959: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/hostport-6684/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostname+%7C+nc+-u+-w+5+10.255.0.203+54323&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  E1231 07:19:13.088392      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:14.088438      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:15.088511      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:16.088843      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:17.089821      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:19:17.985: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "hostport-6684" for this suite. @ 12/31/23 07:19:17.987
• [15.238 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance] [sig-storage, Conformance]
test/e2e/storage/subpath.go:91
  STEP: Creating a kubernetes client @ 12/31/23 07:19:17.99
  Dec 31 07:19:17.990: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename subpath @ 12/31/23 07:19:17.99
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:19:17.996
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:19:17.999
  STEP: Setting up data @ 12/31/23 07:19:18
  STEP: Creating pod pod-subpath-test-downwardapi-lcz4 @ 12/31/23 07:19:18.004
  STEP: Creating a pod to test atomic-volume-subpath @ 12/31/23 07:19:18.004
  E1231 07:19:18.090390      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:19.090674      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:20.091604      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:21.092584      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:22.092989      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:23.093813      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:24.093862      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:25.094019      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:26.094994      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:27.095792      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:28.096468      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:29.097510      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:30.098240      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:31.098415      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:32.099169      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:33.099248      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:34.099666      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:35.100572      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:36.100630      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:37.101225      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:38.101898      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:39.101994      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:19:40.032
  Dec 31 07:19:40.033: INFO: Trying to get logs from node worker3 pod pod-subpath-test-downwardapi-lcz4 container test-container-subpath-downwardapi-lcz4: <nil>
  STEP: delete the pod @ 12/31/23 07:19:40.036
  STEP: Deleting pod pod-subpath-test-downwardapi-lcz4 @ 12/31/23 07:19:40.042
  Dec 31 07:19:40.042: INFO: Deleting pod "pod-subpath-test-downwardapi-lcz4" in namespace "subpath-3088"
  Dec 31 07:19:40.043: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-3088" for this suite. @ 12/31/23 07:19:40.044
• [22.056 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/field_validation.go:168
  STEP: Creating a kubernetes client @ 12/31/23 07:19:40.046
  Dec 31 07:19:40.046: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename field-validation @ 12/31/23 07:19:40.047
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:19:40.056
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:19:40.057
  Dec 31 07:19:40.058: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  E1231 07:19:40.102468      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:41.102797      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:42.103126      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  W1231 07:19:42.585256      23 warnings.go:70] unknown field "alpha"
  W1231 07:19:42.585270      23 warnings.go:70] unknown field "beta"
  W1231 07:19:42.585273      23 warnings.go:70] unknown field "delta"
  W1231 07:19:42.585276      23 warnings.go:70] unknown field "epsilon"
  W1231 07:19:42.585278      23 warnings.go:70] unknown field "gamma"
  E1231 07:19:43.103597      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:19:43.111: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-3176" for this suite. @ 12/31/23 07:19:43.113
• [3.069 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/daemon_set.go:875
  STEP: Creating a kubernetes client @ 12/31/23 07:19:43.115
  Dec 31 07:19:43.115: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename daemonsets @ 12/31/23 07:19:43.115
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:19:43.121
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:19:43.127
  STEP: Creating simple DaemonSet "daemon-set" @ 12/31/23 07:19:43.136
  STEP: Check that daemon pods launch on every node of the cluster. @ 12/31/23 07:19:43.139
  Dec 31 07:19:43.150: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 07:19:43.150: INFO: Node 10.255.0.202 is running 0 daemon pod, expected 1
  E1231 07:19:44.104560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:19:44.142: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Dec 31 07:19:44.142: INFO: Node 10.255.0.202 is running 0 daemon pod, expected 1
  E1231 07:19:45.105428      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:19:45.143: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Dec 31 07:19:45.143: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Getting /status @ 12/31/23 07:19:45.144
  Dec 31 07:19:45.146: INFO: Daemon Set daemon-set has Conditions: []
  STEP: updating the DaemonSet Status @ 12/31/23 07:19:45.146
  Dec 31 07:19:45.150: INFO: updatedStatus.Conditions: []v1.DaemonSetCondition{v1.DaemonSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the daemon set status to be updated @ 12/31/23 07:19:45.15
  Dec 31 07:19:45.151: INFO: Observed &DaemonSet event: ADDED
  Dec 31 07:19:45.151: INFO: Observed &DaemonSet event: MODIFIED
  Dec 31 07:19:45.152: INFO: Observed &DaemonSet event: MODIFIED
  Dec 31 07:19:45.152: INFO: Observed &DaemonSet event: MODIFIED
  Dec 31 07:19:45.152: INFO: Observed &DaemonSet event: MODIFIED
  Dec 31 07:19:45.152: INFO: Found daemon set daemon-set in namespace daemonsets-9794 with labels: map[daemonset-name:daemon-set] annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Dec 31 07:19:45.152: INFO: Daemon set daemon-set has an updated status
  STEP: patching the DaemonSet Status @ 12/31/23 07:19:45.152
  STEP: watching for the daemon set status to be patched @ 12/31/23 07:19:45.155
  Dec 31 07:19:45.156: INFO: Observed &DaemonSet event: ADDED
  Dec 31 07:19:45.156: INFO: Observed &DaemonSet event: MODIFIED
  Dec 31 07:19:45.156: INFO: Observed &DaemonSet event: MODIFIED
  Dec 31 07:19:45.156: INFO: Observed &DaemonSet event: MODIFIED
  Dec 31 07:19:45.156: INFO: Observed &DaemonSet event: MODIFIED
  Dec 31 07:19:45.156: INFO: Observed daemon set daemon-set in namespace daemonsets-9794 with annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Dec 31 07:19:45.156: INFO: Observed &DaemonSet event: MODIFIED
  Dec 31 07:19:45.156: INFO: Found daemon set daemon-set in namespace daemonsets-9794 with labels: map[daemonset-name:daemon-set] annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusPatched True 0001-01-01 00:00:00 +0000 UTC  }]
  Dec 31 07:19:45.156: INFO: Daemon set daemon-set has a patched status
  STEP: Deleting DaemonSet "daemon-set" @ 12/31/23 07:19:45.159
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-9794, will wait for the garbage collector to delete the pods @ 12/31/23 07:19:45.159
  Dec 31 07:19:45.213: INFO: Deleting DaemonSet.extensions daemon-set took: 3.282249ms
  Dec 31 07:19:45.314: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.842516ms
  E1231 07:19:46.105847      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:19:46.616: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 07:19:46.616: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Dec 31 07:19:46.617: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"30096"},"items":null}

  Dec 31 07:19:46.618: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"30096"},"items":null}

  Dec 31 07:19:46.623: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-9794" for this suite. @ 12/31/23 07:19:46.624
• [3.511 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:948
  STEP: Creating a kubernetes client @ 12/31/23 07:19:46.626
  Dec 31 07:19:46.626: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename resourcequota @ 12/31/23 07:19:46.627
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:19:46.632
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:19:46.633
  STEP: Creating a ResourceQuota @ 12/31/23 07:19:46.635
  STEP: Getting a ResourceQuota @ 12/31/23 07:19:46.637
  STEP: Listing all ResourceQuotas with LabelSelector @ 12/31/23 07:19:46.638
  STEP: Patching the ResourceQuota @ 12/31/23 07:19:46.641
  STEP: Deleting a Collection of ResourceQuotas @ 12/31/23 07:19:46.644
  STEP: Verifying the deleted ResourceQuota @ 12/31/23 07:19:46.648
  Dec 31 07:19:46.649: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-992" for this suite. @ 12/31/23 07:19:46.651
• [0.027 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_secret.go:78
  STEP: Creating a kubernetes client @ 12/31/23 07:19:46.653
  Dec 31 07:19:46.653: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 07:19:46.654
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:19:46.659
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:19:46.664
  STEP: Creating projection with secret that has name projected-secret-test-map-5523bed7-e04c-42cf-b45d-7c7840204408 @ 12/31/23 07:19:46.666
  STEP: Creating a pod to test consume secrets @ 12/31/23 07:19:46.669
  E1231 07:19:47.106745      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:48.107587      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:49.108603      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:50.108733      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:19:50.678
  Dec 31 07:19:50.680: INFO: Trying to get logs from node worker3 pod pod-projected-secrets-8d189274-dc96-44c4-84e3-cfa4aeaa22bb container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 07:19:50.682
  Dec 31 07:19:50.688: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-163" for this suite. @ 12/31/23 07:19:50.689
• [4.038 seconds]
------------------------------
SS
------------------------------
[sig-storage] CSIStorageCapacity should support CSIStorageCapacities API operations [Conformance] [sig-storage, Conformance]
test/e2e/storage/csistoragecapacity.go:50
  STEP: Creating a kubernetes client @ 12/31/23 07:19:50.691
  Dec 31 07:19:50.691: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename csistoragecapacity @ 12/31/23 07:19:50.692
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:19:50.698
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:19:50.7
  STEP: getting /apis @ 12/31/23 07:19:50.701
  STEP: getting /apis/storage.k8s.io @ 12/31/23 07:19:50.703
  STEP: getting /apis/storage.k8s.io/v1 @ 12/31/23 07:19:50.704
  STEP: creating @ 12/31/23 07:19:50.704
  STEP: watching @ 12/31/23 07:19:50.709
  Dec 31 07:19:50.709: INFO: starting watch
  STEP: getting @ 12/31/23 07:19:50.712
  STEP: listing in namespace @ 12/31/23 07:19:50.713
  STEP: listing across namespaces @ 12/31/23 07:19:50.714
  STEP: patching @ 12/31/23 07:19:50.715
  STEP: updating @ 12/31/23 07:19:50.717
  Dec 31 07:19:50.720: INFO: waiting for watch events with expected annotations in namespace
  Dec 31 07:19:50.720: INFO: waiting for watch events with expected annotations across namespace
  STEP: deleting @ 12/31/23 07:19:50.72
  STEP: deleting a collection @ 12/31/23 07:19:50.724
  Dec 31 07:19:50.728: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csistoragecapacity-7687" for this suite. @ 12/31/23 07:19:50.73
• [0.040 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/init_container.go:459
  STEP: Creating a kubernetes client @ 12/31/23 07:19:50.732
  Dec 31 07:19:50.732: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename init-container @ 12/31/23 07:19:50.732
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:19:50.736
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:19:50.738
  STEP: creating the pod @ 12/31/23 07:19:50.741
  Dec 31 07:19:50.741: INFO: PodSpec: initContainers in spec.initContainers
  E1231 07:19:51.108907      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:52.109718      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:53.110362      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:19:53.925: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-4689" for this suite. @ 12/31/23 07:19:53.927
• [3.198 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:223
  STEP: Creating a kubernetes client @ 12/31/23 07:19:53.93
  Dec 31 07:19:53.930: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 07:19:53.931
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:19:53.938
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:19:53.94
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 07:19:53.941
  E1231 07:19:54.111110      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:55.111163      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:19:55.948
  Dec 31 07:19:55.949: INFO: Trying to get logs from node worker3 pod downwardapi-volume-7a4ff274-28b9-4fa6-bff4-5430cf132933 container client-container: <nil>
  STEP: delete the pod @ 12/31/23 07:19:55.951
  Dec 31 07:19:55.958: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1845" for this suite. @ 12/31/23 07:19:55.959
• [2.031 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:2177
  STEP: Creating a kubernetes client @ 12/31/23 07:19:55.962
  Dec 31 07:19:55.962: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 07:19:55.962
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:19:55.968
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:19:55.969
  STEP: creating service in namespace services-5428 @ 12/31/23 07:19:55.971
  STEP: creating service affinity-clusterip in namespace services-5428 @ 12/31/23 07:19:55.971
  STEP: creating replication controller affinity-clusterip in namespace services-5428 @ 12/31/23 07:19:55.976
  I1231 07:19:55.980109      23 runners.go:197] Created replication controller with name: affinity-clusterip, namespace: services-5428, replica count: 3
  E1231 07:19:56.111852      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:57.112342      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:19:58.112567      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  I1231 07:19:59.030558      23 runners.go:197] affinity-clusterip Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Dec 31 07:19:59.032: INFO: Creating new exec pod
  E1231 07:19:59.112730      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:00.112849      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:01.113180      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:20:02.038: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-5428 exec execpod-affinityvbkcv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-clusterip 80'
  E1231 07:20:02.113890      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:20:02.123: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-clusterip 80\nConnection to affinity-clusterip 80 port [tcp/http] succeeded!\n"
  Dec 31 07:20:02.123: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:20:02.123: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-5428 exec execpod-affinityvbkcv -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.124.20 80'
  Dec 31 07:20:02.210: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.124.20 80\nConnection to 10.68.124.20 80 port [tcp/http] succeeded!\n"
  Dec 31 07:20:02.210: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:20:02.210: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-5428 exec execpod-affinityvbkcv -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.68.124.20:80/ ; done'
  Dec 31 07:20:02.325: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.124.20:80/\n"
  Dec 31 07:20:02.325: INFO: stdout: "\naffinity-clusterip-rsml6\naffinity-clusterip-rsml6\naffinity-clusterip-rsml6\naffinity-clusterip-rsml6\naffinity-clusterip-rsml6\naffinity-clusterip-rsml6\naffinity-clusterip-rsml6\naffinity-clusterip-rsml6\naffinity-clusterip-rsml6\naffinity-clusterip-rsml6\naffinity-clusterip-rsml6\naffinity-clusterip-rsml6\naffinity-clusterip-rsml6\naffinity-clusterip-rsml6\naffinity-clusterip-rsml6\naffinity-clusterip-rsml6"
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Received response from host: affinity-clusterip-rsml6
  Dec 31 07:20:02.325: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-clusterip in namespace services-5428, will wait for the garbage collector to delete the pods @ 12/31/23 07:20:02.33
  Dec 31 07:20:02.385: INFO: Deleting ReplicationController affinity-clusterip took: 1.916422ms
  Dec 31 07:20:02.485: INFO: Terminating ReplicationController affinity-clusterip pods took: 100.207228ms
  E1231 07:20:03.113928      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:04.114788      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:05.115325      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:20:05.694: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-5428" for this suite. @ 12/31/23 07:20:05.696
• [9.737 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:125
  STEP: Creating a kubernetes client @ 12/31/23 07:20:05.699
  Dec 31 07:20:05.699: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename configmap @ 12/31/23 07:20:05.699
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:20:05.708
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:20:05.709
  STEP: Creating configMap with name configmap-test-upd-06cd2094-0130-413a-ae25-7fa3faffe7a5 @ 12/31/23 07:20:05.712
  STEP: Creating the pod @ 12/31/23 07:20:05.714
  E1231 07:20:06.115510      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:07.116578      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Updating configmap configmap-test-upd-06cd2094-0130-413a-ae25-7fa3faffe7a5 @ 12/31/23 07:20:07.725
  STEP: waiting to observe update in volume @ 12/31/23 07:20:07.727
  E1231 07:20:08.117537      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:09.117626      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:10.118494      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:11.118889      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:12.119032      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:13.119172      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:14.119918      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:15.120020      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:16.120815      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:17.121706      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:18.122717      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:19.122868      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:20.123143      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:21.123316      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:22.124086      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:23.124175      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:24.124366      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:25.125403      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:26.126327      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:27.126545      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:28.126750      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:29.126879      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:30.126937      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:31.127065      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:32.127237      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:33.128281      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:34.129219      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:35.129320      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:36.130283      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:37.130516      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:38.130906      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:39.131029      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:40.131650      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:41.131749      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:42.132364      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:43.132564      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:44.133466      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:45.133681      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:46.134711      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:47.134979      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:48.134992      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:49.135127      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:50.135311      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:51.136258      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:52.136597      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:53.136731      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:54.137717      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:55.138085      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:56.138595      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:57.138664      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:58.139328      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:20:59.139439      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:00.139521      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:01.139778      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:02.140559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:03.140662      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:04.141068      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:05.141068      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:06.141205      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:07.141555      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:08.142170      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:09.142649      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:10.143004      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:11.143280      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:12.143350      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:13.143509      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:21:13.886: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-704" for this suite. @ 12/31/23 07:21:13.887
• [68.190 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance] [sig-apps, Serial, Conformance]
test/e2e/apps/daemon_set.go:177
  STEP: Creating a kubernetes client @ 12/31/23 07:21:13.89
  Dec 31 07:21:13.890: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename daemonsets @ 12/31/23 07:21:13.89
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:21:13.896
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:21:13.897
  STEP: Creating simple DaemonSet "daemon-set" @ 12/31/23 07:21:13.905
  STEP: Check that daemon pods launch on every node of the cluster. @ 12/31/23 07:21:13.908
  Dec 31 07:21:13.914: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 07:21:13.914: INFO: Node 10.255.0.202 is running 0 daemon pod, expected 1
  E1231 07:21:14.144339      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:21:14.912: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Dec 31 07:21:14.912: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Stop a daemon pod, check that the daemon pod is revived. @ 12/31/23 07:21:14.913
  Dec 31 07:21:14.919: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Dec 31 07:21:14.919: INFO: Node worker2 is running 0 daemon pod, expected 1
  E1231 07:21:15.145112      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:21:15.920: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Dec 31 07:21:15.920: INFO: Node worker2 is running 0 daemon pod, expected 1
  E1231 07:21:16.145838      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:21:16.920: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 3
  Dec 31 07:21:16.920: INFO: Number of running nodes: 3, number of available pods: 3 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 12/31/23 07:21:16.921
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-8452, will wait for the garbage collector to delete the pods @ 12/31/23 07:21:16.921
  Dec 31 07:21:16.974: INFO: Deleting DaemonSet.extensions daemon-set took: 1.977259ms
  Dec 31 07:21:17.075: INFO: Terminating DaemonSet.extensions daemon-set pods took: 101.089651ms
  E1231 07:21:17.145890      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:18.146324      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:21:18.586: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Dec 31 07:21:18.586: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Dec 31 07:21:18.587: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"30679"},"items":null}

  Dec 31 07:21:18.588: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"30679"},"items":null}

  Dec 31 07:21:18.593: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-8452" for this suite. @ 12/31/23 07:21:18.594
• [4.706 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-api-machinery] Servers with support for API chunking should support continue listing from the last key if the original version has been compacted away, though the list is inconsistent [Slow] [Conformance] [sig-api-machinery, Slow, Conformance]
test/e2e/apimachinery/chunking.go:144
  STEP: Creating a kubernetes client @ 12/31/23 07:21:18.596
  Dec 31 07:21:18.596: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename chunking @ 12/31/23 07:21:18.597
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:21:18.603
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:21:18.604
  STEP: creating a large number of resources @ 12/31/23 07:21:18.605
  E1231 07:21:19.146377      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:20.146768      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:21.147042      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:22.147215      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:23.148176      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:24.148675      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:25.149440      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:26.149605      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:27.150185      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:28.150223      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:29.151150      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:30.151356      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:31.152011      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:32.152148      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:33.152339      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:34.153220      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:35.154182      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:36.154521      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: retrieving the first page @ 12/31/23 07:21:36.299
  Dec 31 07:21:36.349: INFO: Retrieved 40/40 results with rv 31159 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9
  STEP: retrieving the second page until the token expires @ 12/31/23 07:21:36.349
  E1231 07:21:37.155069      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:38.156072      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:39.156406      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:40.156695      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:41.157498      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:42.157681      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:43.157802      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:44.157889      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:45.158329      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:46.158451      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:47.158651      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:48.159111      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:49.159290      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:50.160191      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:51.160834      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:52.160916      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:53.161039      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:54.161284      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:55.161514      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:56.162360      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:21:56.351: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:21:57.162606      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:58.163458      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:21:59.163513      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:00.163559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:01.164509      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:02.165548      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:03.165616      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:04.165738      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:05.165826      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:06.166239      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:07.166371      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:08.166494      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:09.166615      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:10.166694      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:11.166819      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:12.166973      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:13.168005      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:14.168079      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:15.168556      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:16.168678      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:22:16.352: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:22:17.169290      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:18.170194      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:19.170329      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:20.170458      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:21.170695      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:22.170855      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:23.170976      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:24.171102      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:25.171222      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:26.171342      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:27.171971      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:28.172560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:29.173111      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:30.173187      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:31.173831      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:32.174010      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:33.174137      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:34.174259      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:35.175327      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:36.176242      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:22:36.351: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:22:37.176411      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:38.176537      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:39.176662      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:40.176799      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:41.177025      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:42.177239      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:43.178156      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:44.178243      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:45.178365      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:46.178448      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:47.178657      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:48.178887      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:49.179010      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:50.179131      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:51.180085      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:52.180310      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:53.180558      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:54.180685      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:55.180808      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:56.180969      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:22:56.352: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:22:57.181051      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:58.181167      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:22:59.181290      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:00.181415      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:01.181465      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:02.181630      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:03.181755      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:04.181839      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:05.181913      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:06.182058      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:07.182290      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:08.182418      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:09.182502      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:10.182617      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:11.182830      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:12.183766      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:13.184561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:14.184644      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:15.184999      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:16.185118      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:23:16.351: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:23:17.185196      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:18.185317      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:19.185396      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:20.185518      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:21.185981      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:22.186218      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:23.186347      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:24.187375      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:25.187498      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:26.188572      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:27.188719      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:28.188767      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:29.188836      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:30.188959      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:31.189268      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:32.190342      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:33.190425      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:34.190657      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:35.190737      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:36.190990      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:23:36.352: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:23:37.191344      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:38.191501      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:39.192568      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:40.193091      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:41.193313      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:42.193541      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:43.193668      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:44.193840      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:45.193966      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:46.194052      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:47.194198      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:48.194325      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:49.194451      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:50.194576      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:51.194753      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:52.195546      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:53.196561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:54.196957      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:55.196927      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:56.197269      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:23:56.351: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:23:57.197676      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:58.197790      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:23:59.197920      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:00.198038      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:01.198249      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:02.198501      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:03.199365      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:04.199494      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:05.200554      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:06.200676      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:07.201571      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:08.201826      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:09.201977      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:10.202096      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:11.202416      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:12.202491      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:13.202618      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:14.202740      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:15.202873      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:16.203718      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:24:16.352: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:24:17.204033      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:18.204533      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:19.204653      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:20.204775      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:21.204793      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:22.204969      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:23.205055      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:24.205129      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:25.205210      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:26.205284      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:27.205367      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:28.205991      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:29.206734      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:30.206820      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:31.207855      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:32.208555      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:33.208640      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:34.208730      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:35.208848      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:36.208932      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:24:36.352: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:24:37.209679      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:38.209747      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:39.209867      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:40.210597      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:41.210856      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:42.211018      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:43.211143      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:44.211268      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:45.211384      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:46.211513      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:47.212559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:48.212671      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:49.212788      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:50.212910      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:51.213136      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:52.213219      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:53.213304      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:54.214229      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:55.214350      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:56.214467      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:24:56.351: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:24:57.214552      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:58.215303      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:24:59.215468      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:00.215497      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:01.215796      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:02.216568      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:03.216683      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:04.216803      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:05.216889      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:06.217157      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:07.217390      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:08.217517      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:09.217643      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:10.217767      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:11.218010      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:12.218226      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:13.218520      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:14.218654      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:15.218778      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:16.218899      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:25:16.352: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:25:17.219181      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:18.219269      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:19.219396      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:20.219509      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:21.219791      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:22.220566      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:23.220686      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:24.220777      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:25.220908      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:26.221032      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:27.221260      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:28.221377      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:29.222384      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:30.222467      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:31.222826      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:32.222983      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:33.223106      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:34.223461      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:35.223506      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:36.224564      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:25:36.351: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:25:37.225619      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:38.226326      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:39.226447      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:40.227023      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:41.227315      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:42.227495      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:43.228555      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:44.228676      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:45.228799      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:46.228924      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:47.229146      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:48.229268      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:49.229799      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:50.229921      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:51.230139      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:52.230374      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:53.230499      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:54.230946      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:55.230803      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:56.231721      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:25:56.352: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:25:57.232553      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:58.232669      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:25:59.232793      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:00.233221      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:01.234157      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:02.234272      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:03.234331      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:04.234626      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:05.234714      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:06.234842      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:07.234999      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:08.235412      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:09.235496      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:10.235574      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:11.235877      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:12.236177      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:13.236559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:14.236679      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:15.237614      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:16.237729      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:26:16.352: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:26:17.238560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:18.238679      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:19.238797      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:20.238915      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:21.239824      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:22.240530      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:23.240648      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:24.240744      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:25.240866      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:26.240956      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:27.241178      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:28.241298      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:29.241416      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:30.241497      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:31.241520      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:32.241599      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:33.242407      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:34.242532      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:35.242609      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:36.242734      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:26:36.351: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:26:37.242792      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:38.242908      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:39.243201      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:40.243278      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:41.243498      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:42.244556      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:43.244638      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:44.244771      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:45.244837      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:46.244956      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:47.245052      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:48.245104      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:49.245188      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:50.245305      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:51.245866      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:52.246095      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:53.246217      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:54.246340      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:55.246422      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:56.246706      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:26:56.352: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:26:57.246761      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:58.246890      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:26:59.247014      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:00.247135      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:01.247355      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:02.247493      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:03.247574      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:04.248566      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:05.248891      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:06.248977      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:07.249220      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:08.249299      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:09.249419      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:10.249507      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:11.250544      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:12.250774      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:13.250895      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:14.250977      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:15.251100      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:16.251219      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:27:16.351: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:27:17.251308      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:18.251389      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:19.251497      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:20.251586      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:21.251863      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:22.252551      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:23.252686      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:24.252763      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:25.253751      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:26.254035      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:27.254124      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:28.254251      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:29.254389      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:30.254510      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:31.254790      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:32.255830      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:33.256557      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:34.256680      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:35.256807      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:36.256934      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:27:36.352: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:27:37.257448      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:38.257579      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:39.257703      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:40.257828      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:41.258050      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:42.258268      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:43.258386      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:44.258510      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:45.258871      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:46.258991      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:47.259221      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:48.259343      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:49.259499      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:50.259504      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:51.259793      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:52.260557      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:53.260695      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:54.260978      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:55.260977      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:56.261243      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:27:56.351: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:27:57.262272      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:58.262396      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:27:59.262474      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:00.263355      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:01.263919      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:02.264590      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:03.265578      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:04.266164      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:05.266285      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:06.266405      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:07.266989      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:08.267079      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:09.267204      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:10.267325      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:11.267552      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:12.267635      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:13.267722      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:14.267805      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:15.268561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:16.268682      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:28:16.352: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:28:17.269210      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:18.269333      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:19.269461      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:20.269576      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:21.269853      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:22.270008      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:23.270745      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:24.270825      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:25.270940      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:26.271063      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:27.271293      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:28.271426      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:29.271499      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:30.272568      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:31.272989      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:32.273215      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:33.273335      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:34.273457      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:35.273580      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:36.273698      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:28:36.351: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:28:37.273752      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:38.273871      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:39.273998      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:40.274073      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:41.274226      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:42.274304      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:43.274648      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:44.274718      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:45.274832      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:46.275175      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:47.276114      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:48.276196      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:49.276625      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:50.276747      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:51.276907      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:52.277142      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:53.277279      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:54.277362      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:55.277487      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:56.277539      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:28:56.352: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:28:57.277955      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:58.278079      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:28:59.278206      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:00.278324      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:01.278574      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:02.278753      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:03.278872      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:04.278993      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:05.279083      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:06.279201      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:07.279440      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:08.279498      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:09.280559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:10.280686      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:11.281699      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:12.281856      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:13.281978      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:14.282093      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:15.282217      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:16.282333      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:29:16.351: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:29:17.282657      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:18.282780      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:19.282897      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:20.283120      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:21.283929      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:22.284015      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:23.284089      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:24.284164      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:25.284207      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:26.284554      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:27.284635      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:28.284755      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:29.284838      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:30.284929      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:31.285087      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:32.285167      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:33.285296      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:34.285425      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:35.285545      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:36.285667      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:29:36.352: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:29:37.286367      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:38.286483      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:39.286602      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:40.287554      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:41.287833      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:42.288560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:43.288675      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:44.289447      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:45.289573      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:46.289698      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:47.289933      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:48.290055      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:49.290712      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:50.291334      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:51.291492      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:52.291579      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:53.292587      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:54.292806      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:55.292867      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:56.293208      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:29:56.351: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:29:57.293365      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:58.293486      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:29:59.293612      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:00.293947      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:01.294118      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:02.294341      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:03.294476      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:04.294605      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:05.294725      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:06.294843      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:07.295011      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:08.295138      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:09.296088      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:10.296557      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:11.296833      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:12.297870      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:13.297954      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:14.298077      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:15.298201      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:16.298280      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:30:16.351: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:30:17.298710      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:18.298790      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:19.298873      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:20.299234      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:21.299388      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:22.299500      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:23.299608      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:24.300558      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:25.300683      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:26.300808      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:27.300876      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:28.300916      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:29.301044      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:30.301925      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:31.302084      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:32.302270      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:33.302386      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:34.302474      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:35.302550      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:36.302668      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:30:36.352: INFO: Token eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzExNTksInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9 has not expired yet
  E1231 07:30:37.302999      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:38.303124      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:39.303205      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:40.303288      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:41.303468      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:42.303508      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:43.303583      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:44.304559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:45.304640      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:46.304760      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:47.304831      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:48.304944      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:49.305033      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:50.305118      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:51.305279      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:52.305511      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:53.306345      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:54.307096      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:55.307214      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:56.307334      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:30:56.351: INFO: got error The provided continue parameter is too old to display a consistent list result. You can start a new list without the continue parameter, or use the continue token in this response to retrieve the remainder of the results. Continuing with the provided token results in an inconsistent list - objects that were created, modified, or deleted between the time the first chunk was returned and now may show up in the list.
  Dec 31 07:30:56.351: INFO: Retrieved inconsistent continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6LTEsInN0YXJ0IjoidGVtcGxhdGUtMDAzOVx1MDAwMCJ9
  STEP: retrieving the second page again with the token received with the error message @ 12/31/23 07:30:56.351
  STEP: retrieving all remaining pages @ 12/31/23 07:30:56.353
  Dec 31 07:30:56.355: INFO: Retrieved 40/40 results with rv 32023 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzIwMjMsInN0YXJ0IjoidGVtcGxhdGUtMDExOVx1MDAwMCJ9
  Dec 31 07:30:56.356: INFO: Retrieved 40/40 results with rv 32023 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzIwMjMsInN0YXJ0IjoidGVtcGxhdGUtMDE1OVx1MDAwMCJ9
  Dec 31 07:30:56.358: INFO: Retrieved 40/40 results with rv 32023 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzIwMjMsInN0YXJ0IjoidGVtcGxhdGUtMDE5OVx1MDAwMCJ9
  Dec 31 07:30:56.359: INFO: Retrieved 40/40 results with rv 32023 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzIwMjMsInN0YXJ0IjoidGVtcGxhdGUtMDIzOVx1MDAwMCJ9
  Dec 31 07:30:56.361: INFO: Retrieved 40/40 results with rv 32023 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzIwMjMsInN0YXJ0IjoidGVtcGxhdGUtMDI3OVx1MDAwMCJ9
  Dec 31 07:30:56.363: INFO: Retrieved 40/40 results with rv 32023 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzIwMjMsInN0YXJ0IjoidGVtcGxhdGUtMDMxOVx1MDAwMCJ9
  Dec 31 07:30:56.364: INFO: Retrieved 40/40 results with rv 32023 and continue eyJ2IjoibWV0YS5rOHMuaW8vdjEiLCJydiI6MzIwMjMsInN0YXJ0IjoidGVtcGxhdGUtMDM1OVx1MDAwMCJ9
  Dec 31 07:30:56.366: INFO: Retrieved 40/40 results with rv 32023 and continue 
  Dec 31 07:30:56.366: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "chunking-9594" for this suite. @ 12/31/23 07:30:56.367
• [577.773 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:276
  STEP: Creating a kubernetes client @ 12/31/23 07:30:56.369
  Dec 31 07:30:56.369: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename crd-publish-openapi @ 12/31/23 07:30:56.37
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:30:56.376
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:30:56.377
  STEP: CRs in different groups (two CRDs) show up in OpenAPI documentation @ 12/31/23 07:30:56.379
  Dec 31 07:30:56.379: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  E1231 07:30:57.308219      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:30:57.538: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  E1231 07:30:58.309237      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:30:59.309242      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:00.309642      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:01.310196      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:31:02.202: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-4218" for this suite. @ 12/31/23 07:31:02.206
• [5.840 seconds]
------------------------------
SS
------------------------------
[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance] [sig-instrumentation, Conformance]
test/e2e/instrumentation/events.go:98
  STEP: Creating a kubernetes client @ 12/31/23 07:31:02.21
  Dec 31 07:31:02.210: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename events @ 12/31/23 07:31:02.21
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:31:02.217
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:31:02.218
  STEP: creating a test event @ 12/31/23 07:31:02.219
  STEP: listing events in all namespaces @ 12/31/23 07:31:02.222
  STEP: listing events in test namespace @ 12/31/23 07:31:02.223
  STEP: listing events with field selection filtering on source @ 12/31/23 07:31:02.224
  STEP: listing events with field selection filtering on reportingController @ 12/31/23 07:31:02.225
  STEP: getting the test event @ 12/31/23 07:31:02.226
  STEP: patching the test event @ 12/31/23 07:31:02.226
  STEP: getting the test event @ 12/31/23 07:31:02.229
  STEP: updating the test event @ 12/31/23 07:31:02.23
  STEP: getting the test event @ 12/31/23 07:31:02.232
  STEP: deleting the test event @ 12/31/23 07:31:02.233
  STEP: listing events in all namespaces @ 12/31/23 07:31:02.235
  STEP: listing events in test namespace @ 12/31/23 07:31:02.236
  Dec 31 07:31:02.237: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-7718" for this suite. @ 12/31/23 07:31:02.238
• [0.030 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:68
  STEP: Creating a kubernetes client @ 12/31/23 07:31:02.24
  Dec 31 07:31:02.240: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename secrets @ 12/31/23 07:31:02.241
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:31:02.246
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:31:02.247
  STEP: Creating secret with name secret-test-dbf4ec4a-e7f6-4579-ab78-baf30abd21e5 @ 12/31/23 07:31:02.248
  STEP: Creating a pod to test consume secrets @ 12/31/23 07:31:02.25
  E1231 07:31:02.310298      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:03.310541      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:04.311023      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:05.311120      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:31:06.258
  Dec 31 07:31:06.259: INFO: Trying to get logs from node worker3 pod pod-secrets-df219d36-8f73-495a-940e-b8ce5f62865b container secret-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 07:31:06.267
  Dec 31 07:31:06.273: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-6681" for this suite. @ 12/31/23 07:31:06.274
• [4.035 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl expose should create services for rc [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1538
  STEP: Creating a kubernetes client @ 12/31/23 07:31:06.276
  Dec 31 07:31:06.276: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 07:31:06.277
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:31:06.283
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:31:06.284
  STEP: creating Agnhost RC @ 12/31/23 07:31:06.287
  Dec 31 07:31:06.287: INFO: namespace kubectl-27
  Dec 31 07:31:06.287: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-27 create -f -'
  E1231 07:31:06.311507      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:31:06.359: INFO: stderr: ""
  Dec 31 07:31:06.359: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 12/31/23 07:31:06.359
  E1231 07:31:07.311921      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:31:07.361: INFO: Selector matched 1 pods for map[app:agnhost]
  Dec 31 07:31:07.361: INFO: Found 0 / 1
  E1231 07:31:08.312587      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:31:08.362: INFO: Selector matched 1 pods for map[app:agnhost]
  Dec 31 07:31:08.362: INFO: Found 1 / 1
  Dec 31 07:31:08.362: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  Dec 31 07:31:08.363: INFO: Selector matched 1 pods for map[app:agnhost]
  Dec 31 07:31:08.363: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Dec 31 07:31:08.363: INFO: wait on agnhost-primary startup in kubectl-27 
  Dec 31 07:31:08.363: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-27 logs agnhost-primary-w9drs agnhost-primary'
  Dec 31 07:31:08.404: INFO: stderr: ""
  Dec 31 07:31:08.404: INFO: stdout: "Paused\n"
  STEP: exposing RC @ 12/31/23 07:31:08.404
  Dec 31 07:31:08.404: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-27 expose rc agnhost-primary --name=rm2 --port=1234 --target-port=6379'
  Dec 31 07:31:08.449: INFO: stderr: ""
  Dec 31 07:31:08.450: INFO: stdout: "service/rm2 exposed\n"
  Dec 31 07:31:08.452: INFO: Service rm2 in namespace kubectl-27 found.
  E1231 07:31:09.313007      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:10.313726      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: exposing service @ 12/31/23 07:31:10.455
  Dec 31 07:31:10.455: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-27 expose service rm2 --name=rm3 --port=2345 --target-port=6379'
  Dec 31 07:31:10.499: INFO: stderr: ""
  Dec 31 07:31:10.499: INFO: stdout: "service/rm3 exposed\n"
  Dec 31 07:31:10.500: INFO: Service rm3 in namespace kubectl-27 found.
  E1231 07:31:11.314768      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:12.315819      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:31:12.503: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-27" for this suite. @ 12/31/23 07:31:12.505
• [6.231 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:1015
  STEP: Creating a kubernetes client @ 12/31/23 07:31:12.514
  Dec 31 07:31:12.514: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename resourcequota @ 12/31/23 07:31:12.515
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:31:12.521
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:31:12.523
  STEP: Creating resourceQuota "e2e-rq-status-6tkcg" @ 12/31/23 07:31:12.526
  Dec 31 07:31:12.529: INFO: Resource quota "e2e-rq-status-6tkcg" reports spec: hard cpu limit of 500m
  Dec 31 07:31:12.529: INFO: Resource quota "e2e-rq-status-6tkcg" reports spec: hard memory limit of 500Mi
  STEP: Updating resourceQuota "e2e-rq-status-6tkcg" /status @ 12/31/23 07:31:12.529
  STEP: Confirm /status for "e2e-rq-status-6tkcg" resourceQuota via watch @ 12/31/23 07:31:12.532
  Dec 31 07:31:12.533: INFO: observed resourceQuota "e2e-rq-status-6tkcg" in namespace "resourcequota-4968" with hard status: v1.ResourceList(nil)
  Dec 31 07:31:12.533: INFO: Found resourceQuota "e2e-rq-status-6tkcg" in namespace "resourcequota-4968" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:500, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500m", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:524288000, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500Mi", Format:"BinarySI"}}
  Dec 31 07:31:12.533: INFO: ResourceQuota "e2e-rq-status-6tkcg" /status was updated
  STEP: Patching hard spec values for cpu & memory @ 12/31/23 07:31:12.534
  Dec 31 07:31:12.536: INFO: Resource quota "e2e-rq-status-6tkcg" reports spec: hard cpu limit of 1
  Dec 31 07:31:12.536: INFO: Resource quota "e2e-rq-status-6tkcg" reports spec: hard memory limit of 1Gi
  STEP: Patching "e2e-rq-status-6tkcg" /status @ 12/31/23 07:31:12.536
  STEP: Confirm /status for "e2e-rq-status-6tkcg" resourceQuota via watch @ 12/31/23 07:31:12.539
  Dec 31 07:31:12.539: INFO: observed resourceQuota "e2e-rq-status-6tkcg" in namespace "resourcequota-4968" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:500, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500m", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:524288000, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500Mi", Format:"BinarySI"}}
  Dec 31 07:31:12.539: INFO: Found resourceQuota "e2e-rq-status-6tkcg" in namespace "resourcequota-4968" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}
  Dec 31 07:31:12.539: INFO: ResourceQuota "e2e-rq-status-6tkcg" /status was patched
  STEP: Get "e2e-rq-status-6tkcg" /status @ 12/31/23 07:31:12.539
  Dec 31 07:31:12.541: INFO: Resourcequota "e2e-rq-status-6tkcg" reports status: hard cpu of 1
  Dec 31 07:31:12.541: INFO: Resourcequota "e2e-rq-status-6tkcg" reports status: hard memory of 1Gi
  STEP: Repatching "e2e-rq-status-6tkcg" /status before checking Spec is unchanged @ 12/31/23 07:31:12.542
  Dec 31 07:31:12.544: INFO: Resourcequota "e2e-rq-status-6tkcg" reports status: hard cpu of 2
  Dec 31 07:31:12.544: INFO: Resourcequota "e2e-rq-status-6tkcg" reports status: hard memory of 2Gi
  Dec 31 07:31:12.545: INFO: Found resourceQuota "e2e-rq-status-6tkcg" in namespace "resourcequota-4968" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}
  Dec 31 07:31:12.546: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3f0b0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3f0e0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3f110), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:31:13.316863      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:14.317696      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:15.317842      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:16.318602      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:17.318771      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:31:17.549: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457b260), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457b290), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457b2c0), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:31:18.319514      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:19.320574      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:20.320651      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:21.320951      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:22.321182      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:31:22.546: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003efef30), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003efef78), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003efefa8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:31:23.321757      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:24.322377      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:25.322508      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:26.322636      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:27.322802      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:31:27.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457b638), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457b668), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457b698), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:31:28.323503      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:29.323592      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:30.324556      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:31.324850      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:32.325022      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:31:32.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3f428), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3f458), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3f488), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:31:33.325109      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:34.325239      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:35.325287      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:36.326122      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:37.326263      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:31:37.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003eff1b8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003eff200), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003eff230), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:31:38.327017      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:39.327143      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:40.327263      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:41.327437      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:42.327508      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:31:42.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457ba40), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457ba88), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457bad0), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:31:43.328565      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:44.328693      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:45.328818      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:46.329298      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:47.329521      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:31:47.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3f7d0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3f800), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3f830), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:31:48.330018      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:49.330934      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:50.331058      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:51.331619      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:52.332559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:31:52.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457bda0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457be18), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457be48), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:31:53.333285      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:54.333404      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:55.333852      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:56.334150      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:57.334371      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:31:57.546: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003eff710), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003eff740), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003eff770), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:31:58.334782      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:31:59.334914      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:00.335040      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:01.335202      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:02.335425      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:32:02.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3fbc0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3fbf0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3fc20), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:32:03.335521      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:04.336563      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:05.337120      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:06.337217      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:07.337443      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:32:07.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003effb18), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003effb48), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003effb78), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:32:08.337524      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:09.337609      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:10.338502      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:11.339491      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:12.340554      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:32:12.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3fe48), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3fe78), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3fea8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:32:13.340628      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:14.340716      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:15.340835      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:16.340917      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:17.341141      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:32:17.546: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003effda0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003effdd0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003effe00), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:32:18.341236      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:19.341360      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:20.341485      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:21.341661      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:22.342577      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:32:22.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0040da048), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0040da090), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0040da120), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:32:23.343081      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:24.343201      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:25.343326      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:26.343454      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:27.343498      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:32:27.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0040dab28), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0040dabb8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0040dac30), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:32:28.344560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:29.344965      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:30.345084      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:31.345253      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:32.346271      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:32:32.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0040db338), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0040db398), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0040db3f8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:32:33.346350      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:34.346472      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:35.346593      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:36.346681      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:37.346837      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:32:37.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0040dba58), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0040dbaa0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0040dbb30), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:32:38.347428      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:39.347505      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:40.348559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:41.348636      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:42.348712      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:32:42.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c000), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c030), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c060), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:32:43.348802      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:44.348923      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:45.349011      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:46.349130      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:47.349207      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:32:47.546: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c330), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c360), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c390), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:32:48.349851      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:49.350044      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:50.350135      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:51.350325      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:52.350560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:32:52.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a405b8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a405e8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a40630), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:32:53.351173      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:54.351258      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:55.351391      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:56.351489      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:57.352562      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:32:57.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c648), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c690), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c6c0), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:32:58.352636      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:32:59.352730      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:00.352855      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:01.353024      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:02.353243      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:33:02.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c948), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c990), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c9c0), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:33:03.354028      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:04.354159      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:05.354252      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:06.355212      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:07.355456      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:33:07.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a40a80), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a40ac8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a40af8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:33:08.355618      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:09.355700      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:10.356561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:11.356748      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:12.356871      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:33:12.546: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e67f8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e6840), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e6870), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:33:13.357056      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:14.356977      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:15.357202      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:16.357318      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:17.357541      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:33:17.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e6240), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e62d0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e6318), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:33:18.357979      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:19.358082      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:20.358221      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:21.358381      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:22.358604      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:33:22.548: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e65a0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e65e8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e6960), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:33:23.359242      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:24.359363      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:25.359495      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:26.360559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:27.360782      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:33:27.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a40270), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a402a0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a402d0), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:33:28.361200      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:29.361333      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:30.361454      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:31.362315      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:32.362398      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:33:32.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c330), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c360), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c390), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:33:33.363303      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:34.363439      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:35.363520      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:36.364559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:37.364638      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:33:37.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a40600), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a40648), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a40678), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:33:38.364927      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:39.365906      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:40.366034      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:41.366213      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:42.366432      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:33:42.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e6dc8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e6df8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e6e28), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:33:43.366941      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:44.367029      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:45.367151      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:46.367334      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:47.367503      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:33:47.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a40948), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a40978), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a409d8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:33:48.368039      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:49.368561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:50.368640      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:51.368724      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:52.368881      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:33:52.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c858), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c888), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432c8d0), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:33:53.369470      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:54.369592      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:55.369677      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:56.369772      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:57.369937      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:33:57.548: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432ca98), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432cac8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432caf8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:33:58.370760      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:33:59.370893      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:00.371016      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:01.371187      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:02.371413      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:34:02.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432cd68), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432cd98), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432cdc8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:34:03.371848      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:04.372555      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:05.372694      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:06.372892      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:07.373118      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:34:07.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a40f90), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a40fc0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a40ff0), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:34:08.373201      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:09.373286      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:10.373414      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:11.373603      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:12.374444      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:34:12.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a411e8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a41218), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a41248), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:34:13.374925      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:14.375006      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:15.375734      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:16.376553      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:17.376769      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:34:17.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a41560), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a41590), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a415d8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:34:18.377343      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:19.377464      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:20.377584      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:21.377794      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:22.377956      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:34:22.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e7578), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e75c0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e7650), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:34:23.378462      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:24.378585      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:25.378705      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:26.378793      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:27.378954      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:34:27.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a417b8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a417e8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a41830), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:34:28.379496      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:29.380558      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:30.380679      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:31.380762      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:32.380940      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:34:32.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e7b48), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e7b78), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc0045e7ba8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:34:33.381675      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:34.381793      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:35.382476      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:36.382586      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:37.382802      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:34:37.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432d350), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432d380), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432d3b0), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:34:38.383494      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:39.384602      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:40.384915      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:41.385147      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:42.385348      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:34:42.546: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432d620), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432d650), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432d698), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:34:43.386283      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:44.386368      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:45.387427      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:46.387505      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:47.388571      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:34:47.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432d9b0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432d9e0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432da28), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:34:48.389218      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:49.389300      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:50.389425      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:51.389954      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:52.390040      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:34:52.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b38060), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b380f0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b38180), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:34:53.390565      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:54.390694      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:55.391199      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:56.391286      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:57.391496      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:34:57.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b38768), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b38810), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b38888), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:34:58.392555      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:34:59.392676      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:00.392798      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:01.393724      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:02.393887      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:35:02.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432ddd0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432de00), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00432de60), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:35:03.394379      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:04.394506      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:05.394624      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:06.394743      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:07.394908      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:35:07.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a41dd0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a41e00), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc005a41e48), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:35:08.394930      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:09.395062      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:10.395148      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:11.396013      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:12.396552      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:35:12.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3e0f0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3e138), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3e168), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:35:13.396848      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:14.396814      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:15.396885      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:16.397011      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:17.397227      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:35:17.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457a198), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457a1e0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457a228), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:35:18.397838      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:19.397970      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:20.398094      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:21.399059      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:22.399132      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:35:22.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3e210), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3e258), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3e288), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:35:23.399498      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:24.400564      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:25.400649      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:26.400773      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:27.400910      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:35:27.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3e528), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3e588), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3e5b8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:35:28.401460      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:29.402464      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:30.402547      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:31.403158      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:32.403242      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:35:32.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003efe228), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003efe258), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003efe288), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:35:33.403492      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:34.404561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:35.405114      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:36.405596      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:37.405812      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:35:37.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003efe5b8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003efe5e8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003efe630), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:35:38.406447      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:39.406573      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:40.406696      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:41.406717      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:42.407103      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:35:42.548: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3e9c0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3e9f0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3ea20), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:35:43.407496      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:44.408559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:45.409380      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:46.409457      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:47.409738      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:35:47.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3ec00), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3ec30), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3ec60), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:35:48.410240      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:49.410362      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:50.410487      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:51.410568      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:52.411168      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:35:52.546: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3ef48), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3ef78), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3efa8), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:35:53.411511      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:54.412561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:55.412648      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:56.412738      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:57.412926      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:35:57.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457a8a0), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457a8d0), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc00457a900), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:35:58.413013      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:35:59.413215      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:00.413340      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:01.413514      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:02.414351      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:36:02.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3f260), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3f290), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc004b3f2c0), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:36:03.414433      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:04.415396      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:05.415491      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:06.416561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:07.416640      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:36:07.547: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec and Status does not match: &v1.ResourceQuota{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"e2e-rq-status-6tkcg", GenerateName:"", Namespace:"resourcequota-4968", SelfLink:"", UID:"29dda0fc-24e8-4208-98ac-036dc23e9a4e", ResourceVersion:"32575", Generation:0, CreationTimestamp:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"e2e-rq-label":"e2e-rq-status-6tkcg"}, Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003efec78), Subresource:""}, v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003efeca8), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kube-controller-manager", Operation:"Update", APIVersion:"v1", Time:time.Date(2023, time.December, 31, 7, 31, 12, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc003efecf0), Subresource:"status"}}}, Spec:v1.ResourceQuotaSpec{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}, Scopes:[]v1.ResourceQuotaScope(nil), ScopeSelector:(*v1.ScopeSelector)(nil)}, Status:v1.ResourceQuotaStatus{Hard:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}, Used:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:0, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"0", Format:"DecimalSI"}}}}
  E1231 07:36:08.417104      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:09.417233      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:10.417357      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:11.418073      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:12.418309      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:36:12.546: INFO: ResourceQuota "e2e-rq-status-6tkcg" Spec was unchanged and /status reset
  Dec 31 07:36:12.546: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-4968" for this suite. @ 12/31/23 07:36:12.548
• [300.036 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance] [sig-storage, Conformance]
test/e2e/storage/csi_inline.go:50
  STEP: Creating a kubernetes client @ 12/31/23 07:36:12.551
  Dec 31 07:36:12.551: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename csiinlinevolumes @ 12/31/23 07:36:12.551
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:36:12.558
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:36:12.559
  STEP: creating @ 12/31/23 07:36:12.561
  STEP: getting @ 12/31/23 07:36:12.568
  STEP: listing in namespace @ 12/31/23 07:36:12.569
  STEP: patching @ 12/31/23 07:36:12.57
  STEP: deleting @ 12/31/23 07:36:12.574
  Dec 31 07:36:12.581: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csiinlinevolumes-6706" for this suite. @ 12/31/23 07:36:12.583
• [0.034 seconds]
------------------------------
SS
------------------------------
[sig-apps] Deployment deployment should support rollover [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:132
  STEP: Creating a kubernetes client @ 12/31/23 07:36:12.585
  Dec 31 07:36:12.585: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename deployment @ 12/31/23 07:36:12.585
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:36:12.591
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:36:12.592
  Dec 31 07:36:12.598: INFO: Pod name rollover-pod: Found 0 pods out of 1
  E1231 07:36:13.418797      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:14.419080      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:15.419216      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:16.419297      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:17.419518      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:36:17.601: INFO: Pod name rollover-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 12/31/23 07:36:17.601
  Dec 31 07:36:17.601: INFO: Waiting for pods owned by replica set "test-rollover-controller" to become ready
  E1231 07:36:18.420561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:19.420590      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:36:19.603: INFO: Creating deployment "test-rollover-deployment"
  Dec 31 07:36:19.607: INFO: Make sure deployment "test-rollover-deployment" performs scaling operations
  E1231 07:36:20.420622      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:21.421215      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:36:21.611: INFO: Check revision of new replica set for deployment "test-rollover-deployment"
  Dec 31 07:36:21.613: INFO: Ensure that both replica sets have 1 created replica
  Dec 31 07:36:21.615: INFO: Rollover old replica sets for deployment "test-rollover-deployment" with new image update
  Dec 31 07:36:21.619: INFO: Updating deployment test-rollover-deployment
  Dec 31 07:36:21.619: INFO: Wait deployment "test-rollover-deployment" to be observed by the deployment controller
  E1231 07:36:22.421832      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:23.421908      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:36:23.622: INFO: Wait for revision update of deployment "test-rollover-deployment" to 2
  Dec 31 07:36:23.625: INFO: Make sure deployment "test-rollover-deployment" is complete
  Dec 31 07:36:23.627: INFO: all replica sets need to contain the pod-template-hash label
  Dec 31 07:36:23.627: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 36, 19, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 36, 19, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 36, 23, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 36, 19, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E1231 07:36:24.422143      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:25.422226      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:36:25.631: INFO: all replica sets need to contain the pod-template-hash label
  Dec 31 07:36:25.631: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 36, 19, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 36, 19, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 36, 23, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 36, 19, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E1231 07:36:26.423306      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:27.423501      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:36:27.630: INFO: all replica sets need to contain the pod-template-hash label
  Dec 31 07:36:27.630: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 36, 19, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 36, 19, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 36, 23, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 36, 19, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E1231 07:36:28.424572      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:29.424802      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:36:29.631: INFO: all replica sets need to contain the pod-template-hash label
  Dec 31 07:36:29.631: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 36, 19, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 36, 19, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 36, 23, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 36, 19, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E1231 07:36:30.425861      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:31.426026      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:36:31.632: INFO: all replica sets need to contain the pod-template-hash label
  Dec 31 07:36:31.632: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 36, 19, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 36, 19, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 36, 23, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 36, 19, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E1231 07:36:32.427030      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:33.427160      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:36:33.631: INFO: 
  Dec 31 07:36:33.631: INFO: Ensure that both old replica sets have no replicas
  Dec 31 07:36:33.634: INFO: Deployment "test-rollover-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-rollover-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5697",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3580343a-2f2f-4eb3-9516-48757f09c351",
      ResourceVersion: (string) (len=5) "33219",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839604979,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604981,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000040  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000050  2c 22 66 3a 70 72 6f 67  72 65 73 73 44 65 61 64  |,"f:progressDead|
              00000060  6c 69 6e 65 53 65 63 6f  6e 64 73 22 3a 7b 7d 2c  |lineSeconds":{},|
              00000070  22 66 3a 72 65 70 6c 69  63 61 73 22 3a 7b 7d 2c  |"f:replicas":{},|
              00000080  22 66 3a 72 65 76 69 73  69 6f 6e 48 69 73 74 6f  |"f:revisionHisto|
              00000090  72 79 4c 69 6d 69 74 22  3a 7b 7d 2c 22 66 3a 73  |ryLimit":{},"f:s|
              000000a0  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 73  |elector":{},"f:s|
              000000b0  74 72 61 74 65 67 79 22  3a 7b 22 66 3a 72 6f 6c  |trategy":{"f:rol|
              000000c0  6c 69 6e 67 55 70 64 61  74 65 22 3a 7b 22 2e 22  |lingUpdate":{"."|
              000000d0  3a 7b 7d 2c 22 66 3a 6d  61 78 53 75 72 67 65 22  |:{},"f:maxSurge"|
              000000e0  3a 7b 7d 2c 22 66 3a 6d  61 78 55 6e 61 76 61 69  |:{},"f:maxUnavai|
              000000f0  6c 61 62 6c 65 22 3a 7b  7d 7d 2c 22 66 3a 74 79  |lable":{}},"f:ty|
              00000100  70 65 22 3a 7b 7d 7d 2c  22 66 3a 74 65 6d 70 6c  |pe":{}},"f:templ|
              00000110  61 74 65 22 3a 7b 22 66  3a 6d 65 74 61 64 61 74  |ate":{"f:metadat|
              00000120  61 22 3a 7b 22 66 3a 6c  61 62 65 6c 73 22 3a 7b  |a":{"f:labels":{|
              00000130  22 2e 22 3a 7b 7d 2c 22  66 3a 6e 61 6d 65 22 3a  |".":{},"f:name":|
              00000140  7b 7d 7d 7d 2c 22 66 3a  73 70 65 63 22 3a 7b 22  |{}}},"f:spec":{"|
              00000150  66 3a 63 6f 6e 74 61 69  6e 65 72 73 22 3a 7b 22  |f:containers":{"|
              00000160  6b 3a 7b 5c 22 6e 61 6d  65 5c 22 3a 5c 22 61 67  |k:{\"name\":\"ag|
              00000170  6e 68 6f 73 74 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |nhost\"}":{".":{|
              00000180  7d 2c 22 66 3a 69 6d 61  67 65 22 3a 7b 7d 2c 22  |},"f:image":{},"|
              00000190  66 3a 69 6d 61 67 65 50  75 6c 6c 50 6f 6c 69 63  |f:imagePullPolic|
              000001a0  79 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |y":{},"f:name":{|
              000001b0  7d 2c 22 66 3a 72 65 73  6f 75 72 63 65 73 22 3a  |},"f:resources":|
              000001c0  7b 7d 2c 22 66 3a 73 65  63 75 72 69 74 79 43 6f  |{},"f:securityCo|
              000001d0  6e 74 65 78 74 22 3a 7b  7d 2c 22 66 3a 74 65 72  |ntext":{},"f:ter|
              000001e0  6d 69 6e 61 74 69 6f 6e  4d 65 73 73 61 67 65 50  |minationMessageP|
              000001f0  61 74 68 22 3a 7b 7d 2c  22 66 3a 74 65 72 6d 69  |ath":{},"f:termi|
              00000200  6e 61 74 69 6f 6e 4d 65  73 73 61 67 65 50 6f 6c  |nationMessagePol|
              00000210  69 63 79 22 3a 7b 7d 7d  7d 2c 22 66 3a 64 6e 73  |icy":{}}},"f:dns|
              00000220  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 72 65  |Policy":{},"f:re|
              00000230  73 74 61 72 74 50 6f 6c  69 63 79 22 3a 7b 7d 2c  |startPolicy":{},|
              00000240  22 66 3a 73 63 68 65 64  75 6c 65 72 4e 61 6d 65  |"f:schedulerName|
              00000250  22 3a 7b 7d 2c 22 66 3a  73 65 63 75 72 69 74 79  |":{},"f:security|
              00000260  43 6f 6e 74 65 78 74 22  3a 7b 7d 2c 22 66 3a 74  |Context":{},"f:t|
              00000270  65 72 6d 69 6e 61 74 69  6f 6e 47 72 61 63 65 50  |erminationGraceP|
              00000280  65 72 69 6f 64 53 65 63  6f 6e 64 73 22 3a 7b 7d  |eriodSeconds":{}|
              00000290  7d 7d 7d 7d                                       |}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604993,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 0,
            StrVal: (string) ""
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 1,
            StrVal: (string) ""
          })
        })
      },
      MinReadySeconds: (int32) 10,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 2,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604979,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604979,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604993,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604979,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=77) "ReplicaSet \"test-rollover-deployment-5d484bf7f9\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Dec 31 07:36:33.635: INFO: New ReplicaSet "test-rollover-deployment-5d484bf7f9" of Deployment "test-rollover-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-rollover-deployment-5d484bf7f9",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5697",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "85d87367-beff-4423-a182-906c696ed27e",
      ResourceVersion: (string) (len=5) "33209",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839604981,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "3580343a-2f2f-4eb3-9516-48757f09c351",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604981,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=806) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 33 35 38 30 33 34  33 61 2d 32 66 32 66 2d  |\"3580343a-2f2f-|
              00000120  34 65 62 33 2d 39 35 31  36 2d 34 38 37 35 37 66  |4eb3-9516-48757f|
              00000130  30 39 63 33 35 31 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |09c351\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000150  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000160  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000170  2c 22 66 3a 73 65 6c 65  63 74 6f 72 22 3a 7b 7d  |,"f:selector":{}|
              00000180  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000190  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              000001a0  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              000001b0  22 66 3a 6e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 70  |"f:name":{},"f:p|
              000001c0  6f 64 2d 74 65 6d 70 6c  61 74 65 2d 68 61 73 68  |od-template-hash|
              000001d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000001e0  7b 22 66 3a 63 6f 6e 74  61 69 6e 65 72 73 22 3a  |{"f:containers":|
              000001f0  7b 22 6b 3a 7b 5c 22 6e  61 6d 65 5c 22 3a 5c 22  |{"k:{\"name\":\"|
              00000200  61 67 6e 68 6f 73 74 5c  22 7d 22 3a 7b 22 2e 22  |agnhost\"}":{"."|
              00000210  3a 7b 7d 2c 22 66 3a 69  6d 61 67 65 22 3a 7b 7d  |:{},"f:image":{}|
              00000220  2c 22 66 3a 69 6d 61 67  65 50 75 6c 6c 50 6f 6c  |,"f:imagePullPol|
              00000230  69 63 79 22 3a 7b 7d 2c  22 66 3a 6e 61 6d 65 22  |icy":{},"f:name"|
              00000240  3a 7b 7d 2c 22 66 3a 72  65 73 6f 75 72 63 65 73  |:{},"f:resources|
              00000250  22 3a 7b 7d 2c 22 66 3a  73 65 63 75 72 69 74 79  |":{},"f:security|
              00000260  43 6f 6e 74 65 78 74 22  3a 7b 7d 2c 22 66 3a 74  |Context":{},"f:t|
              00000270  65 72 6d 69 6e 61 74 69  6f 6e 4d 65 73 73 61 67  |erminationMessag|
              00000280  65 50 61 74 68 22 3a 7b  7d 2c 22 66 3a 74 65 72  |ePath":{},"f:ter|
              00000290  6d 69 6e 61 74 69 6f 6e  4d 65 73 73 61 67 65 50  |minationMessageP|
              000002a0  6f 6c 69 63 79 22 3a 7b  7d 7d 7d 2c 22 66 3a 64  |olicy":{}}},"f:d|
              000002b0  6e 73 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |nsPolicy":{},"f:|
              000002c0  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000002d0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000002e0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000002f0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              00000300  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              00000310  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              00000320  7b 7d 7d 7d 7d 7d                                 |{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604993,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 10,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Dec 31 07:36:33.636: INFO: All old ReplicaSets of Deployment "test-rollover-deployment":
  Dec 31 07:36:33.636: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-rollover-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5697",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "8198e3ca-5a45-4610-9916-10842554383a",
      ResourceVersion: (string) (len=5) "33218",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839604972,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=2) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "3580343a-2f2f-4eb3-9516-48757f09c351",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604972,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=467) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              00000030  3a 70 6f 64 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |:pod":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  73 65 6c 65 63 74 6f 72  |ec":{"f:selector|
              00000050  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000060  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000070  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              00000080  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              00000090  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              000000a0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              000000b0  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              000000c0  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              000000d0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              000000e0  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              000000f0  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000100  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000110  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |rces":{},"f:term|
              00000120  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000130  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000140  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000150  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000160  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              00000170  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              00000180  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              00000190  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000001a0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              000001b0  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              000001c0  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              000001d0  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604993,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=249) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 7d 2c 22 66  3a 6f 77 6e 65 72 52 65  |":{}},"f:ownerRe|
              00000090  66 65 72 65 6e 63 65 73  22 3a 7b 22 2e 22 3a 7b  |ferences":{".":{|
              000000a0  7d 2c 22 6b 3a 7b 5c 22  75 69 64 5c 22 3a 5c 22  |},"k:{\"uid\":\"|
              000000b0  33 35 38 30 33 34 33 61  2d 32 66 32 66 2d 34 65  |3580343a-2f2f-4e|
              000000c0  62 33 2d 39 35 31 36 2d  34 38 37 35 37 66 30 39  |b3-9516-48757f09|
              000000d0  63 33 35 31 5c 22 7d 22  3a 7b 7d 7d 7d 2c 22 66  |c351\"}":{}}},"f|
              000000e0  3a 73 70 65 63 22 3a 7b  22 66 3a 72 65 70 6c 69  |:spec":{"f:repli|
              000000f0  63 61 73 22 3a 7b 7d 7d  7d                       |cas":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604993,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Dec 31 07:36:33.637: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-rollover-deployment-664fc6c874",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-5697",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "c2791818-7c0a-4182-9618-2c6fdb0f25f8",
      ResourceVersion: (string) (len=5) "33174",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839604979,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "3580343a-2f2f-4eb3-9516-48757f09c351",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604981,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=810) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 33 35 38 30 33 34  33 61 2d 32 66 32 66 2d  |\"3580343a-2f2f-|
              00000120  34 65 62 33 2d 39 35 31  36 2d 34 38 37 35 37 66  |4eb3-9516-48757f|
              00000130  30 39 63 33 35 31 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |09c351\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000150  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000160  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000170  2c 22 66 3a 73 65 6c 65  63 74 6f 72 22 3a 7b 7d  |,"f:selector":{}|
              00000180  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000190  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              000001a0  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              000001b0  22 66 3a 6e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 70  |"f:name":{},"f:p|
              000001c0  6f 64 2d 74 65 6d 70 6c  61 74 65 2d 68 61 73 68  |od-template-hash|
              000001d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000001e0  7b 22 66 3a 63 6f 6e 74  61 69 6e 65 72 73 22 3a  |{"f:containers":|
              000001f0  7b 22 6b 3a 7b 5c 22 6e  61 6d 65 5c 22 3a 5c 22  |{"k:{\"name\":\"|
              00000200  72 65 64 69 73 2d 73 6c  61 76 65 5c 22 7d 22 3a  |redis-slave\"}":|
              00000210  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              00000220  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000230  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000240  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000250  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 73 65 63 75  |rces":{},"f:secu|
              00000260  72 69 74 79 43 6f 6e 74  65 78 74 22 3a 7b 7d 2c  |rityContext":{},|
              00000270  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000280  73 73 61 67 65 50 61 74  68 22 3a 7b 7d 2c 22 66  |ssagePath":{},"f|
              00000290  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 4d 65 73 73  |:terminationMess|
              000002a0  61 67 65 50 6f 6c 69 63  79 22 3a 7b 7d 7d 7d 2c  |agePolicy":{}}},|
              000002b0  22 66 3a 64 6e 73 50 6f  6c 69 63 79 22 3a 7b 7d  |"f:dnsPolicy":{}|
              000002c0  2c 22 66 3a 72 65 73 74  61 72 74 50 6f 6c 69 63  |,"f:restartPolic|
              000002d0  79 22 3a 7b 7d 2c 22 66  3a 73 63 68 65 64 75 6c  |y":{},"f:schedul|
              000002e0  65 72 4e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 73 65  |erName":{},"f:se|
              000002f0  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000300  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000310  47 72 61 63 65 50 65 72  69 6f 64 53 65 63 6f 6e  |GracePeriodSecon|
              00000320  64 73 22 3a 7b 7d 7d 7d  7d 7d                    |ds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604981,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 10,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=11) "redis-slave",
              Image: (string) (len=47) "gcr.io/google_samples/gb-redisslave:nonexistent",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Dec 31 07:36:33.639: INFO: Pod "test-rollover-deployment-5d484bf7f9-8rjpn" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=41) "test-rollover-deployment-5d484bf7f9-8rjpn",
      GenerateName: (string) (len=36) "test-rollover-deployment-5d484bf7f9-",
      Namespace: (string) (len=15) "deployment-5697",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "67685d17-418b-4d88-bf73-764f9ebfb215",
      ResourceVersion: (string) (len=5) "33191",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839604981,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=35) "test-rollover-deployment-5d484bf7f9",
          UID: (types.UID) (len=36) "85d87367-beff-4423-a182-906c696ed27e",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604981,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 35  64 38 37 33 36 37 2d 62  |d\":\"85d87367-b|
              00000090  65 66 66 2d 34 34 32 33  2d 61 31 38 32 2d 39 30  |eff-4423-a182-90|
              000000a0  36 63 36 39 36 65 64 32  37 65 5c 22 7d 22 3a 7b  |6c696ed27e\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604983,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 36 39  2e 31 34 37 5c 22 7d 22  |2.20.169.147\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-4x7bm",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-4x7bm",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604983,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604981,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604983,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604983,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839604981,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) (len=14) "172.20.169.147",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.169.147"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839604981,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=7) "agnhost",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839604982,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          ImageID: (string) (len=111) "registry.k8s.io/e2e-test-images/agnhost@sha256:2c5b5b056076334e4cf431d964d102e44cbca8f1e6b16ac1e477a0ffbe6caac4",
          ContainerID: (string) (len=77) "containerd://fa320c5cf7eb6554fc42b142a84fd2ba30166b74532c95722b9b496c9e8ff79c",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 07:36:33.640: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-5697" for this suite. @ 12/31/23 07:36:33.641
• [21.058 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance] [sig-apps, Conformance]
test/e2e/apps/replica_set.go:166
  STEP: Creating a kubernetes client @ 12/31/23 07:36:33.644
  Dec 31 07:36:33.644: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename replicaset @ 12/31/23 07:36:33.644
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:36:33.651
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:36:33.652
  STEP: Create a ReplicaSet @ 12/31/23 07:36:33.653
  STEP: Verify that the required pods have come up @ 12/31/23 07:36:33.656
  Dec 31 07:36:33.662: INFO: Pod name sample-pod: Found 0 pods out of 3
  E1231 07:36:34.427504      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:35.428573      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:36.428646      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:37.428831      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:38.428963      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:36:38.665: INFO: Pod name sample-pod: Found 3 pods out of 3
  STEP: ensuring each pod is running @ 12/31/23 07:36:38.665
  Dec 31 07:36:38.667: INFO: Replica Status: {Replicas:3 FullyLabeledReplicas:3 ReadyReplicas:3 AvailableReplicas:3 ObservedGeneration:1 Conditions:[]}
  STEP: Listing all ReplicaSets @ 12/31/23 07:36:38.667
  STEP: DeleteCollection of the ReplicaSets @ 12/31/23 07:36:38.669
  STEP: After DeleteCollection verify that ReplicaSets have been deleted @ 12/31/23 07:36:38.672
  Dec 31 07:36:38.673: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-9658" for this suite. @ 12/31/23 07:36:38.675
• [5.035 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] PodTemplates should replace a pod template [Conformance] [sig-node, Conformance]
test/e2e/common/node/podtemplates.go:177
  STEP: Creating a kubernetes client @ 12/31/23 07:36:38.68
  Dec 31 07:36:38.680: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename podtemplate @ 12/31/23 07:36:38.68
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:36:38.694
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:36:38.696
  STEP: Create a pod template @ 12/31/23 07:36:38.697
  STEP: Replace a pod template @ 12/31/23 07:36:38.699
  Dec 31 07:36:38.702: INFO: Found updated podtemplate annotation: "true"

  Dec 31 07:36:38.702: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-137" for this suite. @ 12/31/23 07:36:38.704
• [0.027 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:263
  STEP: Creating a kubernetes client @ 12/31/23 07:36:38.707
  Dec 31 07:36:38.707: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 07:36:38.707
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:36:38.714
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:36:38.718
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 07:36:38.719
  E1231 07:36:39.429290      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:40.430099      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:41.431022      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:42.431250      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:36:42.729
  Dec 31 07:36:42.730: INFO: Trying to get logs from node worker2 pod downwardapi-volume-135eafba-d257-49ef-b9b1-5f08d2d92949 container client-container: <nil>
  STEP: delete the pod @ 12/31/23 07:36:42.74
  Dec 31 07:36:42.746: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-1198" for this suite. @ 12/31/23 07:36:42.748
• [4.044 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Guestbook application should create and stop a working application [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:399
  STEP: Creating a kubernetes client @ 12/31/23 07:36:42.751
  Dec 31 07:36:42.751: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 07:36:42.751
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:36:42.756
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:36:42.757
  STEP: creating all guestbook components @ 12/31/23 07:36:42.759
  Dec 31 07:36:42.759: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: agnhost-replica
    labels:
      app: agnhost
      role: replica
      tier: backend
  spec:
    ports:
    - port: 6379
    selector:
      app: agnhost
      role: replica
      tier: backend

  Dec 31 07:36:42.759: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4349 create -f -'
  Dec 31 07:36:42.836: INFO: stderr: ""
  Dec 31 07:36:42.836: INFO: stdout: "service/agnhost-replica created\n"
  Dec 31 07:36:42.836: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: agnhost-primary
    labels:
      app: agnhost
      role: primary
      tier: backend
  spec:
    ports:
    - port: 6379
      targetPort: 6379
    selector:
      app: agnhost
      role: primary
      tier: backend

  Dec 31 07:36:42.836: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4349 create -f -'
  Dec 31 07:36:42.923: INFO: stderr: ""
  Dec 31 07:36:42.923: INFO: stdout: "service/agnhost-primary created\n"
  Dec 31 07:36:42.923: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: frontend
    labels:
      app: guestbook
      tier: frontend
  spec:
    # if your cluster supports it, uncomment the following to automatically create
    # an external load-balanced IP for the frontend service.
    # type: LoadBalancer
    ports:
    - port: 80
    selector:
      app: guestbook
      tier: frontend

  Dec 31 07:36:42.923: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4349 create -f -'
  Dec 31 07:36:43.009: INFO: stderr: ""
  Dec 31 07:36:43.009: INFO: stdout: "service/frontend created\n"
  Dec 31 07:36:43.009: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: frontend
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: guestbook
        tier: frontend
    template:
      metadata:
        labels:
          app: guestbook
          tier: frontend
      spec:
        containers:
        - name: guestbook-frontend
          image: registry.k8s.io/e2e-test-images/agnhost:2.45
          args: [ "guestbook", "--backend-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 80

  Dec 31 07:36:43.009: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4349 create -f -'
  Dec 31 07:36:43.073: INFO: stderr: ""
  Dec 31 07:36:43.073: INFO: stdout: "deployment.apps/frontend created\n"
  Dec 31 07:36:43.073: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: agnhost-primary
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: agnhost
        role: primary
        tier: backend
    template:
      metadata:
        labels:
          app: agnhost
          role: primary
          tier: backend
      spec:
        containers:
        - name: primary
          image: registry.k8s.io/e2e-test-images/agnhost:2.45
          args: [ "guestbook", "--http-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 6379

  Dec 31 07:36:43.073: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4349 create -f -'
  Dec 31 07:36:43.132: INFO: stderr: ""
  Dec 31 07:36:43.132: INFO: stdout: "deployment.apps/agnhost-primary created\n"
  Dec 31 07:36:43.132: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: agnhost-replica
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: agnhost
        role: replica
        tier: backend
    template:
      metadata:
        labels:
          app: agnhost
          role: replica
          tier: backend
      spec:
        containers:
        - name: replica
          image: registry.k8s.io/e2e-test-images/agnhost:2.45
          args: [ "guestbook", "--replicaof", "agnhost-primary", "--http-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 6379

  Dec 31 07:36:43.132: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4349 create -f -'
  Dec 31 07:36:43.187: INFO: stderr: ""
  Dec 31 07:36:43.187: INFO: stdout: "deployment.apps/agnhost-replica created\n"
  STEP: validating guestbook app @ 12/31/23 07:36:43.187
  Dec 31 07:36:43.187: INFO: Waiting for all frontend pods to be Running.
  E1231 07:36:43.431936      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:44.432567      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:45.432707      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:46.432757      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:47.433163      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:36:48.238: INFO: Waiting for frontend to serve content.
  Dec 31 07:36:48.251: INFO: Trying to add a new entry to the guestbook.
  Dec 31 07:36:48.261: INFO: Verifying that added entry can be retrieved.
  STEP: using delete to clean up resources @ 12/31/23 07:36:48.273
  Dec 31 07:36:48.273: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4349 delete --grace-period=0 --force -f -'
  Dec 31 07:36:48.317: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Dec 31 07:36:48.317: INFO: stdout: "service \"agnhost-replica\" force deleted\n"
  STEP: using delete to clean up resources @ 12/31/23 07:36:48.317
  Dec 31 07:36:48.318: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4349 delete --grace-period=0 --force -f -'
  Dec 31 07:36:48.367: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Dec 31 07:36:48.367: INFO: stdout: "service \"agnhost-primary\" force deleted\n"
  STEP: using delete to clean up resources @ 12/31/23 07:36:48.367
  Dec 31 07:36:48.367: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4349 delete --grace-period=0 --force -f -'
  Dec 31 07:36:48.410: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Dec 31 07:36:48.411: INFO: stdout: "service \"frontend\" force deleted\n"
  STEP: using delete to clean up resources @ 12/31/23 07:36:48.411
  Dec 31 07:36:48.411: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4349 delete --grace-period=0 --force -f -'
  E1231 07:36:48.435539      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:36:48.457: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Dec 31 07:36:48.457: INFO: stdout: "deployment.apps \"frontend\" force deleted\n"
  STEP: using delete to clean up resources @ 12/31/23 07:36:48.457
  Dec 31 07:36:48.457: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4349 delete --grace-period=0 --force -f -'
  Dec 31 07:36:48.502: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Dec 31 07:36:48.502: INFO: stdout: "deployment.apps \"agnhost-primary\" force deleted\n"
  STEP: using delete to clean up resources @ 12/31/23 07:36:48.502
  Dec 31 07:36:48.502: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-4349 delete --grace-period=0 --force -f -'
  Dec 31 07:36:48.547: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Dec 31 07:36:48.547: INFO: stdout: "deployment.apps \"agnhost-replica\" force deleted\n"
  Dec 31 07:36:48.547: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-4349" for this suite. @ 12/31/23 07:36:48.549
• [5.806 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should succeed in writing subpaths in container [Slow] [Conformance] [sig-node, Slow, Conformance]
test/e2e/common/node/expansion.go:300
  STEP: Creating a kubernetes client @ 12/31/23 07:36:48.557
  Dec 31 07:36:48.557: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename var-expansion @ 12/31/23 07:36:48.558
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:36:48.567
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:36:48.569
  STEP: creating the pod @ 12/31/23 07:36:48.571
  STEP: waiting for pod running @ 12/31/23 07:36:48.574
  E1231 07:36:49.435607      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:50.436573      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: creating a file in subpath @ 12/31/23 07:36:50.577
  Dec 31 07:36:50.579: INFO: ExecWithOptions {Command:[/bin/sh -c touch /volume_mount/mypath/foo/test.log] Namespace:var-expansion-4015 PodName:var-expansion-1f8ec0d1-f841-443e-9975-f779fd6dd1d1 ContainerName:dapi-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:36:50.579: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:36:50.579: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:36:50.579: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/var-expansion-4015/pods/var-expansion-1f8ec0d1-f841-443e-9975-f779fd6dd1d1/exec?command=%2Fbin%2Fsh&command=-c&command=touch+%2Fvolume_mount%2Fmypath%2Ffoo%2Ftest.log&container=dapi-container&container=dapi-container&stderr=true&stdout=true)
  STEP: test for file in mounted path @ 12/31/23 07:36:50.624
  Dec 31 07:36:50.625: INFO: ExecWithOptions {Command:[/bin/sh -c test -f /subpath_mount/test.log] Namespace:var-expansion-4015 PodName:var-expansion-1f8ec0d1-f841-443e-9975-f779fd6dd1d1 ContainerName:dapi-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:36:50.625: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:36:50.625: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:36:50.626: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/var-expansion-4015/pods/var-expansion-1f8ec0d1-f841-443e-9975-f779fd6dd1d1/exec?command=%2Fbin%2Fsh&command=-c&command=test+-f+%2Fsubpath_mount%2Ftest.log&container=dapi-container&container=dapi-container&stderr=true&stdout=true)
  STEP: updating the annotation value @ 12/31/23 07:36:50.649
  Dec 31 07:36:51.155: INFO: Successfully updated pod "var-expansion-1f8ec0d1-f841-443e-9975-f779fd6dd1d1"
  STEP: waiting for annotated pod running @ 12/31/23 07:36:51.155
  STEP: deleting the pod gracefully @ 12/31/23 07:36:51.156
  Dec 31 07:36:51.156: INFO: Deleting pod "var-expansion-1f8ec0d1-f841-443e-9975-f779fd6dd1d1" in namespace "var-expansion-4015"
  Dec 31 07:36:51.159: INFO: Wait up to 5m0s for pod "var-expansion-1f8ec0d1-f841-443e-9975-f779fd6dd1d1" to be fully deleted
  E1231 07:36:51.437155      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:52.437402      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:53.438140      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:54.438224      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:55.439090      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:56.439238      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:57.440067      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:58.440572      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:36:59.441153      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:00.441224      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:01.442175      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:02.442462      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:03.443031      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:04.443114      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:05.443997      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:06.444070      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:07.444572      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:08.444634      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:09.445365      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:10.445522      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:11.445824      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:12.445971      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:13.446200      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:14.446246      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:15.447189      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:16.447281      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:17.447933      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:18.448558      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:19.448603      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:20.449516      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:21.449857      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:22.450008      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:37:23.193: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-4015" for this suite. @ 12/31/23 07:37:23.194
• [34.639 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet Replace and Patch tests [Conformance] [sig-apps, Conformance]
test/e2e/apps/replica_set.go:155
  STEP: Creating a kubernetes client @ 12/31/23 07:37:23.2
  Dec 31 07:37:23.200: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename replicaset @ 12/31/23 07:37:23.201
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:37:23.207
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:37:23.209
  Dec 31 07:37:23.216: INFO: Pod name sample-pod: Found 0 pods out of 1
  E1231 07:37:23.450483      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:24.451328      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:25.452212      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:26.452574      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:27.453061      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:37:28.218: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 12/31/23 07:37:28.218
  STEP: Scaling up "test-rs" replicaset @ 12/31/23 07:37:28.218
  Dec 31 07:37:28.222: INFO: Updating replica set "test-rs"
  STEP: patching the ReplicaSet @ 12/31/23 07:37:28.222
  Dec 31 07:37:28.227: INFO: observed ReplicaSet test-rs in namespace replicaset-7636 with ReadyReplicas 1, AvailableReplicas 1
  Dec 31 07:37:28.235: INFO: observed ReplicaSet test-rs in namespace replicaset-7636 with ReadyReplicas 1, AvailableReplicas 1
  Dec 31 07:37:28.241: INFO: observed ReplicaSet test-rs in namespace replicaset-7636 with ReadyReplicas 1, AvailableReplicas 1
  Dec 31 07:37:28.244: INFO: observed ReplicaSet test-rs in namespace replicaset-7636 with ReadyReplicas 1, AvailableReplicas 1
  E1231 07:37:28.453902      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:37:28.784: INFO: observed ReplicaSet test-rs in namespace replicaset-7636 with ReadyReplicas 2, AvailableReplicas 2
  Dec 31 07:37:28.966: INFO: observed Replicaset test-rs in namespace replicaset-7636 with ReadyReplicas 3 found true
  Dec 31 07:37:28.966: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-7636" for this suite. @ 12/31/23 07:37:28.967
• [5.769 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance] [sig-node, Conformance]
test/e2e/common/node/pods.go:897
  STEP: Creating a kubernetes client @ 12/31/23 07:37:28.97
  Dec 31 07:37:28.970: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pods @ 12/31/23 07:37:28.97
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:37:28.975
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:37:28.979
  STEP: creating a Pod with a static label @ 12/31/23 07:37:28.982
  STEP: watching for Pod to be ready @ 12/31/23 07:37:28.985
  Dec 31 07:37:28.986: INFO: observed Pod pod-test in namespace pods-738 in phase Pending with labels: map[test-pod-static:true] & conditions []
  Dec 31 07:37:28.988: INFO: observed Pod pod-test in namespace pods-738 in phase Pending with labels: map[test-pod-static:true] & conditions [{PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:28 +0000 UTC  }]
  Dec 31 07:37:28.995: INFO: observed Pod pod-test in namespace pods-738 in phase Pending with labels: map[test-pod-static:true] & conditions [{PodReadyToStartContainers False 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:28 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:28 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:28 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:28 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:28 +0000 UTC  }]
  E1231 07:37:29.454618      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:37:30.181: INFO: Found Pod pod-test in namespace pods-738 in phase Running with labels: map[test-pod-static:true] & conditions [{PodReadyToStartContainers True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:30 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:28 +0000 UTC  } {Ready True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:30 +0000 UTC  } {ContainersReady True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:30 +0000 UTC  } {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:28 +0000 UTC  }]
  STEP: patching the Pod with a new Label and updated data @ 12/31/23 07:37:30.182
  STEP: getting the Pod and ensuring that it's patched @ 12/31/23 07:37:30.186
  STEP: replacing the Pod's status Ready condition to False @ 12/31/23 07:37:30.187
  STEP: check the Pod again to ensure its Ready conditions are False @ 12/31/23 07:37:30.192
  STEP: deleting the Pod via a Collection with a LabelSelector @ 12/31/23 07:37:30.192
  STEP: watching for the Pod to be deleted @ 12/31/23 07:37:30.195
  Dec 31 07:37:30.196: INFO: observed event type MODIFIED
  E1231 07:37:30.455576      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:37:30.850: INFO: observed event type MODIFIED
  E1231 07:37:31.456128      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:37:32.184: INFO: observed event type MODIFIED
  Dec 31 07:37:32.360: INFO: observed event type MODIFIED
  E1231 07:37:32.456559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:37:33.186: INFO: observed event type MODIFIED
  Dec 31 07:37:33.191: INFO: observed event type MODIFIED
  Dec 31 07:37:33.194: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-738" for this suite. @ 12/31/23 07:37:33.196
• [4.228 seconds]
------------------------------
SSS
------------------------------
[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance] [sig-network, Conformance]
test/e2e/network/endpointslice.go:69
  STEP: Creating a kubernetes client @ 12/31/23 07:37:33.198
  Dec 31 07:37:33.198: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename endpointslice @ 12/31/23 07:37:33.198
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:37:33.207
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:37:33.208
  Dec 31 07:37:33.258: INFO: Endpoints addresses: [10.255.0.202] , ports: [6443]
  Dec 31 07:37:33.258: INFO: EndpointSlices addresses: [10.255.0.202] , ports: [6443]
  Dec 31 07:37:33.258: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-7607" for this suite. @ 12/31/23 07:37:33.26
• [0.064 seconds]
------------------------------
SSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance] [sig-apps, Slow, Conformance]
test/e2e/apps/statefulset.go:751
  STEP: Creating a kubernetes client @ 12/31/23 07:37:33.262
  Dec 31 07:37:33.262: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename statefulset @ 12/31/23 07:37:33.263
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:37:33.27
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:37:33.271
  STEP: Creating service test in namespace statefulset-3216 @ 12/31/23 07:37:33.273
  STEP: Creating stateful set ss in namespace statefulset-3216 @ 12/31/23 07:37:33.275
  STEP: Waiting until all stateful set ss replicas will be running in namespace statefulset-3216 @ 12/31/23 07:37:33.277
  Dec 31 07:37:33.280: INFO: Found 0 stateful pods, waiting for 1
  E1231 07:37:33.456885      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:34.457654      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:35.457783      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:36.457924      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:37.458046      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:38.458196      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:39.458285      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:40.458428      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:41.458502      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:42.458577      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:37:43.280: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Confirming that stateful set scale up will not halt with unhealthy stateful pod @ 12/31/23 07:37:43.28
  Dec 31 07:37:43.281: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-3216 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Dec 31 07:37:43.410: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Dec 31 07:37:43.411: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Dec 31 07:37:43.411: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Dec 31 07:37:43.412: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=true
  E1231 07:37:43.459362      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:44.459442      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:45.459515      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:46.460569      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:47.460790      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:48.460873      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:49.461721      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:50.461846      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:51.462028      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:37:52.462244      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:37:53.413: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Dec 31 07:37:53.413: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Dec 31 07:37:53.419: INFO: POD   NODE     PHASE    GRACE  CONDITIONS
  Dec 31 07:37:53.419: INFO: ss-0  worker3  Running         [{PodReadyToStartContainers True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:34 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:33 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:43 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:43 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:33 +0000 UTC  }]
  Dec 31 07:37:53.419: INFO: 
  Dec 31 07:37:53.419: INFO: StatefulSet ss has not reached scale 3, at 1
  E1231 07:37:53.463060      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:37:54.421: INFO: Verifying statefulset ss doesn't scale past 3 for another 8.998708289s
  E1231 07:37:54.463952      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:37:55.423: INFO: Verifying statefulset ss doesn't scale past 3 for another 7.996820505s
  E1231 07:37:55.464996      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:37:56.426: INFO: Verifying statefulset ss doesn't scale past 3 for another 6.994051703s
  E1231 07:37:56.465486      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:37:57.428: INFO: Verifying statefulset ss doesn't scale past 3 for another 5.992269511s
  E1231 07:37:57.465512      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:37:58.430: INFO: Verifying statefulset ss doesn't scale past 3 for another 4.990246702s
  E1231 07:37:58.466460      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:37:59.432: INFO: Verifying statefulset ss doesn't scale past 3 for another 3.988303837s
  E1231 07:37:59.467422      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:00.434: INFO: Verifying statefulset ss doesn't scale past 3 for another 2.98633878s
  E1231 07:38:00.468183      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:01.436: INFO: Verifying statefulset ss doesn't scale past 3 for another 1.983767072s
  E1231 07:38:01.468836      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:02.438: INFO: Verifying statefulset ss doesn't scale past 3 for another 981.885175ms
  E1231 07:38:02.469877      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Scaling up stateful set ss to 3 replicas and waiting until all of them will be running in namespace statefulset-3216 @ 12/31/23 07:38:03.438
  Dec 31 07:38:03.440: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-3216 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  E1231 07:38:03.470355      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:03.517: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Dec 31 07:38:03.517: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Dec 31 07:38:03.517: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Dec 31 07:38:03.517: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-3216 exec ss-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Dec 31 07:38:03.608: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\nmv: can't rename '/tmp/index.html': No such file or directory\n+ true\n"
  Dec 31 07:38:03.608: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Dec 31 07:38:03.608: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Dec 31 07:38:03.608: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-3216 exec ss-2 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Dec 31 07:38:03.687: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\nmv: can't rename '/tmp/index.html': No such file or directory\n+ true\n"
  Dec 31 07:38:03.687: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Dec 31 07:38:03.687: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-2: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Dec 31 07:38:03.689: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Dec 31 07:38:03.689: INFO: Waiting for pod ss-1 to enter Running - Ready=true, currently Running - Ready=true
  Dec 31 07:38:03.689: INFO: Waiting for pod ss-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Scale down will not halt with unhealthy stateful pod @ 12/31/23 07:38:03.689
  Dec 31 07:38:03.690: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-3216 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Dec 31 07:38:03.777: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Dec 31 07:38:03.777: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Dec 31 07:38:03.777: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Dec 31 07:38:03.777: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-3216 exec ss-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Dec 31 07:38:03.875: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Dec 31 07:38:03.875: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Dec 31 07:38:03.875: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Dec 31 07:38:03.875: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=statefulset-3216 exec ss-2 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Dec 31 07:38:03.956: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Dec 31 07:38:03.956: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Dec 31 07:38:03.956: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-2: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Dec 31 07:38:03.956: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Dec 31 07:38:03.958: INFO: Waiting for statefulset status.readyReplicas to become 0, currently 3
  E1231 07:38:04.470851      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:05.471122      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:06.471270      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:07.471513      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:08.471593      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:09.471669      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:10.472629      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:11.472846      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:12.472998      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:13.473117      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:13.960: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Dec 31 07:38:13.960: INFO: Waiting for pod ss-1 to enter Running - Ready=false, currently Running - Ready=false
  Dec 31 07:38:13.960: INFO: Waiting for pod ss-2 to enter Running - Ready=false, currently Running - Ready=false
  Dec 31 07:38:13.965: INFO: POD   NODE          PHASE    GRACE  CONDITIONS
  Dec 31 07:38:13.965: INFO: ss-0  worker3       Running         [{PodReadyToStartContainers True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:34 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:33 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:38:04 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:38:04 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:33 +0000 UTC  }]
  Dec 31 07:38:13.965: INFO: ss-1  worker2       Running         [{PodReadyToStartContainers True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:54 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:53 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:38:04 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:38:04 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:53 +0000 UTC  }]
  Dec 31 07:38:13.965: INFO: ss-2  10.255.0.202  Running         [{PodReadyToStartContainers True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:54 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:53 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:38:04 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:38:04 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:53 +0000 UTC  }]
  Dec 31 07:38:13.965: INFO: 
  Dec 31 07:38:13.965: INFO: StatefulSet ss has not reached scale 0, at 3
  E1231 07:38:14.473350      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:14.967: INFO: POD   NODE          PHASE      GRACE  CONDITIONS
  Dec 31 07:38:14.967: INFO: ss-2  10.255.0.202  Succeeded  30s    [{PodReadyToStartContainers False 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:38:14 +0000 UTC  } {Initialized True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:53 +0000 UTC PodCompleted } {Ready False 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:38:04 +0000 UTC PodCompleted } {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:38:04 +0000 UTC PodCompleted } {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2023-12-31 07:37:53 +0000 UTC  }]
  Dec 31 07:38:14.967: INFO: 
  Dec 31 07:38:14.967: INFO: StatefulSet ss has not reached scale 0, at 1
  E1231 07:38:15.473679      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:15.968: INFO: Verifying statefulset ss doesn't scale past 0 for another 7.996597151s
  E1231 07:38:16.474602      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:16.970: INFO: Verifying statefulset ss doesn't scale past 0 for another 6.9945936s
  E1231 07:38:17.474683      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:17.972: INFO: Verifying statefulset ss doesn't scale past 0 for another 5.992825346s
  E1231 07:38:18.474768      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:18.975: INFO: Verifying statefulset ss doesn't scale past 0 for another 4.990438141s
  E1231 07:38:19.475630      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:19.976: INFO: Verifying statefulset ss doesn't scale past 0 for another 3.988652187s
  E1231 07:38:20.475861      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:20.978: INFO: Verifying statefulset ss doesn't scale past 0 for another 2.986360909s
  E1231 07:38:21.476553      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:21.980: INFO: Verifying statefulset ss doesn't scale past 0 for another 1.984626624s
  E1231 07:38:22.477338      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:22.982: INFO: Verifying statefulset ss doesn't scale past 0 for another 983.054404ms
  E1231 07:38:23.477879      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Scaling down stateful set ss to 0 replicas and waiting until none of pods will run in namespacestatefulset-3216 @ 12/31/23 07:38:23.982
  Dec 31 07:38:23.984: INFO: Scaling statefulset ss to 0
  Dec 31 07:38:23.988: INFO: Waiting for statefulset status.replicas updated to 0
  Dec 31 07:38:23.989: INFO: Deleting all statefulset in ns statefulset-3216
  Dec 31 07:38:23.990: INFO: Scaling statefulset ss to 0
  Dec 31 07:38:23.995: INFO: Waiting for statefulset status.replicas updated to 0
  Dec 31 07:38:23.996: INFO: Deleting statefulset ss
  Dec 31 07:38:24.004: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-3216" for this suite. @ 12/31/23 07:38:24.006
• [50.747 seconds]
------------------------------
[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:263
  STEP: Creating a kubernetes client @ 12/31/23 07:38:24.009
  Dec 31 07:38:24.009: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 07:38:24.01
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:38:24.016
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:38:24.018
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 07:38:24.019
  E1231 07:38:24.478829      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:25.478932      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:26.479499      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:27.479503      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:38:28.026
  Dec 31 07:38:28.027: INFO: Trying to get logs from node worker3 pod downwardapi-volume-ecce4404-4ef7-4cad-826a-8875eb520f56 container client-container: <nil>
  STEP: delete the pod @ 12/31/23 07:38:28.041
  Dec 31 07:38:28.047: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-5952" for this suite. @ 12/31/23 07:38:28.049
• [4.041 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should provide secure master service [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:775
  STEP: Creating a kubernetes client @ 12/31/23 07:38:28.051
  Dec 31 07:38:28.051: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 07:38:28.051
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:38:28.057
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:38:28.058
  Dec 31 07:38:28.060: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-7674" for this suite. @ 12/31/23 07:38:28.062
• [0.013 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:250
  STEP: Creating a kubernetes client @ 12/31/23 07:38:28.064
  Dec 31 07:38:28.064: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 07:38:28.065
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:38:28.071
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:38:28.072
  STEP: Setting up server cert @ 12/31/23 07:38:28.081
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 07:38:28.323
  STEP: Deploying the webhook pod @ 12/31/23 07:38:28.327
  STEP: Wait for the deployment to be ready @ 12/31/23 07:38:28.333
  Dec 31 07:38:28.344: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  E1231 07:38:28.480402      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:29.480496      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 12/31/23 07:38:30.348
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 07:38:30.352
  E1231 07:38:30.480882      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:31.352: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the mutating configmap webhook via the AdmissionRegistration API @ 12/31/23 07:38:31.355
  STEP: create a configmap that should be updated by the webhook @ 12/31/23 07:38:31.363
  Dec 31 07:38:31.389: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-4323" for this suite. @ 12/31/23 07:38:31.391
  STEP: Destroying namespace "webhook-markers-8386" for this suite. @ 12/31/23 07:38:31.394
• [3.332 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] API priority and fairness should support PriorityLevelConfiguration API operations [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/flowcontrol.go:514
  STEP: Creating a kubernetes client @ 12/31/23 07:38:31.396
  Dec 31 07:38:31.396: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename apf @ 12/31/23 07:38:31.397
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:38:31.404
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:38:31.406
  STEP: getting /apis @ 12/31/23 07:38:31.408
  STEP: getting /apis/flowcontrol.apiserver.k8s.io @ 12/31/23 07:38:31.41
  STEP: getting /apis/flowcontrol.apiserver.k8s.io/v1 @ 12/31/23 07:38:31.411
  STEP: creating @ 12/31/23 07:38:31.411
  STEP: getting @ 12/31/23 07:38:31.417
  STEP: listing @ 12/31/23 07:38:31.418
  STEP: watching @ 12/31/23 07:38:31.42
  Dec 31 07:38:31.420: INFO: starting watch
  STEP: patching @ 12/31/23 07:38:31.421
  STEP: updating @ 12/31/23 07:38:31.423
  Dec 31 07:38:31.427: INFO: waiting for watch events with expected annotations
  STEP: getting /status @ 12/31/23 07:38:31.427
  STEP: patching /status @ 12/31/23 07:38:31.428
  STEP: updating /status @ 12/31/23 07:38:31.43
  STEP: deleting @ 12/31/23 07:38:31.433
  STEP: deleting a collection @ 12/31/23 07:38:31.437
  Dec 31 07:38:31.442: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "apf-9263" for this suite. @ 12/31/23 07:38:31.444
• [0.050 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:695
  STEP: Creating a kubernetes client @ 12/31/23 07:38:31.447
  Dec 31 07:38:31.447: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename resourcequota @ 12/31/23 07:38:31.448
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:38:31.454
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:38:31.456
  STEP: Creating a ResourceQuota with terminating scope @ 12/31/23 07:38:31.457
  STEP: Ensuring ResourceQuota status is calculated @ 12/31/23 07:38:31.459
  E1231 07:38:31.481786      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:32.481946      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota with not terminating scope @ 12/31/23 07:38:33.461
  STEP: Ensuring ResourceQuota status is calculated @ 12/31/23 07:38:33.463
  E1231 07:38:33.482074      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:34.482104      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a long running pod @ 12/31/23 07:38:35.466
  STEP: Ensuring resource quota with not terminating scope captures the pod usage @ 12/31/23 07:38:35.473
  E1231 07:38:35.482284      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:36.482420      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring resource quota with terminating scope ignored the pod usage @ 12/31/23 07:38:37.475
  E1231 07:38:37.483457      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:38.483508      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting the pod @ 12/31/23 07:38:39.477
  STEP: Ensuring resource quota status released the pod usage @ 12/31/23 07:38:39.483
  E1231 07:38:39.483985      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:40.484565      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:41.484626      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a terminating pod @ 12/31/23 07:38:41.485
  STEP: Ensuring resource quota with terminating scope captures the pod usage @ 12/31/23 07:38:41.49
  E1231 07:38:42.485708      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:43.485775      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring resource quota with not terminating scope ignored the pod usage @ 12/31/23 07:38:43.492
  E1231 07:38:44.486378      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:45.486457      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting the pod @ 12/31/23 07:38:45.495
  STEP: Ensuring resource quota status released the pod usage @ 12/31/23 07:38:45.501
  E1231 07:38:46.487369      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:47.487497      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:47.503: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-889" for this suite. @ 12/31/23 07:38:47.504
• [16.060 seconds]
------------------------------
[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:90
  STEP: Creating a kubernetes client @ 12/31/23 07:38:47.507
  Dec 31 07:38:47.507: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir @ 12/31/23 07:38:47.507
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:38:47.513
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:38:47.515
  STEP: Creating a pod to test emptydir volume type on tmpfs @ 12/31/23 07:38:47.516
  E1231 07:38:48.488567      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:49.488879      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:38:49.522
  Dec 31 07:38:49.523: INFO: Trying to get logs from node worker3 pod pod-f75b1e97-ff65-4529-8ebf-85634b61fc8e container test-container: <nil>
  STEP: delete the pod @ 12/31/23 07:38:49.526
  Dec 31 07:38:49.531: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-443" for this suite. @ 12/31/23 07:38:49.533
• [2.028 seconds]
------------------------------
SSS
------------------------------
[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/kubelet.go:183
  STEP: Creating a kubernetes client @ 12/31/23 07:38:49.534
  Dec 31 07:38:49.534: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubelet-test @ 12/31/23 07:38:49.535
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:38:49.541
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:38:49.543
  E1231 07:38:50.488975      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:51.489139      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:38:51.555: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-1954" for this suite. @ 12/31/23 07:38:51.556
• [2.024 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance] [sig-apps, Conformance]
test/e2e/apps/disruption.go:349
  STEP: Creating a kubernetes client @ 12/31/23 07:38:51.558
  Dec 31 07:38:51.558: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename disruption @ 12/31/23 07:38:51.559
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:38:51.565
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:38:51.567
  STEP: Creating a pdb that targets all three pods in a test replica set @ 12/31/23 07:38:51.568
  STEP: Waiting for the pdb to be processed @ 12/31/23 07:38:51.57
  E1231 07:38:52.489403      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:53.489576      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: First trying to evict a pod which shouldn't be evictable @ 12/31/23 07:38:53.574
  STEP: Waiting for all pods to be running @ 12/31/23 07:38:53.574
  Dec 31 07:38:53.582: INFO: pods: 0 < 3
  E1231 07:38:54.490089      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:55.490237      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: locating a running pod @ 12/31/23 07:38:55.577
  STEP: Updating the pdb to allow a pod to be evicted @ 12/31/23 07:38:55.581
  STEP: Waiting for the pdb to be processed @ 12/31/23 07:38:55.584
  E1231 07:38:56.491142      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:57.491368      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Trying to evict the same pod we tried earlier which should now be evictable @ 12/31/23 07:38:57.586
  STEP: Waiting for all pods to be running @ 12/31/23 07:38:57.586
  STEP: Waiting for the pdb to observed all healthy pods @ 12/31/23 07:38:57.587
  STEP: Patching the pdb to disallow a pod to be evicted @ 12/31/23 07:38:57.597
  STEP: Waiting for the pdb to be processed @ 12/31/23 07:38:57.614
  E1231 07:38:58.491523      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:38:59.491607      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for all pods to be running @ 12/31/23 07:38:59.616
  STEP: locating a running pod @ 12/31/23 07:38:59.617
  STEP: Deleting the pdb to allow a pod to be evicted @ 12/31/23 07:38:59.621
  STEP: Waiting for the pdb to be deleted @ 12/31/23 07:38:59.623
  STEP: Trying to evict the same pod we tried earlier which should now be evictable @ 12/31/23 07:38:59.623
  STEP: Waiting for all pods to be running @ 12/31/23 07:38:59.623
  Dec 31 07:38:59.631: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-223" for this suite. @ 12/31/23 07:38:59.633
• [8.078 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:130
  STEP: Creating a kubernetes client @ 12/31/23 07:38:59.637
  Dec 31 07:38:59.637: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir @ 12/31/23 07:38:59.637
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:38:59.646
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:38:59.647
  STEP: Creating a pod to test emptydir 0644 on tmpfs @ 12/31/23 07:38:59.649
  E1231 07:39:00.491687      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:01.492130      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:02.492671      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:03.492798      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:39:03.658
  Dec 31 07:39:03.659: INFO: Trying to get logs from node worker2 pod pod-a7ba4eb6-e10d-4acd-8a9d-ef71cd743594 container test-container: <nil>
  STEP: delete the pod @ 12/31/23 07:39:03.666
  Dec 31 07:39:03.678: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-1222" for this suite. @ 12/31/23 07:39:03.684
• [4.050 seconds]
------------------------------
SSSSS
------------------------------
[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:191
  STEP: Creating a kubernetes client @ 12/31/23 07:39:03.687
  Dec 31 07:39:03.687: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename dns @ 12/31/23 07:39:03.688
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:39:03.698
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:39:03.7
  STEP: Creating a test headless service @ 12/31/23 07:39:03.702
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service;check="$$(dig +tcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-9465 A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-9465;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-9465 A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-9465;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-9465.svc A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-9465.svc;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-9465.svc A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-9465.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-9465.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.dns-test-service.dns-9465.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-9465.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.dns-test-service.dns-9465.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-9465.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.test-service-2.dns-9465.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-9465.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.test-service-2.dns-9465.svc;check="$$(dig +notcp +noall +answer +search 74.49.68.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.68.49.74_udp@PTR;check="$$(dig +tcp +noall +answer +search 74.49.68.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.68.49.74_tcp@PTR;sleep 1; done
   @ 12/31/23 07:39:03.711
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service;check="$$(dig +tcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-9465 A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-9465;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-9465 A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-9465;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-9465.svc A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-9465.svc;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-9465.svc A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-9465.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-9465.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.dns-test-service.dns-9465.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-9465.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.dns-test-service.dns-9465.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-9465.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.test-service-2.dns-9465.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-9465.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.test-service-2.dns-9465.svc;check="$$(dig +notcp +noall +answer +search 74.49.68.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.68.49.74_udp@PTR;check="$$(dig +tcp +noall +answer +search 74.49.68.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.68.49.74_tcp@PTR;sleep 1; done
   @ 12/31/23 07:39:03.711
  STEP: creating a pod to probe DNS @ 12/31/23 07:39:03.711
  STEP: submitting the pod to kubernetes @ 12/31/23 07:39:03.711
  E1231 07:39:04.493702      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:05.494742      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: retrieving the pod @ 12/31/23 07:39:05.726
  STEP: looking for the results for each expected name from probers @ 12/31/23 07:39:05.727
  Dec 31 07:39:05.728: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.737: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.738: INFO: Unable to read wheezy_udp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.745: INFO: Unable to read wheezy_tcp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.748: INFO: Unable to read wheezy_udp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.755: INFO: Unable to read wheezy_tcp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.758: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.768: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.799: INFO: Unable to read jessie_udp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.808: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.809: INFO: Unable to read jessie_udp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.810: INFO: Unable to read jessie_tcp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.818: INFO: Unable to read jessie_udp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.819: INFO: Unable to read jessie_tcp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.829: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.839: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:05.869: INFO: Lookups using dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-9465 wheezy_tcp@dns-test-service.dns-9465 wheezy_udp@dns-test-service.dns-9465.svc wheezy_tcp@dns-test-service.dns-9465.svc wheezy_udp@_http._tcp.dns-test-service.dns-9465.svc wheezy_tcp@_http._tcp.dns-test-service.dns-9465.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-9465 jessie_tcp@dns-test-service.dns-9465 jessie_udp@dns-test-service.dns-9465.svc jessie_tcp@dns-test-service.dns-9465.svc jessie_udp@_http._tcp.dns-test-service.dns-9465.svc jessie_tcp@_http._tcp.dns-test-service.dns-9465.svc]

  Dec 31 07:39:05.872: INFO: Pod client logs for webserver: 
  Dec 31 07:39:05.880: INFO: Pod client logs for querier: 
  Dec 31 07:39:05.890: INFO: Pod client logs for jessie-querier: 
  E1231 07:39:06.495051      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:07.495923      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:08.496023      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:09.496089      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:10.496579      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:39:10.729: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.739: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.749: INFO: Unable to read wheezy_udp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.759: INFO: Unable to read wheezy_tcp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.769: INFO: Unable to read wheezy_udp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.770: INFO: Unable to read wheezy_tcp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.780: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.790: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.811: INFO: Unable to read jessie_udp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.820: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.821: INFO: Unable to read jessie_udp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.830: INFO: Unable to read jessie_tcp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.831: INFO: Unable to read jessie_udp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.840: INFO: Unable to read jessie_tcp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.841: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.850: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:10.872: INFO: Lookups using dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-9465 wheezy_tcp@dns-test-service.dns-9465 wheezy_udp@dns-test-service.dns-9465.svc wheezy_tcp@dns-test-service.dns-9465.svc wheezy_udp@_http._tcp.dns-test-service.dns-9465.svc wheezy_tcp@_http._tcp.dns-test-service.dns-9465.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-9465 jessie_tcp@dns-test-service.dns-9465 jessie_udp@dns-test-service.dns-9465.svc jessie_tcp@dns-test-service.dns-9465.svc jessie_udp@_http._tcp.dns-test-service.dns-9465.svc jessie_tcp@_http._tcp.dns-test-service.dns-9465.svc]

  Dec 31 07:39:10.880: INFO: Pod client logs for webserver: 
  Dec 31 07:39:10.882: INFO: Pod client logs for querier: 
  Dec 31 07:39:10.892: INFO: Pod client logs for jessie-querier: 
  E1231 07:39:11.497519      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:12.497755      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:13.497965      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:14.497909      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:15.497970      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:39:15.729: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.730: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.740: INFO: Unable to read wheezy_udp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.749: INFO: Unable to read wheezy_tcp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.750: INFO: Unable to read wheezy_udp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.761: INFO: Unable to read wheezy_tcp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.771: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.772: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.822: INFO: Unable to read jessie_udp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.832: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.843: INFO: Unable to read jessie_udp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.844: INFO: Unable to read jessie_tcp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.854: INFO: Unable to read jessie_udp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.855: INFO: Unable to read jessie_tcp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.864: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.873: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:15.896: INFO: Lookups using dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-9465 wheezy_tcp@dns-test-service.dns-9465 wheezy_udp@dns-test-service.dns-9465.svc wheezy_tcp@dns-test-service.dns-9465.svc wheezy_udp@_http._tcp.dns-test-service.dns-9465.svc wheezy_tcp@_http._tcp.dns-test-service.dns-9465.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-9465 jessie_tcp@dns-test-service.dns-9465 jessie_udp@dns-test-service.dns-9465.svc jessie_tcp@dns-test-service.dns-9465.svc jessie_udp@_http._tcp.dns-test-service.dns-9465.svc jessie_tcp@_http._tcp.dns-test-service.dns-9465.svc]

  Dec 31 07:39:15.906: INFO: Pod client logs for webserver: 
  Dec 31 07:39:15.909: INFO: Pod client logs for querier: 
  Dec 31 07:39:15.916: INFO: Pod client logs for jessie-querier: 
  E1231 07:39:16.498371      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:17.498554      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:18.498712      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:19.499047      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:20.499873      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:39:20.739: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.740: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.749: INFO: Unable to read wheezy_udp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.750: INFO: Unable to read wheezy_tcp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.760: INFO: Unable to read wheezy_udp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.769: INFO: Unable to read wheezy_tcp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.780: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.790: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.821: INFO: Unable to read jessie_udp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.822: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.831: INFO: Unable to read jessie_udp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.842: INFO: Unable to read jessie_tcp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.843: INFO: Unable to read jessie_udp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.853: INFO: Unable to read jessie_tcp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.863: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.864: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:20.904: INFO: Lookups using dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-9465 wheezy_tcp@dns-test-service.dns-9465 wheezy_udp@dns-test-service.dns-9465.svc wheezy_tcp@dns-test-service.dns-9465.svc wheezy_udp@_http._tcp.dns-test-service.dns-9465.svc wheezy_tcp@_http._tcp.dns-test-service.dns-9465.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-9465 jessie_tcp@dns-test-service.dns-9465 jessie_udp@dns-test-service.dns-9465.svc jessie_tcp@dns-test-service.dns-9465.svc jessie_udp@_http._tcp.dns-test-service.dns-9465.svc jessie_tcp@_http._tcp.dns-test-service.dns-9465.svc]

  Dec 31 07:39:20.906: INFO: Pod client logs for webserver: 
  Dec 31 07:39:20.914: INFO: Pod client logs for querier: 
  Dec 31 07:39:20.916: INFO: Pod client logs for jessie-querier: 
  E1231 07:39:21.499961      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:22.500552      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:23.501128      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:24.501214      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:25.501444      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:39:25.739: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.741: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.749: INFO: Unable to read wheezy_udp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.751: INFO: Unable to read wheezy_tcp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.759: INFO: Unable to read wheezy_udp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.762: INFO: Unable to read wheezy_tcp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.763: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.769: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.789: INFO: Unable to read jessie_udp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.793: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.799: INFO: Unable to read jessie_udp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.809: INFO: Unable to read jessie_tcp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.811: INFO: Unable to read jessie_udp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.820: INFO: Unable to read jessie_tcp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.821: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.830: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:25.859: INFO: Lookups using dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-9465 wheezy_tcp@dns-test-service.dns-9465 wheezy_udp@dns-test-service.dns-9465.svc wheezy_tcp@dns-test-service.dns-9465.svc wheezy_udp@_http._tcp.dns-test-service.dns-9465.svc wheezy_tcp@_http._tcp.dns-test-service.dns-9465.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-9465 jessie_tcp@dns-test-service.dns-9465 jessie_udp@dns-test-service.dns-9465.svc jessie_tcp@dns-test-service.dns-9465.svc jessie_udp@_http._tcp.dns-test-service.dns-9465.svc jessie_tcp@_http._tcp.dns-test-service.dns-9465.svc]

  Dec 31 07:39:25.870: INFO: Pod client logs for webserver: 
  Dec 31 07:39:25.879: INFO: Pod client logs for querier: 
  Dec 31 07:39:25.889: INFO: Pod client logs for jessie-querier: 
  E1231 07:39:26.501602      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:27.501846      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:28.502298      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:29.502391      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:30.502468      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:39:30.739: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.740: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.749: INFO: Unable to read wheezy_udp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.750: INFO: Unable to read wheezy_tcp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.759: INFO: Unable to read wheezy_udp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.760: INFO: Unable to read wheezy_tcp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.769: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.779: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.819: INFO: Unable to read jessie_udp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.830: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.840: INFO: Unable to read jessie_udp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.850: INFO: Unable to read jessie_tcp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.860: INFO: Unable to read jessie_udp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.861: INFO: Unable to read jessie_tcp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.871: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.881: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:30.911: INFO: Lookups using dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-9465 wheezy_tcp@dns-test-service.dns-9465 wheezy_udp@dns-test-service.dns-9465.svc wheezy_tcp@dns-test-service.dns-9465.svc wheezy_udp@_http._tcp.dns-test-service.dns-9465.svc wheezy_tcp@_http._tcp.dns-test-service.dns-9465.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-9465 jessie_tcp@dns-test-service.dns-9465 jessie_udp@dns-test-service.dns-9465.svc jessie_tcp@dns-test-service.dns-9465.svc jessie_udp@_http._tcp.dns-test-service.dns-9465.svc jessie_tcp@_http._tcp.dns-test-service.dns-9465.svc]

  Dec 31 07:39:30.913: INFO: Pod client logs for webserver: 
  Dec 31 07:39:30.915: INFO: Pod client logs for querier: 
  Dec 31 07:39:30.923: INFO: Pod client logs for jessie-querier: 
  E1231 07:39:31.502555      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:32.502775      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:33.502860      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:34.502945      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:35.503039      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:39:35.729: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.739: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.748: INFO: Unable to read wheezy_udp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.758: INFO: Unable to read wheezy_tcp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.768: INFO: Unable to read wheezy_udp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.779: INFO: Unable to read wheezy_tcp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.790: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.791: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.820: INFO: Unable to read jessie_udp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.830: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.841: INFO: Unable to read jessie_udp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.850: INFO: Unable to read jessie_tcp@dns-test-service.dns-9465 from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.851: INFO: Unable to read jessie_udp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.860: INFO: Unable to read jessie_tcp@dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.871: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.881: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-9465.svc from pod dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f: the server could not find the requested resource (get pods dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f)
  Dec 31 07:39:35.912: INFO: Lookups using dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-9465 wheezy_tcp@dns-test-service.dns-9465 wheezy_udp@dns-test-service.dns-9465.svc wheezy_tcp@dns-test-service.dns-9465.svc wheezy_udp@_http._tcp.dns-test-service.dns-9465.svc wheezy_tcp@_http._tcp.dns-test-service.dns-9465.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-9465 jessie_tcp@dns-test-service.dns-9465 jessie_udp@dns-test-service.dns-9465.svc jessie_tcp@dns-test-service.dns-9465.svc jessie_udp@_http._tcp.dns-test-service.dns-9465.svc jessie_tcp@_http._tcp.dns-test-service.dns-9465.svc]

  Dec 31 07:39:35.917: INFO: Pod client logs for webserver: 
  Dec 31 07:39:35.922: INFO: Pod client logs for querier: 
  Dec 31 07:39:35.927: INFO: Pod client logs for jessie-querier: 
  E1231 07:39:36.503112      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:37.503310      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:38.503481      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:39.503510      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:40.503604      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:39:40.894: INFO: DNS probes using dns-9465/dns-test-cbb73128-810a-4d3e-ba9f-2e339437ea7f succeeded

  STEP: deleting the pod @ 12/31/23 07:39:40.894
  STEP: deleting the test service @ 12/31/23 07:39:40.901
  STEP: deleting the test headless service @ 12/31/23 07:39:40.913
  Dec 31 07:39:40.925: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-9465" for this suite. @ 12/31/23 07:39:40.928
• [37.243 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance] [sig-storage, Conformance]
test/e2e/common/storage/secrets_volume.go:386
  STEP: Creating a kubernetes client @ 12/31/23 07:39:40.93
  Dec 31 07:39:40.931: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename secrets @ 12/31/23 07:39:40.931
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:39:40.938
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:39:40.939
  Dec 31 07:39:40.958: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-6595" for this suite. @ 12/31/23 07:39:40.96
• [0.031 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:100
  STEP: Creating a kubernetes client @ 12/31/23 07:39:40.962
  Dec 31 07:39:40.962: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir @ 12/31/23 07:39:40.963
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:39:40.969
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:39:40.971
  STEP: Creating a pod to test emptydir 0644 on tmpfs @ 12/31/23 07:39:40.974
  E1231 07:39:41.504141      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:42.504245      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:43.505178      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:44.505306      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:39:44.982
  Dec 31 07:39:44.983: INFO: Trying to get logs from node worker3 pod pod-c262b888-ed49-40cf-b059-4eb518a7fef9 container test-container: <nil>
  STEP: delete the pod @ 12/31/23 07:39:44.985
  Dec 31 07:39:44.991: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-8695" for this suite. @ 12/31/23 07:39:44.993
• [4.033 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_watch.go:51
  STEP: Creating a kubernetes client @ 12/31/23 07:39:44.995
  Dec 31 07:39:44.995: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename crd-watch @ 12/31/23 07:39:44.995
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:39:45.002
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:39:45.003
  Dec 31 07:39:45.004: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  E1231 07:39:45.506279      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:46.507051      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:47.507301      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating first CR  @ 12/31/23 07:39:47.526
  Dec 31 07:39:47.532: INFO: Got : ADDED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-12-31T07:39:47Z generation:1 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-12-31T07:39:47Z]] name:name1 resourceVersion:34927 uid:f8f51d5a-0328-498d-b399-3b457b17dc16] num:map[num1:9223372036854775807 num2:1000000]]}
  E1231 07:39:48.507508      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:49.508573      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:50.508637      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:51.509620      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:52.509967      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:53.510198      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:54.510336      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:55.510455      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:56.510573      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:57.510994      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating second CR @ 12/31/23 07:39:57.533
  Dec 31 07:39:57.536: INFO: Got : ADDED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-12-31T07:39:57Z generation:1 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-12-31T07:39:57Z]] name:name2 resourceVersion:34953 uid:4aa0249a-9ba6-46e0-b62c-60c86487ebcc] num:map[num1:9223372036854775807 num2:1000000]]}
  E1231 07:39:58.511727      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:39:59.512562      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:00.512686      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:01.512756      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:02.512994      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:03.513113      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:04.514181      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:05.514259      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:06.515120      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:07.515229      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Modifying first CR @ 12/31/23 07:40:07.536
  Dec 31 07:40:07.546: INFO: Got : MODIFIED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-12-31T07:39:47Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-12-31T07:40:07Z]] name:name1 resourceVersion:34969 uid:f8f51d5a-0328-498d-b399-3b457b17dc16] num:map[num1:9223372036854775807 num2:1000000]]}
  E1231 07:40:08.515508      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:09.515593      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:10.516555      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:11.516808      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:12.516938      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:13.517166      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:14.517248      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:15.517326      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:16.518370      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:17.518849      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Modifying second CR @ 12/31/23 07:40:17.547
  Dec 31 07:40:17.550: INFO: Got : MODIFIED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-12-31T07:39:57Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-12-31T07:40:17Z]] name:name2 resourceVersion:34985 uid:4aa0249a-9ba6-46e0-b62c-60c86487ebcc] num:map[num1:9223372036854775807 num2:1000000]]}
  E1231 07:40:18.519448      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:19.519504      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:20.520564      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:21.520800      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:22.521846      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:23.522570      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:24.522690      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:25.522774      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:26.522903      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:27.523143      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting first CR @ 12/31/23 07:40:27.551
  Dec 31 07:40:27.554: INFO: Got : DELETED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-12-31T07:39:47Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-12-31T07:40:07Z]] name:name1 resourceVersion:35002 uid:f8f51d5a-0328-498d-b399-3b457b17dc16] num:map[num1:9223372036854775807 num2:1000000]]}
  E1231 07:40:28.523314      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:29.523450      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:30.523496      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:31.524297      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:32.524950      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:33.525625      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:34.525709      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:35.526122      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:36.526240      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:37.526465      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting second CR @ 12/31/23 07:40:37.554
  Dec 31 07:40:37.558: INFO: Got : DELETED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2023-12-31T07:39:57Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2023-12-31T07:40:17Z]] name:name2 resourceVersion:35018 uid:4aa0249a-9ba6-46e0-b62c-60c86487ebcc] num:map[num1:9223372036854775807 num2:1000000]]}
  E1231 07:40:38.526548      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:39.526668      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:40.526755      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:41.527594      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:42.528533      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:43.528657      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:44.528741      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:45.529000      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:46.529079      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:47.530052      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:40:48.063: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-watch-7925" for this suite. @ 12/31/23 07:40:48.065
• [63.072 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:273
  STEP: Creating a kubernetes client @ 12/31/23 07:40:48.067
  Dec 31 07:40:48.067: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 07:40:48.068
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:40:48.074
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:40:48.076
  STEP: Setting up server cert @ 12/31/23 07:40:48.087
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 07:40:48.386
  STEP: Deploying the webhook pod @ 12/31/23 07:40:48.389
  STEP: Wait for the deployment to be ready @ 12/31/23 07:40:48.394
  Dec 31 07:40:48.396: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  E1231 07:40:48.530893      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:49.531052      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 12/31/23 07:40:50.4
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 07:40:50.405
  E1231 07:40:50.531945      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:40:51.406: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering a validating webhook on ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects, via the AdmissionRegistration API @ 12/31/23 07:40:51.409
  STEP: Registering a mutating webhook on ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects, via the AdmissionRegistration API @ 12/31/23 07:40:51.416
  STEP: Creating a dummy validating-webhook-configuration object @ 12/31/23 07:40:51.423
  STEP: Deleting the validating-webhook-configuration, which should be possible to remove @ 12/31/23 07:40:51.427
  STEP: Creating a dummy mutating-webhook-configuration object @ 12/31/23 07:40:51.429
  STEP: Deleting the mutating-webhook-configuration, which should be possible to remove @ 12/31/23 07:40:51.433
  Dec 31 07:40:51.458: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-7760" for this suite. @ 12/31/23 07:40:51.46
  STEP: Destroying namespace "webhook-markers-6302" for this suite. @ 12/31/23 07:40:51.462
• [3.399 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance] [sig-node, Conformance]
test/e2e/common/node/configmap.go:139
  STEP: Creating a kubernetes client @ 12/31/23 07:40:51.467
  Dec 31 07:40:51.467: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename configmap @ 12/31/23 07:40:51.467
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:40:51.472
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:40:51.474
  STEP: Creating configMap that has name configmap-test-emptyKey-4f1b8adc-a6f6-418b-b2b4-ee071d708d55 @ 12/31/23 07:40:51.477
  Dec 31 07:40:51.478: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-1240" for this suite. @ 12/31/23 07:40:51.48
• [0.015 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/containers.go:89
  STEP: Creating a kubernetes client @ 12/31/23 07:40:51.482
  Dec 31 07:40:51.482: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename containers @ 12/31/23 07:40:51.482
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:40:51.493
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:40:51.495
  STEP: Creating a pod to test override all @ 12/31/23 07:40:51.497
  E1231 07:40:51.532893      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:52.533858      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:53.534202      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:54.534345      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:40:55.505
  Dec 31 07:40:55.507: INFO: Trying to get logs from node worker3 pod client-containers-d31f6c16-5233-4c1e-b3d3-de0d11137806 container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 07:40:55.509
  Dec 31 07:40:55.515: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-9775" for this suite. @ 12/31/23 07:40:55.516
• [4.037 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:251
  STEP: Creating a kubernetes client @ 12/31/23 07:40:55.519
  Dec 31 07:40:55.519: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 07:40:55.519
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:40:55.527
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:40:55.529
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 07:40:55.531
  E1231 07:40:55.534526      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:56.534633      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:57.535073      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:58.535520      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:40:59.536560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:40:59.542
  Dec 31 07:40:59.543: INFO: Trying to get logs from node worker3 pod downwardapi-volume-76b5727f-bf2b-49ea-a637-f1db1f6e3966 container client-container: <nil>
  STEP: delete the pod @ 12/31/23 07:40:59.545
  Dec 31 07:40:59.551: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9993" for this suite. @ 12/31/23 07:40:59.552
• [4.035 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:1399
  STEP: Creating a kubernetes client @ 12/31/23 07:40:59.554
  Dec 31 07:40:59.554: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 07:40:59.555
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:40:59.56
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:40:59.561
  Dec 31 07:40:59.563: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-9821 create -f -'
  Dec 31 07:40:59.637: INFO: stderr: ""
  Dec 31 07:40:59.637: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  Dec 31 07:40:59.637: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-9821 create -f -'
  Dec 31 07:40:59.711: INFO: stderr: ""
  Dec 31 07:40:59.711: INFO: stdout: "service/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 12/31/23 07:40:59.711
  E1231 07:41:00.536647      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:00.713: INFO: Selector matched 1 pods for map[app:agnhost]
  Dec 31 07:41:00.713: INFO: Found 1 / 1
  Dec 31 07:41:00.713: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  Dec 31 07:41:00.717: INFO: Selector matched 1 pods for map[app:agnhost]
  Dec 31 07:41:00.717: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Dec 31 07:41:00.717: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-9821 describe pod agnhost-primary-rhmps'
  Dec 31 07:41:00.760: INFO: stderr: ""
  Dec 31 07:41:00.760: INFO: stdout: "Name:             agnhost-primary-rhmps\nNamespace:        kubectl-9821\nPriority:         0\nService Account:  default\nNode:             worker3/10.255.0.204\nStart Time:       Sun, 31 Dec 2023 07:40:59 +0000\nLabels:           app=agnhost\n                  role=primary\nAnnotations:      <none>\nStatus:           Running\nIP:               172.20.169.172\nIPs:\n  IP:           172.20.169.172\nControlled By:  ReplicationController/agnhost-primary\nContainers:\n  agnhost-primary:\n    Container ID:   containerd://feb937dad2e88e4ccef215944e4765108db9c3bff81bd3a4734ef8bbd5d6ff61\n    Image:          registry.k8s.io/e2e-test-images/agnhost:2.45\n    Image ID:       registry.k8s.io/e2e-test-images/agnhost@sha256:2c5b5b056076334e4cf431d964d102e44cbca8f1e6b16ac1e477a0ffbe6caac4\n    Port:           6379/TCP\n    Host Port:      0/TCP\n    State:          Running\n      Started:      Sun, 31 Dec 2023 07:41:00 +0000\n    Ready:          True\n    Restart Count:  0\n    Environment:    <none>\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-wchc5 (ro)\nConditions:\n  Type                        Status\n  PodReadyToStartContainers   True \n  Initialized                 True \n  Ready                       True \n  ContainersReady             True \n  PodScheduled                True \nVolumes:\n  kube-api-access-wchc5:\n    Type:                    Projected (a volume that contains injected data from multiple sources)\n    TokenExpirationSeconds:  3607\n    ConfigMapName:           kube-root-ca.crt\n    ConfigMapOptional:       <nil>\n    DownwardAPI:             true\nQoS Class:                   BestEffort\nNode-Selectors:              <none>\nTolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type    Reason     Age   From               Message\n  ----    ------     ----  ----               -------\n  Normal  Scheduled  1s    default-scheduler  Successfully assigned kubectl-9821/agnhost-primary-rhmps to worker3\n  Normal  Pulled     0s    kubelet            Container image \"registry.k8s.io/e2e-test-images/agnhost:2.45\" already present on machine\n  Normal  Created    0s    kubelet            Created container agnhost-primary\n  Normal  Started    0s    kubelet            Started container agnhost-primary\n"
  Dec 31 07:41:00.760: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-9821 describe rc agnhost-primary'
  Dec 31 07:41:00.803: INFO: stderr: ""
  Dec 31 07:41:00.803: INFO: stdout: "Name:         agnhost-primary\nNamespace:    kubectl-9821\nSelector:     app=agnhost,role=primary\nLabels:       app=agnhost\n              role=primary\nAnnotations:  <none>\nReplicas:     1 current / 1 desired\nPods Status:  1 Running / 0 Waiting / 0 Succeeded / 0 Failed\nPod Template:\n  Labels:  app=agnhost\n           role=primary\n  Containers:\n   agnhost-primary:\n    Image:        registry.k8s.io/e2e-test-images/agnhost:2.45\n    Port:         6379/TCP\n    Host Port:    0/TCP\n    Environment:  <none>\n    Mounts:       <none>\n  Volumes:        <none>\nEvents:\n  Type    Reason            Age   From                    Message\n  ----    ------            ----  ----                    -------\n  Normal  SuccessfulCreate  1s    replication-controller  Created pod: agnhost-primary-rhmps\n"
  Dec 31 07:41:00.803: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-9821 describe service agnhost-primary'
  Dec 31 07:41:00.846: INFO: stderr: ""
  Dec 31 07:41:00.846: INFO: stdout: "Name:              agnhost-primary\nNamespace:         kubectl-9821\nLabels:            app=agnhost\n                   role=primary\nAnnotations:       <none>\nSelector:          app=agnhost,role=primary\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.68.148.142\nIPs:               10.68.148.142\nPort:              <unset>  6379/TCP\nTargetPort:        agnhost-server/TCP\nEndpoints:         172.20.169.172:6379\nSession Affinity:  None\nEvents:            <none>\n"
  Dec 31 07:41:00.847: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-9821 describe node 10.255.0.202'
  Dec 31 07:41:00.897: INFO: stderr: ""
  Dec 31 07:41:00.897: INFO: stdout: "Name:               10.255.0.202\nRoles:              master\nLabels:             beta.kubernetes.io/arch=amd64\n                    beta.kubernetes.io/os=linux\n                    kubernetes.io/arch=amd64\n                    kubernetes.io/hostname=10.255.0.202\n                    kubernetes.io/os=linux\n                    kubernetes.io/role=master\nAnnotations:        node.alpha.kubernetes.io/ttl: 0\n                    volumes.kubernetes.io/controller-managed-attach-detach: true\nCreationTimestamp:  Sun, 31 Dec 2023 06:01:51 +0000\nTaints:             <none>\nUnschedulable:      false\nLease:\n  HolderIdentity:  10.255.0.202\n  AcquireTime:     <unset>\n  RenewTime:       Sun, 31 Dec 2023 07:40:52 +0000\nConditions:\n  Type                 Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message\n  ----                 ------  -----------------                 ------------------                ------                       -------\n  NetworkUnavailable   False   Sun, 31 Dec 2023 06:02:12 +0000   Sun, 31 Dec 2023 06:02:12 +0000   CalicoIsUp                   Calico is running on this node\n  MemoryPressure       False   Sun, 31 Dec 2023 07:40:40 +0000   Sun, 31 Dec 2023 06:01:51 +0000   KubeletHasSufficientMemory   kubelet has sufficient memory available\n  DiskPressure         False   Sun, 31 Dec 2023 07:40:40 +0000   Sun, 31 Dec 2023 06:01:51 +0000   KubeletHasNoDiskPressure     kubelet has no disk pressure\n  PIDPressure          False   Sun, 31 Dec 2023 07:40:40 +0000   Sun, 31 Dec 2023 06:01:51 +0000   KubeletHasSufficientPID      kubelet has sufficient PID available\n  Ready                True    Sun, 31 Dec 2023 07:40:40 +0000   Sun, 31 Dec 2023 06:02:11 +0000   KubeletReady                 kubelet is posting ready status. AppArmor enabled\nAddresses:\n  InternalIP:  10.255.0.202\n  Hostname:    10.255.0.202\nCapacity:\n  cpu:                    4\n  ephemeral-storage:      40901312Ki\n  hugepages-1Gi:          0\n  hugepages-2Mi:          0\n  memory:                 7459176Ki\n  pods:                   110\n  scheduling.k8s.io/foo:  5\nAllocatable:\n  cpu:                    4\n  ephemeral-storage:      37694649077\n  hugepages-1Gi:          0\n  hugepages-2Mi:          0\n  memory:                 7151976Ki\n  pods:                   110\n  scheduling.k8s.io/foo:  5\nSystem Info:\n  Machine ID:                 6e0c7f6019bb431b86d37de3129cf818\n  System UUID:                6e0c7f60-19bb-431b-86d3-7de3129cf818\n  Boot ID:                    5062b9b5-89ad-447d-b8ff-7be1445a080d\n  Kernel Version:             5.15.0-88-generic\n  OS Image:                   Ubuntu 22.04.3 LTS\n  Operating System:           linux\n  Architecture:               amd64\n  Container Runtime Version:  containerd://1.6.26\n  Kubelet Version:            v1.29.0\n  Kube-Proxy Version:         v1.29.0\nPodCIDR:                      172.20.0.0/24\nPodCIDRs:                     172.20.0.0/24\nNon-terminated Pods:          (8 in total)\n  Namespace                   Name                                                       CPU Requests  CPU Limits  Memory Requests  Memory Limits  Age\n  ---------                   ----                                                       ------------  ----------  ---------------  -------------  ---\n  kube-system                 calico-kube-controllers-5994f46b69-lmc5f                   0 (0%)        0 (0%)      0 (0%)           0 (0%)         99m\n  kube-system                 calico-node-f7srb                                          250m (6%)     0 (0%)      0 (0%)           0 (0%)         99m\n  kube-system                 coredns-6db9bd4cd7-g6pt6                                   100m (2%)     0 (0%)      70Mi (1%)        300Mi (4%)     98m\n  kube-system                 dashboard-metrics-scraper-77b667b99d-lc87h                 0 (0%)        0 (0%)      0 (0%)           0 (0%)         98m\n  kube-system                 kubernetes-dashboard-74fb9f77fb-4vtvg                      0 (0%)        0 (0%)      0 (0%)           0 (0%)         98m\n  kube-system                 metrics-server-dfb478476-wcgkq                             100m (2%)     0 (0%)      200Mi (2%)       0 (0%)         98m\n  kube-system                 node-local-dns-v47ss                                       25m (0%)      0 (0%)      5Mi (0%)         0 (0%)         98m\n  sonobuoy                    sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-wsh69    0 (0%)        0 (0%)      0 (0%)           0 (0%)         92m\nAllocated resources:\n  (Total limits may be over 100 percent, i.e., overcommitted.)\n  Resource               Requests    Limits\n  --------               --------    ------\n  cpu                    475m (11%)  0 (0%)\n  memory                 275Mi (3%)  300Mi (4%)\n  ephemeral-storage      0 (0%)      0 (0%)\n  hugepages-1Gi          0 (0%)      0 (0%)\n  hugepages-2Mi          0 (0%)      0 (0%)\n  scheduling.k8s.io/foo  0           0\nEvents:                  <none>\n"
  Dec 31 07:41:00.898: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-9821 describe namespace kubectl-9821'
  Dec 31 07:41:00.939: INFO: stderr: ""
  Dec 31 07:41:00.939: INFO: stdout: "Name:         kubectl-9821\nLabels:       e2e-framework=kubectl\n              e2e-run=26b22d90-e7df-4dd4-82fc-4df9026db335\n              kubernetes.io/metadata.name=kubectl-9821\n              pod-security.kubernetes.io/audit=baseline\n              pod-security.kubernetes.io/enforce=baseline\n              pod-security.kubernetes.io/warn=baseline\nAnnotations:  <none>\nStatus:       Active\n\nNo resource quota.\n\nNo LimitRange resource.\n"
  Dec 31 07:41:00.939: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-9821" for this suite. @ 12/31/23 07:41:00.941
• [1.389 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:261
  STEP: Creating a kubernetes client @ 12/31/23 07:41:00.944
  Dec 31 07:41:00.944: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 07:41:00.944
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:41:00.952
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:41:00.953
  STEP: Setting up server cert @ 12/31/23 07:41:00.963
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 07:41:01.25
  STEP: Deploying the webhook pod @ 12/31/23 07:41:01.254
  STEP: Wait for the deployment to be ready @ 12/31/23 07:41:01.258
  Dec 31 07:41:01.262: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  E1231 07:41:01.537041      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:02.537401      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 12/31/23 07:41:03.266
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 07:41:03.271
  E1231 07:41:03.537481      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:04.271: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the mutating pod webhook via the AdmissionRegistration API @ 12/31/23 07:41:04.276
  STEP: create a pod that should be updated by the webhook @ 12/31/23 07:41:04.286
  Dec 31 07:41:04.329: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-3316" for this suite. @ 12/31/23 07:41:04.333
  STEP: Destroying namespace "webhook-markers-2837" for this suite. @ 12/31/23 07:41:04.337
• [3.397 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:48
  STEP: Creating a kubernetes client @ 12/31/23 07:41:04.341
  Dec 31 07:41:04.341: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename configmap @ 12/31/23 07:41:04.341
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:41:04.351
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:41:04.354
  STEP: Creating configMap with name configmap-test-volume-ad6c674f-8544-496b-a024-56112c5c23fd @ 12/31/23 07:41:04.358
  STEP: Creating a pod to test consume configMaps @ 12/31/23 07:41:04.36
  E1231 07:41:04.537565      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:05.538571      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:41:06.367
  Dec 31 07:41:06.368: INFO: Trying to get logs from node worker2 pod pod-configmaps-651c086d-f0b4-45fb-8f3b-3bf8384791fb container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 07:41:06.375
  Dec 31 07:41:06.381: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-1643" for this suite. @ 12/31/23 07:41:06.383
• [2.044 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should serve endpoints on same port and different protocols [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:3649
  STEP: Creating a kubernetes client @ 12/31/23 07:41:06.385
  Dec 31 07:41:06.385: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 07:41:06.386
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:41:06.391
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:41:06.392
  STEP: creating service multiprotocol-test in namespace services-6743 @ 12/31/23 07:41:06.394
  STEP: creating pod pod1 in namespace services-6743 @ 12/31/23 07:41:06.398
  STEP: Creating pod pod1 in namespace services-6743 @ 12/31/23 07:41:06.398
  E1231 07:41:06.538683      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:07.538946      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: waiting up to 3m0s for service multiprotocol-test in namespace services-6743 to expose endpoints map[pod1:[{tcp-port 0 80 TCP } {udp-port 0 80 UDP }]] @ 12/31/23 07:41:08.408
  Dec 31 07:41:08.412: INFO: successfully validated that service multiprotocol-test in namespace services-6743 exposes endpoints map[pod1:[{tcp-port 0 80 TCP } {udp-port 0 80 UDP }]]
  STEP: Checking if the Service forwards traffic to the TCP and UDP port @ 12/31/23 07:41:08.412
  Dec 31 07:41:08.412: INFO: Creating new exec pod
  E1231 07:41:08.539440      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:09.539521      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:10.417: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.40.54 80'
  Dec 31 07:41:10.494: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.40.54 80\nConnection to 10.68.40.54 80 port [tcp/http] succeeded!\n"
  Dec 31 07:41:10.494: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:41:10.494: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.68.40.54 80'
  E1231 07:41:10.540250      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:11.540382      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:12.540627      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:13.540961      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:14.541167      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:14.558: INFO: stderr: "+ echo hostName\n+ nc -v -u -w 2 10.68.40.54 80\nConnection to 10.68.40.54 80 port [udp/*] succeeded!\n"
  Dec 31 07:41:14.558: INFO: stdout: "pod1"
  STEP: Checking if the Service forwards traffic to TCP only @ 12/31/23 07:41:14.558
  Dec 31 07:41:14.562: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.40.54 80'
  Dec 31 07:41:14.656: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.40.54 80\nConnection to 10.68.40.54 80 port [tcp/http] succeeded!\n"
  Dec 31 07:41:14.656: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:41:14.656: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.68.40.54 80'
  Dec 31 07:41:14.742: INFO: rc: 1
  Dec 31 07:41:14.742: INFO: Service reachability failing with error: error running /usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.68.40.54 80:
  Command stdout:

  stderr:
  + echo hostName
  + nc -v -u -w 2 10.68.40.54 80
  command terminated with exit code 1

  error:
  exit status 1
  Retrying...
  E1231 07:41:15.542151      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:16.542214      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:16.657: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.68.40.54 80'
  Dec 31 07:41:16.745: INFO: rc: 1
  Dec 31 07:41:16.745: INFO: Service reachability failing with error: error running /usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.68.40.54 80:
  Command stdout:

  stderr:
  + echo hostName
  + nc -v -u -w 2 10.68.40.54 80
  command terminated with exit code 1

  error:
  exit status 1
  Retrying...
  E1231 07:41:17.542454      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:18.542520      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:18.656: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.68.40.54 80'
  Dec 31 07:41:18.737: INFO: rc: 1
  Dec 31 07:41:18.737: INFO: Service reachability failing with error: error running /usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.68.40.54 80:
  Command stdout:

  stderr:
  + echo hostName
  + nc -v -u -w 2 10.68.40.54 80
  command terminated with exit code 1

  error:
  exit status 1
  Retrying...
  E1231 07:41:19.542891      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:20.543032      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:20.657: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.68.40.54 80'
  Dec 31 07:41:20.758: INFO: rc: 1
  Dec 31 07:41:20.758: INFO: Service reachability failing with error: error running /usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.68.40.54 80:
  Command stdout:

  stderr:
  + echo hostName
  + nc -v -u -w 2 10.68.40.54 80
  command terminated with exit code 1

  error:
  exit status 1
  Retrying...
  STEP: Checking if the Service forwards traffic to UDP only @ 12/31/23 07:41:20.758
  Dec 31 07:41:20.761: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.68.40.54 80'
  Dec 31 07:41:20.856: INFO: rc: 1
  Dec 31 07:41:20.856: INFO: Service reachability failing with error: error running /usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.68.40.54 80:
  Command stdout:

  stderr:
  + echo hostName
  + nc -v -u -w 2 10.68.40.54 80
  command terminated with exit code 1

  error:
  exit status 1
  Retrying...
  E1231 07:41:21.543955      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:22.544555      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:22.762: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -u -w 2 10.68.40.54 80'
  E1231 07:41:23.544949      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:24.545549      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:25.546464      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:26.546819      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:26.846: INFO: stderr: "+ echo hostName\n+ nc -v -u -w 2 10.68.40.54 80\nConnection to 10.68.40.54 80 port [udp/*] succeeded!\n"
  Dec 31 07:41:26.846: INFO: stdout: "pod1"
  Dec 31 07:41:26.846: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.40.54 80'
  Dec 31 07:41:26.933: INFO: rc: 1
  Dec 31 07:41:26.933: INFO: Service reachability failing with error: error running /usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.40.54 80:
  Command stdout:

  stderr:
  + echo hostName
  + nc -v -t -w 2 10.68.40.54 80
  nc: connect to 10.68.40.54 port 80 (tcp) failed: Connection refused
  command terminated with exit code 1

  error:
  exit status 1
  Retrying...
  E1231 07:41:27.546882      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:28.547089      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:28.847: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.40.54 80'
  Dec 31 07:41:28.925: INFO: rc: 1
  Dec 31 07:41:28.925: INFO: Service reachability failing with error: error running /usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.40.54 80:
  Command stdout:

  stderr:
  + echo hostName
  + nc -v -t -w 2 10.68.40.54 80
  nc: connect to 10.68.40.54 port 80 (tcp) failed: Connection refused
  command terminated with exit code 1

  error:
  exit status 1
  Retrying...
  E1231 07:41:29.547510      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:30.548554      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:30.846: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.40.54 80'
  Dec 31 07:41:30.926: INFO: rc: 1
  Dec 31 07:41:30.926: INFO: Service reachability failing with error: error running /usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.40.54 80:
  Command stdout:

  stderr:
  + echo hostName
  + nc -v -t -w 2 10.68.40.54 80
  nc: connect to 10.68.40.54 port 80 (tcp) failed: Connection refused
  command terminated with exit code 1

  error:
  exit status 1
  Retrying...
  E1231 07:41:31.549128      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:32.549379      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:32.846: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.40.54 80'
  Dec 31 07:41:32.937: INFO: rc: 1
  Dec 31 07:41:32.937: INFO: Service reachability failing with error: error running /usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-6743 exec execpodpqwxd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.40.54 80:
  Command stdout:

  stderr:
  + echo hostName
  + nc -v -t -w 2 10.68.40.54 80
  nc: connect to 10.68.40.54 port 80 (tcp) failed: Connection refused
  command terminated with exit code 1

  error:
  exit status 1
  Retrying...
  Dec 31 07:41:32.937: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-6743" for this suite. @ 12/31/23 07:41:32.939
• [26.556 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance] [sig-api-machinery, Serial, Conformance]
test/e2e/apimachinery/namespace.go:274
  STEP: Creating a kubernetes client @ 12/31/23 07:41:32.941
  Dec 31 07:41:32.941: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename namespaces @ 12/31/23 07:41:32.942
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:41:32.949
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:41:32.95
  STEP: creating a Namespace @ 12/31/23 07:41:32.951
  STEP: patching the Namespace @ 12/31/23 07:41:32.958
  STEP: get the Namespace and ensuring it has the label @ 12/31/23 07:41:32.961
  Dec 31 07:41:32.963: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-1409" for this suite. @ 12/31/23 07:41:32.964
  STEP: Destroying namespace "nspatchtest-6b14e150-bd3e-4d52-b718-9a63350df874-1609" for this suite. @ 12/31/23 07:41:32.966
• [0.028 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance] [sig-apps, Conformance]
test/e2e/apps/replica_set.go:177
  STEP: Creating a kubernetes client @ 12/31/23 07:41:32.969
  Dec 31 07:41:32.969: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename replicaset @ 12/31/23 07:41:32.97
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:41:32.974
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:41:32.975
  STEP: Create a Replicaset @ 12/31/23 07:41:32.978
  STEP: Verify that the required pods have come up. @ 12/31/23 07:41:32.98
  Dec 31 07:41:32.985: INFO: Pod name sample-pod: Found 0 pods out of 1
  E1231 07:41:33.550021      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:34.550173      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:35.550308      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:36.550445      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:37.550723      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:37.991: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 12/31/23 07:41:37.991
  STEP: Getting /status @ 12/31/23 07:41:37.991
  Dec 31 07:41:37.993: INFO: Replicaset test-rs has Conditions: []
  STEP: updating the Replicaset Status @ 12/31/23 07:41:37.993
  Dec 31 07:41:37.997: INFO: updatedStatus.Conditions: []v1.ReplicaSetCondition{v1.ReplicaSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the ReplicaSet status to be updated @ 12/31/23 07:41:37.997
  Dec 31 07:41:37.998: INFO: Observed &ReplicaSet event: ADDED
  Dec 31 07:41:37.998: INFO: Observed &ReplicaSet event: MODIFIED
  Dec 31 07:41:37.998: INFO: Observed &ReplicaSet event: MODIFIED
  Dec 31 07:41:37.998: INFO: Observed &ReplicaSet event: MODIFIED
  Dec 31 07:41:37.998: INFO: Found replicaset test-rs in namespace replicaset-5331 with labels: map[name:sample-pod pod:httpd] annotations: map[] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Dec 31 07:41:37.998: INFO: Replicaset test-rs has an updated status
  STEP: patching the Replicaset Status @ 12/31/23 07:41:37.998
  Dec 31 07:41:37.998: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Dec 31 07:41:38.003: INFO: Patched status conditions: []v1.ReplicaSetCondition{v1.ReplicaSetCondition{Type:"StatusPatched", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Replicaset status to be patched @ 12/31/23 07:41:38.003
  Dec 31 07:41:38.004: INFO: Observed &ReplicaSet event: ADDED
  Dec 31 07:41:38.004: INFO: Observed &ReplicaSet event: MODIFIED
  Dec 31 07:41:38.004: INFO: Observed &ReplicaSet event: MODIFIED
  Dec 31 07:41:38.005: INFO: Observed &ReplicaSet event: MODIFIED
  Dec 31 07:41:38.005: INFO: Observed replicaset test-rs in namespace replicaset-5331 with annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Dec 31 07:41:38.005: INFO: Observed &ReplicaSet event: MODIFIED
  Dec 31 07:41:38.005: INFO: Found replicaset test-rs in namespace replicaset-5331 with labels: map[name:sample-pod pod:httpd] annotations: map[] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC  }
  Dec 31 07:41:38.005: INFO: Replicaset test-rs has a patched status
  Dec 31 07:41:38.005: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-5331" for this suite. @ 12/31/23 07:41:38.007
• [5.040 seconds]
------------------------------
[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/downwardapi.go:219
  STEP: Creating a kubernetes client @ 12/31/23 07:41:38.01
  Dec 31 07:41:38.010: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 07:41:38.01
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:41:38.017
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:41:38.019
  STEP: Creating a pod to test downward api env vars @ 12/31/23 07:41:38.021
  E1231 07:41:38.551709      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:39.552572      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:40.553260      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:41.553440      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:41:42.032
  Dec 31 07:41:42.033: INFO: Trying to get logs from node worker3 pod downward-api-c4be6fd5-29e0-4850-ab88-cbded2964cc5 container dapi-container: <nil>
  STEP: delete the pod @ 12/31/23 07:41:42.036
  Dec 31 07:41:42.042: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-4972" for this suite. @ 12/31/23 07:41:42.043
• [4.036 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:403
  STEP: Creating a kubernetes client @ 12/31/23 07:41:42.046
  Dec 31 07:41:42.046: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 07:41:42.046
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:41:42.052
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:41:42.054
  STEP: Setting up server cert @ 12/31/23 07:41:42.063
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 07:41:42.48
  STEP: Deploying the webhook pod @ 12/31/23 07:41:42.483
  STEP: Wait for the deployment to be ready @ 12/31/23 07:41:42.488
  Dec 31 07:41:42.492: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  E1231 07:41:42.553871      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:43.553966      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 12/31/23 07:41:44.496
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 07:41:44.501
  E1231 07:41:44.554125      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:45.501: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Creating a validating webhook configuration @ 12/31/23 07:41:45.504
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 12/31/23 07:41:45.521
  STEP: Updating a validating webhook configuration's rules to not include the create operation @ 12/31/23 07:41:45.525
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 12/31/23 07:41:45.533
  STEP: Patching a validating webhook configuration's rules to include the create operation @ 12/31/23 07:41:45.539
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 12/31/23 07:41:45.543
  E1231 07:41:45.555034      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:45.582: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-9383" for this suite. @ 12/31/23 07:41:45.583
  STEP: Destroying namespace "webhook-markers-9199" for this suite. @ 12/31/23 07:41:45.591
• [3.547 seconds]
------------------------------
S
------------------------------
[sig-apps] Deployment should validate Deployment Status endpoints [Conformance] [sig-apps, Conformance]
test/e2e/apps/deployment.go:489
  STEP: Creating a kubernetes client @ 12/31/23 07:41:45.593
  Dec 31 07:41:45.593: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename deployment @ 12/31/23 07:41:45.594
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:41:45.602
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:41:45.603
  STEP: creating a Deployment @ 12/31/23 07:41:45.608
  Dec 31 07:41:45.608: INFO: Creating simple deployment test-deployment-j6q84
  Dec 31 07:41:45.614: INFO: deployment "test-deployment-j6q84" doesn't have the required revision set
  E1231 07:41:46.555527      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:47.555633      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Getting /status @ 12/31/23 07:41:47.619
  Dec 31 07:41:47.620: INFO: Deployment test-deployment-j6q84 has Conditions: [{Available True 2023-12-31 07:41:46 +0000 UTC 2023-12-31 07:41:46 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.} {Progressing True 2023-12-31 07:41:46 +0000 UTC 2023-12-31 07:41:45 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-j6q84-5d576bd769" has successfully progressed.}]
  STEP: updating Deployment Status @ 12/31/23 07:41:47.62
  Dec 31 07:41:47.623: INFO: updatedStatus.Conditions: []v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 41, 46, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 41, 46, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2023, time.December, 31, 7, 41, 46, 0, time.Local), LastTransitionTime:time.Date(2023, time.December, 31, 7, 41, 45, 0, time.Local), Reason:"NewReplicaSetAvailable", Message:"ReplicaSet \"test-deployment-j6q84-5d576bd769\" has successfully progressed."}, v1.DeploymentCondition{Type:"StatusUpdate", Status:"True", LastUpdateTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the Deployment status to be updated @ 12/31/23 07:41:47.624
  Dec 31 07:41:47.624: INFO: Observed &Deployment event: ADDED
  Dec 31 07:41:47.624: INFO: Observed Deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-12-31 07:41:45 +0000 UTC 2023-12-31 07:41:45 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-j6q84-5d576bd769"}
  Dec 31 07:41:47.624: INFO: Observed &Deployment event: MODIFIED
  Dec 31 07:41:47.624: INFO: Observed Deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-12-31 07:41:45 +0000 UTC 2023-12-31 07:41:45 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-j6q84-5d576bd769"}
  Dec 31 07:41:47.624: INFO: Observed Deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2023-12-31 07:41:45 +0000 UTC 2023-12-31 07:41:45 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Dec 31 07:41:47.625: INFO: Observed &Deployment event: MODIFIED
  Dec 31 07:41:47.625: INFO: Observed Deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2023-12-31 07:41:45 +0000 UTC 2023-12-31 07:41:45 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Dec 31 07:41:47.625: INFO: Observed Deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-12-31 07:41:45 +0000 UTC 2023-12-31 07:41:45 +0000 UTC ReplicaSetUpdated ReplicaSet "test-deployment-j6q84-5d576bd769" is progressing.}
  Dec 31 07:41:47.625: INFO: Observed &Deployment event: MODIFIED
  Dec 31 07:41:47.625: INFO: Observed Deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2023-12-31 07:41:46 +0000 UTC 2023-12-31 07:41:46 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Dec 31 07:41:47.625: INFO: Observed Deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-12-31 07:41:46 +0000 UTC 2023-12-31 07:41:45 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-j6q84-5d576bd769" has successfully progressed.}
  Dec 31 07:41:47.625: INFO: Observed &Deployment event: MODIFIED
  Dec 31 07:41:47.625: INFO: Observed Deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2023-12-31 07:41:46 +0000 UTC 2023-12-31 07:41:46 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Dec 31 07:41:47.625: INFO: Observed Deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-12-31 07:41:46 +0000 UTC 2023-12-31 07:41:45 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-j6q84-5d576bd769" has successfully progressed.}
  Dec 31 07:41:47.625: INFO: Found Deployment test-deployment-j6q84 in namespace deployment-1940 with labels: map[e2e:testing name:httpd] annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Dec 31 07:41:47.625: INFO: Deployment test-deployment-j6q84 has an updated status
  STEP: patching the Statefulset Status @ 12/31/23 07:41:47.625
  Dec 31 07:41:47.625: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Dec 31 07:41:47.628: INFO: Patched status conditions: []v1.DeploymentCondition{v1.DeploymentCondition{Type:"StatusPatched", Status:"True", LastUpdateTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Deployment status to be patched @ 12/31/23 07:41:47.628
  Dec 31 07:41:47.629: INFO: Observed &Deployment event: ADDED
  Dec 31 07:41:47.629: INFO: Observed deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-12-31 07:41:45 +0000 UTC 2023-12-31 07:41:45 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-j6q84-5d576bd769"}
  Dec 31 07:41:47.629: INFO: Observed &Deployment event: MODIFIED
  Dec 31 07:41:47.629: INFO: Observed deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-12-31 07:41:45 +0000 UTC 2023-12-31 07:41:45 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-j6q84-5d576bd769"}
  Dec 31 07:41:47.629: INFO: Observed deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2023-12-31 07:41:45 +0000 UTC 2023-12-31 07:41:45 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Dec 31 07:41:47.629: INFO: Observed &Deployment event: MODIFIED
  Dec 31 07:41:47.629: INFO: Observed deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2023-12-31 07:41:45 +0000 UTC 2023-12-31 07:41:45 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Dec 31 07:41:47.629: INFO: Observed deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-12-31 07:41:45 +0000 UTC 2023-12-31 07:41:45 +0000 UTC ReplicaSetUpdated ReplicaSet "test-deployment-j6q84-5d576bd769" is progressing.}
  Dec 31 07:41:47.629: INFO: Observed &Deployment event: MODIFIED
  Dec 31 07:41:47.629: INFO: Observed deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2023-12-31 07:41:46 +0000 UTC 2023-12-31 07:41:46 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Dec 31 07:41:47.629: INFO: Observed deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-12-31 07:41:46 +0000 UTC 2023-12-31 07:41:45 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-j6q84-5d576bd769" has successfully progressed.}
  Dec 31 07:41:47.629: INFO: Observed &Deployment event: MODIFIED
  Dec 31 07:41:47.629: INFO: Observed deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2023-12-31 07:41:46 +0000 UTC 2023-12-31 07:41:46 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Dec 31 07:41:47.629: INFO: Observed deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2023-12-31 07:41:46 +0000 UTC 2023-12-31 07:41:45 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-j6q84-5d576bd769" has successfully progressed.}
  Dec 31 07:41:47.629: INFO: Observed deployment test-deployment-j6q84 in namespace deployment-1940 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Dec 31 07:41:47.630: INFO: Observed &Deployment event: MODIFIED
  Dec 31 07:41:47.630: INFO: Found deployment test-deployment-j6q84 in namespace deployment-1940 with labels: map[e2e:testing name:httpd] annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC  }
  Dec 31 07:41:47.630: INFO: Deployment test-deployment-j6q84 has a patched status
  Dec 31 07:41:47.631: INFO: Deployment "test-deployment-j6q84":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=21) "test-deployment-j6q84",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-1940",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "be06a53b-03e1-4aba-9a71-583f209c82c8",
      ResourceVersion: (string) (len=5) "35737",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839605305,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=3) "e2e": (string) (len=7) "testing"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839605305,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=657) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 65 32 65  22 3a 7b 7d 2c 22 66 3a  |},"f:e2e":{},"f:|
              00000030  6e 61 6d 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |name":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  70 72 6f 67 72 65 73 73  |ec":{"f:progress|
              00000050  44 65 61 64 6c 69 6e 65  53 65 63 6f 6e 64 73 22  |DeadlineSeconds"|
              00000060  3a 7b 7d 2c 22 66 3a 72  65 70 6c 69 63 61 73 22  |:{},"f:replicas"|
              00000070  3a 7b 7d 2c 22 66 3a 72  65 76 69 73 69 6f 6e 48  |:{},"f:revisionH|
              00000080  69 73 74 6f 72 79 4c 69  6d 69 74 22 3a 7b 7d 2c  |istoryLimit":{},|
              00000090  22 66 3a 73 65 6c 65 63  74 6f 72 22 3a 7b 7d 2c  |"f:selector":{},|
              000000a0  22 66 3a 73 74 72 61 74  65 67 79 22 3a 7b 22 66  |"f:strategy":{"f|
              000000b0  3a 72 6f 6c 6c 69 6e 67  55 70 64 61 74 65 22 3a  |:rollingUpdate":|
              000000c0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6d 61 78 53 75  |{".":{},"f:maxSu|
              000000d0  72 67 65 22 3a 7b 7d 2c  22 66 3a 6d 61 78 55 6e  |rge":{},"f:maxUn|
              000000e0  61 76 61 69 6c 61 62 6c  65 22 3a 7b 7d 7d 2c 22  |available":{}},"|
              000000f0  66 3a 74 79 70 65 22 3a  7b 7d 7d 2c 22 66 3a 74  |f:type":{}},"f:t|
              00000100  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000110  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              00000120  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 65 32  |s":{".":{},"f:e2|
              00000130  65 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |e":{},"f:name":{|
              00000140  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              00000150  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000160  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              00000170  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              00000180  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000190  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              000001a0  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              000001b0  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              000001c0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000001d0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000001e0  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000210  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000220  69 63 79 22 3a 7b 7d 2c  22 66 3a 72 65 73 74 61  |icy":{},"f:resta|
              00000230  72 74 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |rtPolicy":{},"f:|
              00000240  73 63 68 65 64 75 6c 65  72 4e 61 6d 65 22 3a 7b  |schedulerName":{|
              00000250  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000260  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000270  69 6e 61 74 69 6f 6e 47  72 61 63 65 50 65 72 69  |inationGracePeri|
              00000280  6f 64 53 65 63 6f 6e 64  73 22 3a 7b 7d 7d 7d 7d  |odSeconds":{}}}}|
              00000290  7d                                                |}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839605307,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=147) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 53 74 61 74  |{\"type\":\"Stat|
              00000030  75 73 50 61 74 63 68 65  64 5c 22 7d 22 3a 7b 22  |usPatched\"}":{"|
              00000040  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |.":{},"f:lastTra|
              00000050  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000060  22 66 3a 6c 61 73 74 55  70 64 61 74 65 54 69 6d  |"f:lastUpdateTim|
              00000070  65 22 3a 7b 7d 2c 22 66  3a 73 74 61 74 75 73 22  |e":{},"f:status"|
              00000080  3a 7b 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |:{},"f:type":{}}|
              00000090  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839605307,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=373) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 50 72 6f  |:{\"type\":\"Pro|
              000000a0  67 72 65 73 73 69 6e 67  5c 22 7d 22 3a 7b 22 2e  |gressing\"}":{".|
              000000b0  22 3a 7b 7d 2c 22 66 3a  6c 61 73 74 54 72 61 6e  |":{},"f:lastTran|
              000000c0  73 69 74 69 6f 6e 54 69  6d 65 22 3a 7b 7d 2c 22  |sitionTime":{},"|
              000000d0  66 3a 6c 61 73 74 55 70  64 61 74 65 54 69 6d 65  |f:lastUpdateTime|
              000000e0  22 3a 7b 7d 2c 22 66 3a  6d 65 73 73 61 67 65 22  |":{},"f:message"|
              000000f0  3a 7b 7d 2c 22 66 3a 72  65 61 73 6f 6e 22 3a 7b  |:{},"f:reason":{|
              00000100  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              00000110  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              00000120  3a 6f 62 73 65 72 76 65  64 47 65 6e 65 72 61 74  |:observedGenerat|
              00000130  69 6f 6e 22 3a 7b 7d 2c  22 66 3a 72 65 61 64 79  |ion":{},"f:ready|
              00000140  52 65 70 6c 69 63 61 73  22 3a 7b 7d 2c 22 66 3a  |Replicas":{},"f:|
              00000150  72 65 70 6c 69 63 61 73  22 3a 7b 7d 2c 22 66 3a  |replicas":{},"f:|
              00000160  75 70 64 61 74 65 64 52  65 70 6c 69 63 61 73 22  |updatedReplicas"|
              00000170  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=3) "e2e": (string) (len=7) "testing"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=3) "e2e": (string) (len=7) "testing",
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=13) "StatusPatched",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839605307,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839605307,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "FoundNewReplicaSet",
          Message: (string) (len=56) "Found new replica set \"test-deployment-j6q84-5d576bd769\""
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Dec 31 07:41:47.633: INFO: New ReplicaSet "test-deployment-j6q84-5d576bd769" of Deployment "test-deployment-j6q84":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-j6q84-5d576bd769",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-1940",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "0a6a79ab-b06b-47c1-aa07-53e2a27d1ed1",
      ResourceVersion: (string) (len=5) "35721",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839605305,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=3) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=21) "test-deployment-j6q84",
          UID: (types.UID) (len=36) "be06a53b-03e1-4aba-9a71-583f209c82c8",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839605305,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=803) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 65 32 65  22 3a 7b 7d 2c 22 66 3a  |},"f:e2e":{},"f:|
              000000d0  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 70 6f 64 2d  |name":{},"f:pod-|
              000000e0  74 65 6d 70 6c 61 74 65  2d 68 61 73 68 22 3a 7b  |template-hash":{|
              000000f0  7d 7d 2c 22 66 3a 6f 77  6e 65 72 52 65 66 65 72  |}},"f:ownerRefer|
              00000100  65 6e 63 65 73 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |ences":{".":{},"|
              00000110  6b 3a 7b 5c 22 75 69 64  5c 22 3a 5c 22 62 65 30  |k:{\"uid\":\"be0|
              00000120  36 61 35 33 62 2d 30 33  65 31 2d 34 61 62 61 2d  |6a53b-03e1-4aba-|
              00000130  39 61 37 31 2d 35 38 33  66 32 30 39 63 38 32 63  |9a71-583f209c82c|
              00000140  38 5c 22 7d 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |8\"}":{}}},"f:sp|
              00000150  65 63 22 3a 7b 22 66 3a  72 65 70 6c 69 63 61 73  |ec":{"f:replicas|
              00000160  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000180  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000190  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              000001a0  3a 7b 7d 2c 22 66 3a 65  32 65 22 3a 7b 7d 2c 22  |:{},"f:e2e":{},"|
              000001b0  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 70 6f  |f:name":{},"f:po|
              000001c0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001d0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000001e0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000001f0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 68  |"k:{\"name\":\"h|
              00000200  74 74 70 64 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |ttpd\"}":{".":{}|
              00000210  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000220  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000230  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000240  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000250  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000260  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000270  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000280  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000290  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              000002a0  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              000002b0  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              000002c0  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              000002d0  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              000002e0  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000002f0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              00000300  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              00000310  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              00000320  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839605306,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=3) {
          (string) (len=3) "e2e": (string) (len=7) "testing",
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=3) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769",
            (string) (len=3) "e2e": (string) (len=7) "testing"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Dec 31 07:41:47.635: INFO: Pod "test-deployment-j6q84-5d576bd769-gz8rv" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=38) "test-deployment-j6q84-5d576bd769-gz8rv",
      GenerateName: (string) (len=33) "test-deployment-j6q84-5d576bd769-",
      Namespace: (string) (len=15) "deployment-1940",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "40e83417-12ae-4ad3-b121-edb54c31966a",
      ResourceVersion: (string) (len=5) "35720",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839605305,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=3) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769",
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=32) "test-deployment-j6q84-5d576bd769",
          UID: (types.UID) (len=36) "0a6a79ab-b06b-47c1-aa07-53e2a27d1ed1",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=23) "kube-controller-manager",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839605305,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=548) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 65 32 65 22 3a 7b 7d  |.":{},"f:e2e":{}|
              00000040  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000050  70 6f 64 2d 74 65 6d 70  6c 61 74 65 2d 68 61 73  |pod-template-has|
              00000060  68 22 3a 7b 7d 7d 2c 22  66 3a 6f 77 6e 65 72 52  |h":{}},"f:ownerR|
              00000070  65 66 65 72 65 6e 63 65  73 22 3a 7b 22 2e 22 3a  |eferences":{".":|
              00000080  7b 7d 2c 22 6b 3a 7b 5c  22 75 69 64 5c 22 3a 5c  |{},"k:{\"uid\":\|
              00000090  22 30 61 36 61 37 39 61  62 2d 62 30 36 62 2d 34  |"0a6a79ab-b06b-4|
              000000a0  37 63 31 2d 61 61 30 37  2d 35 33 65 32 61 32 37  |7c1-aa07-53e2a27|
              000000b0  64 31 65 64 31 5c 22 7d  22 3a 7b 7d 7d 7d 2c 22  |d1ed1\"}":{}}},"|
              000000c0  66 3a 73 70 65 63 22 3a  7b 22 66 3a 63 6f 6e 74  |f:spec":{"f:cont|
              000000d0  61 69 6e 65 72 73 22 3a  7b 22 6b 3a 7b 5c 22 6e  |ainers":{"k:{\"n|
              000000e0  61 6d 65 5c 22 3a 5c 22  68 74 74 70 64 5c 22 7d  |ame\":\"httpd\"}|
              000000f0  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |":{".":{},"f:ima|
              00000100  67 65 22 3a 7b 7d 2c 22  66 3a 69 6d 61 67 65 50  |ge":{},"f:imageP|
              00000110  75 6c 6c 50 6f 6c 69 63  79 22 3a 7b 7d 2c 22 66  |ullPolicy":{},"f|
              00000120  3a 6e 61 6d 65 22 3a 7b  7d 2c 22 66 3a 72 65 73  |:name":{},"f:res|
              00000130  6f 75 72 63 65 73 22 3a  7b 7d 2c 22 66 3a 73 65  |ources":{},"f:se|
              00000140  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000150  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000160  4d 65 73 73 61 67 65 50  61 74 68 22 3a 7b 7d 2c  |MessagePath":{},|
              00000170  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000180  73 73 61 67 65 50 6f 6c  69 63 79 22 3a 7b 7d 7d  |ssagePolicy":{}}|
              00000190  7d 2c 22 66 3a 64 6e 73  50 6f 6c 69 63 79 22 3a  |},"f:dnsPolicy":|
              000001a0  7b 7d 2c 22 66 3a 65 6e  61 62 6c 65 53 65 72 76  |{},"f:enableServ|
              000001b0  69 63 65 4c 69 6e 6b 73  22 3a 7b 7d 2c 22 66 3a  |iceLinks":{},"f:|
              000001c0  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000001d0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000001e0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000001f0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              00000200  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              00000210  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              00000220  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=7) "kubelet",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839605306,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=663) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 50 6f 64 52 65 61  64 79 54 6f 53 74 61 72  |\"PodReadyToStar|
              00000120  74 43 6f 6e 74 61 69 6e  65 72 73 5c 22 7d 22 3a  |tContainers\"}":|
              00000130  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000140  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000150  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000160  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000180  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000190  22 52 65 61 64 79 5c 22  7d 22 3a 7b 22 2e 22 3a  |"Ready\"}":{".":|
              000001a0  7b 7d 2c 22 66 3a 6c 61  73 74 50 72 6f 62 65 54  |{},"f:lastProbeT|
              000001b0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 54  |ime":{},"f:lastT|
              000001c0  72 61 6e 73 69 74 69 6f  6e 54 69 6d 65 22 3a 7b  |ransitionTime":{|
              000001d0  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 7d 2c  |},"f:status":{},|
              000001e0  22 66 3a 74 79 70 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:type":{}}},"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 53 74 61 74 75 73  |:containerStatus|
              00000200  65 73 22 3a 7b 7d 2c 22  66 3a 68 6f 73 74 49 50  |es":{},"f:hostIP|
              00000210  22 3a 7b 7d 2c 22 66 3a  68 6f 73 74 49 50 73 22  |":{},"f:hostIPs"|
              00000220  3a 7b 7d 2c 22 66 3a 70  68 61 73 65 22 3a 7b 7d  |:{},"f:phase":{}|
              00000230  2c 22 66 3a 70 6f 64 49  50 22 3a 7b 7d 2c 22 66  |,"f:podIP":{},"f|
              00000240  3a 70 6f 64 49 50 73 22  3a 7b 22 2e 22 3a 7b 7d  |:podIPs":{".":{}|
              00000250  2c 22 6b 3a 7b 5c 22 69  70 5c 22 3a 5c 22 31 37  |,"k:{\"ip\":\"17|
              00000260  32 2e 32 30 2e 31 36 39  2e 31 36 35 5c 22 7d 22  |2.20.169.165\"}"|
              00000270  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              00000280  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000290  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-dmnzm",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  }),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>),
                  ClusterTrustBundle: (*v1.ClusterTrustBundleProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-dmnzm",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=7) "worker3",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=5) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=25) "PodReadyToStartContainers",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839605306,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839605305,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839605306,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839605306,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63839605305,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=12) "10.255.0.204",
      HostIPs: ([]v1.HostIP) (len=1) {
        (v1.HostIP) {
          IP: (string) (len=12) "10.255.0.204"
        }
      },
      PodIP: (string) (len=14) "172.20.169.165",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=14) "172.20.169.165"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63839605305,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63839605306,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://240a3b611991096759db74b8b3137610c482d3fcf1bb00c399abcb7a08f4624e",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Dec 31 07:41:47.636: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-1940" for this suite. @ 12/31/23 07:41:47.638
• [2.046 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/security_context.go:530
  STEP: Creating a kubernetes client @ 12/31/23 07:41:47.64
  Dec 31 07:41:47.640: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename security-context-test @ 12/31/23 07:41:47.64
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:41:47.646
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:41:47.647
  E1231 07:41:48.556570      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:49.556880      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:50.557586      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:51.558204      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:51.663: INFO: Got logs for pod "busybox-privileged-false-f6c54f74-c9e7-465c-84bc-27619b9b7bb5": "ip: RTNETLINK answers: Operation not permitted\n"
  Dec 31 07:41:51.663: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-9004" for this suite. @ 12/31/23 07:41:51.664
• [4.027 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtimeclass.go:131
  STEP: Creating a kubernetes client @ 12/31/23 07:41:51.667
  Dec 31 07:41:51.667: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename runtimeclass @ 12/31/23 07:41:51.667
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:41:51.681
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:41:51.682
  E1231 07:41:52.558273      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:53.559266      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:41:53.693: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-5452" for this suite. @ 12/31/23 07:41:53.694
• [2.029 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/secrets.go:47
  STEP: Creating a kubernetes client @ 12/31/23 07:41:53.696
  Dec 31 07:41:53.696: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename secrets @ 12/31/23 07:41:53.696
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:41:53.701
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:41:53.702
  STEP: Creating secret with name secret-test-ad23bd4b-f86d-4986-87be-8d81a6bec542 @ 12/31/23 07:41:53.704
  STEP: Creating a pod to test consume secrets @ 12/31/23 07:41:53.706
  E1231 07:41:54.559512      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:55.560554      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:56.561268      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:57.561352      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:41:57.715
  Dec 31 07:41:57.716: INFO: Trying to get logs from node worker2 pod pod-secrets-3ebb00b9-d321-4ba8-a0b4-ade31fd39dfa container secret-env-test: <nil>
  STEP: delete the pod @ 12/31/23 07:41:57.718
  Dec 31 07:41:57.724: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-7412" for this suite. @ 12/31/23 07:41:57.726
• [4.031 seconds]
------------------------------
SSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/empty_dir.go:180
  STEP: Creating a kubernetes client @ 12/31/23 07:41:57.728
  Dec 31 07:41:57.728: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename emptydir @ 12/31/23 07:41:57.728
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:41:57.736
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:41:57.737
  STEP: Creating a pod to test emptydir 0666 on node default medium @ 12/31/23 07:41:57.739
  E1231 07:41:58.561705      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:41:59.561948      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:00.562037      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:01.562105      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:42:01.748
  Dec 31 07:42:01.749: INFO: Trying to get logs from node worker2 pod pod-ce96e5de-6534-4ff8-9244-eee368671931 container test-container: <nil>
  STEP: delete the pod @ 12/31/23 07:42:01.752
  Dec 31 07:42:01.758: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-3872" for this suite. @ 12/31/23 07:42:01.759
• [4.033 seconds]
------------------------------
[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:176
  STEP: Creating a kubernetes client @ 12/31/23 07:42:01.761
  Dec 31 07:42:01.761: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename configmap @ 12/31/23 07:42:01.762
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:42:01.766
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:42:01.767
  STEP: Creating configMap with name configmap-test-upd-fe4903c0-be5e-4569-be5c-563b11f2834c @ 12/31/23 07:42:01.771
  STEP: Creating the pod @ 12/31/23 07:42:01.773
  E1231 07:42:02.562205      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:03.562292      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for pod with text data @ 12/31/23 07:42:03.78
  STEP: Waiting for pod with binary data @ 12/31/23 07:42:03.783
  Dec 31 07:42:03.785: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-5211" for this suite. @ 12/31/23 07:42:03.786
• [2.028 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/field_validation.go:474
  STEP: Creating a kubernetes client @ 12/31/23 07:42:03.79
  Dec 31 07:42:03.790: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename field-validation @ 12/31/23 07:42:03.79
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:42:03.799
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:42:03.8
  Dec 31 07:42:03.802: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  E1231 07:42:04.563236      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:05.563494      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  W1231 07:42:06.330149      23 warnings.go:70] unknown field "alpha"
  W1231 07:42:06.330162      23 warnings.go:70] unknown field "beta"
  W1231 07:42:06.330165      23 warnings.go:70] unknown field "delta"
  W1231 07:42:06.330168      23 warnings.go:70] unknown field "epsilon"
  W1231 07:42:06.330170      23 warnings.go:70] unknown field "gamma"
  E1231 07:42:06.564575      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:42:06.848: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-7760" for this suite. @ 12/31/23 07:42:06.849
• [3.062 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:332
  STEP: Creating a kubernetes client @ 12/31/23 07:42:06.852
  Dec 31 07:42:06.852: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 07:42:06.852
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:42:06.859
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:42:06.861
  STEP: Setting up server cert @ 12/31/23 07:42:06.871
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 07:42:07.171
  STEP: Deploying the webhook pod @ 12/31/23 07:42:07.174
  STEP: Wait for the deployment to be ready @ 12/31/23 07:42:07.179
  Dec 31 07:42:07.183: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  E1231 07:42:07.565505      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:08.565775      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 12/31/23 07:42:09.187
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 07:42:09.192
  E1231 07:42:09.566105      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:42:10.192: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Dec 31 07:42:10.195: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  E1231 07:42:10.566892      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-6206-crds.webhook.example.com via the AdmissionRegistration API @ 12/31/23 07:42:10.706
  STEP: Creating a custom resource that should be mutated by the webhook @ 12/31/23 07:42:10.714
  E1231 07:42:11.567607      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:12.567688      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:42:13.274: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-1494" for this suite. @ 12/31/23 07:42:13.276
  STEP: Destroying namespace "webhook-markers-103" for this suite. @ 12/31/23 07:42:13.278
• [6.430 seconds]
------------------------------
SSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance] [sig-apps, Conformance]
test/e2e/apps/statefulset.go:332
  STEP: Creating a kubernetes client @ 12/31/23 07:42:13.282
  Dec 31 07:42:13.282: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename statefulset @ 12/31/23 07:42:13.283
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:42:13.29
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:42:13.292
  STEP: Creating service test in namespace statefulset-5058 @ 12/31/23 07:42:13.295
  STEP: Creating a new StatefulSet @ 12/31/23 07:42:13.297
  Dec 31 07:42:13.304: INFO: Found 0 stateful pods, waiting for 3
  E1231 07:42:13.567761      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:14.567859      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:15.568558      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:16.568585      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:17.568717      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:18.568789      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:19.568929      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:20.569060      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:21.569394      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:22.569533      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:42:23.303: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Dec 31 07:42:23.303: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Dec 31 07:42:23.303: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Updating stateful set template: update image from registry.k8s.io/e2e-test-images/httpd:2.4.38-4 to registry.k8s.io/e2e-test-images/httpd:2.4.39-4 @ 12/31/23 07:42:23.306
  Dec 31 07:42:23.321: INFO: Updating stateful set ss2
  STEP: Creating a new revision @ 12/31/23 07:42:23.321
  E1231 07:42:23.569813      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:24.569910      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:25.570030      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:26.570297      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:27.570369      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:28.571414      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:29.571502      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:30.572571      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:31.572999      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:32.573080      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Not applying an update when the partition is greater than the number of replicas @ 12/31/23 07:42:33.324
  STEP: Performing a canary update @ 12/31/23 07:42:33.325
  Dec 31 07:42:33.338: INFO: Updating stateful set ss2
  Dec 31 07:42:33.341: INFO: Waiting for Pod statefulset-5058/ss2-2 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  E1231 07:42:33.573440      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:34.573565      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:35.573654      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:36.574662      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:37.574726      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:38.574855      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:39.574950      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:40.575018      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:41.575190      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:42.575266      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Restoring Pods to the correct revision when they are deleted @ 12/31/23 07:42:43.342
  Dec 31 07:42:43.360: INFO: Found 1 stateful pods, waiting for 3
  E1231 07:42:43.575638      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:44.575715      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:45.576571      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:46.576590      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:47.576663      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:48.577423      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:49.578269      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:50.579229      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:51.580176      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:52.580256      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:42:53.360: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Dec 31 07:42:53.360: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Dec 31 07:42:53.360: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Performing a phased rolling update @ 12/31/23 07:42:53.362
  Dec 31 07:42:53.376: INFO: Updating stateful set ss2
  Dec 31 07:42:53.378: INFO: Waiting for Pod statefulset-5058/ss2-1 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  E1231 07:42:53.580779      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:54.581556      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:55.581830      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:56.582670      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:57.582751      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:58.582883      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:42:59.583023      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:00.583163      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:01.584178      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:02.584269      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:43:03.394: INFO: Updating stateful set ss2
  Dec 31 07:43:03.397: INFO: Waiting for StatefulSet statefulset-5058/ss2 to complete update
  Dec 31 07:43:03.397: INFO: Waiting for Pod statefulset-5058/ss2-0 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  E1231 07:43:03.584758      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:04.584852      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:05.584940      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:06.585198      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:07.586247      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:08.586334      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:09.586480      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:10.586620      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:11.586995      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:12.587744      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:43:13.399: INFO: Deleting all statefulset in ns statefulset-5058
  Dec 31 07:43:13.400: INFO: Scaling statefulset ss2 to 0
  E1231 07:43:13.587985      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:14.587941      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:15.588988      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:16.589195      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:17.589328      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:18.589416      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:19.589539      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:20.589661      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:21.590017      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:22.590140      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:43:23.406: INFO: Waiting for statefulset status.replicas updated to 0
  Dec 31 07:43:23.408: INFO: Deleting statefulset ss2
  Dec 31 07:43:23.412: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-5058" for this suite. @ 12/31/23 07:43:23.414
• [70.134 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:453
  STEP: Creating a kubernetes client @ 12/31/23 07:43:23.416
  Dec 31 07:43:23.416: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename resourcequota @ 12/31/23 07:43:23.416
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:43:23.423
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:43:23.424
  STEP: Counting existing ResourceQuota @ 12/31/23 07:43:23.425
  E1231 07:43:23.591097      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:24.591858      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:25.592192      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:26.592554      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:27.593281      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota @ 12/31/23 07:43:28.427
  STEP: Ensuring resource quota status is calculated @ 12/31/23 07:43:28.429
  E1231 07:43:28.593966      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:29.594223      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ReplicaSet @ 12/31/23 07:43:30.431
  STEP: Ensuring resource quota status captures replicaset creation @ 12/31/23 07:43:30.437
  E1231 07:43:30.594741      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:31.595148      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting a ReplicaSet @ 12/31/23 07:43:32.439
  STEP: Ensuring resource quota status released usage @ 12/31/23 07:43:32.441
  E1231 07:43:32.595901      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:33.596556      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:43:34.443: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-978" for this suite. @ 12/31/23 07:43:34.445
• [11.032 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/kubelet.go:109
  STEP: Creating a kubernetes client @ 12/31/23 07:43:34.449
  Dec 31 07:43:34.449: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubelet-test @ 12/31/23 07:43:34.449
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:43:34.455
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:43:34.456
  E1231 07:43:34.597033      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:35.597098      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:36.597347      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:37.597413      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:43:38.464: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-7939" for this suite. @ 12/31/23 07:43:38.465
• [4.019 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance] [sig-storage, Conformance]
test/e2e/storage/csi_inline.go:157
  STEP: Creating a kubernetes client @ 12/31/23 07:43:38.468
  Dec 31 07:43:38.468: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename csiinlinevolumes @ 12/31/23 07:43:38.468
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:43:38.474
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:43:38.476
  STEP: Creating two CSIDrivers @ 12/31/23 07:43:38.477
  STEP: Getting "inline-driver-a4744c93-8735-4697-8cec-4ca35e5f9269" & "inline-driver-069b39d8-bb54-4e35-a1c2-8b4f8ba54dbb" @ 12/31/23 07:43:38.483
  STEP: Patching the CSIDriver "inline-driver-069b39d8-bb54-4e35-a1c2-8b4f8ba54dbb" @ 12/31/23 07:43:38.485
  STEP: Updating the CSIDriver "inline-driver-069b39d8-bb54-4e35-a1c2-8b4f8ba54dbb" @ 12/31/23 07:43:38.488
  STEP: Listing all CSIDrivers with the labelSelector: "e2e-test=csiinlinevolumes-9171" @ 12/31/23 07:43:38.491
  STEP: Deleting CSIDriver "inline-driver-a4744c93-8735-4697-8cec-4ca35e5f9269" @ 12/31/23 07:43:38.492
  STEP: Confirm deletion of CSIDriver "inline-driver-a4744c93-8735-4697-8cec-4ca35e5f9269" @ 12/31/23 07:43:38.494
  STEP: Deleting CSIDriver "inline-driver-069b39d8-bb54-4e35-a1c2-8b4f8ba54dbb" via DeleteCollection @ 12/31/23 07:43:38.495
  STEP: Confirm deletion of CSIDriver "inline-driver-069b39d8-bb54-4e35-a1c2-8b4f8ba54dbb" @ 12/31/23 07:43:38.497
  Dec 31 07:43:38.498: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csiinlinevolumes-9171" for this suite. @ 12/31/23 07:43:38.499
• [0.034 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-instrumentation] Events should manage the lifecycle of an event [Conformance] [sig-instrumentation, Conformance]
test/e2e/instrumentation/core_events.go:58
  STEP: Creating a kubernetes client @ 12/31/23 07:43:38.502
  Dec 31 07:43:38.502: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename events @ 12/31/23 07:43:38.503
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:43:38.508
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:43:38.509
  STEP: creating a test event @ 12/31/23 07:43:38.512
  STEP: listing all events in all namespaces @ 12/31/23 07:43:38.513
  STEP: patching the test event @ 12/31/23 07:43:38.514
  STEP: fetching the test event @ 12/31/23 07:43:38.517
  STEP: updating the test event @ 12/31/23 07:43:38.518
  STEP: getting the test event @ 12/31/23 07:43:38.52
  STEP: deleting the test event @ 12/31/23 07:43:38.521
  STEP: listing all events in all namespaces @ 12/31/23 07:43:38.523
  Dec 31 07:43:38.524: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-4375" for this suite. @ 12/31/23 07:43:38.526
• [0.026 seconds]
------------------------------
SS
------------------------------
[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Conformance] [sig-apps, Conformance]
test/e2e/apps/job.go:408
  STEP: Creating a kubernetes client @ 12/31/23 07:43:38.529
  Dec 31 07:43:38.529: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename job @ 12/31/23 07:43:38.529
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:43:38.534
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:43:38.535
  STEP: Creating Indexed job @ 12/31/23 07:43:38.537
  STEP: Ensuring job reaches completions @ 12/31/23 07:43:38.539
  E1231 07:43:38.597434      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:39.598289      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:40.598798      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:41.599129      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:42.599830      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:43.599918      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:44.600132      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:45.600219      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring pods with index for job exist @ 12/31/23 07:43:46.541
  Dec 31 07:43:46.543: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-5517" for this suite. @ 12/31/23 07:43:46.544
• [8.018 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:572
  STEP: Creating a kubernetes client @ 12/31/23 07:43:46.546
  Dec 31 07:43:46.546: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 07:43:46.547
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:43:46.552
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:43:46.554
  STEP: Setting up server cert @ 12/31/23 07:43:46.564
  E1231 07:43:46.600568      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 07:43:46.892
  STEP: Deploying the webhook pod @ 12/31/23 07:43:46.896
  STEP: Wait for the deployment to be ready @ 12/31/23 07:43:46.9
  Dec 31 07:43:46.904: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  E1231 07:43:47.600856      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:48.600997      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 12/31/23 07:43:48.909
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 07:43:48.914
  E1231 07:43:49.601698      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:43:49.915: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Listing all of the created validation webhooks @ 12/31/23 07:43:49.943
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 12/31/23 07:43:49.965
  STEP: Deleting the collection of validation webhooks @ 12/31/23 07:43:49.983
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 12/31/23 07:43:49.998
  Dec 31 07:43:50.018: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-4180" for this suite. @ 12/31/23 07:43:50.02
  STEP: Destroying namespace "webhook-markers-7120" for this suite. @ 12/31/23 07:43:50.024
• [3.483 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/garbage_collector.go:380
  STEP: Creating a kubernetes client @ 12/31/23 07:43:50.029
  Dec 31 07:43:50.029: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename gc @ 12/31/23 07:43:50.03
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:43:50.038
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:43:50.04
  STEP: create the rc @ 12/31/23 07:43:50.043
  W1231 07:43:50.045489      23 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  E1231 07:43:50.602133      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:51.602280      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:52.604250      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:53.605022      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:54.605222      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:55.605480      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the rc @ 12/31/23 07:43:56.047
  STEP: wait for the rc to be deleted @ 12/31/23 07:43:56.048
  E1231 07:43:56.605798      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:57.605916      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:58.606701      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:43:59.607238      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:00.607456      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: wait for 30 seconds to see if the garbage collector mistakenly deletes the pods @ 12/31/23 07:44:01.051
  E1231 07:44:01.608251      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:02.609007      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:03.609089      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:04.609914      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:05.610014      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:06.610390      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:07.610463      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:08.610584      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:09.610703      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:10.610901      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:11.611239      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:12.611315      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:13.612169      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:14.612556      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:15.612670      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:16.613633      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:17.613758      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:18.614231      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:19.614321      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:20.614403      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:21.615158      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:22.615243      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:23.615370      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:24.615492      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:25.616564      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:26.616596      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:27.616697      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:28.617590      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:29.617675      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:30.617816      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Gathering metrics @ 12/31/23 07:44:31.059
  W1231 07:44:31.061733      23 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Dec 31 07:44:31.061: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Dec 31 07:44:31.061: INFO: Deleting pod "simpletest.rc-2btpd" in namespace "gc-8526"
  Dec 31 07:44:31.071: INFO: Deleting pod "simpletest.rc-2c8j8" in namespace "gc-8526"
  Dec 31 07:44:31.076: INFO: Deleting pod "simpletest.rc-2l729" in namespace "gc-8526"
  Dec 31 07:44:31.082: INFO: Deleting pod "simpletest.rc-2mt5t" in namespace "gc-8526"
  Dec 31 07:44:31.091: INFO: Deleting pod "simpletest.rc-2mwjn" in namespace "gc-8526"
  Dec 31 07:44:31.096: INFO: Deleting pod "simpletest.rc-2q8d4" in namespace "gc-8526"
  Dec 31 07:44:31.100: INFO: Deleting pod "simpletest.rc-2vml8" in namespace "gc-8526"
  Dec 31 07:44:31.105: INFO: Deleting pod "simpletest.rc-2x74g" in namespace "gc-8526"
  Dec 31 07:44:31.112: INFO: Deleting pod "simpletest.rc-4ftvm" in namespace "gc-8526"
  Dec 31 07:44:31.116: INFO: Deleting pod "simpletest.rc-4j8lc" in namespace "gc-8526"
  Dec 31 07:44:31.120: INFO: Deleting pod "simpletest.rc-4txb5" in namespace "gc-8526"
  Dec 31 07:44:31.127: INFO: Deleting pod "simpletest.rc-4z9zk" in namespace "gc-8526"
  Dec 31 07:44:31.133: INFO: Deleting pod "simpletest.rc-59fdl" in namespace "gc-8526"
  Dec 31 07:44:31.147: INFO: Deleting pod "simpletest.rc-5gqkh" in namespace "gc-8526"
  Dec 31 07:44:31.155: INFO: Deleting pod "simpletest.rc-5kdbp" in namespace "gc-8526"
  Dec 31 07:44:31.166: INFO: Deleting pod "simpletest.rc-5m6bq" in namespace "gc-8526"
  Dec 31 07:44:31.176: INFO: Deleting pod "simpletest.rc-6cm7g" in namespace "gc-8526"
  Dec 31 07:44:31.183: INFO: Deleting pod "simpletest.rc-6wnr9" in namespace "gc-8526"
  Dec 31 07:44:31.191: INFO: Deleting pod "simpletest.rc-78xfn" in namespace "gc-8526"
  Dec 31 07:44:31.200: INFO: Deleting pod "simpletest.rc-7jbrj" in namespace "gc-8526"
  Dec 31 07:44:31.208: INFO: Deleting pod "simpletest.rc-8ncrj" in namespace "gc-8526"
  Dec 31 07:44:31.218: INFO: Deleting pod "simpletest.rc-8xfsh" in namespace "gc-8526"
  Dec 31 07:44:31.232: INFO: Deleting pod "simpletest.rc-9b5qn" in namespace "gc-8526"
  Dec 31 07:44:31.245: INFO: Deleting pod "simpletest.rc-9q96l" in namespace "gc-8526"
  Dec 31 07:44:31.251: INFO: Deleting pod "simpletest.rc-9rj82" in namespace "gc-8526"
  Dec 31 07:44:31.260: INFO: Deleting pod "simpletest.rc-9vgbd" in namespace "gc-8526"
  Dec 31 07:44:31.274: INFO: Deleting pod "simpletest.rc-b68sf" in namespace "gc-8526"
  Dec 31 07:44:31.302: INFO: Deleting pod "simpletest.rc-bg9gj" in namespace "gc-8526"
  Dec 31 07:44:31.332: INFO: Deleting pod "simpletest.rc-bkf8z" in namespace "gc-8526"
  Dec 31 07:44:31.349: INFO: Deleting pod "simpletest.rc-bmxpx" in namespace "gc-8526"
  Dec 31 07:44:31.357: INFO: Deleting pod "simpletest.rc-brtr5" in namespace "gc-8526"
  Dec 31 07:44:31.376: INFO: Deleting pod "simpletest.rc-bv56x" in namespace "gc-8526"
  Dec 31 07:44:31.387: INFO: Deleting pod "simpletest.rc-bxxwk" in namespace "gc-8526"
  Dec 31 07:44:31.408: INFO: Deleting pod "simpletest.rc-cfcfh" in namespace "gc-8526"
  Dec 31 07:44:31.443: INFO: Deleting pod "simpletest.rc-cjvfc" in namespace "gc-8526"
  Dec 31 07:44:31.471: INFO: Deleting pod "simpletest.rc-d7xn6" in namespace "gc-8526"
  Dec 31 07:44:31.494: INFO: Deleting pod "simpletest.rc-dgqw6" in namespace "gc-8526"
  Dec 31 07:44:31.516: INFO: Deleting pod "simpletest.rc-dl4k9" in namespace "gc-8526"
  Dec 31 07:44:31.546: INFO: Deleting pod "simpletest.rc-dqhtd" in namespace "gc-8526"
  Dec 31 07:44:31.565: INFO: Deleting pod "simpletest.rc-dvdvr" in namespace "gc-8526"
  Dec 31 07:44:31.588: INFO: Deleting pod "simpletest.rc-f78qh" in namespace "gc-8526"
  Dec 31 07:44:31.619: INFO: Deleting pod "simpletest.rc-f8dzz" in namespace "gc-8526"
  E1231 07:44:31.619927      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:44:31.641: INFO: Deleting pod "simpletest.rc-fqlrk" in namespace "gc-8526"
  Dec 31 07:44:31.661: INFO: Deleting pod "simpletest.rc-g5pkt" in namespace "gc-8526"
  Dec 31 07:44:31.704: INFO: Deleting pod "simpletest.rc-ggnlm" in namespace "gc-8526"
  Dec 31 07:44:31.749: INFO: Deleting pod "simpletest.rc-gmlcz" in namespace "gc-8526"
  Dec 31 07:44:31.791: INFO: Deleting pod "simpletest.rc-gpgfp" in namespace "gc-8526"
  Dec 31 07:44:31.812: INFO: Deleting pod "simpletest.rc-gszf8" in namespace "gc-8526"
  Dec 31 07:44:31.855: INFO: Deleting pod "simpletest.rc-gztr2" in namespace "gc-8526"
  Dec 31 07:44:31.878: INFO: Deleting pod "simpletest.rc-h56vb" in namespace "gc-8526"
  Dec 31 07:44:31.899: INFO: Deleting pod "simpletest.rc-hff8w" in namespace "gc-8526"
  Dec 31 07:44:31.917: INFO: Deleting pod "simpletest.rc-hff94" in namespace "gc-8526"
  Dec 31 07:44:31.945: INFO: Deleting pod "simpletest.rc-jnzw9" in namespace "gc-8526"
  Dec 31 07:44:31.979: INFO: Deleting pod "simpletest.rc-jq2kc" in namespace "gc-8526"
  Dec 31 07:44:32.007: INFO: Deleting pod "simpletest.rc-kdnfb" in namespace "gc-8526"
  Dec 31 07:44:32.036: INFO: Deleting pod "simpletest.rc-ljkqd" in namespace "gc-8526"
  Dec 31 07:44:32.080: INFO: Deleting pod "simpletest.rc-lmxfs" in namespace "gc-8526"
  Dec 31 07:44:32.105: INFO: Deleting pod "simpletest.rc-lsdj7" in namespace "gc-8526"
  Dec 31 07:44:32.122: INFO: Deleting pod "simpletest.rc-m7szv" in namespace "gc-8526"
  Dec 31 07:44:32.133: INFO: Deleting pod "simpletest.rc-mgldb" in namespace "gc-8526"
  Dec 31 07:44:32.189: INFO: Deleting pod "simpletest.rc-mks8q" in namespace "gc-8526"
  Dec 31 07:44:32.207: INFO: Deleting pod "simpletest.rc-mtpxd" in namespace "gc-8526"
  Dec 31 07:44:32.233: INFO: Deleting pod "simpletest.rc-n79nh" in namespace "gc-8526"
  Dec 31 07:44:32.251: INFO: Deleting pod "simpletest.rc-n852x" in namespace "gc-8526"
  Dec 31 07:44:32.279: INFO: Deleting pod "simpletest.rc-nmhn9" in namespace "gc-8526"
  Dec 31 07:44:32.296: INFO: Deleting pod "simpletest.rc-p4v7m" in namespace "gc-8526"
  Dec 31 07:44:32.313: INFO: Deleting pod "simpletest.rc-pqknx" in namespace "gc-8526"
  Dec 31 07:44:32.344: INFO: Deleting pod "simpletest.rc-qptlc" in namespace "gc-8526"
  Dec 31 07:44:32.373: INFO: Deleting pod "simpletest.rc-qqbcg" in namespace "gc-8526"
  Dec 31 07:44:32.413: INFO: Deleting pod "simpletest.rc-r4stj" in namespace "gc-8526"
  Dec 31 07:44:32.458: INFO: Deleting pod "simpletest.rc-rcmkv" in namespace "gc-8526"
  Dec 31 07:44:32.482: INFO: Deleting pod "simpletest.rc-sdkm7" in namespace "gc-8526"
  Dec 31 07:44:32.523: INFO: Deleting pod "simpletest.rc-sllgb" in namespace "gc-8526"
  Dec 31 07:44:32.541: INFO: Deleting pod "simpletest.rc-spswx" in namespace "gc-8526"
  Dec 31 07:44:32.562: INFO: Deleting pod "simpletest.rc-stcsg" in namespace "gc-8526"
  Dec 31 07:44:32.597: INFO: Deleting pod "simpletest.rc-svwh6" in namespace "gc-8526"
  Dec 31 07:44:32.619: INFO: Deleting pod "simpletest.rc-swcrz" in namespace "gc-8526"
  E1231 07:44:32.621623      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:44:32.645: INFO: Deleting pod "simpletest.rc-t6tqb" in namespace "gc-8526"
  Dec 31 07:44:32.674: INFO: Deleting pod "simpletest.rc-tftcl" in namespace "gc-8526"
  Dec 31 07:44:32.693: INFO: Deleting pod "simpletest.rc-thgfv" in namespace "gc-8526"
  Dec 31 07:44:32.713: INFO: Deleting pod "simpletest.rc-tsp8h" in namespace "gc-8526"
  Dec 31 07:44:32.756: INFO: Deleting pod "simpletest.rc-v8gqg" in namespace "gc-8526"
  Dec 31 07:44:32.809: INFO: Deleting pod "simpletest.rc-vpcvk" in namespace "gc-8526"
  Dec 31 07:44:32.888: INFO: Deleting pod "simpletest.rc-vq9s2" in namespace "gc-8526"
  Dec 31 07:44:32.905: INFO: Deleting pod "simpletest.rc-w2xvd" in namespace "gc-8526"
  Dec 31 07:44:32.927: INFO: Deleting pod "simpletest.rc-w7rlb" in namespace "gc-8526"
  Dec 31 07:44:32.970: INFO: Deleting pod "simpletest.rc-wgdwv" in namespace "gc-8526"
  Dec 31 07:44:33.019: INFO: Deleting pod "simpletest.rc-wvcvw" in namespace "gc-8526"
  Dec 31 07:44:33.073: INFO: Deleting pod "simpletest.rc-wx86m" in namespace "gc-8526"
  Dec 31 07:44:33.187: INFO: Deleting pod "simpletest.rc-x6jw2" in namespace "gc-8526"
  Dec 31 07:44:33.233: INFO: Deleting pod "simpletest.rc-xf9sl" in namespace "gc-8526"
  Dec 31 07:44:33.253: INFO: Deleting pod "simpletest.rc-xfzcl" in namespace "gc-8526"
  Dec 31 07:44:33.273: INFO: Deleting pod "simpletest.rc-xkhxt" in namespace "gc-8526"
  Dec 31 07:44:33.328: INFO: Deleting pod "simpletest.rc-xm6v6" in namespace "gc-8526"
  Dec 31 07:44:33.420: INFO: Deleting pod "simpletest.rc-xt4t8" in namespace "gc-8526"
  Dec 31 07:44:33.476: INFO: Deleting pod "simpletest.rc-z6w62" in namespace "gc-8526"
  Dec 31 07:44:33.501: INFO: Deleting pod "simpletest.rc-z958l" in namespace "gc-8526"
  Dec 31 07:44:33.525: INFO: Deleting pod "simpletest.rc-zgsp9" in namespace "gc-8526"
  Dec 31 07:44:33.568: INFO: Deleting pod "simpletest.rc-zhzh6" in namespace "gc-8526"
  E1231 07:44:33.622025      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:44:33.622: INFO: Deleting pod "simpletest.rc-zjqg9" in namespace "gc-8526"
  Dec 31 07:44:33.664: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-8526" for this suite. @ 12/31/23 07:44:33.706
• [43.749 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Pods should patch a pod status [Conformance] [sig-node, Conformance]
test/e2e/common/node/pods.go:1084
  STEP: Creating a kubernetes client @ 12/31/23 07:44:33.778
  Dec 31 07:44:33.778: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pods @ 12/31/23 07:44:33.779
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:44:33.828
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:44:33.832
  STEP: Create a pod @ 12/31/23 07:44:33.835
  E1231 07:44:34.622279      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:35.622403      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: patching /status @ 12/31/23 07:44:35.85
  Dec 31 07:44:35.855: INFO: Status Message: "Patched by e2e test" and Reason: "E2E"
  Dec 31 07:44:35.855: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-4279" for this suite. @ 12/31/23 07:44:35.857
• [2.080 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/configmap_volume.go:58
  STEP: Creating a kubernetes client @ 12/31/23 07:44:35.859
  Dec 31 07:44:35.859: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename configmap @ 12/31/23 07:44:35.859
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:44:35.867
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:44:35.87
  STEP: Creating configMap with name configmap-test-volume-89f6152f-323f-453e-a86f-d875d1508545 @ 12/31/23 07:44:35.872
  STEP: Creating a pod to test consume configMaps @ 12/31/23 07:44:35.873
  E1231 07:44:36.622667      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:37.623045      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:38.623984      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:39.624570      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:44:39.882
  Dec 31 07:44:39.884: INFO: Trying to get logs from node worker2 pod pod-configmaps-1de44831-84a4-4fd9-bf57-5276dca35944 container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 07:44:39.89
  Dec 31 07:44:39.897: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-8453" for this suite. @ 12/31/23 07:44:39.898
• [4.041 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance] [sig-network, Conformance]
test/e2e/network/endpointslice.go:208
  STEP: Creating a kubernetes client @ 12/31/23 07:44:39.9
  Dec 31 07:44:39.900: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename endpointslice @ 12/31/23 07:44:39.9
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:44:39.907
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:44:39.908
  E1231 07:44:40.625088      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:41.626005      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:42.626247      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:43.626289      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:44.626427      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: referencing a single matching pod @ 12/31/23 07:44:44.944
  E1231 07:44:45.627072      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:46.627145      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:47.627272      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:48.627421      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:49.627508      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: referencing matching pods with named port @ 12/31/23 07:44:49.948
  E1231 07:44:50.628527      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:51.628715      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:52.629117      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:53.629618      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:54.630127      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: creating empty Endpoints and EndpointSlices for no matching Pods @ 12/31/23 07:44:54.952
  E1231 07:44:55.631172      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:56.632211      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:57.632595      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:58.632799      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:44:59.632934      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: recreating EndpointSlices after they've been deleted @ 12/31/23 07:44:59.956
  Dec 31 07:44:59.963: INFO: EndpointSlice for Service endpointslice-2304/example-named-port not found
  E1231 07:45:00.633013      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:01.633343      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:02.633502      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:03.633626      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:04.633699      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:05.634505      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:06.634654      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:07.635388      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:08.635514      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:09.635602      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:45:09.967: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-2304" for this suite. @ 12/31/23 07:45:09.969
• [30.071 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply a finalizer to a Namespace [Conformance] [sig-api-machinery, Serial, Conformance]
test/e2e/apimachinery/namespace.go:400
  STEP: Creating a kubernetes client @ 12/31/23 07:45:09.971
  Dec 31 07:45:09.971: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename namespaces @ 12/31/23 07:45:09.972
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:45:09.978
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:45:09.98
  STEP: Creating namespace "e2e-ns-c6t6j" @ 12/31/23 07:45:09.981
  Dec 31 07:45:09.986: INFO: Namespace "e2e-ns-c6t6j-7337" has []v1.FinalizerName{"kubernetes"}
  STEP: Adding e2e finalizer to namespace "e2e-ns-c6t6j-7337" @ 12/31/23 07:45:09.986
  Dec 31 07:45:09.992: INFO: Namespace "e2e-ns-c6t6j-7337" has []v1.FinalizerName{"kubernetes", "e2e.example.com/fakeFinalizer"}
  STEP: Removing e2e finalizer from namespace "e2e-ns-c6t6j-7337" @ 12/31/23 07:45:09.992
  Dec 31 07:45:09.995: INFO: Namespace "e2e-ns-c6t6j-7337" has []v1.FinalizerName{"kubernetes"}
  Dec 31 07:45:09.995: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-9493" for this suite. @ 12/31/23 07:45:09.996
  STEP: Destroying namespace "e2e-ns-c6t6j-7337" for this suite. @ 12/31/23 07:45:09.998
• [0.028 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Pods should delete a collection of pods [Conformance] [sig-node, Conformance]
test/e2e/common/node/pods.go:846
  STEP: Creating a kubernetes client @ 12/31/23 07:45:10
  Dec 31 07:45:10.000: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pods @ 12/31/23 07:45:10
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:45:10.006
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:45:10.015
  STEP: Create set of pods @ 12/31/23 07:45:10.016
  Dec 31 07:45:10.020: INFO: created test-pod-1
  Dec 31 07:45:10.025: INFO: created test-pod-2
  Dec 31 07:45:10.027: INFO: created test-pod-3
  STEP: waiting for all 3 pods to be running @ 12/31/23 07:45:10.027
  E1231 07:45:10.636597      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:11.636923      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: waiting for all pods to be deleted @ 12/31/23 07:45:12.047
  Dec 31 07:45:12.048: INFO: Pod quantity 3 is different from expected quantity 0
  E1231 07:45:12.637046      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:45:13.049: INFO: Pod quantity 2 is different from expected quantity 0
  E1231 07:45:13.637316      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:45:14.048: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-5321" for this suite. @ 12/31/23 07:45:14.052
• [4.055 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/ephemeral_containers.go:98
  STEP: Creating a kubernetes client @ 12/31/23 07:45:14.056
  Dec 31 07:45:14.056: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename ephemeral-containers-test @ 12/31/23 07:45:14.056
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:45:14.066
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:45:14.068
  STEP: creating a target pod @ 12/31/23 07:45:14.069
  E1231 07:45:14.637273      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:15.637354      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: adding an ephemeral container @ 12/31/23 07:45:16.078
  E1231 07:45:16.637486      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:17.637568      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking pod container endpoints @ 12/31/23 07:45:18.086
  Dec 31 07:45:18.086: INFO: ExecWithOptions {Command:[/bin/echo marco] Namespace:ephemeral-containers-test-8139 PodName:ephemeral-containers-target-pod ContainerName:debugger Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:45:18.086: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:45:18.087: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:45:18.087: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/ephemeral-containers-test-8139/pods/ephemeral-containers-target-pod/exec?command=%2Fbin%2Fecho&command=marco&container=debugger&container=debugger&stderr=true&stdout=true)
  Dec 31 07:45:18.136: INFO: Exec stderr: ""
  STEP: checking pod "ephemeral-containers-target-pod" has only one ephemeralcontainer @ 12/31/23 07:45:18.151
  STEP: adding another ephemeralcontainer to pod "ephemeral-containers-target-pod" @ 12/31/23 07:45:18.153
  STEP: checking pod "ephemeral-containers-target-pod" has only two ephemeralcontainers @ 12/31/23 07:45:18.157
  Dec 31 07:45:18.158: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ephemeral-containers-test-8139" for this suite. @ 12/31/23 07:45:18.16
• [4.107 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:330
  STEP: Creating a kubernetes client @ 12/31/23 07:45:18.163
  Dec 31 07:45:18.163: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename resourcequota @ 12/31/23 07:45:18.164
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:45:18.17
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:45:18.173
  E1231 07:45:18.638035      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:19.638384      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:20.638467      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:21.639201      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:22.640126      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:23.640475      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:24.641507      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:25.641991      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:26.642761      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:27.643545      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:28.644560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:29.645115      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:30.645293      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:31.646149      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:32.646568      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:33.646909      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:34.646990      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Counting existing ResourceQuota @ 12/31/23 07:45:35.177
  E1231 07:45:35.647488      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:36.648297      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:37.648384      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:38.648824      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:39.649005      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota @ 12/31/23 07:45:40.178
  STEP: Ensuring resource quota status is calculated @ 12/31/23 07:45:40.18
  E1231 07:45:40.649418      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:41.649885      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ConfigMap @ 12/31/23 07:45:42.182
  STEP: Ensuring resource quota status captures configMap creation @ 12/31/23 07:45:42.188
  E1231 07:45:42.650628      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:43.650715      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting a ConfigMap @ 12/31/23 07:45:44.189
  STEP: Ensuring resource quota status released usage @ 12/31/23 07:45:44.191
  E1231 07:45:44.651149      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:45.651315      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:45:46.194: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-2512" for this suite. @ 12/31/23 07:45:46.195
• [28.035 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:236
  STEP: Creating a kubernetes client @ 12/31/23 07:45:46.198
  Dec 31 07:45:46.198: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename crd-publish-openapi @ 12/31/23 07:45:46.199
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:45:46.204
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:45:46.205
  Dec 31 07:45:46.207: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  E1231 07:45:46.651958      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 12/31/23 07:45:47.361
  Dec 31 07:45:47.361: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5329 --namespace=crd-publish-openapi-5329 create -f -'
  E1231 07:45:47.652681      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:48.653019      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:45:49.416: INFO: stderr: ""
  Dec 31 07:45:49.416: INFO: stdout: "e2e-test-crd-publish-openapi-5846-crd.crd-publish-openapi-test-unknown-in-nested.example.com/test-cr created\n"
  Dec 31 07:45:49.416: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5329 --namespace=crd-publish-openapi-5329 delete e2e-test-crd-publish-openapi-5846-crds test-cr'
  Dec 31 07:45:49.457: INFO: stderr: ""
  Dec 31 07:45:49.457: INFO: stdout: "e2e-test-crd-publish-openapi-5846-crd.crd-publish-openapi-test-unknown-in-nested.example.com \"test-cr\" deleted\n"
  Dec 31 07:45:49.457: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5329 --namespace=crd-publish-openapi-5329 apply -f -'
  Dec 31 07:45:49.503: INFO: stderr: ""
  Dec 31 07:45:49.503: INFO: stdout: "e2e-test-crd-publish-openapi-5846-crd.crd-publish-openapi-test-unknown-in-nested.example.com/test-cr created\n"
  Dec 31 07:45:49.503: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5329 --namespace=crd-publish-openapi-5329 delete e2e-test-crd-publish-openapi-5846-crds test-cr'
  Dec 31 07:45:49.544: INFO: stderr: ""
  Dec 31 07:45:49.544: INFO: stdout: "e2e-test-crd-publish-openapi-5846-crd.crd-publish-openapi-test-unknown-in-nested.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR @ 12/31/23 07:45:49.544
  Dec 31 07:45:49.544: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5329 explain e2e-test-crd-publish-openapi-5846-crds'
  Dec 31 07:45:49.583: INFO: stderr: ""
  Dec 31 07:45:49.583: INFO: stdout: "GROUP:      crd-publish-openapi-test-unknown-in-nested.example.com\nKIND:       e2e-test-crd-publish-openapi-5846-crd\nVERSION:    v1\n\nDESCRIPTION:\n    preserve-unknown-properties in nested field for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Waldo\n\n  status\t<Object>\n    Status of Waldo\n\n\n"
  E1231 07:45:49.653542      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:50.654075      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:45:50.741: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-5329" for this suite. @ 12/31/23 07:45:50.745
• [4.549 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown and duplicate fields of a typed object [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/field_validation.go:64
  STEP: Creating a kubernetes client @ 12/31/23 07:45:50.748
  Dec 31 07:45:50.748: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename field-validation @ 12/31/23 07:45:50.748
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:45:50.755
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:45:50.756
  STEP: apply creating a deployment @ 12/31/23 07:45:50.758
  Dec 31 07:45:50.762: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-9966" for this suite. @ 12/31/23 07:45:50.763
• [0.018 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance] [sig-storage, Conformance]
test/e2e/storage/subpath.go:79
  STEP: Creating a kubernetes client @ 12/31/23 07:45:50.766
  Dec 31 07:45:50.766: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename subpath @ 12/31/23 07:45:50.766
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:45:50.771
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:45:50.772
  STEP: Setting up data @ 12/31/23 07:45:50.774
  STEP: Creating pod pod-subpath-test-configmap-g6nf @ 12/31/23 07:45:50.778
  STEP: Creating a pod to test atomic-volume-subpath @ 12/31/23 07:45:50.778
  E1231 07:45:51.655153      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:52.656057      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:53.656938      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:54.657519      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:55.657817      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:56.658083      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:57.658141      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:58.658837      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:45:59.658939      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:00.659020      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:01.659893      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:02.659951      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:03.660780      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:04.661151      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:05.661995      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:06.662906      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:07.663589      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:08.664572      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:09.664938      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:10.665018      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:11.665903      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:12.666866      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:13.667457      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:14.667513      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:46:14.809
  Dec 31 07:46:14.810: INFO: Trying to get logs from node worker3 pod pod-subpath-test-configmap-g6nf container test-container-subpath-configmap-g6nf: <nil>
  STEP: delete the pod @ 12/31/23 07:46:14.813
  STEP: Deleting pod pod-subpath-test-configmap-g6nf @ 12/31/23 07:46:14.819
  Dec 31 07:46:14.819: INFO: Deleting pod "pod-subpath-test-configmap-g6nf" in namespace "subpath-4018"
  Dec 31 07:46:14.820: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-4018" for this suite. @ 12/31/23 07:46:14.821
• [24.057 seconds]
------------------------------
[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/downwardapi.go:168
  STEP: Creating a kubernetes client @ 12/31/23 07:46:14.823
  Dec 31 07:46:14.823: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 07:46:14.824
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:46:14.829
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:46:14.831
  STEP: Creating a pod to test downward api env vars @ 12/31/23 07:46:14.833
  E1231 07:46:15.668585      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:16.668784      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:17.669820      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:18.669953      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:46:18.842
  Dec 31 07:46:18.843: INFO: Trying to get logs from node worker3 pod downward-api-d9675e10-3df2-45e3-a81a-62139d6c0d9b container dapi-container: <nil>
  STEP: delete the pod @ 12/31/23 07:46:18.846
  Dec 31 07:46:18.852: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-4907" for this suite. @ 12/31/23 07:46:18.853
• [4.032 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:89
  STEP: Creating a kubernetes client @ 12/31/23 07:46:18.856
  Dec 31 07:46:18.856: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename secrets @ 12/31/23 07:46:18.856
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:46:18.862
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:46:18.864
  STEP: Creating secret with name secret-test-map-58e49cf6-6437-4d05-84ec-b41cab8c5d1e @ 12/31/23 07:46:18.865
  STEP: Creating a pod to test consume secrets @ 12/31/23 07:46:18.868
  E1231 07:46:19.670974      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:20.671186      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:21.671941      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:22.672562      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:46:22.876
  Dec 31 07:46:22.877: INFO: Trying to get logs from node worker3 pod pod-secrets-65d67bfa-fcd1-4b2a-b880-323ea239f886 container secret-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 07:46:22.88
  Dec 31 07:46:22.885: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-9574" for this suite. @ 12/31/23 07:46:22.887
• [4.033 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:69
  STEP: Creating a kubernetes client @ 12/31/23 07:46:22.889
  Dec 31 07:46:22.889: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename crd-publish-openapi @ 12/31/23 07:46:22.89
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:46:22.896
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:46:22.897
  Dec 31 07:46:22.899: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  E1231 07:46:23.672873      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: kubectl validation (kubectl create and apply) allows request with known and required properties @ 12/31/23 07:46:24.073
  Dec 31 07:46:24.073: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5277 --namespace=crd-publish-openapi-5277 create -f -'
  Dec 31 07:46:24.120: INFO: stderr: ""
  Dec 31 07:46:24.120: INFO: stdout: "e2e-test-crd-publish-openapi-4942-crd.crd-publish-openapi-test-foo.example.com/test-foo created\n"
  Dec 31 07:46:24.120: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5277 --namespace=crd-publish-openapi-5277 delete e2e-test-crd-publish-openapi-4942-crds test-foo'
  Dec 31 07:46:24.160: INFO: stderr: ""
  Dec 31 07:46:24.160: INFO: stdout: "e2e-test-crd-publish-openapi-4942-crd.crd-publish-openapi-test-foo.example.com \"test-foo\" deleted\n"
  Dec 31 07:46:24.161: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5277 --namespace=crd-publish-openapi-5277 apply -f -'
  Dec 31 07:46:24.203: INFO: stderr: ""
  Dec 31 07:46:24.203: INFO: stdout: "e2e-test-crd-publish-openapi-4942-crd.crd-publish-openapi-test-foo.example.com/test-foo created\n"
  Dec 31 07:46:24.203: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5277 --namespace=crd-publish-openapi-5277 delete e2e-test-crd-publish-openapi-4942-crds test-foo'
  Dec 31 07:46:24.241: INFO: stderr: ""
  Dec 31 07:46:24.241: INFO: stdout: "e2e-test-crd-publish-openapi-4942-crd.crd-publish-openapi-test-foo.example.com \"test-foo\" deleted\n"
  STEP: kubectl validation (kubectl create and apply) rejects request with value outside defined enum values @ 12/31/23 07:46:24.241
  Dec 31 07:46:24.241: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5277 --namespace=crd-publish-openapi-5277 create -f -'
  Dec 31 07:46:24.279: INFO: rc: 1
  STEP: kubectl validation (kubectl create and apply) rejects request with unknown properties when disallowed by the schema @ 12/31/23 07:46:24.28
  Dec 31 07:46:24.280: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5277 --namespace=crd-publish-openapi-5277 create -f -'
  Dec 31 07:46:24.318: INFO: rc: 1
  Dec 31 07:46:24.318: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5277 --namespace=crd-publish-openapi-5277 apply -f -'
  Dec 31 07:46:24.359: INFO: rc: 1
  STEP: kubectl validation (kubectl create and apply) rejects request without required properties @ 12/31/23 07:46:24.359
  Dec 31 07:46:24.359: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5277 --namespace=crd-publish-openapi-5277 create -f -'
  Dec 31 07:46:24.398: INFO: rc: 1
  Dec 31 07:46:24.398: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5277 --namespace=crd-publish-openapi-5277 apply -f -'
  Dec 31 07:46:24.441: INFO: rc: 1
  STEP: kubectl explain works to explain CR properties @ 12/31/23 07:46:24.441
  Dec 31 07:46:24.441: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5277 explain e2e-test-crd-publish-openapi-4942-crds'
  Dec 31 07:46:24.478: INFO: stderr: ""
  Dec 31 07:46:24.478: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-4942-crd\nVERSION:    v1\n\nDESCRIPTION:\n    Foo CRD for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Foo\n\n  status\t<Object>\n    Status of Foo\n\n\n"
  STEP: kubectl explain works to explain CR properties recursively @ 12/31/23 07:46:24.479
  Dec 31 07:46:24.479: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5277 explain e2e-test-crd-publish-openapi-4942-crds.metadata'
  Dec 31 07:46:24.517: INFO: stderr: ""
  Dec 31 07:46:24.518: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-4942-crd\nVERSION:    v1\n\nFIELD: metadata <ObjectMeta>\n\nDESCRIPTION:\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n    ObjectMeta is metadata that all persisted resources must have, which\n    includes all objects users must create.\n    \nFIELDS:\n  annotations\t<map[string]string>\n    Annotations is an unstructured key value map stored with a resource that may\n    be set by external tools to store and retrieve arbitrary metadata. They are\n    not queryable and should be preserved when modifying objects. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n\n  creationTimestamp\t<string>\n    CreationTimestamp is a timestamp representing the server time when this\n    object was created. It is not guaranteed to be set in happens-before order\n    across separate operations. Clients may not set this value. It is\n    represented in RFC3339 form and is in UTC.\n    \n    Populated by the system. Read-only. Null for lists. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  deletionGracePeriodSeconds\t<integer>\n    Number of seconds allowed for this object to gracefully terminate before it\n    will be removed from the system. Only set when deletionTimestamp is also\n    set. May only be shortened. Read-only.\n\n  deletionTimestamp\t<string>\n    DeletionTimestamp is RFC 3339 date and time at which this resource will be\n    deleted. This field is set by the server when a graceful deletion is\n    requested by the user, and is not directly settable by a client. The\n    resource is expected to be deleted (no longer visible from resource lists,\n    and not reachable by name) after the time in this field, once the finalizers\n    list is empty. As long as the finalizers list contains items, deletion is\n    blocked. Once the deletionTimestamp is set, this value may not be unset or\n    be set further into the future, although it may be shortened or the resource\n    may be deleted prior to this time. For example, a user may request that a\n    pod is deleted in 30 seconds. The Kubelet will react by sending a graceful\n    termination signal to the containers in the pod. After that 30 seconds, the\n    Kubelet will send a hard termination signal (SIGKILL) to the container and\n    after cleanup, remove the pod from the API. In the presence of network\n    partitions, this object may still exist after this timestamp, until an\n    administrator or automated process can determine the resource is fully\n    terminated. If not set, graceful deletion of the object has not been\n    requested.\n    \n    Populated by the system when a graceful deletion is requested. Read-only.\n    More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  finalizers\t<[]string>\n    Must be empty before the object is deleted from the registry. Each entry is\n    an identifier for the responsible component that will remove the entry from\n    the list. If the deletionTimestamp of the object is non-nil, entries in this\n    list can only be removed. Finalizers may be processed and removed in any\n    order.  Order is NOT enforced because it introduces significant risk of\n    stuck finalizers. finalizers is a shared field, any actor with permission\n    can reorder it. If the finalizer list is processed in order, then this can\n    lead to a situation in which the component responsible for the first\n    finalizer in the list is waiting for a signal (field value, external system,\n    or other) produced by a component responsible for a finalizer later in the\n    list, resulting in a deadlock. Without enforced ordering finalizers are free\n    to order amongst themselves and are not vulnerable to ordering changes in\n    the list.\n\n  generateName\t<string>\n    GenerateName is an optional prefix, used by the server, to generate a unique\n    name ONLY IF the Name field has not been provided. If this field is used,\n    the name returned to the client will be different than the name passed. This\n    value will also be combined with a unique suffix. The provided value has the\n    same validation rules as the Name field, and may be truncated by the length\n    of the suffix required to make the value unique on the server.\n    \n    If this field is specified and the generated name exists, the server will\n    return a 409.\n    \n    Applied only if Name is not specified. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n\n  generation\t<integer>\n    A sequence number representing a specific generation of the desired state.\n    Populated by the system. Read-only.\n\n  labels\t<map[string]string>\n    Map of string keys and values that can be used to organize and categorize\n    (scope and select) objects. May match selectors of replication controllers\n    and services. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n\n  managedFields\t<[]ManagedFieldsEntry>\n    ManagedFields maps workflow-id and version to the set of fields that are\n    managed by that workflow. This is mostly for internal housekeeping, and\n    users typically shouldn't need to set or understand this field. A workflow\n    can be the user's name, a controller's name, or the name of a specific apply\n    path like \"ci-cd\". The set of fields is always in the version that the\n    workflow used when modifying the object.\n\n  name\t<string>\n    Name must be unique within a namespace. Is required when creating resources,\n    although some resources may allow a client to request the generation of an\n    appropriate name automatically. Name is primarily intended for creation\n    idempotence and configuration definition. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n\n  namespace\t<string>\n    Namespace defines the space within which each name must be unique. An empty\n    namespace is equivalent to the \"default\" namespace, but \"default\" is the\n    canonical representation. Not all objects are required to be scoped to a\n    namespace - the value of this field for those objects will be empty.\n    \n    Must be a DNS_LABEL. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n\n  ownerReferences\t<[]OwnerReference>\n    List of objects depended by this object. If ALL objects in the list have\n    been deleted, this object will be garbage collected. If this object is\n    managed by a controller, then an entry in this list will point to this\n    controller, with the controller field set to true. There cannot be more than\n    one managing controller.\n\n  resourceVersion\t<string>\n    An opaque value that represents the internal version of this object that can\n    be used by clients to determine when objects have changed. May be used for\n    optimistic concurrency, change detection, and the watch operation on a\n    resource or set of resources. Clients must treat these values as opaque and\n    passed unmodified back to the server. They may only be valid for a\n    particular resource or set of resources.\n    \n    Populated by the system. Read-only. Value must be treated as opaque by\n    clients and . More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n\n  selfLink\t<string>\n    Deprecated: selfLink is a legacy read-only field that is no longer populated\n    by the system.\n\n  uid\t<string>\n    UID is the unique in time and space value for this object. It is typically\n    generated by the server on successful creation of a resource and is not\n    allowed to change on PUT operations.\n    \n    Populated by the system. Read-only. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n\n\n"
  Dec 31 07:46:24.518: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5277 explain e2e-test-crd-publish-openapi-4942-crds.spec'
  Dec 31 07:46:24.556: INFO: stderr: ""
  Dec 31 07:46:24.556: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-4942-crd\nVERSION:    v1\n\nFIELD: spec <Object>\n\nDESCRIPTION:\n    Specification of Foo\n    \nFIELDS:\n  bars\t<[]Object>\n    List of Bars and their specs.\n\n\n"
  Dec 31 07:46:24.557: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5277 explain e2e-test-crd-publish-openapi-4942-crds.spec.bars'
  Dec 31 07:46:24.595: INFO: stderr: ""
  Dec 31 07:46:24.595: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-4942-crd\nVERSION:    v1\n\nFIELD: bars <[]Object>\n\nDESCRIPTION:\n    List of Bars and their specs.\n    \nFIELDS:\n  age\t<string>\n    Age of Bar.\n\n  bazs\t<[]string>\n    List of Bazs.\n\n  feeling\t<string>\n    Whether Bar is feeling great.\n\n  name\t<string> -required-\n    Name of Bar.\n\n\n"
  STEP: kubectl explain works to return error when explain is called on property that doesn't exist @ 12/31/23 07:46:24.595
  Dec 31 07:46:24.595: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=crd-publish-openapi-5277 explain e2e-test-crd-publish-openapi-4942-crds.spec.bars2'
  Dec 31 07:46:24.633: INFO: rc: 1
  E1231 07:46:24.673739      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:25.674616      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:46:25.776: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-5277" for this suite. @ 12/31/23 07:46:25.78
• [2.893 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/downwardapi_volume.go:209
  STEP: Creating a kubernetes client @ 12/31/23 07:46:25.783
  Dec 31 07:46:25.783: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename downward-api @ 12/31/23 07:46:25.783
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:46:25.789
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:46:25.791
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 07:46:25.792
  E1231 07:46:26.674850      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:27.675680      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:28.676581      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:29.676711      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:46:29.802
  Dec 31 07:46:29.803: INFO: Trying to get logs from node worker3 pod downwardapi-volume-14eb1b3c-e8a4-4fb0-bbd1-d81e0cc60a51 container client-container: <nil>
  STEP: delete the pod @ 12/31/23 07:46:29.806
  Dec 31 07:46:29.812: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1113" for this suite. @ 12/31/23 07:46:29.813
• [4.032 seconds]
------------------------------
S
------------------------------
[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:198
  STEP: Creating a kubernetes client @ 12/31/23 07:46:29.815
  Dec 31 07:46:29.815: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-probe @ 12/31/23 07:46:29.815
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:46:29.821
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:46:29.823
  STEP: Creating pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452 @ 12/31/23 07:46:29.826
  E1231 07:46:30.677763      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:31.678253      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking the pod's current state and verifying that restartCount is present @ 12/31/23 07:46:31.833
  Dec 31 07:46:31.834: INFO: Initial restart count of pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 is 0
  Dec 31 07:46:31.835: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:46:32.678257      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:33.678356      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:46:33.836: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:46:34.678806      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:35.679673      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:46:35.839: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:46:36.680489      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:37.681358      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:46:37.842: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:46:38.682333      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:39.682565      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:46:39.844: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:46:40.683161      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:41.683454      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:46:41.846: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:46:42.683527      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:43.684573      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:46:43.848: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:46:44.684722      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:45.684797      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:46:45.851: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:46:46.685739      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:47.686746      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:46:47.853: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:46:48.686836      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:49.686958      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:46:49.855: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:46:50.687504      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:51.688564      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:46:51.858: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  Dec 31 07:46:51.858: INFO: Restart count of pod container-probe-6452/liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 is now 1 (20.024248179s elapsed)
  E1231 07:46:52.689485      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:53.690231      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:46:53.861: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:46:54.690308      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:55.690450      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:46:55.863: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:46:56.690478      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:57.691470      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:46:57.865: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:46:58.692401      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:46:59.692532      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:46:59.867: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:00.693019      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:01.693315      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:01.869: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:02.694132      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:03.694848      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:03.871: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:04.695861      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:05.696762      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:05.873: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:06.697354      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:07.698375      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:07.875: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:08.699161      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:09.699629      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:09.877: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:10.700363      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:11.700725      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:11.879: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  Dec 31 07:47:11.879: INFO: Restart count of pod container-probe-6452/liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 is now 2 (40.045406723s elapsed)
  E1231 07:47:12.701538      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:13.701613      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:13.881: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:14.701775      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:15.702213      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:15.884: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:16.702747      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:17.703325      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:17.886: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:18.703945      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:19.704016      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:19.888: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:20.704595      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:21.705055      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:21.890: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:22.705697      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:23.705780      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:23.892: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:24.706363      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:25.706853      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:25.894: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:26.707737      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:27.707826      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:27.896: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:28.708574      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:29.708642      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:29.899: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:30.709318      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:31.709553      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:31.901: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  Dec 31 07:47:31.901: INFO: Restart count of pod container-probe-6452/liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 is now 3 (1m0.066966738s elapsed)
  E1231 07:47:32.709635      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:33.709842      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:33.903: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:34.709932      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:35.710852      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:35.905: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:36.711290      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:37.711365      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:37.907: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:38.711514      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:39.712570      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:39.909: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:40.712636      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:41.712662      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:41.911: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:42.712752      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:43.713447      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:43.913: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:44.714117      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:45.715137      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:45.914: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:46.715709      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:47.716575      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:47.916: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:48.717382      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:49.717521      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:49.918: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:50.718150      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:51.718406      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:51.919: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  Dec 31 07:47:51.919: INFO: Restart count of pod container-probe-6452/liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 is now 4 (1m20.085619292s elapsed)
  E1231 07:47:52.718483      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:53.718633      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:53.922: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:54.719560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:55.720567      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:55.924: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:56.721298      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:57.721445      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:57.926: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:47:58.722449      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:47:59.722584      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:47:59.928: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:00.723153      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:01.724162      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:01.929: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:02.724743      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:03.724894      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:03.931: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:04.725153      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:05.725161      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:05.934: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:06.725801      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:07.725886      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:07.936: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:08.725923      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:09.726003      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:09.938: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:10.726350      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:11.726610      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:11.940: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:12.727123      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:13.727451      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:13.942: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:14.728333      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:15.728987      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:15.944: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:16.729431      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:17.729571      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:17.946: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:18.729607      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:19.729749      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:19.948: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:20.730101      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:21.730145      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:21.949: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:22.730369      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:23.730472      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:23.952: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:24.730764      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:25.731355      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:25.954: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:26.732195      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:27.732560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:27.957: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:28.733427      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:29.734129      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:29.960: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:30.734200      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:31.734240      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:31.961: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:32.734581      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:33.735394      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:33.964: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:34.736076      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:35.736557      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:35.966: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:36.737248      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:37.738304      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:37.968: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:38.739297      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:39.739539      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:39.970: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:40.739684      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:41.740745      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:41.972: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:42.741191      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:43.741284      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:43.974: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:44.741745      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:45.741976      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:45.975: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:46.742059      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:47.742176      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:47.978: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:48.742258      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:49.742387      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:49.980: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:50.742944      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:51.743245      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:51.981: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  E1231 07:48:52.743493      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:53.743517      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:48:53.984: INFO: Get pod liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 in namespace container-probe-6452
  Dec 31 07:48:53.984: INFO: Restart count of pod container-probe-6452/liveness-b688325a-7571-4a43-bb94-ca3d95b9e067 is now 5 (2m22.149888768s elapsed)
  STEP: deleting the pod @ 12/31/23 07:48:53.984
  Dec 31 07:48:53.988: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-6452" for this suite. @ 12/31/23 07:48:53.99
• [144.177 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for services [Conformance] [sig-network, Conformance]
test/e2e/network/dns.go:137
  STEP: Creating a kubernetes client @ 12/31/23 07:48:53.993
  Dec 31 07:48:53.993: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename dns @ 12/31/23 07:48:53.993
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:48:53.999
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:48:54.002
  STEP: Creating a test headless service @ 12/31/23 07:48:54.004
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service.dns-2526.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-2526.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-2526.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-2526.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-2526.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-2526.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-2526.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.test-service-2.dns-2526.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-2526.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.test-service-2.dns-2526.svc.cluster.local;check="$$(dig +notcp +noall +answer +search 232.149.68.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.68.149.232_udp@PTR;check="$$(dig +tcp +noall +answer +search 232.149.68.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.68.149.232_tcp@PTR;sleep 1; done
   @ 12/31/23 07:48:54.011
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service.dns-2526.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-2526.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-2526.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-2526.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-2526.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-2526.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-2526.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.test-service-2.dns-2526.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-2526.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.test-service-2.dns-2526.svc.cluster.local;check="$$(dig +notcp +noall +answer +search 232.149.68.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.68.149.232_udp@PTR;check="$$(dig +tcp +noall +answer +search 232.149.68.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.68.149.232_tcp@PTR;sleep 1; done
   @ 12/31/23 07:48:54.011
  STEP: creating a pod to probe DNS @ 12/31/23 07:48:54.011
  STEP: submitting the pod to kubernetes @ 12/31/23 07:48:54.011
  E1231 07:48:54.744576      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:55.745624      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: retrieving the pod @ 12/31/23 07:48:56.02
  STEP: looking for the results for each expected name from probers @ 12/31/23 07:48:56.021
  Dec 31 07:48:56.030: INFO: Unable to read wheezy_udp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:48:56.040: INFO: Unable to read wheezy_tcp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:48:56.041: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:48:56.050: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:48:56.091: INFO: Unable to read jessie_udp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:48:56.100: INFO: Unable to read jessie_tcp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:48:56.101: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:48:56.111: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:48:56.142: INFO: Lookups using dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043 failed for: [wheezy_udp@dns-test-service.dns-2526.svc.cluster.local wheezy_tcp@dns-test-service.dns-2526.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local jessie_udp@dns-test-service.dns-2526.svc.cluster.local jessie_tcp@dns-test-service.dns-2526.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local]

  Dec 31 07:48:56.152: INFO: Pod client logs for webserver: 
  Dec 31 07:48:56.160: INFO: Pod client logs for querier: 
  Dec 31 07:48:56.170: INFO: Pod client logs for jessie-querier: 
  E1231 07:48:56.746497      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:57.746708      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:58.746799      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:48:59.747017      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:00.747163      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:49:01.024: INFO: Unable to read wheezy_udp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:01.034: INFO: Unable to read wheezy_tcp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:01.044: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:01.046: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:01.074: INFO: Unable to read jessie_udp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:01.075: INFO: Unable to read jessie_tcp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:01.084: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:01.095: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:01.115: INFO: Lookups using dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043 failed for: [wheezy_udp@dns-test-service.dns-2526.svc.cluster.local wheezy_tcp@dns-test-service.dns-2526.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local jessie_udp@dns-test-service.dns-2526.svc.cluster.local jessie_tcp@dns-test-service.dns-2526.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local]

  Dec 31 07:49:01.124: INFO: Pod client logs for webserver: 
  Dec 31 07:49:01.134: INFO: Pod client logs for querier: 
  Dec 31 07:49:01.136: INFO: Pod client logs for jessie-querier: 
  E1231 07:49:01.747568      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:02.748576      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:03.748706      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:04.748862      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:05.748951      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:49:06.033: INFO: Unable to read wheezy_udp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:06.044: INFO: Unable to read wheezy_tcp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:06.053: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:06.063: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:06.094: INFO: Unable to read jessie_udp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:06.095: INFO: Unable to read jessie_tcp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:06.104: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:06.106: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:06.135: INFO: Lookups using dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043 failed for: [wheezy_udp@dns-test-service.dns-2526.svc.cluster.local wheezy_tcp@dns-test-service.dns-2526.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local jessie_udp@dns-test-service.dns-2526.svc.cluster.local jessie_tcp@dns-test-service.dns-2526.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local]

  Dec 31 07:49:06.145: INFO: Pod client logs for webserver: 
  Dec 31 07:49:06.147: INFO: Pod client logs for querier: 
  Dec 31 07:49:06.156: INFO: Pod client logs for jessie-querier: 
  E1231 07:49:06.749638      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:07.750475      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:08.750510      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:09.750594      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:10.750715      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:49:11.023: INFO: Unable to read wheezy_udp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:11.033: INFO: Unable to read wheezy_tcp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:11.043: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:11.053: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:11.093: INFO: Unable to read jessie_udp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:11.094: INFO: Unable to read jessie_tcp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:11.095: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:11.104: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:11.134: INFO: Lookups using dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043 failed for: [wheezy_udp@dns-test-service.dns-2526.svc.cluster.local wheezy_tcp@dns-test-service.dns-2526.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local jessie_udp@dns-test-service.dns-2526.svc.cluster.local jessie_tcp@dns-test-service.dns-2526.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local]

  Dec 31 07:49:11.137: INFO: Pod client logs for webserver: 
  Dec 31 07:49:11.143: INFO: Pod client logs for querier: 
  Dec 31 07:49:11.147: INFO: Pod client logs for jessie-querier: 
  E1231 07:49:11.751776      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:12.751870      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:13.752580      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:14.752939      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:15.753012      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:49:16.024: INFO: Unable to read wheezy_udp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:16.033: INFO: Unable to read wheezy_tcp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:16.044: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:16.054: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:16.095: INFO: Unable to read jessie_udp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:16.105: INFO: Unable to read jessie_tcp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:16.106: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:16.116: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:16.137: INFO: Lookups using dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043 failed for: [wheezy_udp@dns-test-service.dns-2526.svc.cluster.local wheezy_tcp@dns-test-service.dns-2526.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local jessie_udp@dns-test-service.dns-2526.svc.cluster.local jessie_tcp@dns-test-service.dns-2526.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local]

  Dec 31 07:49:16.147: INFO: Pod client logs for webserver: 
  Dec 31 07:49:16.158: INFO: Pod client logs for querier: 
  Dec 31 07:49:16.168: INFO: Pod client logs for jessie-querier: 
  E1231 07:49:16.753545      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:17.753678      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:18.754463      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:19.754674      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:20.755648      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:49:21.023: INFO: Unable to read wheezy_udp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:21.033: INFO: Unable to read wheezy_tcp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:21.035: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:21.043: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:21.074: INFO: Unable to read jessie_udp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:21.084: INFO: Unable to read jessie_tcp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:21.093: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:21.103: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:21.134: INFO: Lookups using dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043 failed for: [wheezy_udp@dns-test-service.dns-2526.svc.cluster.local wheezy_tcp@dns-test-service.dns-2526.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local jessie_udp@dns-test-service.dns-2526.svc.cluster.local jessie_tcp@dns-test-service.dns-2526.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local]

  Dec 31 07:49:21.143: INFO: Pod client logs for webserver: 
  Dec 31 07:49:21.145: INFO: Pod client logs for querier: 
  Dec 31 07:49:21.147: INFO: Pod client logs for jessie-querier: 
  E1231 07:49:21.756255      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:22.756561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:23.756777      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:24.756862      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:25.757757      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:49:26.033: INFO: Unable to read wheezy_tcp@dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:26.034: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:26.043: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local from pod dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043: the server could not find the requested resource (get pods dns-test-61bea20d-cfc1-4787-9145-ab99176a2043)
  Dec 31 07:49:26.144: INFO: Lookups using dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043 failed for: [wheezy_tcp@dns-test-service.dns-2526.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-2526.svc.cluster.local]

  Dec 31 07:49:26.154: INFO: Pod client logs for webserver: 
  Dec 31 07:49:26.164: INFO: Pod client logs for querier: 
  Dec 31 07:49:26.166: INFO: Pod client logs for jessie-querier: 
  E1231 07:49:26.758263      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:27.758402      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:28.758535      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:29.758658      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:30.758850      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:49:31.118: INFO: DNS probes using dns-2526/dns-test-61bea20d-cfc1-4787-9145-ab99176a2043 succeeded

  STEP: deleting the pod @ 12/31/23 07:49:31.118
  STEP: deleting the test service @ 12/31/23 07:49:31.124
  STEP: deleting the test headless service @ 12/31/23 07:49:31.136
  Dec 31 07:49:31.142: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "dns-2526" for this suite. @ 12/31/23 07:49:31.144
• [37.155 seconds]
------------------------------
SSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance] [sig-apps, Conformance]
test/e2e/apps/statefulset.go:1031
  STEP: Creating a kubernetes client @ 12/31/23 07:49:31.148
  Dec 31 07:49:31.148: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename statefulset @ 12/31/23 07:49:31.149
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:49:31.157
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:49:31.158
  STEP: Creating service test in namespace statefulset-47 @ 12/31/23 07:49:31.16
  STEP: Creating statefulset ss in namespace statefulset-47 @ 12/31/23 07:49:31.167
  Dec 31 07:49:31.179: INFO: Found 0 stateful pods, waiting for 1
  E1231 07:49:31.759493      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:32.760574      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:33.760646      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:34.760831      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:35.761583      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:36.761663      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:37.761791      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:38.761876      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:39.762749      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:40.762849      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:49:41.172: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Patch Statefulset to include a label @ 12/31/23 07:49:41.174
  STEP: Getting /status @ 12/31/23 07:49:41.178
  Dec 31 07:49:41.180: INFO: StatefulSet ss has Conditions: []v1.StatefulSetCondition(nil)
  STEP: updating the StatefulSet Status @ 12/31/23 07:49:41.18
  Dec 31 07:49:41.183: INFO: updatedStatus.Conditions: []v1.StatefulSetCondition{v1.StatefulSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the statefulset status to be updated @ 12/31/23 07:49:41.183
  Dec 31 07:49:41.184: INFO: Observed &StatefulSet event: ADDED
  Dec 31 07:49:41.184: INFO: Found Statefulset ss in namespace statefulset-47 with labels: map[e2e:testing] annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Dec 31 07:49:41.184: INFO: Statefulset ss has an updated status
  STEP: patching the Statefulset Status @ 12/31/23 07:49:41.184
  Dec 31 07:49:41.184: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Dec 31 07:49:41.188: INFO: Patched status conditions: []v1.StatefulSetCondition{v1.StatefulSetCondition{Type:"StatusPatched", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Statefulset status to be patched @ 12/31/23 07:49:41.188
  Dec 31 07:49:41.188: INFO: Observed &StatefulSet event: ADDED
  Dec 31 07:49:41.188: INFO: Observed Statefulset ss in namespace statefulset-47 with annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Dec 31 07:49:41.189: INFO: Observed &StatefulSet event: MODIFIED
  Dec 31 07:49:41.189: INFO: Found Statefulset ss in namespace statefulset-47 with labels: map[e2e:testing] annotations: map[] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC  }
  Dec 31 07:49:41.189: INFO: Deleting all statefulset in ns statefulset-47
  Dec 31 07:49:41.190: INFO: Scaling statefulset ss to 0
  E1231 07:49:41.763229      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:42.764048      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:43.764126      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:44.764561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:45.764684      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:46.764728      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:47.765033      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:48.765154      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:49.766198      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:50.766266      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:49:51.197: INFO: Waiting for statefulset status.replicas updated to 0
  Dec 31 07:49:51.198: INFO: Deleting statefulset ss
  Dec 31 07:49:51.206: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-47" for this suite. @ 12/31/23 07:49:51.207
• [20.061 seconds]
------------------------------
S
------------------------------
[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:237
  STEP: Creating a kubernetes client @ 12/31/23 07:49:51.209
  Dec 31 07:49:51.209: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 07:49:51.21
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:49:51.215
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:49:51.216
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 07:49:51.218
  E1231 07:49:51.766490      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:52.767354      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:53.767512      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:54.768550      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:49:55.228
  Dec 31 07:49:55.229: INFO: Trying to get logs from node worker3 pod downwardapi-volume-ab0eef6f-0a27-4c10-9091-164f8cc59854 container client-container: <nil>
  STEP: delete the pod @ 12/31/23 07:49:55.232
  Dec 31 07:49:55.237: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4401" for this suite. @ 12/31/23 07:49:55.239
• [4.032 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-auth] SubjectReview should support SubjectReview API operations [Conformance] [sig-auth, Conformance]
test/e2e/auth/subjectreviews.go:50
  STEP: Creating a kubernetes client @ 12/31/23 07:49:55.241
  Dec 31 07:49:55.241: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename subjectreview @ 12/31/23 07:49:55.242
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:49:55.247
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:49:55.249
  STEP: Creating a Serviceaccount "e2e" in namespace "subjectreview-1559" @ 12/31/23 07:49:55.25
  Dec 31 07:49:55.253: INFO: saUsername: "system:serviceaccount:subjectreview-1559:e2e"
  Dec 31 07:49:55.253: INFO: saGroups: []string{"system:authenticated", "system:serviceaccounts", "system:serviceaccounts:subjectreview-1559"}
  Dec 31 07:49:55.253: INFO: saUID: "91746e24-70ee-46e9-9783-6e2944db246c"
  STEP: Creating clientset to impersonate "system:serviceaccount:subjectreview-1559:e2e" @ 12/31/23 07:49:55.253
  STEP: Creating SubjectAccessReview for "system:serviceaccount:subjectreview-1559:e2e" @ 12/31/23 07:49:55.253
  Dec 31 07:49:55.254: INFO: sarResponse Status: v1.SubjectAccessReviewStatus{Allowed:false, Denied:false, Reason:"", EvaluationError:""}
  STEP: Verifying as "system:serviceaccount:subjectreview-1559:e2e" api 'list' configmaps in "subjectreview-1559" namespace @ 12/31/23 07:49:55.254
  Dec 31 07:49:55.255: INFO: SubjectAccessReview has been verified
  STEP: Creating a LocalSubjectAccessReview for "system:serviceaccount:subjectreview-1559:e2e" @ 12/31/23 07:49:55.255
  Dec 31 07:49:55.255: INFO: lsarResponse Status: v1.SubjectAccessReviewStatus{Allowed:false, Denied:false, Reason:"", EvaluationError:""}
  Dec 31 07:49:55.255: INFO: LocalSubjectAccessReview has been verified
  Dec 31 07:49:55.256: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subjectreview-1559" for this suite. @ 12/31/23 07:49:55.259
• [0.021 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_configmap.go:48
  STEP: Creating a kubernetes client @ 12/31/23 07:49:55.263
  Dec 31 07:49:55.263: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 07:49:55.263
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:49:55.271
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:49:55.274
  STEP: Creating configMap with name projected-configmap-test-volume-30d9ea1a-7f68-4050-b0de-6656f9e0092d @ 12/31/23 07:49:55.275
  STEP: Creating a pod to test consume configMaps @ 12/31/23 07:49:55.277
  E1231 07:49:55.768818      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:56.769140      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:57.769671      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:49:58.769805      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:49:59.288
  Dec 31 07:49:59.289: INFO: Trying to get logs from node worker3 pod pod-projected-configmaps-0129a572-f8bd-4ce5-9264-017ff48c5c06 container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 07:49:59.292
  Dec 31 07:49:59.298: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8994" for this suite. @ 12/31/23 07:49:59.299
• [4.038 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/preemption.go:224
  STEP: Creating a kubernetes client @ 12/31/23 07:49:59.301
  Dec 31 07:49:59.301: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename sched-preemption @ 12/31/23 07:49:59.302
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:49:59.308
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:49:59.309
  Dec 31 07:49:59.315: INFO: Waiting up to 1m0s for all nodes to be ready
  E1231 07:49:59.770699      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:00.770785      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:01.771341      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:02.771485      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:03.772324      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:04.772963      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:05.773027      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:06.773607      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:07.773968      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:08.774040      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:09.774127      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:10.775157      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:11.775935      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:12.776945      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:13.777150      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:14.777232      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:15.778295      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:16.778608      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:17.779264      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:18.779419      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:19.780037      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:20.780774      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:21.781321      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:22.781454      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:23.782265      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:24.782559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:25.783123      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:26.783285      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:27.784221      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:28.784310      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:29.785191      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:30.785313      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:31.786247      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:32.786376      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:33.787078      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:34.787207      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:35.787443      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:36.788355      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:37.788520      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:38.789169      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:39.789260      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:40.789402      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:41.789891      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:42.789977      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:43.790062      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:44.791105      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:45.791793      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:46.792823      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:47.793296      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:48.793412      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:49.793990      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:50.794303      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:51.794923      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:52.795408      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:53.795501      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:54.796561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:55.797165      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:56.797231      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:57.798017      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:50:58.798134      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:50:59.317: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Create pods that use 4/5 of node resources. @ 12/31/23 07:50:59.318
  Dec 31 07:50:59.326: INFO: Created pod: pod0-0-sched-preemption-low-priority
  Dec 31 07:50:59.329: INFO: Created pod: pod0-1-sched-preemption-medium-priority
  Dec 31 07:50:59.338: INFO: Created pod: pod1-0-sched-preemption-medium-priority
  Dec 31 07:50:59.343: INFO: Created pod: pod1-1-sched-preemption-medium-priority
  Dec 31 07:50:59.353: INFO: Created pod: pod2-0-sched-preemption-medium-priority
  Dec 31 07:50:59.358: INFO: Created pod: pod2-1-sched-preemption-medium-priority
  STEP: Wait for pods to be scheduled. @ 12/31/23 07:50:59.358
  E1231 07:50:59.798795      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:00.798918      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Run a critical pod that use same resources as that of a lower priority pod @ 12/31/23 07:51:01.367
  E1231 07:51:01.799560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:02.800577      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:03.801148      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:04.801294      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:51:05.419: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-4454" for this suite. @ 12/31/23 07:51:05.42
• [66.122 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/lifecycle_hook.go:136
  STEP: Creating a kubernetes client @ 12/31/23 07:51:05.423
  Dec 31 07:51:05.423: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 12/31/23 07:51:05.424
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:51:05.43
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:51:05.431
  STEP: create the container to handle the HTTPGet hook request. @ 12/31/23 07:51:05.434
  E1231 07:51:05.801845      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:06.802256      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: create the pod with lifecycle hook @ 12/31/23 07:51:07.442
  E1231 07:51:07.802994      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:08.803116      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: check poststart hook @ 12/31/23 07:51:09.448
  STEP: delete the pod with lifecycle hook @ 12/31/23 07:51:09.456
  E1231 07:51:09.804065      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:10.804574      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:51:11.462: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-8361" for this suite. @ 12/31/23 07:51:11.463
• [6.043 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/garbage_collector.go:539
  STEP: Creating a kubernetes client @ 12/31/23 07:51:11.466
  Dec 31 07:51:11.466: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename gc @ 12/31/23 07:51:11.467
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:51:11.473
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:51:11.475
  STEP: create the deployment @ 12/31/23 07:51:11.476
  W1231 07:51:11.478619      23 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: Wait for the Deployment to create new ReplicaSet @ 12/31/23 07:51:11.478
  E1231 07:51:11.805144      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the deployment @ 12/31/23 07:51:11.981
  STEP: wait for deployment deletion to see if the garbage collector mistakenly deletes the rs @ 12/31/23 07:51:11.984
  STEP: Gathering metrics @ 12/31/23 07:51:12.49
  W1231 07:51:12.492675      23 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Dec 31 07:51:12.492: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Dec 31 07:51:12.492: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-3603" for this suite. @ 12/31/23 07:51:12.494
• [1.029 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should serve multiport endpoints from pods [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:846
  STEP: Creating a kubernetes client @ 12/31/23 07:51:12.496
  Dec 31 07:51:12.496: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 07:51:12.496
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:51:12.503
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:51:12.504
  STEP: creating service multi-endpoint-test in namespace services-8801 @ 12/31/23 07:51:12.505
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-8801 to expose endpoints map[] @ 12/31/23 07:51:12.509
  Dec 31 07:51:12.511: INFO: Failed go get Endpoints object: endpoints "multi-endpoint-test" not found
  E1231 07:51:12.805639      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:51:13.514: INFO: successfully validated that service multi-endpoint-test in namespace services-8801 exposes endpoints map[]
  STEP: Creating pod pod1 in namespace services-8801 @ 12/31/23 07:51:13.514
  E1231 07:51:13.806052      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:14.806877      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-8801 to expose endpoints map[pod1:[100]] @ 12/31/23 07:51:15.523
  Dec 31 07:51:15.528: INFO: successfully validated that service multi-endpoint-test in namespace services-8801 exposes endpoints map[pod1:[100]]
  STEP: Creating pod pod2 in namespace services-8801 @ 12/31/23 07:51:15.528
  E1231 07:51:15.806899      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:16.806947      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-8801 to expose endpoints map[pod1:[100] pod2:[101]] @ 12/31/23 07:51:17.536
  Dec 31 07:51:17.541: INFO: successfully validated that service multi-endpoint-test in namespace services-8801 exposes endpoints map[pod1:[100] pod2:[101]]
  STEP: Checking if the Service forwards traffic to pods @ 12/31/23 07:51:17.541
  Dec 31 07:51:17.541: INFO: Creating new exec pod
  E1231 07:51:17.807584      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:18.807656      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:19.808588      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:51:20.547: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-8801 exec execpodv9hlt -- /bin/sh -x -c echo hostName | nc -v -t -w 2 multi-endpoint-test 80'
  Dec 31 07:51:20.639: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 multi-endpoint-test 80\nConnection to multi-endpoint-test 80 port [tcp/http] succeeded!\n"
  Dec 31 07:51:20.639: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:51:20.639: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-8801 exec execpodv9hlt -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.112.92 80'
  Dec 31 07:51:20.718: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.112.92 80\nConnection to 10.68.112.92 80 port [tcp/http] succeeded!\n"
  Dec 31 07:51:20.718: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:51:20.718: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-8801 exec execpodv9hlt -- /bin/sh -x -c echo hostName | nc -v -t -w 2 multi-endpoint-test 81'
  Dec 31 07:51:20.802: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 multi-endpoint-test 81\nConnection to multi-endpoint-test 81 port [tcp/*] succeeded!\n"
  Dec 31 07:51:20.802: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:51:20.802: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-8801 exec execpodv9hlt -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.112.92 81'
  E1231 07:51:20.809103      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:51:20.902: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.112.92 81\nConnection to 10.68.112.92 81 port [tcp/*] succeeded!\n"
  Dec 31 07:51:20.902: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod1 in namespace services-8801 @ 12/31/23 07:51:20.902
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-8801 to expose endpoints map[pod2:[101]] @ 12/31/23 07:51:20.909
  Dec 31 07:51:20.916: INFO: successfully validated that service multi-endpoint-test in namespace services-8801 exposes endpoints map[pod2:[101]]
  STEP: Deleting pod pod2 in namespace services-8801 @ 12/31/23 07:51:20.916
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-8801 to expose endpoints map[] @ 12/31/23 07:51:20.92
  E1231 07:51:21.809604      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:51:21.933: INFO: successfully validated that service multi-endpoint-test in namespace services-8801 exposes endpoints map[]
  Dec 31 07:51:21.940: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-8801" for this suite. @ 12/31/23 07:51:21.943
• [9.450 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance] [sig-network, NodeConformance, Conformance]
test/e2e/common/network/networking.go:96
  STEP: Creating a kubernetes client @ 12/31/23 07:51:21.946
  Dec 31 07:51:21.946: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pod-network-test @ 12/31/23 07:51:21.947
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:51:21.954
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:51:21.955
  STEP: Performing setup for networking test in namespace pod-network-test-4486 @ 12/31/23 07:51:21.957
  STEP: creating a selector @ 12/31/23 07:51:21.957
  STEP: Creating the service pods in kubernetes @ 12/31/23 07:51:21.957
  Dec 31 07:51:21.957: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  E1231 07:51:22.809693      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:23.809834      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:24.811721      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:25.812504      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:26.813464      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:27.813614      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:28.814236      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:29.814325      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:30.815156      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:31.815261      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:32.815517      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:33.815537      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating test pods @ 12/31/23 07:51:33.999
  E1231 07:51:34.816558      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:35.817449      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:51:36.006: INFO: Setting MaxTries for pod polling to 39 for networking test based on endpoint count 3
  Dec 31 07:51:36.006: INFO: Breadth first check of 172.20.152.175 on host 10.255.0.202...
  Dec 31 07:51:36.007: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://172.20.169.170:9080/dial?request=hostname&protocol=udp&host=172.20.152.175&port=8081&tries=1'] Namespace:pod-network-test-4486 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:51:36.007: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:51:36.008: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:51:36.008: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/pod-network-test-4486/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F172.20.169.170%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D172.20.152.175%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Dec 31 07:51:36.054: INFO: Waiting for responses: map[]
  Dec 31 07:51:36.054: INFO: reached 172.20.152.175 after 0/1 tries
  Dec 31 07:51:36.054: INFO: Breadth first check of 172.20.69.97 on host 10.255.0.203...
  Dec 31 07:51:36.055: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://172.20.169.170:9080/dial?request=hostname&protocol=udp&host=172.20.69.97&port=8081&tries=1'] Namespace:pod-network-test-4486 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:51:36.055: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:51:36.055: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:51:36.055: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/pod-network-test-4486/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F172.20.169.170%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D172.20.69.97%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Dec 31 07:51:36.080: INFO: Waiting for responses: map[]
  Dec 31 07:51:36.080: INFO: reached 172.20.69.97 after 0/1 tries
  Dec 31 07:51:36.080: INFO: Breadth first check of 172.20.169.165 on host 10.255.0.204...
  Dec 31 07:51:36.081: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://172.20.169.170:9080/dial?request=hostname&protocol=udp&host=172.20.169.165&port=8081&tries=1'] Namespace:pod-network-test-4486 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Dec 31 07:51:36.081: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  Dec 31 07:51:36.081: INFO: ExecWithOptions: Clientset creation
  Dec 31 07:51:36.081: INFO: ExecWithOptions: execute(POST https://10.68.0.1:443/api/v1/namespaces/pod-network-test-4486/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F172.20.169.170%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D172.20.169.165%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Dec 31 07:51:36.105: INFO: Waiting for responses: map[]
  Dec 31 07:51:36.105: INFO: reached 172.20.169.165 after 0/1 tries
  Dec 31 07:51:36.105: INFO: Going to retry 0 out of 3 pods....
  Dec 31 07:51:36.105: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-4486" for this suite. @ 12/31/23 07:51:36.107
• [14.163 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should mount an API token into pods [Conformance] [sig-auth, Conformance]
test/e2e/auth/service_accounts.go:80
  STEP: Creating a kubernetes client @ 12/31/23 07:51:36.109
  Dec 31 07:51:36.109: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename svcaccounts @ 12/31/23 07:51:36.11
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:51:36.117
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:51:36.118
  E1231 07:51:36.818302      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:37.818564      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: reading a file in the container @ 12/31/23 07:51:38.128
  Dec 31 07:51:38.128: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-8634 pod-service-account-d461e433-ae8e-4e2e-a088-b254646b712b -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/token'
  STEP: reading a file in the container @ 12/31/23 07:51:38.217
  Dec 31 07:51:38.217: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-8634 pod-service-account-d461e433-ae8e-4e2e-a088-b254646b712b -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
  STEP: reading a file in the container @ 12/31/23 07:51:38.305
  Dec 31 07:51:38.305: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-8634 pod-service-account-d461e433-ae8e-4e2e-a088-b254646b712b -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/namespace'
  Dec 31 07:51:38.399: INFO: Got root ca configmap in namespace "svcaccounts-8634"
  Dec 31 07:51:38.400: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-8634" for this suite. @ 12/31/23 07:51:38.401
• [2.294 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/secrets_volume.go:57
  STEP: Creating a kubernetes client @ 12/31/23 07:51:38.404
  Dec 31 07:51:38.404: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename secrets @ 12/31/23 07:51:38.404
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:51:38.412
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:51:38.414
  STEP: Creating secret with name secret-test-0a9d98d4-d4c4-4bd1-aee6-3026d63163c0 @ 12/31/23 07:51:38.415
  STEP: Creating a pod to test consume secrets @ 12/31/23 07:51:38.417
  E1231 07:51:38.818710      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:39.819099      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:40.819781      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:41.819970      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:51:42.425
  Dec 31 07:51:42.427: INFO: Trying to get logs from node worker3 pod pod-secrets-cb70268c-ae65-4d59-b03f-f7d7f397854f container secret-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 07:51:42.435
  Dec 31 07:51:42.441: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-5297" for this suite. @ 12/31/23 07:51:42.442
• [4.040 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance] [sig-auth, Conformance]
test/e2e/auth/service_accounts.go:649
  STEP: Creating a kubernetes client @ 12/31/23 07:51:42.444
  Dec 31 07:51:42.444: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename svcaccounts @ 12/31/23 07:51:42.445
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:51:42.449
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:51:42.452
  STEP: creating a ServiceAccount @ 12/31/23 07:51:42.453
  STEP: watching for the ServiceAccount to be added @ 12/31/23 07:51:42.456
  STEP: patching the ServiceAccount @ 12/31/23 07:51:42.457
  STEP: finding ServiceAccount in list of all ServiceAccounts (by LabelSelector) @ 12/31/23 07:51:42.46
  STEP: deleting the ServiceAccount @ 12/31/23 07:51:42.461
  Dec 31 07:51:42.465: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-6601" for this suite. @ 12/31/23 07:51:42.467
• [0.025 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:214
  STEP: Creating a kubernetes client @ 12/31/23 07:51:42.47
  Dec 31 07:51:42.470: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-probe @ 12/31/23 07:51:42.47
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:51:42.476
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:51:42.478
  STEP: Creating pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117 @ 12/31/23 07:51:42.479
  E1231 07:51:42.820424      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:43.820547      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking the pod's current state and verifying that restartCount is present @ 12/31/23 07:51:44.486
  Dec 31 07:51:44.487: INFO: Initial restart count of pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 is 0
  Dec 31 07:51:44.488: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:51:44.820672      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:45.820803      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:51:46.489: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:51:46.821197      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:47.821788      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:51:48.492: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:51:48.822625      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:49.822709      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:51:50.494: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:51:50.823623      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:51.824015      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:51:52.495: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:51:52.824567      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:53.824711      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:51:54.498: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:51:54.825449      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:55.826169      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:51:56.500: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:51:56.826763      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:57.826824      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:51:58.501: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:51:58.827430      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:51:59.827519      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:00.503: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:00.827942      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:01.828325      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:02.505: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:02.828405      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:03.828488      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:04.507: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:04.829209      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:05.829279      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:06.509: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:06.830052      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:07.830179      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:08.511: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:08.830656      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:09.831396      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:10.513: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:10.832193      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:11.833212      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:12.515: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:12.833849      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:13.834474      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:14.517: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:14.835153      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:15.835223      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:16.520: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:16.835992      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:17.836082      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:18.522: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:18.836556      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:19.836675      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:20.525: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:20.837586      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:21.837928      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:22.527: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:22.838447      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:23.838541      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:24.528: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:24.838823      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:25.838746      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:26.530: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:26.839381      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:27.839491      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:28.532: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:28.839978      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:29.840559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:30.534: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:30.840636      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:31.840941      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:32.536: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:32.841526      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:33.841653      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:34.537: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:34.841965      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:35.842620      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:36.539: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:36.843413      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:37.843507      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:38.541: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:38.844319      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:39.844562      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:40.543: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:40.845112      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:41.845191      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:42.545: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:42.845595      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:43.845690      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:44.546: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:44.846314      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:45.846522      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:46.549: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:46.847549      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:47.848562      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:48.550: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:48.849176      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:49.849301      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:50.553: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:50.849780      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:51.850144      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:52.555: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:52.850642      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:53.850776      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:54.556: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:54.851222      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:55.851318      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:56.559: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:56.852111      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:57.852691      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:52:58.562: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:52:58.853382      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:52:59.854420      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:00.563: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:00.855051      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:01.855356      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:02.566: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:02.856118      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:03.856559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:04.567: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:04.856640      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:05.856692      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:06.570: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:06.857447      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:07.858083      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:08.572: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:08.858724      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:09.858926      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:10.574: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:10.859967      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:11.860043      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:12.576: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:12.860618      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:13.860702      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:14.577: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:14.861304      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:15.861393      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:16.579: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:16.862041      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:17.862166      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:18.582: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:18.862289      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:19.863340      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:20.583: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:20.864075      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:21.864316      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:22.585: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:22.864391      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:23.864467      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:24.587: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:24.864912      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:25.865037      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:26.590: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:26.865552      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:27.865635      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:28.591: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:28.865713      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:29.865800      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:30.593: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:30.866262      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:31.866335      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:32.595: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:32.866928      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:33.867013      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:34.598: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:34.867428      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:35.867503      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:36.600: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:36.868041      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:37.868803      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:38.602: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:38.869870      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:39.870200      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:40.604: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:40.871027      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:41.871334      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:42.606: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:42.871470      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:43.871496      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:44.607: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:44.872101      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:45.872905      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:46.610: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:46.873532      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:47.874138      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:48.612: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:48.874611      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:49.874758      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:50.613: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:50.875331      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:51.875502      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:52.615: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:52.876051      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:53.876131      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:54.617: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:54.877163      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:55.877294      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:56.619: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:56.878058      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:57.878181      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:53:58.622: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:53:58.878262      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:53:59.878396      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:00.623: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:00.879020      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:01.879328      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:02.625: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:02.880316      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:03.880802      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:04.627: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:04.881079      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:05.881199      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:06.629: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:06.881969      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:07.883030      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:08.631: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:08.883637      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:09.883720      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:10.632: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:10.883896      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:11.884209      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:12.634: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:12.884556      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:13.884680      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:14.637: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:14.885398      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:15.886417      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:16.638: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:16.887057      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:17.887802      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:18.640: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:18.888287      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:19.888376      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:20.642: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:20.888974      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:21.889052      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:22.644: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:22.889952      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:23.890081      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:24.646: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:24.890269      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:25.890320      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:26.648: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:26.890440      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:27.891499      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:28.649: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:28.891867      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:29.892561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:30.651: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:30.893005      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:31.893093      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:32.653: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:32.893181      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:33.893304      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:34.655: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:34.893745      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:35.893860      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:36.657: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:36.894561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:37.894651      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:38.658: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:38.895160      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:39.896044      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:40.661: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:40.896558      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:41.896848      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:42.663: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:42.897400      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:43.897527      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:44.664: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:44.898056      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:45.898173      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:46.666: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:46.898987      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:47.899117      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:48.668: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:48.899322      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:49.900047      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:50.670: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:50.900491      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:51.900546      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:52.671: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:52.900893      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:53.901101      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:54.673: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:54.901923      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:55.902121      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:56.676: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:56.902704      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:57.902791      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:54:58.679: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:54:58.903473      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:54:59.903504      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:00.680: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:00.903829      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:01.904138      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:02.682: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:02.904557      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:03.904689      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:04.684: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:04.904744      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:05.905681      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:06.687: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:06.906443      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:07.906558      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:08.688: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:08.907038      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:09.907154      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:10.691: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:10.907480      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:11.907504      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:12.693: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:12.908555      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:13.908672      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:14.695: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:14.909348      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:15.909433      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:16.697: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:16.909977      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:17.910061      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:18.699: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:18.910869      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:19.910994      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:20.702: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:20.911312      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:21.911378      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:22.703: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:22.912112      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:23.912566      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:24.705: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:24.912583      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:25.913194      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:26.707: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:26.914059      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:27.915017      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:28.710: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:28.915315      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:29.915458      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:30.711: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:30.916154      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:31.916433      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:32.714: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:32.916936      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:33.917074      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:34.716: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:34.917633      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:35.917756      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:36.718: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:36.918387      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:37.918474      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:38.719: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:38.919082      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:39.919297      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:40.721: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:40.919791      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:41.920125      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:42.724: INFO: Get pod test-webserver-4f36c2a3-e741-4f74-a896-b4c3ac31e203 in namespace container-probe-1117
  E1231 07:55:42.920202      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:43.920573      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: deleting the pod @ 12/31/23 07:55:44.724
  Dec 31 07:55:44.730: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-1117" for this suite. @ 12/31/23 07:55:44.732
• [242.264 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance] [sig-network, Conformance]
test/e2e/network/service.go:2199
  STEP: Creating a kubernetes client @ 12/31/23 07:55:44.735
  Dec 31 07:55:44.735: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename services @ 12/31/23 07:55:44.735
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:55:44.74
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:55:44.742
  STEP: creating service in namespace services-9601 @ 12/31/23 07:55:44.744
  STEP: creating service affinity-clusterip-transition in namespace services-9601 @ 12/31/23 07:55:44.744
  STEP: creating replication controller affinity-clusterip-transition in namespace services-9601 @ 12/31/23 07:55:44.749
  I1231 07:55:44.754186      23 runners.go:197] Created replication controller with name: affinity-clusterip-transition, namespace: services-9601, replica count: 3
  E1231 07:55:44.920853      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:45.921237      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:46.921762      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  I1231 07:55:47.804591      23 runners.go:197] affinity-clusterip-transition Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Dec 31 07:55:47.807: INFO: Creating new exec pod
  E1231 07:55:47.922714      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:48.923730      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:49.924079      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:50.812: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-9601 exec execpod-affinityxdn72 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-clusterip-transition 80'
  Dec 31 07:55:50.902: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-clusterip-transition 80\nConnection to affinity-clusterip-transition 80 port [tcp/http] succeeded!\n"
  Dec 31 07:55:50.902: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:55:50.902: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-9601 exec execpod-affinityxdn72 -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.68.164.156 80'
  E1231 07:55:50.924897      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:50.989: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.68.164.156 80\nConnection to 10.68.164.156 80 port [tcp/http] succeeded!\n"
  Dec 31 07:55:50.989: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Dec 31 07:55:50.992: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-9601 exec execpod-affinityxdn72 -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.68.164.156:80/ ; done'
  Dec 31 07:55:51.121: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n"
  Dec 31 07:55:51.121: INFO: stdout: "\naffinity-clusterip-transition-xhhvl\naffinity-clusterip-transition-j4g84\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-xhhvl\naffinity-clusterip-transition-j4g84\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-xhhvl\naffinity-clusterip-transition-j4g84\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-xhhvl\naffinity-clusterip-transition-j4g84\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-xhhvl\naffinity-clusterip-transition-j4g84\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-xhhvl"
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-xhhvl
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-j4g84
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-xhhvl
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-j4g84
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-xhhvl
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-j4g84
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-xhhvl
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-j4g84
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-xhhvl
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-j4g84
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.121: INFO: Received response from host: affinity-clusterip-transition-xhhvl
  Dec 31 07:55:51.125: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=services-9601 exec execpod-affinityxdn72 -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.68.164.156:80/ ; done'
  Dec 31 07:55:51.251: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.68.164.156:80/\n"
  Dec 31 07:55:51.251: INFO: stdout: "\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-zd8hz\naffinity-clusterip-transition-zd8hz"
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.251: INFO: Received response from host: affinity-clusterip-transition-zd8hz
  Dec 31 07:55:51.252: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-clusterip-transition in namespace services-9601, will wait for the garbage collector to delete the pods @ 12/31/23 07:55:51.258
  Dec 31 07:55:51.312: INFO: Deleting ReplicationController affinity-clusterip-transition took: 2.025296ms
  Dec 31 07:55:51.412: INFO: Terminating ReplicationController affinity-clusterip-transition pods took: 100.39461ms
  E1231 07:55:51.925794      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:52.925841      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:53.926847      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:55:54.219: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-9601" for this suite. @ 12/31/23 07:55:54.222
• [9.490 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/containers.go:61
  STEP: Creating a kubernetes client @ 12/31/23 07:55:54.225
  Dec 31 07:55:54.225: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename containers @ 12/31/23 07:55:54.225
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:55:54.236
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:55:54.237
  STEP: Creating a pod to test override arguments @ 12/31/23 07:55:54.241
  E1231 07:55:54.926937      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:55.927248      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:56.927505      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:57.928581      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:55:58.249
  Dec 31 07:55:58.250: INFO: Trying to get logs from node worker3 pod client-containers-e4997c03-3a19-4bd7-aa8d-2877d69c3f67 container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 07:55:58.264
  Dec 31 07:55:58.269: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-1150" for this suite. @ 12/31/23 07:55:58.271
• [4.048 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should update a ServiceAccount [Conformance] [sig-auth, Conformance]
test/e2e/auth/service_accounts.go:810
  STEP: Creating a kubernetes client @ 12/31/23 07:55:58.273
  Dec 31 07:55:58.273: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename svcaccounts @ 12/31/23 07:55:58.273
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:55:58.279
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:55:58.28
  STEP: Creating ServiceAccount "e2e-sa-vj66l"  @ 12/31/23 07:55:58.282
  Dec 31 07:55:58.283: INFO: AutomountServiceAccountToken: false
  STEP: Updating ServiceAccount "e2e-sa-vj66l"  @ 12/31/23 07:55:58.283
  Dec 31 07:55:58.286: INFO: AutomountServiceAccountToken: true
  Dec 31 07:55:58.286: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-4821" for this suite. @ 12/31/23 07:55:58.287
• [0.017 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should be updated [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/pods.go:345
  STEP: Creating a kubernetes client @ 12/31/23 07:55:58.29
  Dec 31 07:55:58.290: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pods @ 12/31/23 07:55:58.29
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:55:58.295
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:55:58.297
  STEP: creating the pod @ 12/31/23 07:55:58.3
  STEP: submitting the pod to kubernetes @ 12/31/23 07:55:58.3
  E1231 07:55:58.928917      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:55:59.928983      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: verifying the pod is in kubernetes @ 12/31/23 07:56:00.308
  STEP: updating the pod @ 12/31/23 07:56:00.309
  Dec 31 07:56:00.815: INFO: Successfully updated pod "pod-update-c2d6e50d-03b1-49a3-bd03-a07ddfd78212"
  STEP: verifying the updated pod is in kubernetes @ 12/31/23 07:56:00.818
  Dec 31 07:56:00.819: INFO: Pod update OK
  Dec 31 07:56:00.819: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-1628" for this suite. @ 12/31/23 07:56:00.82
• [2.533 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/runtimeclass.go:158
  STEP: Creating a kubernetes client @ 12/31/23 07:56:00.823
  Dec 31 07:56:00.823: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename runtimeclass @ 12/31/23 07:56:00.824
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:56:00.829
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:56:00.83
  STEP: Deleting RuntimeClass runtimeclass-6302-delete-me @ 12/31/23 07:56:00.833
  STEP: Waiting for the RuntimeClass to disappear @ 12/31/23 07:56:00.835
  Dec 31 07:56:00.838: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-6302" for this suite. @ 12/31/23 07:56:00.84
• [0.018 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching [Conformance] [sig-scheduling, Serial, Conformance]
test/e2e/scheduling/predicates.go:469
  STEP: Creating a kubernetes client @ 12/31/23 07:56:00.842
  Dec 31 07:56:00.842: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename sched-pred @ 12/31/23 07:56:00.843
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:56:00.848
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:56:00.849
  Dec 31 07:56:00.851: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Dec 31 07:56:00.853: INFO: Waiting for terminating namespaces to be deleted...
  Dec 31 07:56:00.854: INFO: 
  Logging pods the apiserver thinks is on node 10.255.0.202 before test
  Dec 31 07:56:00.856: INFO: calico-kube-controllers-5994f46b69-lmc5f from kube-system started at 2023-12-31 06:01:56 +0000 UTC (1 container statuses recorded)
  Dec 31 07:56:00.856: INFO: 	Container calico-kube-controllers ready: true, restart count 1
  Dec 31 07:56:00.856: INFO: calico-node-f7srb from kube-system started at 2023-12-31 06:01:56 +0000 UTC (1 container statuses recorded)
  Dec 31 07:56:00.856: INFO: 	Container calico-node ready: true, restart count 0
  Dec 31 07:56:00.856: INFO: coredns-6db9bd4cd7-g6pt6 from kube-system started at 2023-12-31 06:02:18 +0000 UTC (1 container statuses recorded)
  Dec 31 07:56:00.856: INFO: 	Container coredns ready: true, restart count 0
  Dec 31 07:56:00.856: INFO: dashboard-metrics-scraper-77b667b99d-lc87h from kube-system started at 2023-12-31 06:02:22 +0000 UTC (1 container statuses recorded)
  Dec 31 07:56:00.856: INFO: 	Container dashboard-metrics-scraper ready: true, restart count 0
  Dec 31 07:56:00.856: INFO: kubernetes-dashboard-74fb9f77fb-4vtvg from kube-system started at 2023-12-31 06:02:22 +0000 UTC (1 container statuses recorded)
  Dec 31 07:56:00.856: INFO: 	Container kubernetes-dashboard ready: true, restart count 0
  Dec 31 07:56:00.856: INFO: metrics-server-dfb478476-wcgkq from kube-system started at 2023-12-31 06:02:20 +0000 UTC (1 container statuses recorded)
  Dec 31 07:56:00.856: INFO: 	Container metrics-server ready: true, restart count 0
  Dec 31 07:56:00.856: INFO: node-local-dns-v47ss from kube-system started at 2023-12-31 06:02:19 +0000 UTC (1 container statuses recorded)
  Dec 31 07:56:00.856: INFO: 	Container node-cache ready: true, restart count 0
  Dec 31 07:56:00.856: INFO: sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-wsh69 from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 07:56:00.856: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 07:56:00.856: INFO: 	Container systemd-logs ready: true, restart count 0
  Dec 31 07:56:00.856: INFO: 
  Logging pods the apiserver thinks is on node worker2 before test
  Dec 31 07:56:00.859: INFO: calico-node-2jwlz from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 07:56:00.859: INFO: 	Container calico-node ready: true, restart count 0
  Dec 31 07:56:00.859: INFO: node-local-dns-wkbph from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 07:56:00.859: INFO: 	Container node-cache ready: true, restart count 0
  Dec 31 07:56:00.859: INFO: sonobuoy-e2e-job-3c8f57630e284722 from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 07:56:00.859: INFO: 	Container e2e ready: true, restart count 0
  Dec 31 07:56:00.859: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 07:56:00.859: INFO: sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-jrh8m from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 07:56:00.859: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 07:56:00.859: INFO: 	Container systemd-logs ready: true, restart count 0
  Dec 31 07:56:00.859: INFO: 
  Logging pods the apiserver thinks is on node worker3 before test
  Dec 31 07:56:00.861: INFO: calico-node-z7ckp from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 07:56:00.861: INFO: 	Container calico-node ready: true, restart count 0
  Dec 31 07:56:00.861: INFO: node-local-dns-ctddb from kube-system started at 2023-12-31 06:06:31 +0000 UTC (1 container statuses recorded)
  Dec 31 07:56:00.861: INFO: 	Container node-cache ready: true, restart count 0
  Dec 31 07:56:00.861: INFO: pod-update-c2d6e50d-03b1-49a3-bd03-a07ddfd78212 from pods-1628 started at 2023-12-31 07:55:58 +0000 UTC (1 container statuses recorded)
  Dec 31 07:56:00.861: INFO: 	Container pause ready: true, restart count 0
  Dec 31 07:56:00.861: INFO: sonobuoy from sonobuoy started at 2023-12-31 06:07:56 +0000 UTC (1 container statuses recorded)
  Dec 31 07:56:00.861: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Dec 31 07:56:00.861: INFO: sonobuoy-systemd-logs-daemon-set-8d39dd2c0e224439-ln67l from sonobuoy started at 2023-12-31 06:08:04 +0000 UTC (2 container statuses recorded)
  Dec 31 07:56:00.861: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Dec 31 07:56:00.861: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 12/31/23 07:56:00.861
  E1231 07:56:00.929002      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:01.929464      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Explicitly delete pod here to free the resource it takes. @ 12/31/23 07:56:02.868
  STEP: Trying to apply a random label on the found node. @ 12/31/23 07:56:02.872
  STEP: verifying the node has the label kubernetes.io/e2e-3a24abf1-5fd3-4a56-b507-2ae93e1af17f 42 @ 12/31/23 07:56:02.876
  STEP: Trying to relaunch the pod, now with labels. @ 12/31/23 07:56:02.878
  E1231 07:56:02.929953      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:03.930098      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: removing the label kubernetes.io/e2e-3a24abf1-5fd3-4a56-b507-2ae93e1af17f off the node worker3 @ 12/31/23 07:56:04.885
  STEP: verifying the node doesn't have the label kubernetes.io/e2e-3a24abf1-5fd3-4a56-b507-2ae93e1af17f @ 12/31/23 07:56:04.89
  Dec 31 07:56:04.892: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-8972" for this suite. @ 12/31/23 07:56:04.895
• [4.055 seconds]
------------------------------
SS
------------------------------
[sig-apps] Job should delete a job [Conformance] [sig-apps, Conformance]
test/e2e/apps/job.go:627
  STEP: Creating a kubernetes client @ 12/31/23 07:56:04.897
  Dec 31 07:56:04.897: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename job @ 12/31/23 07:56:04.897
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:56:04.904
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:56:04.905
  STEP: Creating a job @ 12/31/23 07:56:04.907
  STEP: Ensuring active pods == parallelism @ 12/31/23 07:56:04.909
  E1231 07:56:04.930400      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:05.930553      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete a job @ 12/31/23 07:56:06.911
  STEP: deleting Job.batch foo in namespace job-4902, will wait for the garbage collector to delete the pods @ 12/31/23 07:56:06.911
  E1231 07:56:06.930808      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:56:06.964: INFO: Deleting Job.batch foo took: 2.008595ms
  Dec 31 07:56:07.065: INFO: Terminating Job.batch foo pods took: 100.424751ms
  STEP: Ensuring job was deleted @ 12/31/23 07:56:07.765
  Dec 31 07:56:07.767: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-4902" for this suite. @ 12/31/23 07:56:07.768
• [2.874 seconds]
------------------------------
S
------------------------------
[sig-cli] Kubectl client Update Demo should create and stop a replication controller [Conformance] [sig-cli, Conformance]
test/e2e/kubectl/kubectl.go:344
  STEP: Creating a kubernetes client @ 12/31/23 07:56:07.771
  Dec 31 07:56:07.771: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename kubectl @ 12/31/23 07:56:07.772
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:56:07.78
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:56:07.782
  STEP: creating a replication controller @ 12/31/23 07:56:07.784
  Dec 31 07:56:07.784: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-1401 create -f -'
  Dec 31 07:56:07.861: INFO: stderr: ""
  Dec 31 07:56:07.861: INFO: stdout: "replicationcontroller/update-demo-nautilus created\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 12/31/23 07:56:07.861
  Dec 31 07:56:07.861: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-1401 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Dec 31 07:56:07.904: INFO: stderr: ""
  Dec 31 07:56:07.904: INFO: stdout: "update-demo-nautilus-msbhl update-demo-nautilus-sxcdc "
  Dec 31 07:56:07.904: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-1401 get pods update-demo-nautilus-msbhl -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  E1231 07:56:07.931171      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:56:07.943: INFO: stderr: ""
  Dec 31 07:56:07.943: INFO: stdout: ""
  Dec 31 07:56:07.943: INFO: update-demo-nautilus-msbhl is created but not running
  E1231 07:56:08.931810      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:09.931896      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:10.932577      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:11.932872      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:12.933761      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:56:12.943: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-1401 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Dec 31 07:56:12.984: INFO: stderr: ""
  Dec 31 07:56:12.984: INFO: stdout: "update-demo-nautilus-msbhl update-demo-nautilus-sxcdc "
  Dec 31 07:56:12.984: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-1401 get pods update-demo-nautilus-msbhl -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Dec 31 07:56:13.022: INFO: stderr: ""
  Dec 31 07:56:13.022: INFO: stdout: "true"
  Dec 31 07:56:13.023: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-1401 get pods update-demo-nautilus-msbhl -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Dec 31 07:56:13.060: INFO: stderr: ""
  Dec 31 07:56:13.060: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Dec 31 07:56:13.060: INFO: validating pod update-demo-nautilus-msbhl
  Dec 31 07:56:13.065: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Dec 31 07:56:13.065: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Dec 31 07:56:13.065: INFO: update-demo-nautilus-msbhl is verified up and running
  Dec 31 07:56:13.065: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-1401 get pods update-demo-nautilus-sxcdc -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Dec 31 07:56:13.105: INFO: stderr: ""
  Dec 31 07:56:13.105: INFO: stdout: "true"
  Dec 31 07:56:13.105: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-1401 get pods update-demo-nautilus-sxcdc -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Dec 31 07:56:13.142: INFO: stderr: ""
  Dec 31 07:56:13.142: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Dec 31 07:56:13.142: INFO: validating pod update-demo-nautilus-sxcdc
  Dec 31 07:56:13.144: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Dec 31 07:56:13.144: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Dec 31 07:56:13.144: INFO: update-demo-nautilus-sxcdc is verified up and running
  STEP: using delete to clean up resources @ 12/31/23 07:56:13.144
  Dec 31 07:56:13.144: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-1401 delete --grace-period=0 --force -f -'
  Dec 31 07:56:13.183: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Dec 31 07:56:13.183: INFO: stdout: "replicationcontroller \"update-demo-nautilus\" force deleted\n"
  Dec 31 07:56:13.183: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-1401 get rc,svc -l name=update-demo --no-headers'
  Dec 31 07:56:13.241: INFO: stderr: "No resources found in kubectl-1401 namespace.\n"
  Dec 31 07:56:13.241: INFO: stdout: ""
  Dec 31 07:56:13.241: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1674852033 --namespace=kubectl-1401 get pods -l name=update-demo -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Dec 31 07:56:13.299: INFO: stderr: ""
  Dec 31 07:56:13.299: INFO: stdout: ""
  Dec 31 07:56:13.299: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-1401" for this suite. @ 12/31/23 07:56:13.3
• [5.536 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_downwardapi.go:195
  STEP: Creating a kubernetes client @ 12/31/23 07:56:13.308
  Dec 31 07:56:13.308: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 07:56:13.308
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:56:13.314
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:56:13.316
  STEP: Creating a pod to test downward API volume plugin @ 12/31/23 07:56:13.317
  E1231 07:56:13.934446      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:14.934506      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:15.935465      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:16.935505      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:56:17.33
  Dec 31 07:56:17.331: INFO: Trying to get logs from node worker3 pod downwardapi-volume-89be35ac-bbb4-4d8f-b773-63f329390943 container client-container: <nil>
  STEP: delete the pod @ 12/31/23 07:56:17.334
  Dec 31 07:56:17.340: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7666" for this suite. @ 12/31/23 07:56:17.341
• [4.036 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:221
  STEP: Creating a kubernetes client @ 12/31/23 07:56:17.344
  Dec 31 07:56:17.344: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 07:56:17.344
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:56:17.349
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:56:17.35
  STEP: Setting up server cert @ 12/31/23 07:56:17.361
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 07:56:17.602
  STEP: Deploying the webhook pod @ 12/31/23 07:56:17.605
  STEP: Wait for the deployment to be ready @ 12/31/23 07:56:17.61
  Dec 31 07:56:17.612: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  E1231 07:56:17.936573      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:18.937080      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 12/31/23 07:56:19.616
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 07:56:19.622
  E1231 07:56:19.937792      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:56:20.623: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Dec 31 07:56:20.626: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  E1231 07:56:20.938566      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Registering the custom resource webhook via the AdmissionRegistration API @ 12/31/23 07:56:21.138
  STEP: Creating a custom resource that should be denied by the webhook @ 12/31/23 07:56:21.147
  E1231 07:56:21.939569      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:22.940570      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a custom resource whose deletion would be denied by the webhook @ 12/31/23 07:56:23.161
  STEP: Updating the custom resource with disallowed data should be denied @ 12/31/23 07:56:23.164
  STEP: Deleting the custom resource should be denied @ 12/31/23 07:56:23.167
  STEP: Remove the offending key and value from the custom resource data @ 12/31/23 07:56:23.169
  STEP: Deleting the updated custom resource should be successful @ 12/31/23 07:56:23.173
  Dec 31 07:56:23.705: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-7085" for this suite. @ 12/31/23 07:56:23.706
  STEP: Destroying namespace "webhook-markers-4684" for this suite. @ 12/31/23 07:56:23.71
• [6.368 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance] [sig-storage, NodeConformance, Conformance]
test/e2e/common/storage/projected_secret.go:88
  STEP: Creating a kubernetes client @ 12/31/23 07:56:23.712
  Dec 31 07:56:23.712: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename projected @ 12/31/23 07:56:23.713
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:56:23.718
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:56:23.719
  STEP: Creating projection with secret that has name projected-secret-test-map-4fbbed27-da90-4adb-87e8-d9c497376b08 @ 12/31/23 07:56:23.721
  STEP: Creating a pod to test consume secrets @ 12/31/23 07:56:23.723
  E1231 07:56:23.940663      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:24.940847      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:25.941422      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:26.942326      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 07:56:27.733
  Dec 31 07:56:27.734: INFO: Trying to get logs from node worker3 pod pod-projected-secrets-ac07853a-c759-4240-8598-ec31f4fdb996 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 12/31/23 07:56:27.736
  Dec 31 07:56:27.742: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7356" for this suite. @ 12/31/23 07:56:27.743
• [4.034 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] server version should find the server version [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/server_version.go:41
  STEP: Creating a kubernetes client @ 12/31/23 07:56:27.746
  Dec 31 07:56:27.746: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename server-version @ 12/31/23 07:56:27.747
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:56:27.753
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:56:27.755
  STEP: Request ServerVersion @ 12/31/23 07:56:27.756
  STEP: Confirm major version @ 12/31/23 07:56:27.756
  Dec 31 07:56:27.756: INFO: Major version: 1
  STEP: Confirm minor version @ 12/31/23 07:56:27.756
  Dec 31 07:56:27.756: INFO: cleanMinorVersion: 29
  Dec 31 07:56:27.756: INFO: Minor version: 29
  Dec 31 07:56:27.756: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "server-version-3029" for this suite. @ 12/31/23 07:56:27.758
• [0.014 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance] [sig-apps, Conformance]
test/e2e/apps/replica_set.go:144
  STEP: Creating a kubernetes client @ 12/31/23 07:56:27.765
  Dec 31 07:56:27.765: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename replicaset @ 12/31/23 07:56:27.766
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:56:27.772
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:56:27.774
  STEP: Creating replica set "test-rs" that asks for more than the allowed pod quota @ 12/31/23 07:56:27.775
  Dec 31 07:56:27.787: INFO: Pod name sample-pod: Found 0 pods out of 1
  E1231 07:56:27.942799      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:28.942953      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:29.943597      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:30.943689      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:31.944001      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:56:32.789: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 12/31/23 07:56:32.789
  STEP: getting scale subresource @ 12/31/23 07:56:32.789
  STEP: updating a scale subresource @ 12/31/23 07:56:32.791
  STEP: verifying the replicaset Spec.Replicas was modified @ 12/31/23 07:56:32.793
  STEP: Patch a scale subresource @ 12/31/23 07:56:32.795
  Dec 31 07:56:32.806: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-613" for this suite. @ 12/31/23 07:56:32.812
• [5.054 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/pods.go:227
  STEP: Creating a kubernetes client @ 12/31/23 07:56:32.819
  Dec 31 07:56:32.819: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename pods @ 12/31/23 07:56:32.82
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:56:32.832
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:56:32.838
  STEP: creating the pod @ 12/31/23 07:56:32.839
  STEP: setting up watch @ 12/31/23 07:56:32.839
  STEP: submitting the pod to kubernetes @ 12/31/23 07:56:32.941
  E1231 07:56:32.944240      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: verifying the pod is in kubernetes @ 12/31/23 07:56:32.945
  STEP: verifying pod creation was observed @ 12/31/23 07:56:32.946
  E1231 07:56:33.944756      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:34.945064      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: deleting the pod gracefully @ 12/31/23 07:56:34.95
  STEP: verifying pod deletion was observed @ 12/31/23 07:56:34.953
  E1231 07:56:35.945621      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:56:36.252: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-2420" for this suite. @ 12/31/23 07:56:36.253
• [3.436 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/init_container.go:178
  STEP: Creating a kubernetes client @ 12/31/23 07:56:36.255
  Dec 31 07:56:36.255: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename init-container @ 12/31/23 07:56:36.256
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:56:36.262
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:56:36.263
  STEP: creating the pod @ 12/31/23 07:56:36.265
  Dec 31 07:56:36.265: INFO: PodSpec: initContainers in spec.initContainers
  E1231 07:56:36.946517      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:37.947179      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:38.948053      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:39.948382      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:56:40.456: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-9726" for this suite. @ 12/31/23 07:56:40.458
• [4.205 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:646
  STEP: Creating a kubernetes client @ 12/31/23 07:56:40.46
  Dec 31 07:56:40.460: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 07:56:40.46
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:56:40.466
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:56:40.467
  STEP: Setting up server cert @ 12/31/23 07:56:40.476
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 07:56:40.739
  STEP: Deploying the webhook pod @ 12/31/23 07:56:40.741
  STEP: Wait for the deployment to be ready @ 12/31/23 07:56:40.746
  Dec 31 07:56:40.750: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  E1231 07:56:40.948458      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:41.948774      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 12/31/23 07:56:42.754
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 07:56:42.758
  E1231 07:56:42.949749      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:56:43.758: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Listing all of the created validation webhooks @ 12/31/23 07:56:43.787
  STEP: Creating a configMap that should be mutated @ 12/31/23 07:56:43.793
  STEP: Deleting the collection of validation webhooks @ 12/31/23 07:56:43.806
  STEP: Creating a configMap that should not be mutated @ 12/31/23 07:56:43.82
  Dec 31 07:56:43.846: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-6022" for this suite. @ 12/31/23 07:56:43.848
  STEP: Destroying namespace "webhook-markers-5490" for this suite. @ 12/31/23 07:56:43.852
• [3.395 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/webhook.go:285
  STEP: Creating a kubernetes client @ 12/31/23 07:56:43.855
  Dec 31 07:56:43.855: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename webhook @ 12/31/23 07:56:43.856
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:56:43.861
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:56:43.863
  STEP: Setting up server cert @ 12/31/23 07:56:43.874
  E1231 07:56:43.950384      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 12/31/23 07:56:44.088
  STEP: Deploying the webhook pod @ 12/31/23 07:56:44.09
  STEP: Wait for the deployment to be ready @ 12/31/23 07:56:44.095
  Dec 31 07:56:44.099: INFO: deployment "sample-webhook-deployment" doesn't have the required revision set
  E1231 07:56:44.951422      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:45.951510      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 12/31/23 07:56:46.105
  STEP: Verifying the service has paired with the endpoint @ 12/31/23 07:56:46.109
  E1231 07:56:46.952295      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:56:47.109: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Dec 31 07:56:47.112: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-9184-crds.webhook.example.com via the AdmissionRegistration API @ 12/31/23 07:56:47.622
  STEP: Creating a custom resource that should be mutated by the webhook @ 12/31/23 07:56:47.63
  E1231 07:56:47.953260      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:48.953465      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:49.954443      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:56:50.174: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-4621" for this suite. @ 12/31/23 07:56:50.176
  STEP: Destroying namespace "webhook-markers-2359" for this suite. @ 12/31/23 07:56:50.179
• [6.326 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/container_probe.go:183
  STEP: Creating a kubernetes client @ 12/31/23 07:56:50.181
  Dec 31 07:56:50.181: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename container-probe @ 12/31/23 07:56:50.182
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 07:56:50.187
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 07:56:50.189
  STEP: Creating pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673 @ 12/31/23 07:56:50.19
  E1231 07:56:50.954519      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:51.955487      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking the pod's current state and verifying that restartCount is present @ 12/31/23 07:56:52.197
  Dec 31 07:56:52.198: INFO: Initial restart count of pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 is 0
  Dec 31 07:56:52.199: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:56:52.956172      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:53.956241      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:56:54.201: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:56:54.956335      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:55.956565      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:56:56.203: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:56:56.956830      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:57.957582      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:56:58.205: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:56:58.958029      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:56:59.958172      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:00.208: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:00.959153      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:01.959419      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:02.210: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:02.960261      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:03.960658      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:04.212: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:04.960963      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:05.961669      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:06.214: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:06.962442      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:07.962512      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:08.216: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:08.963291      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:09.963359      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:10.218: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:10.963512      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:11.964566      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:12.220: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:12.965127      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:13.965213      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:14.222: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:14.965270      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:15.965932      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:16.223: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:16.966650      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:17.966788      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:18.225: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:18.967533      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:19.968568      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:20.227: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:20.968659      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:21.969014      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:22.230: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:22.969914      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:23.970008      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:24.231: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:24.970074      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:25.970232      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:26.234: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:26.971017      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:27.971381      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:28.236: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:28.971998      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:29.972056      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:30.238: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:30.972563      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:31.973540      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:32.240: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:32.974361      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:33.974840      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:34.242: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:34.975522      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:35.975549      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:36.245: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:36.976378      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:37.976451      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:38.247: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:38.977320      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:39.977817      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:40.249: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:40.978557      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:41.978807      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:42.251: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:42.979561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:43.980586      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:44.253: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:44.981159      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:45.981316      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:46.255: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:46.981967      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:47.982044      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:48.256: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:48.983100      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:49.983235      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:50.259: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:50.983960      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:51.984291      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:52.262: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:52.984522      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:53.984657      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:54.264: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:54.984934      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:55.986006      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:56.266: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:56.986757      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:57.986908      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:57:58.268: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:57:58.987531      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:57:59.987604      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:00.270: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:00.988400      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:01.988604      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:02.272: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:02.988874      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:03.988994      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:04.275: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:04.989933      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:05.990067      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:06.276: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:06.990819      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:07.990957      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:08.278: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:08.991059      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:09.991189      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:10.281: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:10.991575      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:11.992530      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:12.283: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:12.992632      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:13.992758      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:14.285: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:14.992960      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:15.993227      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:16.288: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:16.993990      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:17.994073      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:18.289: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:18.994593      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:19.994731      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:20.291: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:20.995592      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:21.996555      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:22.294: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:22.997187      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:23.997309      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:24.296: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:24.997513      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:25.997500      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:26.298: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:26.998356      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:27.998433      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:28.300: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:28.998526      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:29.998651      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:30.302: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:30.999503      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:32.000555      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:32.304: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:33.000973      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:34.001476      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:34.306: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:35.001559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:36.001687      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:36.308: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:37.002247      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:38.002370      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:38.311: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:39.003291      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:40.003443      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:40.313: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:41.003502      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:42.004559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:42.315: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:43.005488      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:44.006299      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:44.317: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:45.007304      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:46.007714      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:46.319: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:47.008412      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:48.008531      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:48.321: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:49.009377      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:50.009516      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:50.323: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:51.009601      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:52.009857      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:52.325: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:53.010048      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:54.010163      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:54.328: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:55.010929      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:56.011720      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:56.330: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:57.012523      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:58:58.013064      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:58:58.333: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:58:59.013545      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:00.013714      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:00.334: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:01.013821      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:02.014130      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:02.337: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:03.014750      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:04.014876      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:04.338: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:05.015493      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:06.016556      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:06.340: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:07.017385      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:08.017517      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:08.342: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:09.017686      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:10.017836      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:10.344: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:11.018629      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:12.019648      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:12.346: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:13.020509      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:14.020629      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:14.348: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:15.021138      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:16.022189      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:16.350: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:17.022957      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:18.023091      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:18.351: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:19.023504      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:20.024558      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:20.354: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:21.025437      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:22.026306      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:22.357: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:23.026769      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:24.026889      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:24.359: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:25.027721      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:26.027830      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:26.362: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:27.028549      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:28.029412      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:28.364: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:29.029491      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:30.029605      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:30.366: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:31.030383      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:32.030531      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:32.368: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:33.031590      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:34.032560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:34.370: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:35.032820      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:36.032909      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:36.371: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:37.033559      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:38.034565      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:38.373: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:39.035002      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:40.035883      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:40.375: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:41.035967      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:42.036269      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:42.378: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:43.037297      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:44.037428      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:44.380: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:45.037459      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:46.037499      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:46.382: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:47.038408      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:48.038495      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:48.384: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:49.038953      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:50.039736      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:50.386: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:51.040516      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:52.040606      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:52.389: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:53.041227      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:54.041354      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:54.391: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:55.042168      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:56.042295      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:56.393: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:57.042924      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 07:59:58.043004      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 07:59:58.394: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 07:59:59.043064      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:00.043345      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:00.397: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:01.044170      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:02.044481      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:02.399: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:03.044564      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:04.044656      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:04.401: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:05.045623      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:06.045739      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:06.404: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:07.045828      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:08.045947      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:08.405: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:09.046153      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:10.047166      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:10.407: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:11.047495      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:12.048558      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:12.409: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:13.049357      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:14.049481      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:14.411: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:15.050521      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:16.050615      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:16.414: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:17.050694      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:18.050810      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:18.415: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:19.051274      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:20.051860      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:20.417: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:21.051908      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:22.052555      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:22.419: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:23.052746      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:24.052837      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:24.421: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:25.053139      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:26.053144      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:26.424: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:27.053194      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:28.053468      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:28.425: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:29.053548      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:30.053691      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:30.427: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:31.054319      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:32.055384      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:32.429: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:33.055496      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:34.056561      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:34.431: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:35.056691      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:36.056810      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:36.433: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:37.057701      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:38.057826      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:38.435: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:39.057914      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:40.058437      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:40.437: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:41.058705      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:42.059003      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:42.438: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:43.059085      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:44.059213      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:44.441: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:45.059492      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:46.060560      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:46.443: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:47.061453      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:48.061542      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:48.446: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:49.061572      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:50.061697      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:50.447: INFO: Get pod liveness-9a70c1b1-102a-4aaf-81cb-79088c439521 in namespace container-probe-8673
  E1231 08:00:51.062519      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:52.062661      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: deleting the pod @ 12/31/23 08:00:52.448
  Dec 31 08:00:52.454: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-8673" for this suite. @ 12/31/23 08:00:52.455
• [242.277 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance] [sig-api-machinery, Conformance]
test/e2e/apimachinery/resource_quota.go:78
  STEP: Creating a kubernetes client @ 12/31/23 08:00:52.458
  Dec 31 08:00:52.458: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename resourcequota @ 12/31/23 08:00:52.459
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 08:00:52.465
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 08:00:52.467
  STEP: Counting existing ResourceQuota @ 12/31/23 08:00:52.468
  E1231 08:00:53.062745      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:54.063484      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:55.064315      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:56.065239      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:57.066275      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota @ 12/31/23 08:00:57.469
  STEP: Ensuring resource quota status is calculated @ 12/31/23 08:00:57.472
  E1231 08:00:58.067095      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:00:59.067300      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  Dec 31 08:00:59.474: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-4218" for this suite. @ 12/31/23 08:00:59.476
• [7.020 seconds]
------------------------------
SS
------------------------------
[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance] [sig-node, NodeConformance, Conformance]
test/e2e/common/node/containers.go:75
  STEP: Creating a kubernetes client @ 12/31/23 08:00:59.479
  Dec 31 08:00:59.479: INFO: >>> kubeConfig: /tmp/kubeconfig-1674852033
  STEP: Building a namespace api object, basename containers @ 12/31/23 08:00:59.479
  STEP: Waiting for a default service account to be provisioned in namespace @ 12/31/23 08:00:59.486
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 12/31/23 08:00:59.488
  STEP: Creating a pod to test override command @ 12/31/23 08:00:59.489
  E1231 08:01:00.067370      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:01:01.067512      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:01:02.068527      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  E1231 08:01:03.068681      23 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 12/31/23 08:01:03.497
  Dec 31 08:01:03.498: INFO: Trying to get logs from node worker3 pod client-containers-fe918044-928b-40b1-9c97-039a0cfad93e container agnhost-container: <nil>
  STEP: delete the pod @ 12/31/23 08:01:03.514
  Dec 31 08:01:03.520: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-9135" for this suite. @ 12/31/23 08:01:03.521
• [4.045 seconds]
------------------------------
SS
------------------------------
[SynchronizedAfterSuite] 
test/e2e/e2e.go:88
  Dec 31 08:01:03.524: INFO: Running AfterSuite actions on node 1
  Dec 31 08:01:03.524: INFO: Skipping dumping logs from cluster
[SynchronizedAfterSuite] PASSED [0.000 seconds]
------------------------------
[ReportAfterSuite] Kubernetes e2e suite report
test/e2e/e2e_test.go:161
[ReportAfterSuite] PASSED [0.000 seconds]
------------------------------
[ReportAfterSuite] Kubernetes e2e JUnit report
test/e2e/framework/test_context.go:621
[ReportAfterSuite] PASSED [0.034 seconds]
------------------------------

Ran 388 of 7407 Specs in 6751.814 seconds
SUCCESS! -- 388 Passed | 0 Failed | 0 Pending | 7019 Skipped
PASS

Ginkgo ran 1 suite in 1h52m32.455693914s
Test Suite Passed
